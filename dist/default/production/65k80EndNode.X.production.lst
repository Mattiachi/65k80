

Microchip Technology PIC18 PRO Macro Assembler V1.38 build -256452561 
                                                                                               Wed Mar 22 09:51:56 2023

Microchip Technology Omniscient Code Generator v1.38 (PRO mode) build 201607010351
     1                           	processor	18LF65K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1
   168                           	psect	text145,global,reloc=2,class=CODE,delta=1
   169                           	psect	text146,global,reloc=2,class=CODE,delta=1
   170                           	psect	text147,global,reloc=2,class=CODE,delta=1
   171                           	psect	text148,global,reloc=2,class=CODE,delta=1
   172                           	psect	text149,global,reloc=2,class=CODE,delta=1
   173                           	psect	text150,global,reloc=2,class=CODE,delta=1
   174                           	psect	text151,global,reloc=2,class=CODE,delta=1
   175                           	psect	text152,global,reloc=2,class=CODE,delta=1
   176                           	psect	text153,global,reloc=2,class=CODE,delta=1
   177                           	psect	text154,global,reloc=2,class=CODE,delta=1
   178                           	psect	text155,global,reloc=2,class=CODE,delta=1
   179                           	psect	text156,global,reloc=2,class=CODE,delta=1
   180                           	psect	text157,global,reloc=2,class=CODE,delta=1
   181                           	psect	text158,global,reloc=2,class=CODE,delta=1
   182                           	psect	text159,global,reloc=2,class=CODE,delta=1
   183                           	psect	text160,global,reloc=2,class=CODE,delta=1
   184                           	psect	text161,global,reloc=2,class=CODE,delta=1
   185                           	psect	text162,global,reloc=2,class=CODE,delta=1
   186                           	psect	text163,global,reloc=2,class=CODE,delta=1
   187                           	psect	text164,global,reloc=2,class=CODE,delta=1
   188                           	psect	text165,global,reloc=2,class=CODE,delta=1
   189                           	psect	text166,global,reloc=2,class=CODE,delta=1
   190                           	psect	text167,global,reloc=2,class=CODE,delta=1
   191                           	psect	text168,global,reloc=2,class=CODE,delta=1
   192                           	psect	text169,global,reloc=2,class=CODE,delta=1
   193                           	psect	text170,global,reloc=2,class=CODE,delta=1
   194                           	psect	text171,global,reloc=2,class=CODE,delta=1
   195                           	psect	text172,global,reloc=2,class=CODE,delta=1
   196                           	psect	text173,global,reloc=2,class=CODE,delta=1
   197                           	psect	text174,global,reloc=2,class=CODE,delta=1
   198                           	psect	text175,global,reloc=2,class=CODE,delta=1
   199                           	psect	text176,global,reloc=2,class=CODE,delta=1
   200                           	psect	text177,global,reloc=2,class=CODE,delta=1
   201                           	psect	text178,global,reloc=2,class=CODE,delta=1
   202                           	psect	text179,global,reloc=2,class=CODE,delta=1
   203                           	psect	text180,global,reloc=2,class=CODE,delta=1
   204                           	psect	text181,global,reloc=2,class=CODE,delta=1
   205                           	psect	text182,global,reloc=2,class=CODE,delta=1
   206                           	psect	text183,global,reloc=2,class=CODE,delta=1
   207                           	psect	text184,global,reloc=2,class=CODE,delta=1
   208                           	psect	text185,global,reloc=2,class=CODE,delta=1
   209                           	psect	text186,global,reloc=2,class=CODE,delta=1
   210                           	psect	text187,global,reloc=2,class=CODE,delta=1
   211                           	psect	text188,global,reloc=2,class=CODE,delta=1
   212                           	psect	text189,global,reloc=2,class=CODE,delta=1
   213                           	psect	text190,global,reloc=2,class=CODE,delta=1
   214                           	psect	text191,global,reloc=2,class=CODE,delta=1
   215                           	psect	text192,global,reloc=2,class=CODE,delta=1
   216                           	psect	text193,global,reloc=2,class=CODE,delta=1
   217                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   218                           	psect	text195,global,reloc=2,class=CODE,delta=1
   219                           	psect	text196,global,reloc=2,class=CODE,delta=1
   220                           	psect	text197,global,reloc=2,class=CODE,delta=1
   221                           	psect	text198,global,reloc=2,class=CODE,delta=1
   222                           	psect	text199,global,reloc=2,class=CODE,delta=1
   223                           	psect	text200,global,reloc=2,class=CODE,delta=1
   224                           	psect	text201,global,reloc=2,class=CODE,delta=1
   225                           	psect	text202,global,reloc=2,class=CODE,delta=1
   226                           	psect	text203,global,reloc=2,class=CODE,delta=1
   227                           	psect	text204,global,reloc=2,class=CODE,delta=1
   228                           	psect	text205,global,reloc=2,class=CODE,delta=1
   229                           	psect	text206,global,reloc=2,class=CODE,delta=1
   230                           	psect	text207,global,reloc=2,class=CODE,delta=1
   231                           	psect	text208,global,reloc=2,class=CODE,delta=1
   232                           	psect	text209,global,reloc=2,class=CODE,delta=1
   233                           	psect	text210,global,reloc=2,class=CODE,delta=1
   234                           	psect	text211,global,reloc=2,class=CODE,delta=1
   235                           	psect	text212,global,reloc=2,class=CODE,delta=1
   236                           	psect	text213,global,reloc=2,class=CODE,delta=1
   237                           	psect	text214,global,reloc=2,class=CODE,delta=1
   238                           	psect	text215,global,reloc=2,class=CODE,delta=1
   239                           	psect	text216,global,reloc=2,class=CODE,delta=1
   240                           	psect	text217,global,reloc=2,class=CODE,delta=1
   241                           	psect	text218,global,reloc=2,class=CODE,delta=1
   242                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   243                           	psect	text219,global,reloc=2,class=CODE,delta=1
   244                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   245                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   246  0000                     
   247 ;; Function _INT0_DefaultInterruptHandler is unused but had its address taken
   248  0000                     
   249 ;; Function _DIO5_ISR_Lora is unused but had its address taken
   250  0000                     
   251 ;;UnconfirmedTransmissionCallback@param	offset=-1 (param)
   252 ;;RADIO_WatchdogTimeout@param	offset=-1 (param)
   253 ;;RADIO_RxFSKTimeout@irqFlags	offset	0
   254 ;;RADIO_RxFSKTimeout@param	offset=-1 (param)
   255 ;;LORAWAN_ReceiveWindow1Callback@freq	offset	0
   256 ;;LORAWAN_ReceiveWindow1Callback@param	offset=-1 (param)
   257 ;;_LORAWAN_LinkCheckCallback$3007	offset	0
   258 ;;LORAWAN_LinkCheckCallback@iCtr	offset	4
   259 ;;LORAWAN_LinkCheckCallback@param	offset=-1 (param)
   260 ;;_DutyCycleCallback$2021	offset	0
   261 ;;DutyCycleCallback@minim	offset	4
   262 ;;DutyCycleCallback@i	offset	8
   263 ;;DutyCycleCallback@found	offset	9
   264 ;;DutyCycleCallback@param	offset=-1 (param)
   265 ;;AutomaticReplyCallback@param	offset=-1 (param)
   266 ;;AckRetransmissionCallback@maximumPacketSize	offset	0
   267 ;;AckRetransmissionCallback@param	offset=-1 (param)
   268 ;;_param	offset=-1 (param)
   269 ;;_UpdateJoinSuccessState$3024	offset	0
   270 ;;UpdateJoinSuccessState@param	offset=-1 (param)
   271                           
   272                           	psect	idataCOMRAM
   273  007782                     __pidataCOMRAM:
   274                           	opt stack 0
   275                           
   276                           ;initializer for _randx
   277  007782  0001               	dw	1
   278  007784  0000               	dw	0
   279                           
   280                           ;initializer for _ticksToScheduledInterrupt
   281  007786  FFFF               	dw	65535
   282  007788  FFFF               	dw	65535
   283                           
   284                           	psect	idataBANK1
   285  00708E                     __pidataBANK1:
   286                           	opt stack 0
   287                           
   288                           ;initializer for GenerateSubkey@F18817
   289  00708E  00                 	db	0
   290  00708F  00                 	db	0
   291  007090  00                 	db	0
   292  007091  00                 	db	0
   293  007092  00                 	db	0
   294  007093  00                 	db	0
   295  007094  00                 	db	0
   296  007095  00                 	db	0
   297  007096  00                 	db	0
   298  007097  00                 	db	0
   299  007098  00                 	db	0
   300  007099  00                 	db	0
   301  00709A  00                 	db	0
   302  00709B  00                 	db	0
   303  00709C  00                 	db	0
   304  00709D  87                 	db	135
   305                           
   306                           ;initializer for _appSKey
   307  00709E  42                 	db	66
   308  00709F  04                 	db	4
   309  0070A0  91                 	db	145
   310  0070A1  09                 	db	9
   311  0070A2  13                 	db	19
   312  0070A3  54                 	db	84
   313  0070A4  4A                 	db	74
   314  0070A5  49                 	db	73
   315  0070A6  CE                 	db	206
   316  0070A7  A4                 	db	164
   317  0070A8  01                 	db	1
   318  0070A9  F6                 	db	246
   319  0070AA  39                 	db	57
   320  0070AB  27                 	db	39
   321  0070AC  A4                 	db	164
   322  0070AD  93                 	db	147
   323                           
   324                           ;initializer for _nwkSKey
   325  0070AE  3C                 	db	60
   326  0070AF  A0                 	db	160
   327  0070B0  D6                 	db	214
   328  0070B1  06                 	db	6
   329  0070B2  60                 	db	96
   330  0070B3  6E                 	db	110
   331  0070B4  12                 	db	18
   332  0070B5  D5                 	db	213
   333  0070B6  DA                 	db	218
   334  0070B7  A8                 	db	168
   335  0070B8  15                 	db	21
   336  0070B9  79                 	db	121
   337  0070BA  E3                 	db	227
   338  0070BB  70                 	db	112
   339  0070BC  99                 	db	153
   340  0070BD  68                 	db	104
   341                           
   342                           	psect	mediumconst
   343  007E6C                     __pmediumconst:
   344                           	opt stack 0
   345  007E6C  00                 	db	0
   346  007E6D                     _STable:
   347                           	opt stack 0
   348  007E6D  63                 	db	99
   349  007E6E  7C                 	db	124
   350  007E6F  77                 	db	119
   351  007E70  7B                 	db	123
   352  007E71  F2                 	db	242
   353  007E72  6B                 	db	107
   354  007E73  6F                 	db	111
   355  007E74  C5                 	db	197
   356  007E75  30                 	db	48
   357  007E76  01                 	db	1
   358  007E77  67                 	db	103
   359  007E78  2B                 	db	43
   360  007E79  FE                 	db	254
   361  007E7A  D7                 	db	215
   362  007E7B  AB                 	db	171
   363  007E7C  76                 	db	118
   364  007E7D  CA                 	db	202
   365  007E7E  82                 	db	130
   366  007E7F  C9                 	db	201
   367  007E80  7D                 	db	125
   368  007E81  FA                 	db	250
   369  007E82  59                 	db	89
   370  007E83  47                 	db	71
   371  007E84  F0                 	db	240
   372  007E85  AD                 	db	173
   373  007E86  D4                 	db	212
   374  007E87  A2                 	db	162
   375  007E88  AF                 	db	175
   376  007E89  9C                 	db	156
   377  007E8A  A4                 	db	164
   378  007E8B  72                 	db	114
   379  007E8C  C0                 	db	192
   380  007E8D  B7                 	db	183
   381  007E8E  FD                 	db	253
   382  007E8F  93                 	db	147
   383  007E90  26                 	db	38
   384  007E91  36                 	db	54
   385  007E92  3F                 	db	63
   386  007E93  F7                 	db	247
   387  007E94  CC                 	db	204
   388  007E95  34                 	db	52
   389  007E96  A5                 	db	165
   390  007E97  E5                 	db	229
   391  007E98  F1                 	db	241
   392  007E99  71                 	db	113
   393  007E9A  D8                 	db	216
   394  007E9B  31                 	db	49
   395  007E9C  15                 	db	21
   396  007E9D  04                 	db	4
   397  007E9E  C7                 	db	199
   398  007E9F  23                 	db	35
   399  007EA0  C3                 	db	195
   400  007EA1  18                 	db	24
   401  007EA2  96                 	db	150
   402  007EA3  05                 	db	5
   403  007EA4  9A                 	db	154
   404  007EA5  07                 	db	7
   405  007EA6  12                 	db	18
   406  007EA7  80                 	db	128
   407  007EA8  E2                 	db	226
   408  007EA9  EB                 	db	235
   409  007EAA  27                 	db	39
   410  007EAB  B2                 	db	178
   411  007EAC  75                 	db	117
   412  007EAD  09                 	db	9
   413  007EAE  83                 	db	131
   414  007EAF  2C                 	db	44
   415  007EB0  1A                 	db	26
   416  007EB1  1B                 	db	27
   417  007EB2  6E                 	db	110
   418  007EB3  5A                 	db	90
   419  007EB4  A0                 	db	160
   420  007EB5  52                 	db	82
   421  007EB6  3B                 	db	59
   422  007EB7  D6                 	db	214
   423  007EB8  B3                 	db	179
   424  007EB9  29                 	db	41
   425  007EBA  E3                 	db	227
   426  007EBB  2F                 	db	47
   427  007EBC  84                 	db	132
   428  007EBD  53                 	db	83
   429  007EBE  D1                 	db	209
   430  007EBF  00                 	db	0
   431  007EC0  ED                 	db	237
   432  007EC1  20                 	db	32
   433  007EC2  FC                 	db	252
   434  007EC3  B1                 	db	177
   435  007EC4  5B                 	db	91
   436  007EC5  6A                 	db	106
   437  007EC6  CB                 	db	203
   438  007EC7  BE                 	db	190
   439  007EC8  39                 	db	57
   440  007EC9  4A                 	db	74
   441  007ECA  4C                 	db	76
   442  007ECB  58                 	db	88
   443  007ECC  CF                 	db	207
   444  007ECD  D0                 	db	208
   445  007ECE  EF                 	db	239
   446  007ECF  AA                 	db	170
   447  007ED0  FB                 	db	251
   448  007ED1  43                 	db	67
   449  007ED2  4D                 	db	77
   450  007ED3  33                 	db	51
   451  007ED4  85                 	db	133
   452  007ED5  45                 	db	69
   453  007ED6  F9                 	db	249
   454  007ED7  02                 	db	2
   455  007ED8  7F                 	db	127
   456  007ED9  50                 	db	80
   457  007EDA  3C                 	db	60
   458  007EDB  9F                 	db	159
   459  007EDC  A8                 	db	168
   460  007EDD  51                 	db	81
   461  007EDE  A3                 	db	163
   462  007EDF  40                 	db	64
   463  007EE0  8F                 	db	143
   464  007EE1  92                 	db	146
   465  007EE2  9D                 	db	157
   466  007EE3  38                 	db	56
   467  007EE4  F5                 	db	245
   468  007EE5  BC                 	db	188
   469  007EE6  B6                 	db	182
   470  007EE7  DA                 	db	218
   471  007EE8  21                 	db	33
   472  007EE9  10                 	db	16
   473  007EEA  FF                 	db	255
   474  007EEB  F3                 	db	243
   475  007EEC  D2                 	db	210
   476  007EED  CD                 	db	205
   477  007EEE  0C                 	db	12
   478  007EEF  13                 	db	19
   479  007EF0  EC                 	db	236
   480  007EF1  5F                 	db	95
   481  007EF2  97                 	db	151
   482  007EF3  44                 	db	68
   483  007EF4  17                 	db	23
   484  007EF5  C4                 	db	196
   485  007EF6  A7                 	db	167
   486  007EF7  7E                 	db	126
   487  007EF8  3D                 	db	61
   488  007EF9  64                 	db	100
   489  007EFA  5D                 	db	93
   490  007EFB  19                 	db	25
   491  007EFC  73                 	db	115
   492  007EFD  60                 	db	96
   493  007EFE  81                 	db	129
   494  007EFF  4F                 	db	79
   495  007F00  DC                 	db	220
   496  007F01  22                 	db	34
   497  007F02  2A                 	db	42
   498  007F03  90                 	db	144
   499  007F04  88                 	db	136
   500  007F05  46                 	db	70
   501  007F06  EE                 	db	238
   502  007F07  B8                 	db	184
   503  007F08  14                 	db	20
   504  007F09  DE                 	db	222
   505  007F0A  5E                 	db	94
   506  007F0B  0B                 	db	11
   507  007F0C  DB                 	db	219
   508  007F0D  E0                 	db	224
   509  007F0E  32                 	db	50
   510  007F0F  3A                 	db	58
   511  007F10  0A                 	db	10
   512  007F11  49                 	db	73
   513  007F12  06                 	db	6
   514  007F13  24                 	db	36
   515  007F14  5C                 	db	92
   516  007F15  C2                 	db	194
   517  007F16  D3                 	db	211
   518  007F17  AC                 	db	172
   519  007F18  62                 	db	98
   520  007F19  91                 	db	145
   521  007F1A  95                 	db	149
   522  007F1B  E4                 	db	228
   523  007F1C  79                 	db	121
   524  007F1D  E7                 	db	231
   525  007F1E  C8                 	db	200
   526  007F1F  37                 	db	55
   527  007F20  6D                 	db	109
   528  007F21  8D                 	db	141
   529  007F22  D5                 	db	213
   530  007F23  4E                 	db	78
   531  007F24  A9                 	db	169
   532  007F25  6C                 	db	108
   533  007F26  56                 	db	86
   534  007F27  F4                 	db	244
   535  007F28  EA                 	db	234
   536  007F29  65                 	db	101
   537  007F2A  7A                 	db	122
   538  007F2B  AE                 	db	174
   539  007F2C  08                 	db	8
   540  007F2D  BA                 	db	186
   541  007F2E  78                 	db	120
   542  007F2F  25                 	db	37
   543  007F30  2E                 	db	46
   544  007F31  1C                 	db	28
   545  007F32  A6                 	db	166
   546  007F33  B4                 	db	180
   547  007F34  C6                 	db	198
   548  007F35  E8                 	db	232
   549  007F36  DD                 	db	221
   550  007F37  74                 	db	116
   551  007F38  1F                 	db	31
   552  007F39  4B                 	db	75
   553  007F3A  BD                 	db	189
   554  007F3B  8B                 	db	139
   555  007F3C  8A                 	db	138
   556  007F3D  70                 	db	112
   557  007F3E  3E                 	db	62
   558  007F3F  B5                 	db	181
   559  007F40  66                 	db	102
   560  007F41  48                 	db	72
   561  007F42  03                 	db	3
   562  007F43  F6                 	db	246
   563  007F44  0E                 	db	14
   564  007F45  61                 	db	97
   565  007F46  35                 	db	53
   566  007F47  57                 	db	87
   567  007F48  B9                 	db	185
   568  007F49  86                 	db	134
   569  007F4A  C1                 	db	193
   570  007F4B  1D                 	db	29
   571  007F4C  9E                 	db	158
   572  007F4D  E1                 	db	225
   573  007F4E  F8                 	db	248
   574  007F4F  98                 	db	152
   575  007F50  11                 	db	17
   576  007F51  69                 	db	105
   577  007F52  D9                 	db	217
   578  007F53  8E                 	db	142
   579  007F54  94                 	db	148
   580  007F55  9B                 	db	155
   581  007F56  1E                 	db	30
   582  007F57  87                 	db	135
   583  007F58  E9                 	db	233
   584  007F59  CE                 	db	206
   585  007F5A  55                 	db	85
   586  007F5B  28                 	db	40
   587  007F5C  DF                 	db	223
   588  007F5D  8C                 	db	140
   589  007F5E  A1                 	db	161
   590  007F5F  89                 	db	137
   591  007F60  0D                 	db	13
   592  007F61  BF                 	db	191
   593  007F62  E6                 	db	230
   594  007F63  42                 	db	66
   595  007F64  68                 	db	104
   596  007F65  41                 	db	65
   597  007F66  99                 	db	153
   598  007F67  2D                 	db	45
   599  007F68  0F                 	db	15
   600  007F69  B0                 	db	176
   601  007F6A  54                 	db	84
   602  007F6B  BB                 	db	187
   603  007F6C  16                 	db	22
   604  007F6D                     __end_of_STable:
   605                           	opt stack 0
   606  007F6D                     _maxPayloadSize:
   607                           	opt stack 0
   608  007F6D  33                 	db	51
   609  007F6E  33                 	db	51
   610  007F6F  33                 	db	51
   611  007F70  73                 	db	115
   612  007F71  F2                 	db	242
   613  007F72  F2                 	db	242
   614  007F73  F2                 	db	242
   615  007F74  38                 	db	56
   616  007F75                     __end_of_maxPayloadSize:
   617                           	opt stack 0
   618  007F75                     _modulation:
   619                           	opt stack 0
   620  007F75  01                 	db	1
   621  007F76  01                 	db	1
   622  007F77  01                 	db	1
   623  007F78  01                 	db	1
   624  007F79  01                 	db	1
   625  007F7A  01                 	db	1
   626  007F7B  01                 	db	1
   627  007F7C  00                 	db	0
   628  007F7D                     __end_of_modulation:
   629                           	opt stack 0
   630  007F7D                     _rxWindowOffset:
   631                           	opt stack 0
   632  007F7D  DF                 	db	223
   633  007F7E  CE                 	db	206
   634  007F7F  C6                 	db	198
   635  007F80  C2                 	db	194
   636  007F81  BE                 	db	190
   637  007F82  BC                 	db	188
   638  007F83  F1                 	db	241
   639  007F84  FE                 	db	254
   640  007F85                     __end_of_rxWindowOffset:
   641                           	opt stack 0
   642  007F85                     _rxWindowSize:
   643                           	opt stack 0
   644  007F85  08                 	db	8
   645  007F86  0A                 	db	10
   646  007F87  0E                 	db	14
   647  007F88  1A                 	db	26
   648  007F89  31                 	db	49
   649  007F8A  58                 	db	88
   650  007F8B  3C                 	db	60
   651  007F8C  08                 	db	8
   652  007F8D                     __end_of_rxWindowSize:
   653                           	opt stack 0
   654  007F8D                     _bandwidth:
   655                           	opt stack 0
   656  007F8D  07                 	db	7
   657  007F8E  07                 	db	7
   658  007F8F  07                 	db	7
   659  007F90  07                 	db	7
   660  007F91  07                 	db	7
   661  007F92  07                 	db	7
   662  007F93  08                 	db	8
   663  007F94                     __end_of_bandwidth:
   664                           	opt stack 0
   665  007F94                     _macEndDevCmdReplyLen:
   666                           	opt stack 0
   667  007F94  01                 	db	1
   668  007F95  02                 	db	2
   669  007F96  01                 	db	1
   670  007F97  02                 	db	2
   671  007F98  03                 	db	3
   672  007F99  02                 	db	2
   673  007F9A  01                 	db	1
   674  007F9B                     __end_of_macEndDevCmdReplyLen:
   675                           	opt stack 0
   676  007F9B                     _spreadingFactor:
   677                           	opt stack 0
   678  007F9B  0C                 	db	12
   679  007F9C  0B                 	db	11
   680  007F9D  0A                 	db	10
   681  007F9E  09                 	db	9
   682  007F9F  08                 	db	8
   683  007FA0  07                 	db	7
   684  007FA1  07                 	db	7
   685  007FA2                     __end_of_spreadingFactor:
   686                           	opt stack 0
   687  007FA2                     _txPower868:
   688                           	opt stack 0
   689  007FA2  14                 	db	20
   690  007FA3  0E                 	db	14
   691  007FA4  0B                 	db	11
   692  007FA5  08                 	db	8
   693  007FA6  05                 	db	5
   694  007FA7  02                 	db	2
   695  007FA8                     __end_of_txPower868:
   696                           	opt stack 0
   697  007FA8                     _DefaultChannels433:
   698                           	opt stack 0
   699  007FA8  B9D8               	dw	47576
   700  007FAA  19D1               	dw	6609
   701  007FAC  01                 	db	1
   702  007FAD  50                 	db	80
   703  007FAE  012E               	dw	302
   704  007FB0  0000               	dw	0
   705  007FB2  0000               	dw	0
   706  007FB4  01                 	db	1
   707  007FB5  FF                 	db	255
   708  007FB6  C718               	dw	50968
   709  007FB8  19D4               	dw	6612
   710  007FBA  01                 	db	1
   711  007FBB  50                 	db	80
   712  007FBC  012E               	dw	302
   713  007FBE  0000               	dw	0
   714  007FC0  0000               	dw	0
   715  007FC2  01                 	db	1
   716  007FC3  FF                 	db	255
   717  007FC4  D458               	dw	54360
   718  007FC6  19D7               	dw	6615
   719  007FC8  01                 	db	1
   720  007FC9  50                 	db	80
   721  007FCA  012E               	dw	302
   722  007FCC  0000               	dw	0
   723  007FCE  0000               	dw	0
   724  007FD0  01                 	db	1
   725  007FD1  FF                 	db	255
   726  007FD2                     __end_of_DefaultChannels433:
   727                           	opt stack 0
   728  007FD2                     _DefaultChannels868:
   729                           	opt stack 0
   730  007FD2  27A0               	dw	10144
   731  007FD4  33BE               	dw	13246
   732  007FD6  01                 	db	1
   733  007FD7  50                 	db	80
   734  007FD8  012E               	dw	302
   735  007FDA  0000               	dw	0
   736  007FDC  0000               	dw	0
   737  007FDE  01                 	db	1
   738  007FDF  FF                 	db	255
   739  007FE0  34E0               	dw	13536
   740  007FE2  33C1               	dw	13249
   741  007FE4  01                 	db	1
   742  007FE5  50                 	db	80
   743  007FE6  012E               	dw	302
   744  007FE8  0000               	dw	0
   745  007FEA  0000               	dw	0
   746  007FEC  01                 	db	1
   747  007FED  FF                 	db	255
   748  007FEE  4220               	dw	16928
   749  007FF0  33C4               	dw	13252
   750  007FF2  01                 	db	1
   751  007FF3  50                 	db	80
   752  007FF4  012E               	dw	302
   753  007FF6  0000               	dw	0
   754  007FF8  0000               	dw	0
   755  007FFA  01                 	db	1
   756  007FFB  FF                 	db	255
   757  007FFC                     __end_of_DefaultChannels868:
   758                           	opt stack 0
   759  007FFC                     _FskSyncWordBuff:
   760                           	opt stack 0
   761  007FFC  C1                 	db	193
   762  007FFD  94                 	db	148
   763  007FFE  C1                 	db	193
   764  007FFF                     __end_of_FskSyncWordBuff:
   765                           	opt stack 0
   766  007FFF  00                 	db	0	; dummy byte at the end
   767  0000                     
   768                           	psect	nvCOMRAM
   769  00005E                     __pnvCOMRAM:
   770                           	opt stack 0
   771  00005E                     _timer1ReloadVal:
   772                           	opt stack 0
   773  00005E                     	ds	2
   774                           
   775                           	psect	nvBANK1
   776  0001ED                     __pnvBANK1:
   777                           	opt stack 0
   778  0001ED                     _INT1_InterruptHandler:
   779                           	opt stack 0
   780  0001ED                     	ds	2
   781  0001EF                     _INT2_InterruptHandler:
   782                           	opt stack 0
   783  0001EF                     	ds	2
   784  0001F1                     _INT3_InterruptHandler:
   785                           	opt stack 0
   786  0001F1                     	ds	2
   787  0001F3                     _IOCB4_InterruptHandler:
   788                           	opt stack 0
   789  0001F3                     	ds	2
   790  0001F5                     _TMR1_InterruptHandler:
   791                           	opt stack 0
   792  0001F5                     	ds	2
   793  0000                     _ANCON0	set	3933
   794  0000                     _ANCON1	set	3932
   795  0000                     _IOCBbits	set	3930
   796  0000                     _WPUB	set	3931
   797  0000                     _INTCON2bits	set	4081
   798  0000                     _INTCON3bits	set	4080
   799  0000                     _INTCONbits	set	4082
   800  0000                     _LATA	set	3977
   801  0000                     _LATB	set	3978
   802  0000                     _LATC	set	3979
   803  0000                     _LATCbits	set	3979
   804  0000                     _LATD	set	3980
   805  0000                     _LATE	set	3981
   806  0000                     _LATF	set	3982
   807  0000                     _LATG	set	3983
   808  0000                     _OSCCON	set	4051
   809  0000                     _OSCCON2	set	4050
   810  0000                     _OSCTUNE	set	3995
   811  0000                     _PIE1bits	set	3997
   812  0000                     _PIR1bits	set	3998
   813  0000                     _PORTBbits	set	3969
   814  0000                     _RCONbits	set	4048
   815  0000                     _REFOCON	set	3994
   816  0000                     _SSPADD	set	4040
   817  0000                     _SSPBUF	set	4041
   818  0000                     _SSPCON1	set	4038
   819  0000                     _SSPCON1bits	set	4038
   820  0000                     _SSPSTAT	set	4039
   821  0000                     _SSPSTATbits	set	4039
   822  0000                     _T1CON	set	4045
   823  0000                     _T1CONbits	set	4045
   824  0000                     _T1GCON	set	4010
   825  0000                     _TMR1H	set	4047
   826  0000                     _TMR1L	set	4046
   827  0000                     _TRISA	set	3986
   828  0000                     _TRISB	set	3987
   829  0000                     _TRISC	set	3988
   830  0000                     _TRISD	set	3989
   831  0000                     _TRISE	set	3990
   832  0000                     _TRISF	set	3991
   833  0000                     _TRISG	set	3992
   834  0000                     _LATC2	set	31834
   835  0000                     _LATD3	set	31843
   836  0000                     _TRISC2	set	31906
   837                           
   838                           ; #config settings
   839  0000                     
   840                           	psect	cinit
   841  005B44                     __pcinit:
   842                           	opt stack 0
   843  005B44                     start_initialization:
   844                           	opt stack 0
   845  005B44                     __initialization:
   846                           	opt stack 0
   847                           
   848                           ; Initialize objects allocated to BANK1 (48 bytes)
   849                           ; load TBLPTR registers with __pidataBANK1
   850  005B44  0E8E               	movlw	low __pidataBANK1
   851  005B46  6EF6               	movwf	tblptrl,c
   852  005B48  0E70               	movlw	high __pidataBANK1
   853  005B4A  6EF7               	movwf	tblptrh,c
   854  005B4C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   855  005B4E  6EF8               	movwf	tblptru,c
   856  005B50  EE01  F0BD         	lfsr	0,__pdataBANK1
   857  005B54  EE20 F030          	lfsr	2,48
   858  005B58                     copy_data0:
   859  005B58  0009               	tblrd		*+
   860  005B5A  CFF5 FFEE          	movff	tablat,postinc0
   861  005B5E  50DD               	movf	postdec2,w,c
   862  005B60  50D9               	movf	fsr2l,w,c
   863  005B62  E1FA               	bnz	copy_data0
   864                           
   865                           ; Initialize objects allocated to COMRAM (8 bytes)
   866                           ; load TBLPTR registers with __pidataCOMRAM
   867  005B64  0E82               	movlw	low __pidataCOMRAM
   868  005B66  6EF6               	movwf	tblptrl,c
   869  005B68  0E77               	movlw	high __pidataCOMRAM
   870  005B6A  6EF7               	movwf	tblptrh,c
   871  005B6C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   872  005B6E  6EF8               	movwf	tblptru,c
   873  005B70  EE00  F056         	lfsr	0,__pdataCOMRAM
   874  005B74  EE20 F008          	lfsr	2,8
   875  005B78                     copy_data1:
   876  005B78  0009               	tblrd		*+
   877  005B7A  CFF5 FFEE          	movff	tablat,postinc0
   878  005B7E  50DD               	movf	postdec2,w,c
   879  005B80  50D9               	movf	fsr2l,w,c
   880  005B82  E1FA               	bnz	copy_data1
   881                           
   882                           ; Clear objects allocated to BIGRAM (542 bytes)
   883  005B84  EE04  F0E0         	lfsr	0,__pbssBIGRAM
   884  005B88  EE22 F01E          	lfsr	2,542
   885  005B8C                     clear_0:
   886  005B8C  6AEE               	clrf	postinc0,c
   887  005B8E  50DD               	movf	postdec2,w,c
   888  005B90  50D9               	movf	fsr2l,w,c
   889  005B92  E1FC               	bnz	clear_0
   890  005B94  50DA               	movf	fsr2h,w,c
   891  005B96  E1FA               	bnz	clear_0
   892                           
   893                           ; Clear objects allocated to BANK4 (224 bytes)
   894  005B98  EE04  F000         	lfsr	0,__pbssBANK4
   895  005B9C  0EE0               	movlw	224
   896  005B9E                     clear_1:
   897  005B9E  6AEE               	clrf	postinc0,c
   898  005BA0  06E8               	decf	wreg,f,c
   899  005BA2  E1FD               	bnz	clear_1
   900                           
   901                           ; Clear objects allocated to BANK3 (160 bytes)
   902  005BA4  EE03  F000         	lfsr	0,__pbssBANK3
   903  005BA8  0EA0               	movlw	160
   904  005BAA                     clear_2:
   905  005BAA  6AEE               	clrf	postinc0,c
   906  005BAC  06E8               	decf	wreg,f,c
   907  005BAE  E1FD               	bnz	clear_2
   908                           
   909                           ; Clear objects allocated to BANK2 (245 bytes)
   910  005BB0  EE02  F000         	lfsr	0,__pbssBANK2
   911  005BB4  0EF5               	movlw	245
   912  005BB6                     clear_3:
   913  005BB6  6AEE               	clrf	postinc0,c
   914  005BB8  06E8               	decf	wreg,f,c
   915  005BBA  E1FD               	bnz	clear_3
   916                           
   917                           ; Clear objects allocated to BANK1 (79 bytes)
   918  005BBC  EE01  F06E         	lfsr	0,__pbssBANK1
   919  005BC0  0E4F               	movlw	79
   920  005BC2                     clear_4:
   921  005BC2  6AEE               	clrf	postinc0,c
   922  005BC4  06E8               	decf	wreg,f,c
   923  005BC6  E1FD               	bnz	clear_4
   924                           
   925                           ; Clear objects allocated to COMRAM (26 bytes)
   926  005BC8  EE00  F030         	lfsr	0,__pbssCOMRAM
   927  005BCC  0E1A               	movlw	26
   928  005BCE                     clear_5:
   929  005BCE  6AEE               	clrf	postinc0,c
   930  005BD0  06E8               	decf	wreg,f,c
   931  005BD2  E1FD               	bnz	clear_5
   932  005BD4                     end_of_initialization:
   933                           	opt stack 0
   934  005BD4                     __end_of__initialization:
   935                           	opt stack 0
   936  005BD4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   937  005BD6  6EF8               	movwf	tblptru,c
   938  005BD8  0100               	movlb	0
   939  005BDA  EF8D  F02A         	goto	_main	;jump to C main() function
   940                           tblptru	equ	0xFF8
   941                           tblptrh	equ	0xFF7
   942                           tblptrl	equ	0xFF6
   943                           tablat	equ	0xFF5
   944                           postinc0	equ	0xFEE
   945                           wreg	equ	0xFE8
   946                           postdec2	equ	0xFDD
   947                           fsr2h	equ	0xFDA
   948                           fsr2l	equ	0xFD9
   949                           
   950                           	psect	bssCOMRAM
   951  000030                     __pbssCOMRAM:
   952                           	opt stack 0
   953  000030                     TMR_GetDeltaTime@retVal:
   954                           	opt stack 0
   955  000030                     	ds	4
   956  000034                     _ticksAccounted:
   957                           	opt stack 0
   958  000034                     	ds	4
   959  000038                     _ticksAdded:
   960                           	opt stack 0
   961  000038                     	ds	4
   962  00003C                     TMR1_ISR@CountCallBack:
   963                           	opt stack 0
   964  00003C                     	ds	2
   965  00003E                     TMR_GetDeltaTime@tmrVal:
   966                           	opt stack 0
   967  00003E                     	ds	2
   968  000040                     TMR_SwapTimer@oldVal:
   969                           	opt stack 0
   970  000040                     	ds	2
   971  000042                     TMR_SwapTimer@retVal:
   972                           	opt stack 0
   973  000042                     	ds	2
   974  000044                     _reloadVal:
   975                           	opt stack 0
   976  000044                     	ds	2
   977  000046                     __rcon:
   978                           	opt stack 0
   979  000046                     	ds	1
   980  000047                     __roundCounter:
   981                           	opt stack 0
   982  000047                     	ds	1
   983  000048                     _dioStatus:
   984                           	opt stack 0
   985  000048                     	ds	1
   986  000049                     _timerOverflow:
   987                           	opt stack 0
   988  000049                     	ds	1
   989                           tblptru	equ	0xFF8
   990                           tblptrh	equ	0xFF7
   991                           tblptrl	equ	0xFF6
   992                           tablat	equ	0xFF5
   993                           postinc0	equ	0xFEE
   994                           wreg	equ	0xFE8
   995                           postdec2	equ	0xFDD
   996                           fsr2h	equ	0xFDA
   997                           fsr2l	equ	0xFD9
   998                           
   999                           	psect	dataCOMRAM
  1000  000056                     __pdataCOMRAM:
  1001                           	opt stack 0
  1002  000056                     _randx:
  1003                           	opt stack 0
  1004  000056                     	ds	4
  1005  00005A                     _ticksToScheduledInterrupt:
  1006                           	opt stack 0
  1007  00005A                     	ds	4
  1008                           tblptru	equ	0xFF8
  1009                           tblptrh	equ	0xFF7
  1010                           tblptrl	equ	0xFF6
  1011                           tablat	equ	0xFF5
  1012                           postinc0	equ	0xFEE
  1013                           wreg	equ	0xFE8
  1014                           postdec2	equ	0xFDD
  1015                           fsr2h	equ	0xFDA
  1016                           fsr2l	equ	0xFD9
  1017                           
  1018                           	psect	bssBANK1
  1019  00016E                     __pbssBANK1:
  1020                           	opt stack 0
  1021  00016E                     _rxPayload:
  1022                           	opt stack 0
  1023  00016E                     	ds	4
  1024  000172                     _JoinedServer:
  1025                           	opt stack 0
  1026  000172                     	ds	1
  1027  000173                     _allocatedTimers:
  1028                           	opt stack 0
  1029  000173                     	ds	1
  1030  000174                     _localDioStatus:
  1031                           	opt stack 0
  1032  000174                     	ds	1
  1033  000175                     _RadioConfiguration:
  1034                           	opt stack 0
  1035  000175                     	ds	54
  1036  0001AB                     _aesBuffer:
  1037                           	opt stack 0
  1038  0001AB                     	ds	16
  1039  0001BB                     _payload:
  1040                           	opt stack 0
  1041  0001BB                     	ds	2
  1042                           tblptru	equ	0xFF8
  1043                           tblptrh	equ	0xFF7
  1044                           tblptrl	equ	0xFF6
  1045                           tablat	equ	0xFF5
  1046                           postinc0	equ	0xFEE
  1047                           wreg	equ	0xFE8
  1048                           postdec2	equ	0xFDD
  1049                           fsr2h	equ	0xFDA
  1050                           fsr2l	equ	0xFD9
  1051                           
  1052                           	psect	dataBANK1
  1053  0001BD                     __pdataBANK1:
  1054                           	opt stack 0
  1055  0001BD                     GenerateSubkey@F18817:
  1056                           	opt stack 0
  1057  0001BD                     	ds	16
  1058  0001CD                     _appSKey:
  1059                           	opt stack 0
  1060  0001CD                     	ds	16
  1061  0001DD                     _nwkSKey:
  1062                           	opt stack 0
  1063  0001DD                     	ds	16
  1064                           tblptru	equ	0xFF8
  1065                           tblptrh	equ	0xFF7
  1066                           tblptrl	equ	0xFF6
  1067                           tablat	equ	0xFF5
  1068                           postinc0	equ	0xFEE
  1069                           wreg	equ	0xFE8
  1070                           postdec2	equ	0xFDD
  1071                           fsr2h	equ	0xFDA
  1072                           fsr2l	equ	0xFD9
  1073                           
  1074                           	psect	bssBANK2
  1075  000200                     __pbssBANK2:
  1076                           	opt stack 0
  1077  000200                     _loRa:
  1078                           	opt stack 0
  1079  000200                     	ds	245
  1080                           tblptru	equ	0xFF8
  1081                           tblptrh	equ	0xFF7
  1082                           tblptrl	equ	0xFF6
  1083                           tablat	equ	0xFF5
  1084                           postinc0	equ	0xFEE
  1085                           wreg	equ	0xFE8
  1086                           postdec2	equ	0xFDD
  1087                           fsr2h	equ	0xFDA
  1088                           fsr2l	equ	0xFD9
  1089                           
  1090                           	psect	bssBANK3
  1091  000300                     __pbssBANK3:
  1092                           	opt stack 0
  1093  000300                     _swTimers:
  1094                           	opt stack 0
  1095  000300                     	ds	160
  1096                           tblptru	equ	0xFF8
  1097                           tblptrh	equ	0xFF7
  1098                           tblptrl	equ	0xFF6
  1099                           tablat	equ	0xFF5
  1100                           postinc0	equ	0xFEE
  1101                           wreg	equ	0xFE8
  1102                           postdec2	equ	0xFDD
  1103                           fsr2h	equ	0xFDA
  1104                           fsr2l	equ	0xFD9
  1105                           
  1106                           	psect	bssBANK4
  1107  000400                     __pbssBANK4:
  1108                           	opt stack 0
  1109  000400                     _Channels:
  1110                           	opt stack 0
  1111  000400                     	ds	224
  1112                           tblptru	equ	0xFF8
  1113                           tblptrh	equ	0xFF7
  1114                           tblptrl	equ	0xFF6
  1115                           tablat	equ	0xFF5
  1116                           postinc0	equ	0xFEE
  1117                           wreg	equ	0xFE8
  1118                           postdec2	equ	0xFDD
  1119                           fsr2h	equ	0xFDA
  1120                           fsr2l	equ	0xFD9
  1121                           
  1122                           	psect	bssBIGRAM
  1123  0004E0                     __pbssBIGRAM:
  1124                           	opt stack 0
  1125  0004E0                     _macBuffer:
  1126                           	opt stack 0
  1127  0004E0                     	ds	271
  1128  0005EF                     _radioBuffer:
  1129                           	opt stack 0
  1130  0005EF                     	ds	271
  1131                           tblptru	equ	0xFF8
  1132                           tblptrh	equ	0xFF7
  1133                           tblptrl	equ	0xFF6
  1134                           tablat	equ	0xFF5
  1135                           postinc0	equ	0xFEE
  1136                           wreg	equ	0xFE8
  1137                           postdec2	equ	0xFDD
  1138                           fsr2h	equ	0xFDA
  1139                           fsr2l	equ	0xFD9
  1140                           
  1141                           	psect	cstackBANK3
  1142  0003A0                     __pcstackBANK3:
  1143                           	opt stack 0
  1144  0003A0                     LORAWAN_RxDone@fPort:
  1145                           	opt stack 0
  1146                           
  1147                           ; 1 bytes @ 0x0
  1148  0003A0                     	ds	1
  1149  0003A1                     LORAWAN_RxDone@channelIndex:
  1150                           	opt stack 0
  1151                           
  1152                           ; 1 bytes @ 0x1
  1153  0003A1                     	ds	1
  1154  0003A2                     LORAWAN_RxDone@mhdr:
  1155                           	opt stack 0
  1156                           
  1157                           ; 1 bytes @ 0x2
  1158  0003A2                     	ds	1
  1159  0003A3                     LORAWAN_RxDone@extractedMic:
  1160                           	opt stack 0
  1161                           
  1162                           ; 4 bytes @ 0x3
  1163  0003A3                     	ds	4
  1164  0003A7                     LORAWAN_RxDone@bufferIndex:
  1165                           	opt stack 0
  1166                           
  1167                           ; 1 bytes @ 0x7
  1168  0003A7                     	ds	1
  1169  0003A8                     LORAWAN_RxDone@temp:
  1170                           	opt stack 0
  1171                           
  1172                           ; 1 bytes @ 0x8
  1173  0003A8                     	ds	1
  1174  0003A9                     LORAWAN_RxDone@packet:
  1175                           	opt stack 0
  1176                           
  1177                           ; 2 bytes @ 0x9
  1178  0003A9                     	ds	2
  1179  0003AB                     LORAWAN_RxDone@computedMic:
  1180                           	opt stack 0
  1181                           
  1182                           ; 4 bytes @ 0xB
  1183  0003AB                     	ds	4
  1184  0003AF                     LORAWAN_RxDone@joinAccept:
  1185                           	opt stack 0
  1186                           
  1187                           ; 2 bytes @ 0xF
  1188  0003AF                     	ds	2
  1189  0003B1                     LORAWAN_RxDone@frmPayloadLength:
  1190                           	opt stack 0
  1191                           
  1192                           ; 1 bytes @ 0x11
  1193  0003B1                     	ds	1
  1194  0003B2                     LORAWAN_RxDone@hdr:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0x12
  1198  0003B2                     	ds	2
  1199                           tblptru	equ	0xFF8
  1200                           tblptrh	equ	0xFF7
  1201                           tblptrl	equ	0xFF6
  1202                           tablat	equ	0xFF5
  1203                           postinc0	equ	0xFEE
  1204                           wreg	equ	0xFE8
  1205                           postdec2	equ	0xFDD
  1206                           fsr2h	equ	0xFDA
  1207                           fsr2l	equ	0xFD9
  1208                           
  1209                           	psect	cstackBANK1
  1210  000100                     __pcstackBANK1:
  1211                           	opt stack 0
  1212  000100                     AESCmac@k2:
  1213                           	opt stack 0
  1214                           
  1215                           ; 16 bytes @ 0x0
  1216  000100                     	ds	16
  1217  000110                     AESCmac@k1:
  1218                           	opt stack 0
  1219                           
  1220                           ; 16 bytes @ 0x10
  1221  000110                     	ds	16
  1222  000120                     AESCmac@mLast:
  1223                           	opt stack 0
  1224                           
  1225                           ; 16 bytes @ 0x20
  1226  000120                     	ds	16
  1227  000130                     AESCmac@padded:
  1228                           	opt stack 0
  1229                           
  1230                           ; 16 bytes @ 0x30
  1231  000130                     	ds	16
  1232  000140                     AESCmac@y:
  1233                           	opt stack 0
  1234                           
  1235                           ; 16 bytes @ 0x40
  1236  000140                     	ds	16
  1237  000150                     AESCmac@x:
  1238                           	opt stack 0
  1239                           
  1240                           ; 16 bytes @ 0x50
  1241  000150                     	ds	16
  1242  000160                     AESCmac@ptr:
  1243                           	opt stack 0
  1244                           
  1245                           ; 2 bytes @ 0x60
  1246  000160                     	ds	2
  1247  000162                     AESCmac@flag:
  1248                           	opt stack 0
  1249                           
  1250                           ; 1 bytes @ 0x62
  1251  000162                     	ds	1
  1252  000163                     AESCmac@n:
  1253                           	opt stack 0
  1254                           
  1255                           ; 1 bytes @ 0x63
  1256  000163                     	ds	1
  1257  000164                     AESCmac@j:
  1258                           	opt stack 0
  1259                           
  1260                           ; 1 bytes @ 0x64
  1261  000164                     	ds	1
  1262  000165                     AESCmac@i:
  1263                           	opt stack 0
  1264                           
  1265                           ; 1 bytes @ 0x65
  1266  000165                     	ds	1
  1267  000166                     AssemblePacket@port:
  1268                           	opt stack 0
  1269                           
  1270                           ; 1 bytes @ 0x66
  1271  000166                     	ds	1
  1272  000167                     AssemblePacket@buffer:
  1273                           	opt stack 0
  1274                           
  1275                           ; 2 bytes @ 0x67
  1276  000167                     	ds	2
  1277  000169                     AssemblePacket@bufferLength:
  1278                           	opt stack 0
  1279                           
  1280                           ; 2 bytes @ 0x69
  1281  000169                     	ds	2
  1282  00016B                     LORAWAN_RxDone@buffer:
  1283                           	opt stack 0
  1284                           
  1285                           ; 2 bytes @ 0x6B
  1286  00016B                     	ds	2
  1287  00016D                     LORAWAN_RxDone@bufferLength:
  1288                           	opt stack 0
  1289                           
  1290                           ; 1 bytes @ 0x6D
  1291  00016D                     	ds	1
  1292                           tblptru	equ	0xFF8
  1293                           tblptrh	equ	0xFF7
  1294                           tblptrl	equ	0xFF6
  1295                           tablat	equ	0xFF5
  1296                           postinc0	equ	0xFEE
  1297                           wreg	equ	0xFE8
  1298                           postdec2	equ	0xFDD
  1299                           fsr2h	equ	0xFDA
  1300                           fsr2l	equ	0xFD9
  1301                           
  1302                           	psect	cstackBANK0
  1303  000060                     __pcstackBANK0:
  1304                           	opt stack 0
  1305  000060                     	ds	4
  1306  000064                     ??_UpdateMinMaxChDataRate:
  1307  000064                     ??_FindSmallestDataRate:
  1308  000064                     ??_UpdateReceiveDelays:
  1309  000064                     ??_CountfOptsLength:
  1310  000064                     ??_flash:
  1311  000064                     ?_TMR1_ReadTimer:
  1312                           	opt stack 0
  1313  000064                     ?_ExecuteLinkCheck:
  1314                           	opt stack 0
  1315  000064                     ?_ExecuteDutyCycle:
  1316                           	opt stack 0
  1317  000064                     ?_ExecuteDevStatus:
  1318                           	opt stack 0
  1319  000064                     ?_GetRx1Freq:
  1320                           	opt stack 0
  1321  000064                     ?___lmul:
  1322                           	opt stack 0
  1323  000064                     ?___lldiv:
  1324                           	opt stack 0
  1325  000064                     ?___llmod:
  1326                           	opt stack 0
  1327  000064                     SwTimerCreate@retVal:
  1328                           	opt stack 0
  1329  000064                     SwTimerIsRunning@timerId:
  1330                           	opt stack 0
  1331  000064                     SwTimerStop@timerId:
  1332                           	opt stack 0
  1333  000064                     HALResetPinOutputValue@value:
  1334                           	opt stack 0
  1335  000064                     RADIO_SetLoRaSyncWord@syncWord:
  1336                           	opt stack 0
  1337  000064                     RADIO_SetSpreadingFactor@spreadingFactor:
  1338                           	opt stack 0
  1339  000064                     RADIO_SetOutputPower@power:
  1340                           	opt stack 0
  1341  000064                     RADIO_SetCRC@crc:
  1342                           	opt stack 0
  1343  000064                     RADIO_SetIQInverted@iqInverted:
  1344                           	opt stack 0
  1345  000064                     RADIO_SetBandwidth@bandwidth:
  1346                           	opt stack 0
  1347  000064                     RADIO_SetModulation@modulation:
  1348                           	opt stack 0
  1349  000064                     SPI_Exchange8bit@data:
  1350                           	opt stack 0
  1351  000064                     ValidateDataRate@dataRate:
  1352                           	opt stack 0
  1353  000064                     ValidateTxPower@result:
  1354                           	opt stack 0
  1355  000064                     UpdateDLSettings@dlRx1DrOffset:
  1356                           	opt stack 0
  1357  000064                     UpdateDataRange@dataRangeNew:
  1358                           	opt stack 0
  1359  000064                     UpdateChannelIdStatus@statusNew:
  1360                           	opt stack 0
  1361  000064                     ValidateRxOffset@rxOffset:
  1362                           	opt stack 0
  1363  000064                     ValidateChannelId@allowedForDefaultChannels:
  1364                           	opt stack 0
  1365  000064                     ValidateChannelMaskCntl@result:
  1366                           	opt stack 0
  1367  000064                     UpdateCurrentDataRate@valueNew:
  1368                           	opt stack 0
  1369  000064                     UpdateTxPower@txPowerNew:
  1370                           	opt stack 0
  1371  000064                     UpdateJoinInProgress@state:
  1372                           	opt stack 0
  1373  000064                     INTERRUPT_GetDioStatus@a:
  1374                           	opt stack 0
  1375  000064                     EncKeySchedule@key:
  1376                           	opt stack 0
  1377  000064                     ___abdiv@divisor:
  1378                           	opt stack 0
  1379  000064                     INT1_SetInterruptHandler@InterruptHandler:
  1380                           	opt stack 0
  1381  000064                     INT2_SetInterruptHandler@InterruptHandler:
  1382                           	opt stack 0
  1383  000064                     INT0_SetInterruptHandler@InterruptHandler:
  1384                           	opt stack 0
  1385  000064                     INT3_SetInterruptHandler@InterruptHandler:
  1386                           	opt stack 0
  1387  000064                     SwTimerSetCallback@callback:
  1388                           	opt stack 0
  1389  000064                     RADIO_SetFrequencyHopPeriod@frequencyHopPeriod:
  1390                           	opt stack 0
  1391  000064                     ExecuteDutyCycle@ptr:
  1392                           	opt stack 0
  1393  000064                     ExecuteDevStatus@ptr:
  1394                           	opt stack 0
  1395  000064                     UpdateDutyCycle@dutyCycleNew:
  1396                           	opt stack 0
  1397  000064                     ValidateChannelMask@channelMask:
  1398                           	opt stack 0
  1399  000064                     TMR1_WriteTimer@timerVal:
  1400                           	opt stack 0
  1401  000064                     TMR1_SetInterruptHandler@InterruptHandler:
  1402                           	opt stack 0
  1403  000064                     FillSubKey@source:
  1404                           	opt stack 0
  1405  000064                     IOCB4_SetInterruptHandler@InterruptHandler:
  1406                           	opt stack 0
  1407  000064                     ExecuteLinkCheck@ptr:
  1408                           	opt stack 0
  1409  000064                     IncludeMacCommandsResponse@macBuffer:
  1410                           	opt stack 0
  1411  000064                     CheckFlags@hdr:
  1412                           	opt stack 0
  1413  000064                     CheckMcastFlags@hdr:
  1414                           	opt stack 0
  1415  000064                     EncodeShiftRow@stateTable:
  1416                           	opt stack 0
  1417  000064                     RxDataDone@pData:
  1418                           	opt stack 0
  1419  000064                     memcpy@d1:
  1420                           	opt stack 0
  1421  000064                     memset@p1:
  1422                           	opt stack 0
  1423  000064                     SystemBlockingWaitMs@ms:
  1424                           	opt stack 0
  1425  000064                     RADIO_SetChannelFrequency@frequency:
  1426                           	opt stack 0
  1427  000064                     ValidateFrequency@frequencyNew:
  1428                           	opt stack 0
  1429  000064                     UpdateFrequency@frequencyNew:
  1430                           	opt stack 0
  1431  000064                     LORAWAN_SetDeviceAddress@deviceAddressNew:
  1432                           	opt stack 0
  1433  000064                     UpdateReceiveWindow2Parameters@frequency:
  1434                           	opt stack 0
  1435  000064                     ___lmul@multiplier:
  1436                           	opt stack 0
  1437  000064                     ___lldiv@dividend:
  1438                           	opt stack 0
  1439  000064                     ___llmod@dividend:
  1440                           	opt stack 0
  1441                           
  1442                           ; 4 bytes @ 0x4
  1443  000064                     	ds	1
  1444  000065                     ??_UpdateDataRange:
  1445  000065                     ??_UpdateChannelIdStatus:
  1446  000065                     ??_EncKeySchedule:
  1447  000065                     SwTimerIsRunning@isRunning:
  1448                           	opt stack 0
  1449  000065                     HALSPISend@data:
  1450                           	opt stack 0
  1451  000065                     ValidateDataRate@result:
  1452                           	opt stack 0
  1453  000065                     ValidateTxPower@txPowerNew:
  1454                           	opt stack 0
  1455  000065                     UpdateDLSettings@dlRx2Dr:
  1456                           	opt stack 0
  1457  000065                     ValidateRxOffset@result:
  1458                           	opt stack 0
  1459  000065                     ValidateChannelId@result:
  1460                           	opt stack 0
  1461  000065                     ValidateChannelMaskCntl@channelMaskCntl:
  1462                           	opt stack 0
  1463  000065                     UpdateMinMaxChDataRate@i:
  1464                           	opt stack 0
  1465  000065                     FindSmallestDataRate@found:
  1466                           	opt stack 0
  1467  000065                     flash@x:
  1468                           	opt stack 0
  1469  000065                     ___abdiv@counter:
  1470                           	opt stack 0
  1471                           
  1472                           ; 1 bytes @ 0x5
  1473  000065                     	ds	1
  1474  000066                     ??_TMR1_ReadTimer:
  1475  000066                     ??_TMR1_Initialize:
  1476  000066                     ??_ExecuteDutyCycle:
  1477  000066                     SwTimerSetCallback@callbackParameter:
  1478                           	opt stack 0
  1479  000066                     RADIO_RegisterWrite@value:
  1480                           	opt stack 0
  1481  000066                     RADIO_RegisterRead@reg:
  1482                           	opt stack 0
  1483  000066                     UpdateDataRange@channelId:
  1484                           	opt stack 0
  1485  000066                     UpdateChannelIdStatus@channelId:
  1486                           	opt stack 0
  1487  000066                     ValidateDataRange@result:
  1488                           	opt stack 0
  1489  000066                     ValidateChannelId@channelId:
  1490                           	opt stack 0
  1491  000066                     UpdateDutyCycle@channelId:
  1492                           	opt stack 0
  1493  000066                     ValidateChannelMask@i:
  1494                           	opt stack 0
  1495  000066                     IncludeMacCommandsResponse@pBufferIndex:
  1496                           	opt stack 0
  1497  000066                     FindSmallestDataRate@i:
  1498                           	opt stack 0
  1499  000066                     EncodeShiftRow@temp:
  1500                           	opt stack 0
  1501  000066                     RxDataDone@dataLength:
  1502                           	opt stack 0
  1503  000066                     ___abdiv@sign:
  1504                           	opt stack 0
  1505  000066                     FillSubKey@key:
  1506                           	opt stack 0
  1507  000066                     memcpy@s1:
  1508                           	opt stack 0
  1509  000066                     memset@c:
  1510                           	opt stack 0
  1511                           
  1512                           ; 2 bytes @ 0x6
  1513  000066                     	ds	1
  1514  000067                     SwTimerSetCallback@timerId:
  1515                           	opt stack 0
  1516  000067                     RADIO_RegisterWrite@reg:
  1517                           	opt stack 0
  1518  000067                     RADIO_RegisterRead@readValue:
  1519                           	opt stack 0
  1520  000067                     UpdateDataRange@i:
  1521                           	opt stack 0
  1522  000067                     UpdateChannelIdStatus@i:
  1523                           	opt stack 0
  1524  000067                     ValidateDataRange@dataRangeNew:
  1525                           	opt stack 0
  1526  000067                     IncludeMacCommandsResponse@bIncludeInFopts:
  1527                           	opt stack 0
  1528  000067                     FindSmallestDataRate@dataRate:
  1529                           	opt stack 0
  1530  000067                     RxDataDone@status:
  1531                           	opt stack 0
  1532  000067                     ___abdiv@quotient:
  1533                           	opt stack 0
  1534                           
  1535                           ; 1 bytes @ 0x7
  1536  000067                     	ds	1
  1537  000068                     ??_IncludeMacCommandsResponse:
  1538  000068                     ??_SystemBlockingWaitMs:
  1539  000068                     RADIO_WritePower@ocp:
  1540                           	opt stack 0
  1541  000068                     RADIO_UnhandledInterrupt@modulation:
  1542                           	opt stack 0
  1543  000068                     LORAWAN_SetChannelIdStatus@statusNew:
  1544                           	opt stack 0
  1545  000068                     ValidateFrequency@result:
  1546                           	opt stack 0
  1547  000068                     ValidateDataRange@dataRateMax:
  1548                           	opt stack 0
  1549  000068                     UpdateFrequency@channelId:
  1550                           	opt stack 0
  1551  000068                     FillSubKey@size:
  1552                           	opt stack 0
  1553  000068                     UpdateReceiveWindow2Parameters@dataRate:
  1554                           	opt stack 0
  1555  000068                     UpdateReceiveDelays@delay:
  1556                           	opt stack 0
  1557  000068                     ___abdiv@dividend:
  1558                           	opt stack 0
  1559  000068                     EnableChannels1@channelMask:
  1560                           	opt stack 0
  1561  000068                     TMR1_ReadTimer@readVal:
  1562                           	opt stack 0
  1563  000068                     _EncKeySchedule$3584:
  1564                           	opt stack 0
  1565  000068                     memcpy@n:
  1566                           	opt stack 0
  1567  000068                     memset@n:
  1568                           	opt stack 0
  1569  000068                     ___lmul@multiplicand:
  1570                           	opt stack 0
  1571  000068                     ___lldiv@divisor:
  1572                           	opt stack 0
  1573  000068                     ___llmod@divisor:
  1574                           	opt stack 0
  1575                           
  1576                           ; 4 bytes @ 0x8
  1577  000068                     	ds	1
  1578  000069                     ??_FillSubKey:
  1579  000069                     ??_RADIO_DIO3:
  1580  000069                     ??_RADIO_DIO4:
  1581  000069                     ??_RADIO_DIO5:
  1582  000069                     ?_ExecuteRxTimingSetup:
  1583                           	opt stack 0
  1584  000069                     RADIO_WriteMode@newModulation:
  1585                           	opt stack 0
  1586  000069                     RADIO_WritePower@paDac:
  1587                           	opt stack 0
  1588  000069                     ExecuteDutyCycle@maxDCycle:
  1589                           	opt stack 0
  1590  000069                     ValidateDataRange@dataRateMin:
  1591                           	opt stack 0
  1592  000069                     ExecuteRxTimingSetup@ptr:
  1593                           	opt stack 0
  1594                           
  1595                           ; 2 bytes @ 0x9
  1596  000069                     	ds	1
  1597  00006A                     ?_TMR_SwapTimer:
  1598                           	opt stack 0
  1599  00006A                     ?_TMR_GetDeltaTime:
  1600                           	opt stack 0
  1601  00006A                     RADIO_WriteMode@blocking:
  1602                           	opt stack 0
  1603  00006A                     RADIO_WritePower@power:
  1604                           	opt stack 0
  1605  00006A                     LORAWAN_SetChannelIdStatus@channelId:
  1606                           	opt stack 0
  1607  00006A                     EnableChannels1@channelMaskCntl:
  1608                           	opt stack 0
  1609  00006A                     FillSubKey@carry:
  1610                           	opt stack 0
  1611  00006A                     CountfOptsLength@macCommandLength:
  1612                           	opt stack 0
  1613  00006A                     TMR_SwapTimer@timerVal:
  1614                           	opt stack 0
  1615  00006A                     AESEncode@block:
  1616                           	opt stack 0
  1617  00006A                     memcpy@d:
  1618                           	opt stack 0
  1619  00006A                     memset@p:
  1620                           	opt stack 0
  1621                           
  1622                           ; 2 bytes @ 0xA
  1623  00006A                     	ds	1
  1624  00006B                     RADIO_WriteMode@currentModulation:
  1625                           	opt stack 0
  1626  00006B                     EnableChannels1@channelIndexMin:
  1627                           	opt stack 0
  1628  00006B                     FillSubKey@i:
  1629                           	opt stack 0
  1630  00006B                     ExecuteRxTimingSetup@delay:
  1631                           	opt stack 0
  1632  00006B                     CountfOptsLength@i:
  1633                           	opt stack 0
  1634                           
  1635                           ; 1 bytes @ 0xB
  1636  00006B                     	ds	1
  1637  00006C                     ??_LORAWAN_GetMaxPayloadSize:
  1638  00006C                     RADIO_WriteMode@dioMapping:
  1639                           	opt stack 0
  1640  00006C                     EnableChannels1@channelIndexMax:
  1641                           	opt stack 0
  1642  00006C                     AESEncode@masterKey:
  1643                           	opt stack 0
  1644  00006C                     ___llmod@counter:
  1645                           	opt stack 0
  1646  00006C                     memcpy@s:
  1647                           	opt stack 0
  1648  00006C                     TMR_OverrideRemaining@ticksRemaining:
  1649                           	opt stack 0
  1650  00006C                     ___lmul@product:
  1651                           	opt stack 0
  1652  00006C                     ___lldiv@quotient:
  1653                           	opt stack 0
  1654                           
  1655                           ; 4 bytes @ 0xC
  1656  00006C                     	ds	1
  1657  00006D                     ??_AESEncode:
  1658  00006D                     RADIO_WriteMode@currentMode:
  1659                           	opt stack 0
  1660  00006D                     EnableChannels1@i:
  1661                           	opt stack 0
  1662  00006D                     LORAWAN_GetMaxPayloadSize@macCommandsLength:
  1663                           	opt stack 0
  1664                           
  1665                           ; 1 bytes @ 0xD
  1666  00006D                     	ds	1
  1667  00006E                     ??_TMR_GetDeltaTime:
  1668  00006E                     ?_ExtractMic:
  1669                           	opt stack 0
  1670  00006E                     RADIO_WriteMode@newMode:
  1671                           	opt stack 0
  1672  00006E                     InitDefault868Channels@i:
  1673                           	opt stack 0
  1674  00006E                     InitDefault433Channels@i:
  1675                           	opt stack 0
  1676  00006E                     LORAWAN_GetMaxPayloadSize@result:
  1677                           	opt stack 0
  1678  00006E                     IncludeMacCommandsResponse@i:
  1679                           	opt stack 0
  1680  00006E                     RADIO_SetFSKSyncWord@syncWord:
  1681                           	opt stack 0
  1682  00006E                     EnableChannels@channelMask:
  1683                           	opt stack 0
  1684  00006E                     LORAWAN_SetNetworkSessionKey@networkSessionKeyNew:
  1685                           	opt stack 0
  1686  00006E                     LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew:
  1687                           	opt stack 0
  1688  00006E                     PrepareSessionKeys@sessionKey:
  1689                           	opt stack 0
  1690  00006E                     ExtractMic@buffer:
  1691                           	opt stack 0
  1692  00006E                     AssembleEncryptionBlock@frameCounter:
  1693                           	opt stack 0
  1694                           
  1695                           ; 4 bytes @ 0xE
  1696  00006E                     	ds	1
  1697  00006F                     RADIO_WriteMode@opMode:
  1698                           	opt stack 0
  1699  00006F                     IncludeMacCommandsResponse@bufferIndex:
  1700                           	opt stack 0
  1701                           
  1702                           ; 1 bytes @ 0xF
  1703  00006F                     	ds	1
  1704  000070                     ??_TMR_OverrideRemaining:
  1705  000070                     ?_rand:
  1706                           	opt stack 0
  1707  000070                     ?_RADIO_ReadRandom:
  1708                           	opt stack 0
  1709  000070                     ?_ExecuteNewChannel:
  1710                           	opt stack 0
  1711  000070                     ?_ExecuteRxParamSetupReq:
  1712                           	opt stack 0
  1713  000070                     RADIO_SetFSKSyncWord@syncWordLen:
  1714                           	opt stack 0
  1715  000070                     EnableChannels@channelMaskCntl:
  1716                           	opt stack 0
  1717  000070                     ExtractMic@bufferLength:
  1718                           	opt stack 0
  1719  000070                     ___lldiv@counter:
  1720                           	opt stack 0
  1721  000070                     ExecuteNewChannel@ptr:
  1722                           	opt stack 0
  1723  000070                     ExecuteRxParamSetupReq@ptr:
  1724                           	opt stack 0
  1725  000070                     UpdateCfList@joinAccept:
  1726                           	opt stack 0
  1727  000070                     PrepareSessionKeys@appNonce:
  1728                           	opt stack 0
  1729                           
  1730                           ; 2 bytes @ 0x10
  1731  000070                     	ds	1
  1732  000071                     ?_ExecuteLinkAdr:
  1733                           	opt stack 0
  1734  000071                     ExecuteLinkAdr@ptr:
  1735                           	opt stack 0
  1736  000071                     SwTimerSetTimeout@timeout:
  1737                           	opt stack 0
  1738  000071                     RADIO_WriteFrequency@frequency:
  1739                           	opt stack 0
  1740  000071                     RADIO_WriteFSKFrequencyDeviation@frequencyDeviation:
  1741                           	opt stack 0
  1742  000071                     RADIO_WriteFSKBitRate@bitRate:
  1743                           	opt stack 0
  1744  000071                     ConfigureRadio@freq:
  1745                           	opt stack 0
  1746                           
  1747                           ; 4 bytes @ 0x11
  1748  000071                     	ds	1
  1749  000072                     ??_ExtractMic:
  1750  000072                     ??_UpdateCfList:
  1751  000072                     ?___lwmod:
  1752                           	opt stack 0
  1753  000072                     ExecuteNewChannel@drRange:
  1754                           	opt stack 0
  1755  000072                     AssembleEncryptionBlock@blockId:
  1756                           	opt stack 0
  1757  000072                     TMR_OverrideRemaining@tmrVal:
  1758                           	opt stack 0
  1759  000072                     RADIO_ReadRandom@retVal:
  1760                           	opt stack 0
  1761  000072                     PrepareSessionKeys@networkId:
  1762                           	opt stack 0
  1763  000072                     ___lwmod@dividend:
  1764                           	opt stack 0
  1765  000072                     ExecuteRxParamSetupReq@frequency:
  1766                           	opt stack 0
  1767                           
  1768                           ; 4 bytes @ 0x12
  1769  000072                     	ds	1
  1770  000073                     ??_ExecuteLinkAdr:
  1771  000073                     AssembleEncryptionBlock@firstByte:
  1772                           	opt stack 0
  1773  000073                     ExecuteNewChannel@frequency:
  1774                           	opt stack 0
  1775                           
  1776                           ; 4 bytes @ 0x13
  1777  000073                     	ds	1
  1778  000074                     RADIO_ReadRandom@i:
  1779                           	opt stack 0
  1780  000074                     UpdateCfList@bufferLength:
  1781                           	opt stack 0
  1782  000074                     PrepareSessionKeys@index:
  1783                           	opt stack 0
  1784  000074                     AssembleEncryptionBlock@multicastStatus:
  1785                           	opt stack 0
  1786  000074                     TMR_OverrideRemaining@oldReloadVal:
  1787                           	opt stack 0
  1788  000074                     ExecuteLinkAdr@channelMask:
  1789                           	opt stack 0
  1790  000074                     ___lwmod@divisor:
  1791                           	opt stack 0
  1792  000074                     ExtractMic@mic:
  1793                           	opt stack 0
  1794                           
  1795                           ; 4 bytes @ 0x14
  1796  000074                     	ds	1
  1797  000075                     ??_SwTimerSetTimeout:
  1798  000075                     ConfigureRadio@dataRate:
  1799                           	opt stack 0
  1800  000075                     AssembleEncryptionBlock@dir:
  1801                           	opt stack 0
  1802  000075                     srand@x:
  1803                           	opt stack 0
  1804  000075                     RADIO_WriteFrequency@num_mod:
  1805                           	opt stack 0
  1806  000075                     RADIO_WriteFSKFrequencyDeviation@num:
  1807                           	opt stack 0
  1808  000075                     RADIO_WriteFSKBitRate@num:
  1809                           	opt stack 0
  1810  000075                     UpdateCfList@frequency:
  1811                           	opt stack 0
  1812  000075                     AESEncode@key:
  1813                           	opt stack 0
  1814                           
  1815                           ; 16 bytes @ 0x15
  1816  000075                     	ds	1
  1817  000076                     ExecuteLinkAdr@txPower:
  1818                           	opt stack 0
  1819  000076                     ExecuteRxParamSetupReq@dlSettings:
  1820                           	opt stack 0
  1821  000076                     AssembleEncryptionBlock@bufferIndex:
  1822                           	opt stack 0
  1823  000076                     ___lwmod@counter:
  1824                           	opt stack 0
  1825  000076                     ConfigureRadioTx@freq:
  1826                           	opt stack 0
  1827  000076                     ConfigureRadioRx@freq:
  1828                           	opt stack 0
  1829                           
  1830                           ; 4 bytes @ 0x16
  1831  000076                     	ds	1
  1832  000077                     ?_Random:
  1833                           	opt stack 0
  1834  000077                     ExecuteNewChannel@channelIndex:
  1835                           	opt stack 0
  1836  000077                     ExecuteLinkAdr@redundancy:
  1837                           	opt stack 0
  1838  000077                     Random@max:
  1839                           	opt stack 0
  1840                           
  1841                           ; 2 bytes @ 0x17
  1842  000077                     	ds	2
  1843  000079                     SwTimerSetTimeout@timerId:
  1844                           	opt stack 0
  1845  000079                     ExecuteLinkAdr@dataRate:
  1846                           	opt stack 0
  1847  000079                     SearchAvailableChannel@transmissionType:
  1848                           	opt stack 0
  1849  000079                     UpdateCfList@channelIndex:
  1850                           	opt stack 0
  1851  000079                     RADIO_WriteFrequency@num:
  1852                           	opt stack 0
  1853                           
  1854                           ; 4 bytes @ 0x19
  1855  000079                     	ds	1
  1856  00007A                     ?_MacExecuteCommands:
  1857                           	opt stack 0
  1858  00007A                     ?_SwTimersInterrupt:
  1859                           	opt stack 0
  1860  00007A                     UpdateCfList@i:
  1861                           	opt stack 0
  1862  00007A                     ConfigureRadioTx@dataRate:
  1863                           	opt stack 0
  1864  00007A                     ConfigureRadioRx@dataRate:
  1865                           	opt stack 0
  1866  00007A                     SearchAvailableChannel@channelIndex:
  1867                           	opt stack 0
  1868  00007A                     MacExecuteCommands@buffer:
  1869                           	opt stack 0
  1870                           
  1871                           ; 2 bytes @ 0x1A
  1872  00007A                     	ds	1
  1873  00007B                     ConfigureRadioTx@txPower:
  1874                           	opt stack 0
  1875                           
  1876                           ; 1 bytes @ 0x1B
  1877  00007B                     	ds	1
  1878  00007C                     ??_SearchAvailableChannel:
  1879  00007C                     MacExecuteCommands@fOptsLen:
  1880                           	opt stack 0
  1881                           
  1882                           ; 1 bytes @ 0x1C
  1883  00007C                     	ds	1
  1884  00007D                     ??_MacExecuteCommands:
  1885  00007D                     ??_RADIO_DIO2:
  1886  00007D                     RADIO_Init@radioBuffer:
  1887                           	opt stack 0
  1888  00007D                     RADIO_WriteConfiguration@symbolTimeout:
  1889                           	opt stack 0
  1890                           
  1891                           ; 2 bytes @ 0x1D
  1892  00007D                     	ds	1
  1893  00007E                     RADIO_DIO2@dioMapping:
  1894                           	opt stack 0
  1895                           
  1896                           ; 1 bytes @ 0x1E
  1897  00007E                     	ds	1
  1898  00007F                     ??_RADIO_WriteConfiguration:
  1899  00007F                     MacExecuteCommands@done:
  1900                           	opt stack 0
  1901  00007F                     RADIO_Init@frequency:
  1902                           	opt stack 0
  1903                           
  1904                           ; 4 bytes @ 0x1F
  1905  00007F                     	ds	1
  1906  000080                     SearchAvailableChannel@randomNumberCopy:
  1907                           	opt stack 0
  1908  000080                     MacExecuteCommands@ptr:
  1909                           	opt stack 0
  1910                           
  1911                           ; 2 bytes @ 0x20
  1912  000080                     	ds	1
  1913  000081                     RADIO_WriteConfiguration@i:
  1914                           	opt stack 0
  1915  000081                     SearchAvailableChannel@result:
  1916                           	opt stack 0
  1917                           
  1918                           ; 1 bytes @ 0x21
  1919  000081                     	ds	1
  1920  000082                     SearchAvailableChannel@maxChannels:
  1921                           	opt stack 0
  1922  000082                     SwTimersInterrupt@timeElapsed:
  1923                           	opt stack 0
  1924  000082                     RADIO_WriteConfiguration@tempValue:
  1925                           	opt stack 0
  1926                           
  1927                           ; 4 bytes @ 0x22
  1928  000082                     	ds	1
  1929  000083                     ??_RADIO_Init:
  1930  000083                     SearchAvailableChannel@randomNumber:
  1931                           	opt stack 0
  1932                           
  1933                           ; 1 bytes @ 0x23
  1934  000083                     	ds	1
  1935  000084                     SearchAvailableChannel@i:
  1936                           	opt stack 0
  1937                           
  1938                           ; 1 bytes @ 0x24
  1939  000084                     	ds	1
  1940  000085                     SelectChannelForTransmission@transmissionType:
  1941                           	opt stack 0
  1942  000085                     _AESEncode$3598:
  1943                           	opt stack 0
  1944                           
  1945                           ; 2 bytes @ 0x25
  1946  000085                     	ds	1
  1947  000086                     RADIO_WriteConfiguration@regValue:
  1948                           	opt stack 0
  1949  000086                     SelectChannelForTransmission@result:
  1950                           	opt stack 0
  1951  000086                     SwTimersInterrupt@ticksToNextTimerEvent:
  1952                           	opt stack 0
  1953                           
  1954                           ; 4 bytes @ 0x26
  1955  000086                     	ds	1
  1956  000087                     SelectChannelForTransmission@channelIndex:
  1957                           	opt stack 0
  1958  000087                     _AESEncode$3599:
  1959                           	opt stack 0
  1960                           
  1961                           ; 2 bytes @ 0x27
  1962  000087                     	ds	2
  1963  000089                     _AESEncode$3600:
  1964                           	opt stack 0
  1965                           
  1966                           ; 2 bytes @ 0x29
  1967  000089                     	ds	1
  1968  00008A                     SwTimersInterrupt@i:
  1969                           	opt stack 0
  1970                           
  1971                           ; 1 bytes @ 0x2A
  1972  00008A                     	ds	1
  1973  00008B                     ?_SwTimerReadValue:
  1974                           	opt stack 0
  1975  00008B                     AESEncode@aux:
  1976                           	opt stack 0
  1977                           
  1978                           ; 1 bytes @ 0x2B
  1979  00008B                     	ds	1
  1980  00008C                     AESEncode@aux2:
  1981                           	opt stack 0
  1982                           
  1983                           ; 1 bytes @ 0x2C
  1984  00008C                     	ds	1
  1985  00008D                     AESEncode@aux1:
  1986                           	opt stack 0
  1987                           
  1988                           ; 1 bytes @ 0x2D
  1989  00008D                     	ds	1
  1990  00008E                     AESEncode@aux3:
  1991                           	opt stack 0
  1992                           
  1993                           ; 1 bytes @ 0x2E
  1994  00008E                     	ds	1
  1995  00008F                     AESEncode@i:
  1996                           	opt stack 0
  1997  00008F                     SwTimerReadValue@ticksCount:
  1998                           	opt stack 0
  1999  00008F                     SwTimerStart@ticksRemaining:
  2000                           	opt stack 0
  2001                           
  2002                           ; 4 bytes @ 0x2F
  2003  00008F                     	ds	1
  2004  000090                     AESEncodeLoRa@block:
  2005                           	opt stack 0
  2006                           
  2007                           ; 2 bytes @ 0x30
  2008  000090                     	ds	2
  2009  000092                     AESEncodeLoRa@key:
  2010                           	opt stack 0
  2011                           
  2012                           ; 2 bytes @ 0x32
  2013  000092                     	ds	1
  2014  000093                     SwTimerReadValue@timerId:
  2015                           	opt stack 0
  2016  000093                     SwTimerStart@timerId:
  2017                           	opt stack 0
  2018                           
  2019                           ; 1 bytes @ 0x33
  2020  000093                     	ds	1
  2021  000094                     ??_UpdateRetransmissionAckTimeoutState:
  2022  000094                     ??_StartReTxTimer:
  2023  000094                     ?_RADIO_Transmit:
  2024                           	opt stack 0
  2025  000094                     ?_RADIO_ReceiveStart:
  2026                           	opt stack 0
  2027  000094                     RADIO_Transmit@buffer:
  2028                           	opt stack 0
  2029  000094                     RADIO_ReceiveStart@rxWindowSize:
  2030                           	opt stack 0
  2031  000094                     LORAWAN_LinkCheckConfigure@period:
  2032                           	opt stack 0
  2033  000094                     AESEncodeLoRa@useKey:
  2034                           	opt stack 0
  2035                           
  2036                           ; 16 bytes @ 0x34
  2037  000094                     	ds	2
  2038  000096                     ??_LORAWAN_LinkCheckConfigure:
  2039  000096                     ??_RADIO_ReceiveStart:
  2040  000096                     RADIO_Transmit@bufferLen:
  2041                           	opt stack 0
  2042                           
  2043                           ; 1 bytes @ 0x36
  2044  000096                     	ds	1
  2045  000097                     ??_RADIO_Transmit:
  2046                           
  2047                           ; 1 bytes @ 0x37
  2048  000097                     	ds	1
  2049  000098                     StartReTxTimer@minim:
  2050                           	opt stack 0
  2051                           
  2052                           ; 4 bytes @ 0x38
  2053  000098                     	ds	2
  2054  00009A                     _RADIO_ReceiveStart$749:
  2055                           	opt stack 0
  2056                           
  2057                           ; 4 bytes @ 0x3A
  2058  00009A                     	ds	2
  2059  00009C                     StartReTxTimer@i:
  2060                           	opt stack 0
  2061                           
  2062                           ; 1 bytes @ 0x3C
  2063  00009C                     	ds	2
  2064  00009E                     LORAWAN_TxDone@timeOnAir:
  2065                           	opt stack 0
  2066  00009E                     _LORAWAN_LinkCheckConfigure$2993:
  2067                           	opt stack 0
  2068                           
  2069                           ; 4 bytes @ 0x3E
  2070  00009E                     	ds	1
  2071  00009F                     _RADIO_Transmit$746:
  2072                           	opt stack 0
  2073                           
  2074                           ; 4 bytes @ 0x3F
  2075  00009F                     	ds	1
  2076  0000A0                     ??_LORAWAN_TxDone:
  2077                           
  2078                           ; 1 bytes @ 0x40
  2079  0000A0                     	ds	2
  2080  0000A2                     LORAWAN_LinkCheckConfigure@iCtr:
  2081                           	opt stack 0
  2082                           
  2083                           ; 1 bytes @ 0x42
  2084  0000A2                     	ds	1
  2085  0000A3                     RADIO_Transmit@regValue:
  2086                           	opt stack 0
  2087  0000A3                     LORAWAN_Reset@ismBandNew:
  2088                           	opt stack 0
  2089                           
  2090                           ; 1 bytes @ 0x43
  2091  0000A3                     	ds	1
  2092  0000A4                     RADIO_Transmit@i:
  2093                           	opt stack 0
  2094  0000A4                     LORAWAN_Init@RxPayload:
  2095                           	opt stack 0
  2096  0000A4                     GenerateSubkey@key:
  2097                           	opt stack 0
  2098  0000A4                     ComputeSessionKeys@joinAcceptBuffer:
  2099                           	opt stack 0
  2100  0000A4                     EncryptFRMPayload@buffer:
  2101                           	opt stack 0
  2102                           
  2103                           ; 2 bytes @ 0x44
  2104  0000A4                     	ds	1
  2105  0000A5                     ??_LORAWAN_RxTimeout:
  2106                           
  2107                           ; 1 bytes @ 0x45
  2108  0000A5                     	ds	1
  2109  0000A6                     EncryptFRMPayload@bufferLength:
  2110                           	opt stack 0
  2111  0000A6                     LORAWAN_Init@RxJoinResponse:
  2112                           	opt stack 0
  2113  0000A6                     GenerateSubkey@k1:
  2114                           	opt stack 0
  2115                           
  2116                           ; 2 bytes @ 0x46
  2117  0000A6                     	ds	1
  2118  0000A7                     EncryptFRMPayload@dir:
  2119                           	opt stack 0
  2120                           
  2121                           ; 1 bytes @ 0x47
  2122  0000A7                     	ds	1
  2123  0000A8                     GenerateSubkey@k2:
  2124                           	opt stack 0
  2125  0000A8                     EncryptFRMPayload@frameCounter:
  2126                           	opt stack 0
  2127                           
  2128                           ; 4 bytes @ 0x48
  2129  0000A8                     	ds	1
  2130  0000A9                     LORAWAN_RxTimeout@minim:
  2131                           	opt stack 0
  2132                           
  2133                           ; 4 bytes @ 0x49
  2134  0000A9                     	ds	1
  2135  0000AA                     ??_GenerateSubkey:
  2136                           
  2137                           ; 1 bytes @ 0x4A
  2138  0000AA                     	ds	1
  2139  0000AB                     GenerateSubkey@const_Rb:
  2140                           	opt stack 0
  2141                           
  2142                           ; 16 bytes @ 0x4B
  2143  0000AB                     	ds	1
  2144  0000AC                     EncryptFRMPayload@key:
  2145                           	opt stack 0
  2146                           
  2147                           ; 2 bytes @ 0x4C
  2148  0000AC                     	ds	1
  2149  0000AD                     LORAWAN_RxTimeout@i:
  2150                           	opt stack 0
  2151                           
  2152                           ; 1 bytes @ 0x4D
  2153  0000AD                     	ds	1
  2154  0000AE                     ??_RADIO_DIO1:
  2155  0000AE                     EncryptFRMPayload@macBufferIndex:
  2156                           	opt stack 0
  2157                           
  2158                           ; 1 bytes @ 0x4E
  2159  0000AE                     	ds	1
  2160  0000AF                     RADIO_DIO1@dioMapping:
  2161                           	opt stack 0
  2162  0000AF                     EncryptFRMPayload@bufferToBeEncrypted:
  2163                           	opt stack 0
  2164                           
  2165                           ; 2 bytes @ 0x4F
  2166  0000AF                     	ds	2
  2167  0000B1                     EncryptFRMPayload@multicastStatus:
  2168                           	opt stack 0
  2169                           
  2170                           ; 1 bytes @ 0x51
  2171  0000B1                     	ds	1
  2172  0000B2                     ??_EncryptFRMPayload:
  2173                           
  2174                           ; 1 bytes @ 0x52
  2175  0000B2                     	ds	5
  2176  0000B7                     EncryptFRMPayload@k:
  2177                           	opt stack 0
  2178                           
  2179                           ; 1 bytes @ 0x57
  2180  0000B7                     	ds	1
  2181  0000B8                     EncryptFRMPayload@i:
  2182                           	opt stack 0
  2183                           
  2184                           ; 1 bytes @ 0x58
  2185  0000B8                     	ds	1
  2186  0000B9                     EncryptFRMPayload@j:
  2187                           	opt stack 0
  2188                           
  2189                           ; 1 bytes @ 0x59
  2190  0000B9                     	ds	1
  2191  0000BA                     _LORAWAN_TxDone$1845:
  2192                           	opt stack 0
  2193                           
  2194                           ; 4 bytes @ 0x5A
  2195  0000BA                     	ds	1
  2196  0000BB                     GenerateSubkey@l:
  2197                           	opt stack 0
  2198                           
  2199                           ; 16 bytes @ 0x5B
  2200  0000BB                     	ds	3
  2201  0000BE                     _LORAWAN_TxDone$1846:
  2202                           	opt stack 0
  2203                           
  2204                           ; 4 bytes @ 0x5E
  2205  0000BE                     	ds	4
  2206  0000C2                     LORAWAN_TxDone@found:
  2207                           	opt stack 0
  2208                           
  2209                           ; 1 bytes @ 0x62
  2210  0000C2                     	ds	1
  2211  0000C3                     LORAWAN_TxDone@delta:
  2212                           	opt stack 0
  2213                           
  2214                           ; 4 bytes @ 0x63
  2215  0000C3                     	ds	4
  2216  0000C7                     LORAWAN_TxDone@ticks:
  2217                           	opt stack 0
  2218                           
  2219                           ; 4 bytes @ 0x67
  2220  0000C7                     	ds	4
  2221  0000CB                     GenerateSubkey@i:
  2222                           	opt stack 0
  2223  0000CB                     LORAWAN_TxDone@minim:
  2224                           	opt stack 0
  2225                           
  2226                           ; 4 bytes @ 0x6B
  2227  0000CB                     	ds	1
  2228  0000CC                     AESCmac@key:
  2229                           	opt stack 0
  2230                           
  2231                           ; 2 bytes @ 0x6C
  2232  0000CC                     	ds	2
  2233  0000CE                     AESCmac@output:
  2234                           	opt stack 0
  2235                           
  2236                           ; 2 bytes @ 0x6E
  2237  0000CE                     	ds	1
  2238  0000CF                     LORAWAN_TxDone@i:
  2239                           	opt stack 0
  2240                           
  2241                           ; 1 bytes @ 0x6F
  2242  0000CF                     	ds	1
  2243  0000D0                     ??_RADIO_TxDone:
  2244  0000D0                     ??_RADIO_FSKPacketSent:
  2245  0000D0                     AESCmac@input:
  2246                           	opt stack 0
  2247                           
  2248                           ; 2 bytes @ 0x70
  2249  0000D0                     	ds	2
  2250  0000D2                     AESCmac@size:
  2251                           	opt stack 0
  2252                           
  2253                           ; 1 bytes @ 0x72
  2254  0000D2                     	ds	1
  2255  0000D3                     ??_AESCmac:
  2256                           
  2257                           ; 1 bytes @ 0x73
  2258  0000D3                     	ds	1
  2259  0000D4                     RADIO_TxDone@timeOnAir:
  2260                           	opt stack 0
  2261  0000D4                     RADIO_FSKPacketSent@timeOnAir:
  2262                           	opt stack 0
  2263                           
  2264                           ; 4 bytes @ 0x74
  2265  0000D4                     	ds	4
  2266  0000D8                     _RADIO_TxDone$761:
  2267                           	opt stack 0
  2268  0000D8                     _RADIO_FSKPacketSent$765:
  2269                           	opt stack 0
  2270                           
  2271                           ; 4 bytes @ 0x78
  2272  0000D8                     	ds	2
  2273  0000DA                     ??_AssemblePacket:
  2274  0000DA                     ?_ComputeMic:
  2275                           	opt stack 0
  2276  0000DA                     ComputeMic@key:
  2277                           	opt stack 0
  2278                           
  2279                           ; 2 bytes @ 0x7A
  2280  0000DA                     	ds	2
  2281  0000DC                     RADIO_FSKPacketSent@irqFlags:
  2282                           	opt stack 0
  2283  0000DC                     AssemblePacket@confirmed:
  2284                           	opt stack 0
  2285  0000DC                     ComputeMic@buffer:
  2286                           	opt stack 0
  2287                           
  2288                           ; 2 bytes @ 0x7C
  2289  0000DC                     	ds	1
  2290  0000DD                     AssemblePacket@mhdr:
  2291                           	opt stack 0
  2292                           
  2293                           ; 1 bytes @ 0x7D
  2294  0000DD                     	ds	1
  2295  0000DE                     AssemblePacket@fCtrl:
  2296                           	opt stack 0
  2297  0000DE                     ComputeMic@bufferLength:
  2298                           	opt stack 0
  2299                           
  2300                           ; 1 bytes @ 0x7E
  2301  0000DE                     	ds	1
  2302  0000DF                     AssemblePacket@macCmdIdx:
  2303                           	opt stack 0
  2304  0000DF                     ComputeMic@mic:
  2305                           	opt stack 0
  2306                           
  2307                           ; 4 bytes @ 0x7F
  2308  0000DF                     	ds	1
  2309  0000E0                     AssemblePacket@bufferIndex:
  2310                           	opt stack 0
  2311                           
  2312                           ; 1 bytes @ 0x80
  2313  0000E0                     	ds	1
  2314  0000E1                     LORAWAN_Send@port:
  2315                           	opt stack 0
  2316                           
  2317                           ; 1 bytes @ 0x81
  2318  0000E1                     	ds	1
  2319  0000E2                     LORAWAN_Send@buffer:
  2320                           	opt stack 0
  2321                           
  2322                           ; 2 bytes @ 0x82
  2323  0000E2                     	ds	1
  2324  0000E3                     ??_PrepareJoinRequestFrame:
  2325                           
  2326                           ; 1 bytes @ 0x83
  2327  0000E3                     	ds	1
  2328  0000E4                     LORAWAN_Send@bufferLength:
  2329                           	opt stack 0
  2330                           
  2331                           ; 1 bytes @ 0x84
  2332  0000E4                     	ds	1
  2333  0000E5                     ??_LORAWAN_Send:
  2334  0000E5                     PrepareJoinRequestFrame@mic:
  2335                           	opt stack 0
  2336                           
  2337                           ; 4 bytes @ 0x85
  2338  0000E5                     	ds	1
  2339  0000E6                     LORAWAN_Send@result:
  2340                           	opt stack 0
  2341                           
  2342                           ; 1 bytes @ 0x86
  2343  0000E6                     	ds	1
  2344  0000E7                     LORAWAN_Send@confirmed:
  2345                           	opt stack 0
  2346                           
  2347                           ; 1 bytes @ 0x87
  2348  0000E7                     	ds	1
  2349  0000E8                     ??_LORAWAN_RxDone:
  2350  0000E8                     
  2351                           ; 1 bytes @ 0x88
  2352  0000E8                     	ds	1
  2353  0000E9                     PrepareJoinRequestFrame@mhdr:
  2354                           	opt stack 0
  2355                           
  2356                           ; 1 bytes @ 0x89
  2357  0000E9                     	ds	1
  2358  0000EA                     PrepareJoinRequestFrame@bufferIndex:
  2359                           	opt stack 0
  2360                           
  2361                           ; 1 bytes @ 0x8A
  2362  0000EA                     	ds	1
  2363  0000EB                     PrepareJoinRequestFrame@iCtr:
  2364                           	opt stack 0
  2365                           
  2366                           ; 1 bytes @ 0x8B
  2367  0000EB                     	ds	1
  2368  0000EC                     SwTimersExecute@i:
  2369                           	opt stack 0
  2370  0000EC                     LORAWAN_Join@bufferIndex:
  2371                           	opt stack 0
  2372                           
  2373                           ; 1 bytes @ 0x8C
  2374  0000EC                     	ds	1
  2375  0000ED                     RADIO_RxDone@irqFlags:
  2376                           	opt stack 0
  2377  0000ED                     RADIO_FSKPayloadReady@irqFlags:
  2378                           	opt stack 0
  2379  0000ED                     LORAWAN_Join@result:
  2380                           	opt stack 0
  2381                           
  2382                           ; 1 bytes @ 0x8D
  2383  0000ED                     	ds	1
  2384  0000EE                     RADIO_RxDone@i:
  2385                           	opt stack 0
  2386  0000EE                     RADIO_FSKPayloadReady@i:
  2387                           	opt stack 0
  2388  0000EE                     LORAWAN_Join@activationTypeNew:
  2389                           	opt stack 0
  2390                           
  2391                           ; 1 bytes @ 0x8E
  2392  0000EE                     	ds	1
  2393  0000EF                     ??_RADIO_DIO0:
  2394                           
  2395                           ; 1 bytes @ 0x8F
  2396  0000EF                     	ds	2
  2397  0000F1                     RADIO_DIO0@dioMapping:
  2398                           	opt stack 0
  2399                           
  2400                           ; 1 bytes @ 0x91
  2401  0000F1                     	ds	1
  2402  0000F2                     RADIO_DIO0@opMode:
  2403                           	opt stack 0
  2404                           
  2405                           ; 1 bytes @ 0x92
  2406  0000F2                     	ds	1
  2407  0000F3                     ??_main:
  2408                           
  2409                           ; 1 bytes @ 0x93
  2410  0000F3                     	ds	1
  2411  0000F4                     main@flag:
  2412                           	opt stack 0
  2413                           
  2414                           ; 2 bytes @ 0x94
  2415  0000F4                     	ds	2
  2416  0000F6                     main@x:
  2417                           	opt stack 0
  2418                           
  2419                           ; 2 bytes @ 0x96
  2420  0000F6                     	ds	2
  2421                           tblptru	equ	0xFF8
  2422                           tblptrh	equ	0xFF7
  2423                           tblptrl	equ	0xFF6
  2424                           tablat	equ	0xFF5
  2425                           postinc0	equ	0xFEE
  2426                           wreg	equ	0xFE8
  2427                           postdec2	equ	0xFDD
  2428                           fsr2h	equ	0xFDA
  2429                           fsr2l	equ	0xFD9
  2430                           
  2431                           	psect	cstackCOMRAM
  2432  000001                     __pcstackCOMRAM:
  2433                           	opt stack 0
  2434  000001                     ?i2_TMR1_ReadTimer:
  2435                           	opt stack 0
  2436  000001                     i2TMR1_WriteTimer@timerVal:
  2437                           	opt stack 0
  2438                           
  2439                           ; 2 bytes @ 0x0
  2440  000001                     	ds	2
  2441  000003                     ??i2_TMR1_ReadTimer:
  2442  000003                     
  2443                           ; 1 bytes @ 0x2
  2444  000003                     	ds	2
  2445  000005                     i2TMR1_ReadTimer@readVal:
  2446                           	opt stack 0
  2447                           
  2448                           ; 2 bytes @ 0x4
  2449  000005                     	ds	2
  2450  000007                     ?i2_TMR_SwapTimer:
  2451                           	opt stack 0
  2452  000007                     ?i2_TMR_GetDeltaTime:
  2453                           	opt stack 0
  2454  000007                     i2TMR_SwapTimer@timerVal:
  2455                           	opt stack 0
  2456                           
  2457                           ; 2 bytes @ 0x6
  2458  000007                     	ds	2
  2459  000009                     
  2460                           ; 1 bytes @ 0x8
  2461  000009                     	ds	2
  2462  00000B                     ??i2_TMR_GetDeltaTime:
  2463                           
  2464                           ; 1 bytes @ 0xA
  2465  00000B                     	ds	12
  2466  000017                     ?i2_SwTimersInterrupt:
  2467                           	opt stack 0
  2468                           
  2469                           ; 4 bytes @ 0x16
  2470  000017                     	ds	4
  2471  00001B                     
  2472                           ; 1 bytes @ 0x1A
  2473  00001B                     	ds	4
  2474  00001F                     i2SwTimersInterrupt@timeElapsed:
  2475                           	opt stack 0
  2476                           
  2477                           ; 4 bytes @ 0x1E
  2478  00001F                     	ds	4
  2479  000023                     i2SwTimersInterrupt@ticksToNextTimerEvent:
  2480                           	opt stack 0
  2481                           
  2482                           ; 4 bytes @ 0x22
  2483  000023                     	ds	4
  2484  000027                     i2SwTimersInterrupt@i:
  2485                           	opt stack 0
  2486                           
  2487                           ; 1 bytes @ 0x26
  2488  000027                     	ds	1
  2489  000028                     ??_INTERRUPT_InterruptManager:
  2490                           
  2491                           ; 1 bytes @ 0x27
  2492  000028                     	ds	8
  2493                           tblptru	equ	0xFF8
  2494                           tblptrh	equ	0xFF7
  2495                           tblptrl	equ	0xFF6
  2496                           tablat	equ	0xFF5
  2497                           postinc0	equ	0xFEE
  2498                           wreg	equ	0xFE8
  2499                           postdec2	equ	0xFDD
  2500                           fsr2h	equ	0xFDA
  2501                           fsr2l	equ	0xFD9
  2502                           
  2503 ;;
  2504 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2505 ;;
  2506 ;; *************** function _main *****************
  2507 ;; Defined at:
  2508 ;;		line 61 in file "main.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;		None
  2511 ;; Auto vars:     Size  Location     Type
  2512 ;;  x               2  150[BANK0 ] int 
  2513 ;;  flag            2  148[BANK0 ] int 
  2514 ;; Return value:  Size  Location     Type
  2515 ;;                  1    wreg      void 
  2516 ;; Registers used:
  2517 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+4, btemp+5, btemp
      ++6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2518 ;; Tracked objects:
  2519 ;;		On entry : 0/0
  2520 ;;		On exit  : F/0
  2521 ;;		Unchanged: 0/0
  2522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2524 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2525 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2526 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2527 ;;Total ram usage:        5 bytes
  2528 ;; Hardware stack levels required when called:   19
  2529 ;; This function calls:
  2530 ;;		_LORAWAN_Init
  2531 ;;		_LORAWAN_Join
  2532 ;;		_LORAWAN_Mainloop
  2533 ;;		_LORAWAN_SetApplicationSessionKey
  2534 ;;		_LORAWAN_SetDeviceAddress
  2535 ;;		_LORAWAN_SetNetworkSessionKey
  2536 ;;		_SYSTEM_Initialize
  2537 ;;		_flash
  2538 ;;		_sendPacket
  2539 ;; This function is called by:
  2540 ;;		Startup code after reset
  2541 ;; This function uses a non-reentrant model
  2542 ;;
  2543                           
  2544                           	psect	text0
  2545  00551A                     __ptext0:
  2546                           	opt stack 0
  2547  00551A                     _main:
  2548                           	opt stack 12
  2549                           
  2550                           ;main.c: 64: SYSTEM_Initialize();
  2551                           
  2552                           ; BSR set to: 1
  2553                           ;incstack = 0
  2554  00551A  EC71  F03A         	call	_SYSTEM_Initialize	;wreg free
  2555                           
  2556                           ; BSR set to: 1
  2557                           ;main.c: 67: (INTCONbits.GIE = 1);
  2558  00551E  8EF2               	bsf	intcon,7,c	;volatile
  2559                           
  2560                           ; BSR set to: 1
  2561                           ;main.c: 68: (INTCONbits.PEIE = 1);
  2562  005520  8CF2               	bsf	intcon,6,c	;volatile
  2563                           
  2564                           ; BSR set to: 1
  2565  005522  8E8B               	bsf	3979,7,c	;volatile
  2566                           
  2567                           ; BSR set to: 1
  2568                           ;main.c: 71: LORAWAN_Init(RxDataDone, RxJoinResponse);
  2569  005524  0E20               	movlw	low _RxDataDone
  2570  005526  0100               	movlb	0	; () banked
  2571  005528  6FA4               	movwf	LORAWAN_Init@RxPayload& (0+255),b
  2572  00552A  0E78               	movlw	high _RxDataDone
  2573  00552C  6FA5               	movwf	(LORAWAN_Init@RxPayload+1)& (0+255),b
  2574  00552E  0EC6               	movlw	low _RxJoinResponse
  2575  005530  6FA6               	movwf	LORAWAN_Init@RxJoinResponse& (0+255),b
  2576  005532  0E77               	movlw	high _RxJoinResponse
  2577  005534  6FA7               	movwf	(LORAWAN_Init@RxJoinResponse+1)& (0+255),b
  2578  005536  EC41  F033         	call	_LORAWAN_Init	;wreg free
  2579                           
  2580                           ;main.c: 72: LORAWAN_SetNetworkSessionKey(nwkSKey);
  2581  00553A  0EDD               	movlw	low _nwkSKey
  2582  00553C  0100               	movlb	0	; () banked
  2583  00553E  6F6E               	movwf	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew& (0+255),b
  2584  005540  0E01               	movlw	high _nwkSKey
  2585  005542  6F6F               	movwf	(LORAWAN_SetNetworkSessionKey@networkSessionKeyNew+1)& (0+255),b
  2586  005544  EC8C  F038         	call	_LORAWAN_SetNetworkSessionKey	;wreg free
  2587                           
  2588                           ;main.c: 73: LORAWAN_SetApplicationSessionKey(appSKey);
  2589  005548  0ECD               	movlw	low _appSKey
  2590  00554A  0100               	movlb	0	; () banked
  2591  00554C  6F6E               	movwf	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew& (0+255),b
  2592  00554E  0E01               	movlw	high _appSKey
  2593  005550  6F6F               	movwf	(LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew+1)& (0+255),b
  2594  005552  ECA1  F038         	call	_LORAWAN_SetApplicationSessionKey	;wreg free
  2595                           
  2596                           ;main.c: 74: LORAWAN_SetDeviceAddress(devAddr);
  2597  005556  0E80               	movlw	128
  2598  005558  0100               	movlb	0	; () banked
  2599  00555A  6F64               	movwf	LORAWAN_SetDeviceAddress@deviceAddressNew& (0+255),b
  2600  00555C  0E65               	movlw	101
  2601  00555E  6F65               	movwf	(LORAWAN_SetDeviceAddress@deviceAddressNew+1)& (0+255),b
  2602  005560  0E00               	movlw	0
  2603  005562  6B66               	clrf	(LORAWAN_SetDeviceAddress@deviceAddressNew+2)& (0+255),b
  2604  005564  6B67               	clrf	(LORAWAN_SetDeviceAddress@deviceAddressNew+3)& (0+255),b
  2605  005566  ECC3  F03A         	call	_LORAWAN_SetDeviceAddress	;wreg free
  2606                           
  2607                           ; BSR set to: 2
  2608                           ;main.c: 75: LORAWAN_Join(ABP);
  2609  00556A  0E01               	movlw	1
  2610  00556C  ECEF  F02D         	call	_LORAWAN_Join
  2611                           
  2612                           ;main.c: 77: while(JoinedServer == 0){
  2613  005570  D003               	goto	l16128
  2614  005572                     l16124:
  2615                           
  2616                           ; BSR set to: 1
  2617                           ;main.c: 78: LORAWAN_Mainloop();
  2618  005572  EC01  F037         	call	_LORAWAN_Mainloop	;wreg free
  2619  005576  9E8B               	bcf	3979,7,c	;volatile
  2620  005578                     l16128:
  2621  005578  0101               	movlb	1	; () banked
  2622  00557A  5172               	movf	_JoinedServer& (0+255),w,b
  2623  00557C  E0FA               	bz	l16124
  2624                           
  2625                           ; BSR set to: 1
  2626                           ;main.c: 80: }
  2627                           ;main.c: 82: int flag = 5;
  2628  00557E  0100               	movlb	0	; () banked
  2629  005580  6BF5               	clrf	(main@flag+1)& (0+255),b
  2630  005582  0E05               	movlw	5
  2631  005584  6FF4               	movwf	main@flag& (0+255),b
  2632  005586                     l16132:
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;main.c: 85: {
  2636                           ;main.c: 86: LORAWAN_Mainloop();
  2637  005586  EC01  F037         	call	_LORAWAN_Mainloop	;wreg free
  2638                           
  2639                           ;main.c: 87: flag++;
  2640  00558A  0100               	movlb	0	; () banked
  2641  00558C  4BF4               	infsnz	main@flag& (0+255),f,b
  2642  00558E  2BF5               	incf	(main@flag+1)& (0+255),f,b
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;main.c: 89: if(flag > 10){
  2646  005590  BFF5               	btfsc	(main@flag+1)& (0+255),7,b
  2647  005592  D00B               	goto	l16144
  2648  005594  51F5               	movf	(main@flag+1)& (0+255),w,b
  2649  005596  E103               	bnz	u19770
  2650  005598  0E0B               	movlw	11
  2651  00559A  5DF4               	subwf	main@flag& (0+255),w,b
  2652  00559C  E306               	bnc	l16144
  2653  00559E                     u19770:
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;main.c: 90: flag = 0;
  2657  00559E  6BF4               	clrf	main@flag& (0+255),b
  2658  0055A0  6BF5               	clrf	(main@flag+1)& (0+255),b
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;main.c: 91: flash();
  2662  0055A2  EC79  F035         	call	_flash	;wreg free
  2663                           
  2664                           ; BSR set to: 0
  2665                           ;main.c: 92: sendPacket();
  2666  0055A6  EC9A  F039         	call	_sendPacket	;wreg free
  2667  0055AA                     l16144:
  2668                           
  2669                           ;main.c: 93: }
  2670                           ;main.c: 94: for(int x = 0; x < 1000; x++) _delay((unsigned long)((1)*(16000000/4000.0))
      +                          );
  2671  0055AA  0100               	movlb	0	; () banked
  2672  0055AC  6BF6               	clrf	main@x& (0+255),b
  2673  0055AE  6BF7               	clrf	(main@x+1)& (0+255),b
  2674  0055B0                     l16150:
  2675                           
  2676                           ; BSR set to: 0
  2677  0055B0  0E06               	movlw	6
  2678  0055B2  6FF3               	movwf	??_main& (0+255),b
  2679  0055B4  0E30               	movlw	48
  2680  0055B6                     u19797:
  2681  0055B6  2EE8               	decfsz	wreg,f,c
  2682  0055B8  D7FE               	goto	u19797
  2683  0055BA  2FF3               	decfsz	??_main& (0+255),f,b
  2684  0055BC  D7FC               	goto	u19797
  2685  0055BE  D000               	nop2	
  2686  0055C0  0100               	movlb	0	; () banked
  2687  0055C2  4BF6               	infsnz	main@x& (0+255),f,b
  2688  0055C4  2BF7               	incf	(main@x+1)& (0+255),f,b
  2689  0055C6  BFF7               	btfsc	(main@x+1)& (0+255),7,b
  2690  0055C8  D7F3               	goto	l16150
  2691  0055CA  0EE8               	movlw	232
  2692  0055CC  5DF6               	subwf	main@x& (0+255),w,b
  2693  0055CE  0E03               	movlw	3
  2694  0055D0  59F7               	subwfb	(main@x+1)& (0+255),w,b
  2695  0055D2  E2D9               	bc	l16132
  2696  0055D4  D7ED               	goto	l16150
  2697  0055D6                     __end_of_main:
  2698                           	opt stack 0
  2699                           tblptru	equ	0xFF8
  2700                           tblptrh	equ	0xFF7
  2701                           tblptrl	equ	0xFF6
  2702                           tablat	equ	0xFF5
  2703                           intcon	equ	0xFF2
  2704                           postinc0	equ	0xFEE
  2705                           wreg	equ	0xFE8
  2706                           postdec2	equ	0xFDD
  2707                           fsr2h	equ	0xFDA
  2708                           fsr2l	equ	0xFD9
  2709                           
  2710 ;; *************** function _sendPacket *****************
  2711 ;; Defined at:
  2712 ;;		line 99 in file "main.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;		None
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;		None
  2717 ;; Return value:  Size  Location     Type
  2718 ;;                  1    wreg      void 
  2719 ;; Registers used:
  2720 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2721 ;; Tracked objects:
  2722 ;;		On entry : F/0
  2723 ;;		On exit  : D/0
  2724 ;;		Unchanged: 0/0
  2725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2730 ;;Total ram usage:        0 bytes
  2731 ;; Hardware stack levels used:    1
  2732 ;; Hardware stack levels required when called:   14
  2733 ;; This function calls:
  2734 ;;		_LORAWAN_Send
  2735 ;; This function is called by:
  2736 ;;		_main
  2737 ;; This function uses a non-reentrant model
  2738 ;;
  2739                           
  2740                           	psect	text1
  2741  007334                     __ptext1:
  2742                           	opt stack 0
  2743  007334                     _sendPacket:
  2744                           	opt stack 16
  2745                           
  2746                           ; BSR set to: 0
  2747                           ;main.c: 101: payload[0] = 0xFF00;
  2748                           
  2749                           ; BSR set to: 0
  2750                           ;incstack = 0
  2751  007334  0101               	movlb	1	; () banked
  2752  007336  69BC               	setf	(_payload+1)& (0+255),b
  2753  007338  0E00               	movlw	0
  2754  00733A  6FBB               	movwf	_payload& (0+255),b
  2755                           
  2756                           ; BSR set to: 1
  2757                           ;main.c: 104: count++;
  2758  00733C  0E02               	movlw	2
  2759  00733E  0100               	movlb	0	; () banked
  2760  007340  6FE1               	movwf	LORAWAN_Send@port& (0+255),b
  2761  007342  0EBB               	movlw	low _payload
  2762  007344  6FE2               	movwf	LORAWAN_Send@buffer& (0+255),b
  2763  007346  0E01               	movlw	high _payload
  2764  007348  6FE3               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
  2765  00734A  0E02               	movlw	2
  2766  00734C  6FE4               	movwf	LORAWAN_Send@bufferLength& (0+255),b
  2767  00734E  0E00               	movlw	0
  2768  007350  EF2E  F02A         	goto	_LORAWAN_Send
  2769  007354                     __end_of_sendPacket:
  2770                           	opt stack 0
  2771                           tblptru	equ	0xFF8
  2772                           tblptrh	equ	0xFF7
  2773                           tblptrl	equ	0xFF6
  2774                           tablat	equ	0xFF5
  2775                           intcon	equ	0xFF2
  2776                           postinc0	equ	0xFEE
  2777                           wreg	equ	0xFE8
  2778                           postdec2	equ	0xFDD
  2779                           fsr2h	equ	0xFDA
  2780                           fsr2l	equ	0xFD9
  2781                           
  2782 ;; *************** function _flash *****************
  2783 ;; Defined at:
  2784 ;;		line 117 in file "main.c"
  2785 ;; Parameters:    Size  Location     Type
  2786 ;;		None
  2787 ;; Auto vars:     Size  Location     Type
  2788 ;;  x               1    5[BANK0 ] unsigned char 
  2789 ;; Return value:  Size  Location     Type
  2790 ;;                  1    wreg      void 
  2791 ;; Registers used:
  2792 ;;		wreg, status,2, status,0
  2793 ;; Tracked objects:
  2794 ;;		On entry : F/0
  2795 ;;		On exit  : F/0
  2796 ;;		Unchanged: 0/0
  2797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2799 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2800 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2801 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2802 ;;Total ram usage:        2 bytes
  2803 ;; Hardware stack levels used:    1
  2804 ;; Hardware stack levels required when called:    7
  2805 ;; This function calls:
  2806 ;;		Nothing
  2807 ;; This function is called by:
  2808 ;;		_main
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           	psect	text2
  2813  006AF2                     __ptext2:
  2814                           	opt stack 0
  2815  006AF2                     _flash:
  2816                           	opt stack 23
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;main.c: 118: for(uint8_t x = 0; x < 10; x++){
  2820                           
  2821                           ;incstack = 0
  2822  006AF2  6B65               	clrf	flash@x& (0+255),b
  2823  006AF4                     l15576:
  2824  006AF4  0E01               	movlw	1
  2825                           
  2826                           ; BSR set to: 0
  2827  006AF6  AE8B               	btfss	3979,7,c	;volatile
  2828  006AF8  0E00               	movlw	0
  2829  006AFA  0AFF               	xorlw	255
  2830  006AFC  6F64               	movwf	??_flash& (0+255),b
  2831  006AFE  3364               	rrcf	??_flash& (0+255),f,b
  2832  006B00  3364               	rrcf	??_flash& (0+255),f,b
  2833  006B02  508B               	movf	3979,w,c	;volatile
  2834  006B04  1964               	xorwf	??_flash& (0+255),w,b
  2835  006B06  0B7F               	andlw	-129
  2836  006B08  1964               	xorwf	??_flash& (0+255),w,b
  2837  006B0A  6E8B               	movwf	3979,c	;volatile
  2838                           
  2839                           ; BSR set to: 0
  2840                           ;main.c: 120: _delay((unsigned long)((25)*(16000000/4000.0)));
  2841  006B0C  0E82               	movlw	130
  2842  006B0E  6F64               	movwf	??_flash& (0+255),b
  2843  006B10  0EDE               	movlw	222
  2844  006B12                     u19807:
  2845  006B12  2EE8               	decfsz	wreg,f,c
  2846  006B14  D7FE               	goto	u19807
  2847  006B16  2F64               	decfsz	??_flash& (0+255),f,b
  2848  006B18  D7FC               	goto	u19807
  2849                           
  2850                           ;main.c: 121: _delay((unsigned long)((25)*(16000000/4000.0)));
  2851  006B1A  0E82               	movlw	130
  2852  006B1C  0100               	movlb	0	; () banked
  2853  006B1E  6F64               	movwf	??_flash& (0+255),b
  2854  006B20  0EDE               	movlw	222
  2855  006B22                     u19817:
  2856  006B22  2EE8               	decfsz	wreg,f,c
  2857  006B24  D7FE               	goto	u19817
  2858  006B26  2F64               	decfsz	??_flash& (0+255),f,b
  2859  006B28  D7FC               	goto	u19817
  2860  006B2A  0100               	movlb	0	; () banked
  2861  006B2C  2B65               	incf	flash@x& (0+255),f,b
  2862                           
  2863                           ; BSR set to: 0
  2864  006B2E  0E09               	movlw	9
  2865  006B30  6565               	cpfsgt	flash@x& (0+255),b
  2866  006B32  D7E0               	goto	l15576
  2867                           
  2868                           ; BSR set to: 0
  2869                           
  2870                           ;main.c: 122: }
  2871                           ;main.c: 123: do { LATCbits.LATC7 = 0; } while(0);
  2872  006B34  9E8B               	bcf	3979,7,c	;volatile
  2873                           
  2874                           ; BSR set to: 0
  2875  006B36  0C09               	retlw	9	;funcret
  2876  006B38                     __end_of_flash:
  2877                           	opt stack 0
  2878                           tblptru	equ	0xFF8
  2879                           tblptrh	equ	0xFF7
  2880                           tblptrl	equ	0xFF6
  2881                           tablat	equ	0xFF5
  2882                           intcon	equ	0xFF2
  2883                           postinc0	equ	0xFEE
  2884                           wreg	equ	0xFE8
  2885                           postdec2	equ	0xFDD
  2886                           fsr2h	equ	0xFDA
  2887                           fsr2l	equ	0xFD9
  2888                           
  2889 ;; *************** function _SYSTEM_Initialize *****************
  2890 ;; Defined at:
  2891 ;;		line 113 in file "mcc_generated_files/mcc.c"
  2892 ;; Parameters:    Size  Location     Type
  2893 ;;		None
  2894 ;; Auto vars:     Size  Location     Type
  2895 ;;		None
  2896 ;; Return value:  Size  Location     Type
  2897 ;;                  1    wreg      void 
  2898 ;; Registers used:
  2899 ;;		wreg, status,2, status,0, cstack
  2900 ;; Tracked objects:
  2901 ;;		On entry : 0/0
  2902 ;;		On exit  : F/1
  2903 ;;		Unchanged: 0/0
  2904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2909 ;;Total ram usage:        0 bytes
  2910 ;; Hardware stack levels used:    1
  2911 ;; Hardware stack levels required when called:   10
  2912 ;; This function calls:
  2913 ;;		_EXT_INT_Initialize
  2914 ;;		_INTERRUPT_Initialize
  2915 ;;		_LORAWAN_PlatformInit
  2916 ;;		_OSCILLATOR_Initialize
  2917 ;;		_PIN_MANAGER_Initialize
  2918 ;;		_SPI_Initialize
  2919 ;;		_TMR1_Initialize
  2920 ;; This function is called by:
  2921 ;;		_main
  2922 ;; This function uses a non-reentrant model
  2923 ;;
  2924                           
  2925                           	psect	text3
  2926  0074E2                     __ptext3:
  2927                           	opt stack 0
  2928  0074E2                     _SYSTEM_Initialize:
  2929                           	opt stack 20
  2930                           
  2931                           ;mcc.c: 116: INTERRUPT_Initialize();
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;incstack = 0
  2935  0074E2  ECFD  F03B         	call	_INTERRUPT_Initialize	;wreg free
  2936                           
  2937                           ;mcc.c: 117: PIN_MANAGER_Initialize();
  2938  0074E6  ECBF  F035         	call	_PIN_MANAGER_Initialize	;wreg free
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;mcc.c: 118: OSCILLATOR_Initialize();
  2942  0074EA  EC66  F03B         	call	_OSCILLATOR_Initialize	;wreg free
  2943                           
  2944                           ; BSR set to: 0
  2945                           ;mcc.c: 119: SPI_Initialize();
  2946  0074EE  EC60  F03B         	call	_SPI_Initialize	;wreg free
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;mcc.c: 120: EXT_INT_Initialize();
  2950  0074F2  EC9C  F035         	call	_EXT_INT_Initialize	;wreg free
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;mcc.c: 121: TMR1_Initialize();
  2954  0074F6  EC59  F037         	call	_TMR1_Initialize	;wreg free
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;mcc.c: 122: LORAWAN_PlatformInit();
  2958  0074FA  EFAA  F039         	goto	_LORAWAN_PlatformInit	;wreg free
  2959  0074FE                     __end_of_SYSTEM_Initialize:
  2960                           	opt stack 0
  2961                           tblptru	equ	0xFF8
  2962                           tblptrh	equ	0xFF7
  2963                           tblptrl	equ	0xFF6
  2964                           tablat	equ	0xFF5
  2965                           intcon	equ	0xFF2
  2966                           postinc0	equ	0xFEE
  2967                           wreg	equ	0xFE8
  2968                           postdec2	equ	0xFDD
  2969                           fsr2h	equ	0xFDA
  2970                           fsr2l	equ	0xFD9
  2971                           
  2972 ;; *************** function _TMR1_Initialize *****************
  2973 ;; Defined at:
  2974 ;;		line 63 in file "mcc_generated_files/tmr1.c"
  2975 ;; Parameters:    Size  Location     Type
  2976 ;;		None
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;		None
  2979 ;; Return value:  Size  Location     Type
  2980 ;;                  1    wreg      void 
  2981 ;; Registers used:
  2982 ;;		wreg, status,2, status,0, cstack
  2983 ;; Tracked objects:
  2984 ;;		On entry : F/0
  2985 ;;		On exit  : F/0
  2986 ;;		Unchanged: 0/0
  2987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2990 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2991 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2992 ;;Total ram usage:        2 bytes
  2993 ;; Hardware stack levels used:    1
  2994 ;; Hardware stack levels required when called:    8
  2995 ;; This function calls:
  2996 ;;		_TMR1_SetInterruptHandler
  2997 ;;		_TMR1_StartTimer
  2998 ;; This function is called by:
  2999 ;;		_SYSTEM_Initialize
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           	psect	text4
  3004  006EB2                     __ptext4:
  3005                           	opt stack 0
  3006  006EB2                     _TMR1_Initialize:
  3007                           	opt stack 21
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;tmr1.c: 68: T1CON = 0x34;
  3011                           
  3012                           ; BSR set to: 1
  3013                           ;incstack = 0
  3014  006EB2  0E34               	movlw	52
  3015  006EB4  6ECD               	movwf	4045,c	;volatile
  3016                           
  3017                           ; BSR set to: 0
  3018                           ;tmr1.c: 71: T1GCON = 0x00;
  3019  006EB6  6AAA               	clrf	4010,c	;volatile
  3020                           
  3021                           ;tmr1.c: 74: TMR1H = 0x0B;
  3022  006EB8  0E0B               	movlw	11
  3023  006EBA  6ECF               	movwf	4047,c	;volatile
  3024                           
  3025                           ;tmr1.c: 77: TMR1L = 0xDC;
  3026  006EBC  0EDC               	movlw	220
  3027  006EBE  6ECE               	movwf	4046,c	;volatile
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;tmr1.c: 80: timer1ReloadVal=(TMR1H << 8) | TMR1L;
  3031  006EC0  50CE               	movf	4046,w,c	;volatile
  3032  006EC2  CFCF F066          	movff	4047,??_TMR1_Initialize	;volatile
  3033  006EC6  6B67               	clrf	(??_TMR1_Initialize+1)& (0+255),b
  3034  006EC8  C066  F067         	movff	??_TMR1_Initialize,??_TMR1_Initialize+1
  3035  006ECC  6B66               	clrf	??_TMR1_Initialize& (0+255),b
  3036  006ECE  1166               	iorwf	??_TMR1_Initialize& (0+255),w,b
  3037  006ED0  6E5E               	movwf	_timer1ReloadVal,c	;volatile
  3038  006ED2  5167               	movf	(??_TMR1_Initialize+1)& (0+255),w,b
  3039  006ED4  6E5F               	movwf	_timer1ReloadVal+1,c	;volatile
  3040                           
  3041                           ; BSR set to: 0
  3042                           ;tmr1.c: 83: PIR1bits.TMR1IF = 0;
  3043  006ED6  909E               	bcf	3998,0,c	;volatile
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;tmr1.c: 86: PIE1bits.TMR1IE = 1;
  3047  006ED8  809D               	bsf	3997,0,c	;volatile
  3048                           
  3049                           ; BSR set to: 0
  3050                           ;tmr1.c: 89: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  3051  006EDA  0E22               	movlw	low _TMR1_DefaultInterruptHandler
  3052  006EDC  6F64               	movwf	TMR1_SetInterruptHandler@InterruptHandler& (0+255),b
  3053  006EDE  0E78               	movlw	high _TMR1_DefaultInterruptHandler
  3054  006EE0  6F65               	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  3055  006EE2  EC8A  F03B         	call	_TMR1_SetInterruptHandler	;wreg free
  3056                           
  3057                           ; BSR set to: 0
  3058                           ;tmr1.c: 92: TMR1_StartTimer();
  3059  006EE6  EFFB  F03B         	goto	_TMR1_StartTimer	;wreg free
  3060  006EEA                     __end_of_TMR1_Initialize:
  3061                           	opt stack 0
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           intcon	equ	0xFF2
  3067                           postinc0	equ	0xFEE
  3068                           wreg	equ	0xFE8
  3069                           postdec2	equ	0xFDD
  3070                           fsr2h	equ	0xFDA
  3071                           fsr2l	equ	0xFD9
  3072                           
  3073 ;; *************** function _TMR1_StartTimer *****************
  3074 ;; Defined at:
  3075 ;;		line 95 in file "mcc_generated_files/tmr1.c"
  3076 ;; Parameters:    Size  Location     Type
  3077 ;;		None
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;		None
  3080 ;; Return value:  Size  Location     Type
  3081 ;;                  1    wreg      void 
  3082 ;; Registers used:
  3083 ;;		None
  3084 ;; Tracked objects:
  3085 ;;		On entry : F/0
  3086 ;;		On exit  : F/0
  3087 ;;		Unchanged: F/0
  3088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3093 ;;Total ram usage:        0 bytes
  3094 ;; Hardware stack levels used:    1
  3095 ;; Hardware stack levels required when called:    7
  3096 ;; This function calls:
  3097 ;;		Nothing
  3098 ;; This function is called by:
  3099 ;;		_TMR1_Initialize
  3100 ;; This function uses a non-reentrant model
  3101 ;;
  3102                           
  3103                           	psect	text5
  3104  0077F6                     __ptext5:
  3105                           	opt stack 0
  3106  0077F6                     _TMR1_StartTimer:
  3107                           	opt stack 21
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;tmr1.c: 98: T1CONbits.TMR1ON = 1;
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;incstack = 0
  3114  0077F6  80CD               	bsf	4045,0,c	;volatile
  3115                           
  3116                           ; BSR set to: 0
  3117  0077F8  0012               	return		;funcret
  3118  0077FA                     __end_of_TMR1_StartTimer:
  3119                           	opt stack 0
  3120                           tblptru	equ	0xFF8
  3121                           tblptrh	equ	0xFF7
  3122                           tblptrl	equ	0xFF6
  3123                           tablat	equ	0xFF5
  3124                           intcon	equ	0xFF2
  3125                           postinc0	equ	0xFEE
  3126                           wreg	equ	0xFE8
  3127                           postdec2	equ	0xFDD
  3128                           fsr2h	equ	0xFDA
  3129                           fsr2l	equ	0xFD9
  3130                           
  3131 ;; *************** function _SPI_Initialize *****************
  3132 ;; Defined at:
  3133 ;;		line 63 in file "mcc_generated_files/spi.c"
  3134 ;; Parameters:    Size  Location     Type
  3135 ;;		None
  3136 ;; Auto vars:     Size  Location     Type
  3137 ;;		None
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  1    wreg      void 
  3140 ;; Registers used:
  3141 ;;		wreg, status,2
  3142 ;; Tracked objects:
  3143 ;;		On entry : F/0
  3144 ;;		On exit  : F/0
  3145 ;;		Unchanged: F/0
  3146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3151 ;;Total ram usage:        0 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; Hardware stack levels required when called:    7
  3154 ;; This function calls:
  3155 ;;		Nothing
  3156 ;; This function is called by:
  3157 ;;		_SYSTEM_Initialize
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           	psect	text6
  3162  0076C0                     __ptext6:
  3163                           	opt stack 0
  3164  0076C0                     _SPI_Initialize:
  3165                           	opt stack 22
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;spi.c: 68: SSPSTAT = 0x40;
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;incstack = 0
  3172  0076C0  0E40               	movlw	64
  3173  0076C2  6EC7               	movwf	4039,c	;volatile
  3174                           
  3175                           ;spi.c: 71: SSPCON1 = 0x20;
  3176  0076C4  0E20               	movlw	32
  3177  0076C6  6EC6               	movwf	4038,c	;volatile
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;spi.c: 74: SSPADD = 0x00;
  3181  0076C8  6AC8               	clrf	4040,c	;volatile
  3182                           
  3183                           ; BSR set to: 0
  3184  0076CA  0012               	return		;funcret
  3185  0076CC                     __end_of_SPI_Initialize:
  3186                           	opt stack 0
  3187                           tblptru	equ	0xFF8
  3188                           tblptrh	equ	0xFF7
  3189                           tblptrl	equ	0xFF6
  3190                           tablat	equ	0xFF5
  3191                           intcon	equ	0xFF2
  3192                           postinc0	equ	0xFEE
  3193                           wreg	equ	0xFE8
  3194                           postdec2	equ	0xFDD
  3195                           fsr2h	equ	0xFDA
  3196                           fsr2l	equ	0xFD9
  3197                           
  3198 ;; *************** function _PIN_MANAGER_Initialize *****************
  3199 ;; Defined at:
  3200 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;		None
  3203 ;; Auto vars:     Size  Location     Type
  3204 ;;		None
  3205 ;; Return value:  Size  Location     Type
  3206 ;;                  1    wreg      void 
  3207 ;; Registers used:
  3208 ;;		wreg, status,2, status,0, cstack
  3209 ;; Tracked objects:
  3210 ;;		On entry : 0/0
  3211 ;;		On exit  : F/0
  3212 ;;		Unchanged: 0/0
  3213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3218 ;;Total ram usage:        0 bytes
  3219 ;; Hardware stack levels used:    1
  3220 ;; Hardware stack levels required when called:    8
  3221 ;; This function calls:
  3222 ;;		_IOCB4_SetInterruptHandler
  3223 ;; This function is called by:
  3224 ;;		_SYSTEM_Initialize
  3225 ;; This function uses a non-reentrant model
  3226 ;;
  3227                           
  3228                           	psect	text7
  3229  006B7E                     __ptext7:
  3230                           	opt stack 0
  3231  006B7E                     _PIN_MANAGER_Initialize:
  3232                           	opt stack 21
  3233                           
  3234                           ;pin_manager.c: 57: LATE = 0x00;
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;incstack = 0
  3238  006B7E  6A8D               	clrf	3981,c	;volatile
  3239                           
  3240                           ;pin_manager.c: 58: LATD = 0x00;
  3241  006B80  6A8C               	clrf	3980,c	;volatile
  3242                           
  3243                           ;pin_manager.c: 59: LATA = 0x00;
  3244  006B82  6A89               	clrf	3977,c	;volatile
  3245                           
  3246                           ;pin_manager.c: 60: LATF = 0x00;
  3247  006B84  6A8E               	clrf	3982,c	;volatile
  3248                           
  3249                           ;pin_manager.c: 61: LATB = 0x00;
  3250  006B86  6A8A               	clrf	3978,c	;volatile
  3251                           
  3252                           ;pin_manager.c: 62: LATG = 0x00;
  3253  006B88  6A8F               	clrf	3983,c	;volatile
  3254                           
  3255                           ;pin_manager.c: 63: LATC = 0x00;
  3256  006B8A  6A8B               	clrf	3979,c	;volatile
  3257                           
  3258                           ;pin_manager.c: 68: TRISE = 0xF7;
  3259  006B8C  0EF7               	movlw	247
  3260  006B8E  6E96               	movwf	3990,c	;volatile
  3261                           
  3262                           ;pin_manager.c: 69: TRISF = 0xFF;
  3263  006B90  6897               	setf	3991,c	;volatile
  3264                           
  3265                           ;pin_manager.c: 70: TRISA = 0xEF;
  3266  006B92  0EEF               	movlw	239
  3267  006B94  6E92               	movwf	3986,c	;volatile
  3268                           
  3269                           ;pin_manager.c: 71: TRISG = 0x1F;
  3270  006B96  0E1F               	movlw	31
  3271  006B98  6E98               	movwf	3992,c	;volatile
  3272                           
  3273                           ;pin_manager.c: 72: TRISB = 0xFF;
  3274  006B9A  6893               	setf	3987,c	;volatile
  3275                           
  3276                           ;pin_manager.c: 73: TRISC = 0x57;
  3277  006B9C  0E57               	movlw	87
  3278  006B9E  6E94               	movwf	3988,c	;volatile
  3279                           
  3280                           ;pin_manager.c: 74: TRISD = 0xF7;
  3281  006BA0  0EF7               	movlw	247
  3282  006BA2  6E95               	movwf	3989,c	;volatile
  3283                           
  3284                           ;pin_manager.c: 79: ANCON0 = 0xFF;
  3285  006BA4  010F               	movlb	15	; () banked
  3286  006BA6  695D               	setf	93,b	;volatile
  3287                           
  3288                           ;pin_manager.c: 80: ANCON1 = 0x78;
  3289  006BA8  0E78               	movlw	120
  3290  006BAA  6F5C               	movwf	92,b	;volatile
  3291                           
  3292                           ; BSR set to: 15
  3293                           ;pin_manager.c: 85: WPUB = 0xFF;
  3294  006BAC  695B               	setf	91,b	;volatile
  3295                           
  3296                           ; BSR set to: 15
  3297                           ;pin_manager.c: 93: IOCBbits.IOCB4 = 1;
  3298  006BAE  895A               	bsf	90,4,b	;volatile
  3299                           
  3300                           ; BSR set to: 15
  3301                           ;pin_manager.c: 96: IOCB4_SetInterruptHandler(IOCB4_DefaultInterruptHandler);
  3302  006BB0  0E24               	movlw	low _IOCB4_DefaultInterruptHandler
  3303  006BB2  0100               	movlb	0	; () banked
  3304  006BB4  6F64               	movwf	IOCB4_SetInterruptHandler@InterruptHandler& (0+255),b
  3305  006BB6  0E78               	movlw	high _IOCB4_DefaultInterruptHandler
  3306  006BB8  6F65               	movwf	(IOCB4_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  3307  006BBA  EC8F  F03B         	call	_IOCB4_SetInterruptHandler	;wreg free
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;pin_manager.c: 99: INTCONbits.RBIE = 1;
  3311  006BBE  86F2               	bsf	intcon,3,c	;volatile
  3312                           
  3313                           ; BSR set to: 0
  3314  006BC0  0012               	return		;funcret
  3315  006BC2                     __end_of_PIN_MANAGER_Initialize:
  3316                           	opt stack 0
  3317                           tblptru	equ	0xFF8
  3318                           tblptrh	equ	0xFF7
  3319                           tblptrl	equ	0xFF6
  3320                           tablat	equ	0xFF5
  3321                           intcon	equ	0xFF2
  3322                           postinc0	equ	0xFEE
  3323                           wreg	equ	0xFE8
  3324                           postdec2	equ	0xFDD
  3325                           fsr2h	equ	0xFDA
  3326                           fsr2l	equ	0xFD9
  3327                           
  3328 ;; *************** function _OSCILLATOR_Initialize *****************
  3329 ;; Defined at:
  3330 ;;		line 125 in file "mcc_generated_files/mcc.c"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;		None
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;		None
  3335 ;; Return value:  Size  Location     Type
  3336 ;;                  1    wreg      void 
  3337 ;; Registers used:
  3338 ;;		wreg, status,2
  3339 ;; Tracked objects:
  3340 ;;		On entry : F/0
  3341 ;;		On exit  : F/0
  3342 ;;		Unchanged: F/0
  3343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3348 ;;Total ram usage:        0 bytes
  3349 ;; Hardware stack levels used:    1
  3350 ;; Hardware stack levels required when called:    7
  3351 ;; This function calls:
  3352 ;;		Nothing
  3353 ;; This function is called by:
  3354 ;;		_SYSTEM_Initialize
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           	psect	text8
  3359  0076CC                     __ptext8:
  3360                           	opt stack 0
  3361  0076CC                     _OSCILLATOR_Initialize:
  3362                           	opt stack 22
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;mcc.c: 128: OSCCON = 0x70;
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;incstack = 0
  3369  0076CC  0E70               	movlw	112
  3370  0076CE  6ED3               	movwf	4051,c	;volatile
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;mcc.c: 130: OSCCON2 = 0x00;
  3374  0076D0  6AD2               	clrf	4050,c	;volatile
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;mcc.c: 132: OSCTUNE = 0x00;
  3378  0076D2  6A9B               	clrf	3995,c	;volatile
  3379                           
  3380                           ; BSR set to: 0
  3381                           ;mcc.c: 134: REFOCON = 0x00;
  3382  0076D4  6A9A               	clrf	3994,c	;volatile
  3383                           
  3384                           ; BSR set to: 0
  3385  0076D6  0012               	return		;funcret
  3386  0076D8                     __end_of_OSCILLATOR_Initialize:
  3387                           	opt stack 0
  3388                           tblptru	equ	0xFF8
  3389                           tblptrh	equ	0xFF7
  3390                           tblptrl	equ	0xFF6
  3391                           tablat	equ	0xFF5
  3392                           intcon	equ	0xFF2
  3393                           postinc0	equ	0xFEE
  3394                           wreg	equ	0xFE8
  3395                           postdec2	equ	0xFDD
  3396                           fsr2h	equ	0xFDA
  3397                           fsr2l	equ	0xFD9
  3398                           
  3399 ;; *************** function _LORAWAN_PlatformInit *****************
  3400 ;; Defined at:
  3401 ;;		line 72 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  3402 ;; Parameters:    Size  Location     Type
  3403 ;;		None
  3404 ;; Auto vars:     Size  Location     Type
  3405 ;;		None
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  1    wreg      void 
  3408 ;; Registers used:
  3409 ;;		wreg, status,2, status,0, cstack
  3410 ;; Tracked objects:
  3411 ;;		On entry : F/0
  3412 ;;		On exit  : F/1
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3419 ;;Total ram usage:        0 bytes
  3420 ;; Hardware stack levels used:    1
  3421 ;; Hardware stack levels required when called:    9
  3422 ;; This function calls:
  3423 ;;		_DIO0_ISR_Lora_Init
  3424 ;;		_DIO1_ISR_Lora_Init
  3425 ;;		_DIO2_ISR_Lora_Init
  3426 ;;		_DIO3_ISR_Lora_Init
  3427 ;;		_DIO4_ISR_Lora_Init
  3428 ;;		_DIO5_ISR_Lora_Init
  3429 ;;		_SystemTimerInit
  3430 ;;		_TMR_ISR_Lora_Init
  3431 ;; This function is called by:
  3432 ;;		_SYSTEM_Initialize
  3433 ;; This function uses a non-reentrant model
  3434 ;;
  3435                           
  3436                           	psect	text9
  3437  007354                     __ptext9:
  3438                           	opt stack 0
  3439  007354                     _LORAWAN_PlatformInit:
  3440                           	opt stack 20
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;lorawan_init.c: 74: TMR_ISR_Lora_Init();
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;incstack = 0
  3447  007354  EC6C  F03B         	call	_TMR_ISR_Lora_Init	;wreg free
  3448                           
  3449                           ;lorawan_init.c: 75: DIO0_ISR_Lora_Init();
  3450  007358  EC7E  F03B         	call	_DIO0_ISR_Lora_Init	;wreg free
  3451                           
  3452                           ;lorawan_init.c: 76: DIO1_ISR_Lora_Init();
  3453  00735C  EC78  F03B         	call	_DIO1_ISR_Lora_Init	;wreg free
  3454                           
  3455                           ;lorawan_init.c: 77: DIO2_ISR_Lora_Init();
  3456  007360  EC72  F03B         	call	_DIO2_ISR_Lora_Init	;wreg free
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;lorawan_init.c: 78: DIO3_ISR_Lora_Init();
  3460  007364  EC0E  F03C         	call	_DIO3_ISR_Lora_Init	;wreg free
  3461                           
  3462                           ; BSR set to: 0
  3463                           ;lorawan_init.c: 79: DIO4_ISR_Lora_Init();
  3464  007368  EC0D  F03C         	call	_DIO4_ISR_Lora_Init	;wreg free
  3465                           
  3466                           ;lorawan_init.c: 80: DIO5_ISR_Lora_Init();
  3467  00736C  ECE0  F03B         	call	_DIO5_ISR_Lora_Init	;wreg free
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;lorawan_init.c: 81: SystemTimerInit();
  3471  007370  EFDD  F03B         	goto	_SystemTimerInit	;wreg free
  3472  007374                     __end_of_LORAWAN_PlatformInit:
  3473                           	opt stack 0
  3474                           tblptru	equ	0xFF8
  3475                           tblptrh	equ	0xFF7
  3476                           tblptrl	equ	0xFF6
  3477                           tablat	equ	0xFF5
  3478                           intcon	equ	0xFF2
  3479                           postinc0	equ	0xFEE
  3480                           wreg	equ	0xFE8
  3481                           postdec2	equ	0xFDD
  3482                           fsr2h	equ	0xFDA
  3483                           fsr2l	equ	0xFD9
  3484                           
  3485 ;; *************** function _TMR_ISR_Lora_Init *****************
  3486 ;; Defined at:
  3487 ;;		line 54 in file "mcc_generated_files/LoRaWAN/tmr_lora_addons.c"
  3488 ;; Parameters:    Size  Location     Type
  3489 ;;		None
  3490 ;; Auto vars:     Size  Location     Type
  3491 ;;		None
  3492 ;; Return value:  Size  Location     Type
  3493 ;;                  1    wreg      void 
  3494 ;; Registers used:
  3495 ;;		wreg, status,2, status,0, cstack
  3496 ;; Tracked objects:
  3497 ;;		On entry : F/0
  3498 ;;		On exit  : F/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3505 ;;Total ram usage:        0 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    8
  3508 ;; This function calls:
  3509 ;;		_TMR1_SetInterruptHandler
  3510 ;; This function is called by:
  3511 ;;		_LORAWAN_PlatformInit
  3512 ;; This function uses a non-reentrant model
  3513 ;;
  3514                           
  3515                           	psect	text10
  3516  0076D8                     __ptext10:
  3517                           	opt stack 0
  3518  0076D8                     _TMR_ISR_Lora_Init:
  3519                           	opt stack 20
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;tmr_lora_addons.c: 56: TMR1_SetInterruptHandler(TMR_ISR_lora);
  3523                           
  3524                           ; BSR set to: 1
  3525                           ;incstack = 0
  3526  0076D8  0ECA               	movlw	low _TMR_ISR_lora
  3527  0076DA  6F64               	movwf	TMR1_SetInterruptHandler@InterruptHandler& (0+255),b
  3528  0076DC  0E69               	movlw	high _TMR_ISR_lora
  3529  0076DE  6F65               	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  3530  0076E0  EF8A  F03B         	goto	_TMR1_SetInterruptHandler	;wreg free
  3531  0076E4                     __end_of_TMR_ISR_Lora_Init:
  3532                           	opt stack 0
  3533                           tblptru	equ	0xFF8
  3534                           tblptrh	equ	0xFF7
  3535                           tblptrl	equ	0xFF6
  3536                           tablat	equ	0xFF5
  3537                           intcon	equ	0xFF2
  3538                           postinc0	equ	0xFEE
  3539                           wreg	equ	0xFE8
  3540                           postdec2	equ	0xFDD
  3541                           fsr2h	equ	0xFDA
  3542                           fsr2l	equ	0xFD9
  3543                           
  3544 ;; *************** function _TMR1_SetInterruptHandler *****************
  3545 ;; Defined at:
  3546 ;;		line 185 in file "mcc_generated_files/tmr1.c"
  3547 ;; Parameters:    Size  Location     Type
  3548 ;;  InterruptHan    2    4[BANK0 ] PTR void 
  3549 ;;		 -> TMR1_DefaultInterruptHandler(1), TMR_ISR_lora(1), 
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;		None
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  1    wreg      void 
  3554 ;; Registers used:
  3555 ;;		wreg, status,2, status,0
  3556 ;; Tracked objects:
  3557 ;;		On entry : F/0
  3558 ;;		On exit  : F/0
  3559 ;;		Unchanged: F/0
  3560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3561 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3564 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3565 ;;Total ram usage:        2 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:    7
  3568 ;; This function calls:
  3569 ;;		Nothing
  3570 ;; This function is called by:
  3571 ;;		_TMR_ISR_Lora_Init
  3572 ;;		_TMR1_Initialize
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           	psect	text11
  3577  007714                     __ptext11:
  3578                           	opt stack 0
  3579  007714                     _TMR1_SetInterruptHandler:
  3580                           	opt stack 21
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;tmr1.c: 186: TMR1_InterruptHandler = InterruptHandler;
  3584                           
  3585                           ; BSR set to: 0
  3586                           ;incstack = 0
  3587  007714  C064  F1F5         	movff	TMR1_SetInterruptHandler@InterruptHandler,_TMR1_InterruptHandler
  3588  007718  C065  F1F6         	movff	TMR1_SetInterruptHandler@InterruptHandler+1,_TMR1_InterruptHandler+1
  3589                           
  3590                           ; BSR set to: 0
  3591  00771C  0012               	return		;funcret
  3592  00771E                     __end_of_TMR1_SetInterruptHandler:
  3593                           	opt stack 0
  3594                           tblptru	equ	0xFF8
  3595                           tblptrh	equ	0xFF7
  3596                           tblptrl	equ	0xFF6
  3597                           tablat	equ	0xFF5
  3598                           intcon	equ	0xFF2
  3599                           postinc0	equ	0xFEE
  3600                           wreg	equ	0xFE8
  3601                           postdec2	equ	0xFDD
  3602                           fsr2h	equ	0xFDA
  3603                           fsr2l	equ	0xFD9
  3604                           
  3605 ;; *************** function _SystemTimerInit *****************
  3606 ;; Defined at:
  3607 ;;		line 135 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
  3608 ;; Parameters:    Size  Location     Type
  3609 ;;		None
  3610 ;; Auto vars:     Size  Location     Type
  3611 ;;		None
  3612 ;; Return value:  Size  Location     Type
  3613 ;;                  1    wreg      void 
  3614 ;; Registers used:
  3615 ;;		None
  3616 ;; Tracked objects:
  3617 ;;		On entry : F/0
  3618 ;;		On exit  : F/1
  3619 ;;		Unchanged: 0/0
  3620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3625 ;;Total ram usage:        0 bytes
  3626 ;; Hardware stack levels used:    1
  3627 ;; Hardware stack levels required when called:    7
  3628 ;; This function calls:
  3629 ;;		Nothing
  3630 ;; This function is called by:
  3631 ;;		_LORAWAN_PlatformInit
  3632 ;; This function uses a non-reentrant model
  3633 ;;
  3634                           
  3635                           	psect	text12
  3636  0077BA                     __ptext12:
  3637                           	opt stack 0
  3638  0077BA                     _SystemTimerInit:
  3639                           	opt stack 21
  3640                           
  3641                           ; BSR set to: 0
  3642                           ;sw_timer.c: 137: allocatedTimers = 0;
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;incstack = 0
  3646  0077BA  0101               	movlb	1	; () banked
  3647  0077BC  6B73               	clrf	_allocatedTimers& (0+255),b	;volatile
  3648                           
  3649                           ; BSR set to: 1
  3650  0077BE  0012               	return		;funcret
  3651  0077C0                     __end_of_SystemTimerInit:
  3652                           	opt stack 0
  3653                           tblptru	equ	0xFF8
  3654                           tblptrh	equ	0xFF7
  3655                           tblptrl	equ	0xFF6
  3656                           tablat	equ	0xFF5
  3657                           intcon	equ	0xFF2
  3658                           postinc0	equ	0xFEE
  3659                           wreg	equ	0xFE8
  3660                           postdec2	equ	0xFDD
  3661                           fsr2h	equ	0xFDA
  3662                           fsr2l	equ	0xFD9
  3663                           
  3664 ;; *************** function _DIO5_ISR_Lora_Init *****************
  3665 ;; Defined at:
  3666 ;;		line 67 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  3667 ;; Parameters:    Size  Location     Type
  3668 ;;		None
  3669 ;; Auto vars:     Size  Location     Type
  3670 ;;		None
  3671 ;; Return value:  Size  Location     Type
  3672 ;;                  1    wreg      void 
  3673 ;; Registers used:
  3674 ;;		wreg, status,2, status,0, cstack
  3675 ;; Tracked objects:
  3676 ;;		On entry : F/0
  3677 ;;		On exit  : F/0
  3678 ;;		Unchanged: 0/0
  3679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3684 ;;Total ram usage:        0 bytes
  3685 ;; Hardware stack levels used:    1
  3686 ;; Hardware stack levels required when called:    8
  3687 ;; This function calls:
  3688 ;;		_INT0_SetInterruptHandler
  3689 ;; This function is called by:
  3690 ;;		_LORAWAN_PlatformInit
  3691 ;; This function uses a non-reentrant model
  3692 ;;
  3693                           
  3694                           	psect	text13
  3695  0077C0                     __ptext13:
  3696                           	opt stack 0
  3697  0077C0                     _DIO5_ISR_Lora_Init:
  3698                           	opt stack 20
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;lorawan_init.c: 69: INT0_SetInterruptHandler(DIO5_ISR_Lora);
  3702                           
  3703                           ; BSR set to: 1
  3704                           ;incstack = 0
  3705  0077C0  6B64               	clrf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
  3706  0077C2  6B65               	clrf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  3707  0077C4  0C00               	retlw	0	;wreg free
  3708  0077C6                     __end_of_DIO5_ISR_Lora_Init:
  3709                           	opt stack 0
  3710                           tblptru	equ	0xFF8
  3711                           tblptrh	equ	0xFF7
  3712                           tblptrl	equ	0xFF6
  3713                           tablat	equ	0xFF5
  3714                           intcon	equ	0xFF2
  3715                           postinc0	equ	0xFEE
  3716                           wreg	equ	0xFE8
  3717                           postdec2	equ	0xFDD
  3718                           fsr2h	equ	0xFDA
  3719                           fsr2l	equ	0xFD9
  3720                           
  3721 ;; *************** function _DIO4_ISR_Lora_Init *****************
  3722 ;; Defined at:
  3723 ;;		line 63 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  3724 ;; Parameters:    Size  Location     Type
  3725 ;;		None
  3726 ;; Auto vars:     Size  Location     Type
  3727 ;;		None
  3728 ;; Return value:  Size  Location     Type
  3729 ;;                  1    wreg      void 
  3730 ;; Registers used:
  3731 ;;		None
  3732 ;; Tracked objects:
  3733 ;;		On entry : F/0
  3734 ;;		On exit  : F/0
  3735 ;;		Unchanged: F/0
  3736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3741 ;;Total ram usage:        0 bytes
  3742 ;; Hardware stack levels used:    1
  3743 ;; Hardware stack levels required when called:    7
  3744 ;; This function calls:
  3745 ;;		Nothing
  3746 ;; This function is called by:
  3747 ;;		_LORAWAN_PlatformInit
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           	psect	text14
  3752  00781A                     __ptext14:
  3753                           	opt stack 0
  3754  00781A                     _DIO4_ISR_Lora_Init:
  3755                           	opt stack 21
  3756                           
  3757                           ; BSR set to: 0
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;incstack = 0
  3761  00781A  0012               	return		;funcret
  3762  00781C                     __end_of_DIO4_ISR_Lora_Init:
  3763                           	opt stack 0
  3764                           tblptru	equ	0xFF8
  3765                           tblptrh	equ	0xFF7
  3766                           tblptrl	equ	0xFF6
  3767                           tablat	equ	0xFF5
  3768                           intcon	equ	0xFF2
  3769                           postinc0	equ	0xFEE
  3770                           wreg	equ	0xFE8
  3771                           postdec2	equ	0xFDD
  3772                           fsr2h	equ	0xFDA
  3773                           fsr2l	equ	0xFD9
  3774                           
  3775 ;; *************** function _DIO3_ISR_Lora_Init *****************
  3776 ;; Defined at:
  3777 ;;		line 59 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  3778 ;; Parameters:    Size  Location     Type
  3779 ;;		None
  3780 ;; Auto vars:     Size  Location     Type
  3781 ;;		None
  3782 ;; Return value:  Size  Location     Type
  3783 ;;                  1    wreg      void 
  3784 ;; Registers used:
  3785 ;;		None
  3786 ;; Tracked objects:
  3787 ;;		On entry : F/0
  3788 ;;		On exit  : F/0
  3789 ;;		Unchanged: F/0
  3790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3795 ;;Total ram usage:        0 bytes
  3796 ;; Hardware stack levels used:    1
  3797 ;; Hardware stack levels required when called:    7
  3798 ;; This function calls:
  3799 ;;		Nothing
  3800 ;; This function is called by:
  3801 ;;		_LORAWAN_PlatformInit
  3802 ;; This function uses a non-reentrant model
  3803 ;;
  3804                           
  3805                           	psect	text15
  3806  00781C                     __ptext15:
  3807                           	opt stack 0
  3808  00781C                     _DIO3_ISR_Lora_Init:
  3809                           	opt stack 21
  3810                           
  3811                           ; BSR set to: 0
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;incstack = 0
  3815  00781C  0012               	return		;funcret
  3816  00781E                     __end_of_DIO3_ISR_Lora_Init:
  3817                           	opt stack 0
  3818                           tblptru	equ	0xFF8
  3819                           tblptrh	equ	0xFF7
  3820                           tblptrl	equ	0xFF6
  3821                           tablat	equ	0xFF5
  3822                           intcon	equ	0xFF2
  3823                           postinc0	equ	0xFEE
  3824                           wreg	equ	0xFE8
  3825                           postdec2	equ	0xFDD
  3826                           fsr2h	equ	0xFDA
  3827                           fsr2l	equ	0xFD9
  3828                           
  3829 ;; *************** function _DIO2_ISR_Lora_Init *****************
  3830 ;; Defined at:
  3831 ;;		line 54 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;		None
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;		None
  3836 ;; Return value:  Size  Location     Type
  3837 ;;                  1    wreg      void 
  3838 ;; Registers used:
  3839 ;;		wreg, status,2, status,0, cstack
  3840 ;; Tracked objects:
  3841 ;;		On entry : F/0
  3842 ;;		On exit  : F/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3849 ;;Total ram usage:        0 bytes
  3850 ;; Hardware stack levels used:    1
  3851 ;; Hardware stack levels required when called:    8
  3852 ;; This function calls:
  3853 ;;		_IOCB4_SetInterruptHandler
  3854 ;; This function is called by:
  3855 ;;		_LORAWAN_PlatformInit
  3856 ;; This function uses a non-reentrant model
  3857 ;;
  3858                           
  3859                           	psect	text16
  3860  0076E4                     __ptext16:
  3861                           	opt stack 0
  3862  0076E4                     _DIO2_ISR_Lora_Init:
  3863                           	opt stack 20
  3864                           
  3865                           ; BSR set to: 0
  3866                           ;lorawan_init.c: 56: IOCB4_SetInterruptHandler(DIO2_ISR_Lora);
  3867                           
  3868                           ; BSR set to: 0
  3869                           ;incstack = 0
  3870  0076E4  0E0E               	movlw	low _DIO2_ISR_Lora
  3871  0076E6  6F64               	movwf	IOCB4_SetInterruptHandler@InterruptHandler& (0+255),b
  3872  0076E8  0E78               	movlw	high _DIO2_ISR_Lora
  3873  0076EA  6F65               	movwf	(IOCB4_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  3874  0076EC  EF8F  F03B         	goto	_IOCB4_SetInterruptHandler	;wreg free
  3875  0076F0                     __end_of_DIO2_ISR_Lora_Init:
  3876                           	opt stack 0
  3877                           tblptru	equ	0xFF8
  3878                           tblptrh	equ	0xFF7
  3879                           tblptrl	equ	0xFF6
  3880                           tablat	equ	0xFF5
  3881                           intcon	equ	0xFF2
  3882                           postinc0	equ	0xFEE
  3883                           wreg	equ	0xFE8
  3884                           postdec2	equ	0xFDD
  3885                           fsr2h	equ	0xFDA
  3886                           fsr2l	equ	0xFD9
  3887                           
  3888 ;; *************** function _IOCB4_SetInterruptHandler *****************
  3889 ;; Defined at:
  3890 ;;		line 133 in file "mcc_generated_files/pin_manager.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;  InterruptHan    2    4[BANK0 ] PTR void 
  3893 ;;		 -> DIO2_ISR_Lora(1), IOCB4_DefaultInterruptHandler(1), 
  3894 ;; Auto vars:     Size  Location     Type
  3895 ;;		None
  3896 ;; Return value:  Size  Location     Type
  3897 ;;                  1    wreg      void 
  3898 ;; Registers used:
  3899 ;;		wreg, status,2, status,0
  3900 ;; Tracked objects:
  3901 ;;		On entry : F/0
  3902 ;;		On exit  : F/0
  3903 ;;		Unchanged: F/0
  3904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3905 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3908 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3909 ;;Total ram usage:        2 bytes
  3910 ;; Hardware stack levels used:    1
  3911 ;; Hardware stack levels required when called:    7
  3912 ;; This function calls:
  3913 ;;		Nothing
  3914 ;; This function is called by:
  3915 ;;		_PIN_MANAGER_Initialize
  3916 ;;		_DIO2_ISR_Lora_Init
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           	psect	text17
  3921  00771E                     __ptext17:
  3922                           	opt stack 0
  3923  00771E                     _IOCB4_SetInterruptHandler:
  3924                           	opt stack 21
  3925                           
  3926                           ; BSR set to: 0
  3927                           ;pin_manager.c: 134: IOCB4_InterruptHandler = InterruptHandler;
  3928                           
  3929                           ; BSR set to: 0
  3930                           ;incstack = 0
  3931  00771E  C064  F1F3         	movff	IOCB4_SetInterruptHandler@InterruptHandler,_IOCB4_InterruptHandler
  3932  007722  C065  F1F4         	movff	IOCB4_SetInterruptHandler@InterruptHandler+1,_IOCB4_InterruptHandler+1
  3933                           
  3934                           ; BSR set to: 0
  3935  007726  0012               	return		;funcret
  3936  007728                     __end_of_IOCB4_SetInterruptHandler:
  3937                           	opt stack 0
  3938                           tblptru	equ	0xFF8
  3939                           tblptrh	equ	0xFF7
  3940                           tblptrl	equ	0xFF6
  3941                           tablat	equ	0xFF5
  3942                           intcon	equ	0xFF2
  3943                           postinc0	equ	0xFEE
  3944                           wreg	equ	0xFE8
  3945                           postdec2	equ	0xFDD
  3946                           fsr2h	equ	0xFDA
  3947                           fsr2l	equ	0xFD9
  3948                           
  3949 ;; *************** function _DIO1_ISR_Lora_Init *****************
  3950 ;; Defined at:
  3951 ;;		line 49 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  3952 ;; Parameters:    Size  Location     Type
  3953 ;;		None
  3954 ;; Auto vars:     Size  Location     Type
  3955 ;;		None
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  1    wreg      void 
  3958 ;; Registers used:
  3959 ;;		wreg, status,2, status,0, cstack
  3960 ;; Tracked objects:
  3961 ;;		On entry : F/0
  3962 ;;		On exit  : F/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3968 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3969 ;;Total ram usage:        0 bytes
  3970 ;; Hardware stack levels used:    1
  3971 ;; Hardware stack levels required when called:    8
  3972 ;; This function calls:
  3973 ;;		_INT2_SetInterruptHandler
  3974 ;; This function is called by:
  3975 ;;		_LORAWAN_PlatformInit
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           	psect	text18
  3980  0076F0                     __ptext18:
  3981                           	opt stack 0
  3982  0076F0                     _DIO1_ISR_Lora_Init:
  3983                           	opt stack 20
  3984                           
  3985                           ; BSR set to: 0
  3986                           ;lorawan_init.c: 51: INT2_SetInterruptHandler(DIO1_ISR_Lora);
  3987                           
  3988                           ; BSR set to: 0
  3989                           ;incstack = 0
  3990  0076F0  0E12               	movlw	low _DIO1_ISR_Lora
  3991  0076F2  6F64               	movwf	INT2_SetInterruptHandler@InterruptHandler& (0+255),b
  3992  0076F4  0E78               	movlw	high _DIO1_ISR_Lora
  3993  0076F6  6F65               	movwf	(INT2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  3994  0076F8  EF99  F03B         	goto	_INT2_SetInterruptHandler	;wreg free
  3995  0076FC                     __end_of_DIO1_ISR_Lora_Init:
  3996                           	opt stack 0
  3997                           tblptru	equ	0xFF8
  3998                           tblptrh	equ	0xFF7
  3999                           tblptrl	equ	0xFF6
  4000                           tablat	equ	0xFF5
  4001                           intcon	equ	0xFF2
  4002                           postinc0	equ	0xFEE
  4003                           wreg	equ	0xFE8
  4004                           postdec2	equ	0xFDD
  4005                           fsr2h	equ	0xFDA
  4006                           fsr2l	equ	0xFD9
  4007                           
  4008 ;; *************** function _DIO0_ISR_Lora_Init *****************
  4009 ;; Defined at:
  4010 ;;		line 44 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4011 ;; Parameters:    Size  Location     Type
  4012 ;;		None
  4013 ;; Auto vars:     Size  Location     Type
  4014 ;;		None
  4015 ;; Return value:  Size  Location     Type
  4016 ;;                  1    wreg      void 
  4017 ;; Registers used:
  4018 ;;		wreg, status,2, status,0, cstack
  4019 ;; Tracked objects:
  4020 ;;		On entry : F/0
  4021 ;;		On exit  : F/0
  4022 ;;		Unchanged: 0/0
  4023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4027 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4028 ;;Total ram usage:        0 bytes
  4029 ;; Hardware stack levels used:    1
  4030 ;; Hardware stack levels required when called:    8
  4031 ;; This function calls:
  4032 ;;		_INT1_SetInterruptHandler
  4033 ;; This function is called by:
  4034 ;;		_LORAWAN_PlatformInit
  4035 ;; This function uses a non-reentrant model
  4036 ;;
  4037                           
  4038                           	psect	text19
  4039  0076FC                     __ptext19:
  4040                           	opt stack 0
  4041  0076FC                     _DIO0_ISR_Lora_Init:
  4042                           	opt stack 20
  4043                           
  4044                           ; BSR set to: 0
  4045                           ;lorawan_init.c: 46: INT1_SetInterruptHandler(DIO0_ISR_Lora);
  4046                           
  4047                           ; BSR set to: 0
  4048                           ;incstack = 0
  4049  0076FC  0E16               	movlw	low _DIO0_ISR_Lora
  4050  0076FE  6F64               	movwf	INT1_SetInterruptHandler@InterruptHandler& (0+255),b
  4051  007700  0E78               	movlw	high _DIO0_ISR_Lora
  4052  007702  6F65               	movwf	(INT1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4053  007704  EF9E  F03B         	goto	_INT1_SetInterruptHandler	;wreg free
  4054  007708                     __end_of_DIO0_ISR_Lora_Init:
  4055                           	opt stack 0
  4056                           tblptru	equ	0xFF8
  4057                           tblptrh	equ	0xFF7
  4058                           tblptrl	equ	0xFF6
  4059                           tablat	equ	0xFF5
  4060                           intcon	equ	0xFF2
  4061                           postinc0	equ	0xFEE
  4062                           wreg	equ	0xFE8
  4063                           postdec2	equ	0xFDD
  4064                           fsr2h	equ	0xFDA
  4065                           fsr2l	equ	0xFD9
  4066                           
  4067 ;; *************** function _INTERRUPT_Initialize *****************
  4068 ;; Defined at:
  4069 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;		None
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;		None
  4074 ;; Return value:  Size  Location     Type
  4075 ;;                  1    wreg      void 
  4076 ;; Registers used:
  4077 ;;		None
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4087 ;;Total ram usage:        0 bytes
  4088 ;; Hardware stack levels used:    1
  4089 ;; Hardware stack levels required when called:    7
  4090 ;; This function calls:
  4091 ;;		Nothing
  4092 ;; This function is called by:
  4093 ;;		_SYSTEM_Initialize
  4094 ;; This function uses a non-reentrant model
  4095 ;;
  4096                           
  4097                           	psect	text20
  4098  0077FA                     __ptext20:
  4099                           	opt stack 0
  4100  0077FA                     _INTERRUPT_Initialize:
  4101                           	opt stack 22
  4102                           
  4103                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;incstack = 0
  4107  0077FA  9ED0               	bcf	4048,7,c	;volatile
  4108  0077FC  0012               	return		;funcret
  4109  0077FE                     __end_of_INTERRUPT_Initialize:
  4110                           	opt stack 0
  4111                           tblptru	equ	0xFF8
  4112                           tblptrh	equ	0xFF7
  4113                           tblptrl	equ	0xFF6
  4114                           tablat	equ	0xFF5
  4115                           intcon	equ	0xFF2
  4116                           postinc0	equ	0xFEE
  4117                           wreg	equ	0xFE8
  4118                           postdec2	equ	0xFDD
  4119                           fsr2h	equ	0xFDA
  4120                           fsr2l	equ	0xFD9
  4121                           
  4122 ;; *************** function _EXT_INT_Initialize *****************
  4123 ;; Defined at:
  4124 ;;		line 219 in file "mcc_generated_files/ext_int.c"
  4125 ;; Parameters:    Size  Location     Type
  4126 ;;		None
  4127 ;; Auto vars:     Size  Location     Type
  4128 ;;		None
  4129 ;; Return value:  Size  Location     Type
  4130 ;;                  1    wreg      void 
  4131 ;; Registers used:
  4132 ;;		wreg, status,2, status,0, cstack
  4133 ;; Tracked objects:
  4134 ;;		On entry : F/0
  4135 ;;		On exit  : F/0
  4136 ;;		Unchanged: 0/0
  4137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4141 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4142 ;;Total ram usage:        0 bytes
  4143 ;; Hardware stack levels used:    1
  4144 ;; Hardware stack levels required when called:    8
  4145 ;; This function calls:
  4146 ;;		_INT0_SetInterruptHandler
  4147 ;;		_INT1_SetInterruptHandler
  4148 ;;		_INT2_SetInterruptHandler
  4149 ;;		_INT3_SetInterruptHandler
  4150 ;; This function is called by:
  4151 ;;		_SYSTEM_Initialize
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           	psect	text21
  4156  006B38                     __ptext21:
  4157                           	opt stack 0
  4158  006B38                     _EXT_INT_Initialize:
  4159                           	opt stack 21
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;ext_int.c: 228: (INTCON3bits.INT1IF = 0);
  4163                           
  4164                           ;incstack = 0
  4165  006B38  90F0               	bcf	intcon3,0,c	;volatile
  4166                           
  4167                           ;ext_int.c: 229: (INTCON2bits.INTEDG1 = 1);
  4168  006B3A  8AF1               	bsf	intcon2,5,c	;volatile
  4169                           
  4170                           ; BSR set to: 0
  4171                           ;ext_int.c: 231: INT1_SetInterruptHandler(INT1_DefaultInterruptHandler);
  4172  006B3C  0E2A               	movlw	low _INT1_DefaultInterruptHandler
  4173  006B3E  6F64               	movwf	INT1_SetInterruptHandler@InterruptHandler& (0+255),b
  4174  006B40  0E78               	movlw	high _INT1_DefaultInterruptHandler
  4175  006B42  6F65               	movwf	(INT1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4176  006B44  EC9E  F03B         	call	_INT1_SetInterruptHandler	;wreg free
  4177                           
  4178                           ; BSR set to: 0
  4179                           ;ext_int.c: 232: (INTCON3bits.INT1IE = 1);
  4180  006B48  86F0               	bsf	intcon3,3,c	;volatile
  4181                           
  4182                           ; BSR set to: 0
  4183                           ;ext_int.c: 243: (INTCON3bits.INT2IF = 0);
  4184  006B4A  92F0               	bcf	intcon3,1,c	;volatile
  4185                           
  4186                           ; BSR set to: 0
  4187                           ;ext_int.c: 244: (INTCON2bits.INTEDG2 = 1);
  4188  006B4C  88F1               	bsf	intcon2,4,c	;volatile
  4189                           
  4190                           ;ext_int.c: 246: INT2_SetInterruptHandler(INT2_DefaultInterruptHandler);
  4191  006B4E  0E28               	movlw	low _INT2_DefaultInterruptHandler
  4192  006B50  6F64               	movwf	INT2_SetInterruptHandler@InterruptHandler& (0+255),b
  4193  006B52  0E78               	movlw	high _INT2_DefaultInterruptHandler
  4194  006B54  6F65               	movwf	(INT2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4195  006B56  EC99  F03B         	call	_INT2_SetInterruptHandler	;wreg free
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;ext_int.c: 247: (INTCON3bits.INT2IE = 1);
  4199  006B5A  88F0               	bsf	intcon3,4,c	;volatile
  4200                           
  4201                           ; BSR set to: 0
  4202                           ;ext_int.c: 258: (INTCONbits.INT0IF = 0);
  4203  006B5C  92F2               	bcf	intcon,1,c	;volatile
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;ext_int.c: 259: (INTCON2bits.INTEDG0 = 1);
  4207  006B5E  8CF1               	bsf	intcon2,6,c	;volatile
  4208                           
  4209                           ;ext_int.c: 261: INT0_SetInterruptHandler(INT0_DefaultInterruptHandler);
  4210  006B60  0E00               	movlw	0
  4211  006B62  6B64               	clrf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
  4212  006B64  6B65               	clrf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4213  006B66  EC0F  F03C         	call	_INT0_SetInterruptHandler	;wreg free
  4214                           
  4215                           ; BSR set to: 0
  4216                           ;ext_int.c: 272: (INTCON3bits.INT3IF = 0);
  4217  006B6A  94F0               	bcf	intcon3,2,c	;volatile
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;ext_int.c: 273: (INTCON2bits.INTEDG3 = 1);
  4221  006B6C  86F1               	bsf	intcon2,3,c	;volatile
  4222                           
  4223                           ;ext_int.c: 275: INT3_SetInterruptHandler(INT3_DefaultInterruptHandler);
  4224  006B6E  0E26               	movlw	low _INT3_DefaultInterruptHandler
  4225  006B70  6F64               	movwf	INT3_SetInterruptHandler@InterruptHandler& (0+255),b
  4226  006B72  0E78               	movlw	high _INT3_DefaultInterruptHandler
  4227  006B74  6F65               	movwf	(INT3_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4228  006B76  EC94  F03B         	call	_INT3_SetInterruptHandler	;wreg free
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;ext_int.c: 276: (INTCON3bits.INT3IE = 1);
  4232  006B7A  8AF0               	bsf	intcon3,5,c	;volatile
  4233                           
  4234                           ; BSR set to: 0
  4235  006B7C  0012               	return		;funcret
  4236  006B7E                     __end_of_EXT_INT_Initialize:
  4237                           	opt stack 0
  4238                           tblptru	equ	0xFF8
  4239                           tblptrh	equ	0xFF7
  4240                           tblptrl	equ	0xFF6
  4241                           tablat	equ	0xFF5
  4242                           intcon	equ	0xFF2
  4243                           intcon2	equ	0xFF1
  4244                           intcon3	equ	0xFF0
  4245                           postinc0	equ	0xFEE
  4246                           wreg	equ	0xFE8
  4247                           postdec2	equ	0xFDD
  4248                           fsr2h	equ	0xFDA
  4249                           fsr2l	equ	0xFD9
  4250                           
  4251 ;; *************** function _INT3_SetInterruptHandler *****************
  4252 ;; Defined at:
  4253 ;;		line 196 in file "mcc_generated_files/ext_int.c"
  4254 ;; Parameters:    Size  Location     Type
  4255 ;;  InterruptHan    2    4[BANK0 ] PTR void 
  4256 ;;		 -> INT3_DefaultInterruptHandler(1), 
  4257 ;; Auto vars:     Size  Location     Type
  4258 ;;		None
  4259 ;; Return value:  Size  Location     Type
  4260 ;;                  1    wreg      void 
  4261 ;; Registers used:
  4262 ;;		wreg, status,2, status,0
  4263 ;; Tracked objects:
  4264 ;;		On entry : F/0
  4265 ;;		On exit  : F/0
  4266 ;;		Unchanged: F/0
  4267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4268 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4271 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4272 ;;Total ram usage:        2 bytes
  4273 ;; Hardware stack levels used:    1
  4274 ;; Hardware stack levels required when called:    7
  4275 ;; This function calls:
  4276 ;;		Nothing
  4277 ;; This function is called by:
  4278 ;;		_EXT_INT_Initialize
  4279 ;; This function uses a non-reentrant model
  4280 ;;
  4281                           
  4282                           	psect	text22
  4283  007728                     __ptext22:
  4284                           	opt stack 0
  4285  007728                     _INT3_SetInterruptHandler:
  4286                           	opt stack 21
  4287                           
  4288                           ; BSR set to: 0
  4289                           ;ext_int.c: 197: INT3_InterruptHandler = InterruptHandler;
  4290                           
  4291                           ; BSR set to: 0
  4292                           ;incstack = 0
  4293  007728  C064  F1F1         	movff	INT3_SetInterruptHandler@InterruptHandler,_INT3_InterruptHandler
  4294  00772C  C065  F1F2         	movff	INT3_SetInterruptHandler@InterruptHandler+1,_INT3_InterruptHandler+1
  4295                           
  4296                           ; BSR set to: 0
  4297  007730  0012               	return		;funcret
  4298  007732                     __end_of_INT3_SetInterruptHandler:
  4299                           	opt stack 0
  4300                           tblptru	equ	0xFF8
  4301                           tblptrh	equ	0xFF7
  4302                           tblptrl	equ	0xFF6
  4303                           tablat	equ	0xFF5
  4304                           intcon	equ	0xFF2
  4305                           intcon2	equ	0xFF1
  4306                           intcon3	equ	0xFF0
  4307                           postinc0	equ	0xFEE
  4308                           wreg	equ	0xFE8
  4309                           postdec2	equ	0xFDD
  4310                           fsr2h	equ	0xFDA
  4311                           fsr2l	equ	0xFD9
  4312                           
  4313 ;; *************** function _INT2_SetInterruptHandler *****************
  4314 ;; Defined at:
  4315 ;;		line 114 in file "mcc_generated_files/ext_int.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;  InterruptHan    2    4[BANK0 ] PTR void 
  4318 ;;		 -> DIO1_ISR_Lora(1), INT2_DefaultInterruptHandler(1), 
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;		None
  4321 ;; Return value:  Size  Location     Type
  4322 ;;                  1    wreg      void 
  4323 ;; Registers used:
  4324 ;;		wreg, status,2, status,0
  4325 ;; Tracked objects:
  4326 ;;		On entry : F/0
  4327 ;;		On exit  : F/0
  4328 ;;		Unchanged: F/0
  4329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4330 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4333 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4334 ;;Total ram usage:        2 bytes
  4335 ;; Hardware stack levels used:    1
  4336 ;; Hardware stack levels required when called:    7
  4337 ;; This function calls:
  4338 ;;		Nothing
  4339 ;; This function is called by:
  4340 ;;		_EXT_INT_Initialize
  4341 ;;		_DIO1_ISR_Lora_Init
  4342 ;; This function uses a non-reentrant model
  4343 ;;
  4344                           
  4345                           	psect	text23
  4346  007732                     __ptext23:
  4347                           	opt stack 0
  4348  007732                     _INT2_SetInterruptHandler:
  4349                           	opt stack 20
  4350                           
  4351                           ; BSR set to: 0
  4352                           ;ext_int.c: 115: INT2_InterruptHandler = InterruptHandler;
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;incstack = 0
  4356  007732  C064  F1EF         	movff	INT2_SetInterruptHandler@InterruptHandler,_INT2_InterruptHandler
  4357  007736  C065  F1F0         	movff	INT2_SetInterruptHandler@InterruptHandler+1,_INT2_InterruptHandler+1
  4358                           
  4359                           ; BSR set to: 0
  4360  00773A  0012               	return		;funcret
  4361  00773C                     __end_of_INT2_SetInterruptHandler:
  4362                           	opt stack 0
  4363                           tblptru	equ	0xFF8
  4364                           tblptrh	equ	0xFF7
  4365                           tblptrl	equ	0xFF6
  4366                           tablat	equ	0xFF5
  4367                           intcon	equ	0xFF2
  4368                           intcon2	equ	0xFF1
  4369                           intcon3	equ	0xFF0
  4370                           postinc0	equ	0xFEE
  4371                           wreg	equ	0xFE8
  4372                           postdec2	equ	0xFDD
  4373                           fsr2h	equ	0xFDA
  4374                           fsr2l	equ	0xFD9
  4375                           
  4376 ;; *************** function _INT1_SetInterruptHandler *****************
  4377 ;; Defined at:
  4378 ;;		line 73 in file "mcc_generated_files/ext_int.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;  InterruptHan    2    4[BANK0 ] PTR void 
  4381 ;;		 -> DIO0_ISR_Lora(1), INT1_DefaultInterruptHandler(1), 
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;		None
  4384 ;; Return value:  Size  Location     Type
  4385 ;;                  1    wreg      void 
  4386 ;; Registers used:
  4387 ;;		wreg, status,2, status,0
  4388 ;; Tracked objects:
  4389 ;;		On entry : F/0
  4390 ;;		On exit  : F/0
  4391 ;;		Unchanged: F/0
  4392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4393 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4396 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4397 ;;Total ram usage:        2 bytes
  4398 ;; Hardware stack levels used:    1
  4399 ;; Hardware stack levels required when called:    7
  4400 ;; This function calls:
  4401 ;;		Nothing
  4402 ;; This function is called by:
  4403 ;;		_EXT_INT_Initialize
  4404 ;;		_DIO0_ISR_Lora_Init
  4405 ;; This function uses a non-reentrant model
  4406 ;;
  4407                           
  4408                           	psect	text24
  4409  00773C                     __ptext24:
  4410                           	opt stack 0
  4411  00773C                     _INT1_SetInterruptHandler:
  4412                           	opt stack 20
  4413                           
  4414                           ; BSR set to: 0
  4415                           ;ext_int.c: 74: INT1_InterruptHandler = InterruptHandler;
  4416                           
  4417                           ; BSR set to: 0
  4418                           ;incstack = 0
  4419  00773C  C064  F1ED         	movff	INT1_SetInterruptHandler@InterruptHandler,_INT1_InterruptHandler
  4420  007740  C065  F1EE         	movff	INT1_SetInterruptHandler@InterruptHandler+1,_INT1_InterruptHandler+1
  4421                           
  4422                           ; BSR set to: 0
  4423  007744  0012               	return		;funcret
  4424  007746                     __end_of_INT1_SetInterruptHandler:
  4425                           	opt stack 0
  4426                           tblptru	equ	0xFF8
  4427                           tblptrh	equ	0xFF7
  4428                           tblptrl	equ	0xFF6
  4429                           tablat	equ	0xFF5
  4430                           intcon	equ	0xFF2
  4431                           intcon2	equ	0xFF1
  4432                           intcon3	equ	0xFF0
  4433                           postinc0	equ	0xFEE
  4434                           wreg	equ	0xFE8
  4435                           postdec2	equ	0xFDD
  4436                           fsr2h	equ	0xFDA
  4437                           fsr2l	equ	0xFD9
  4438                           
  4439 ;; *************** function _INT0_SetInterruptHandler *****************
  4440 ;; Defined at:
  4441 ;;		line 155 in file "mcc_generated_files/ext_int.c"
  4442 ;; Parameters:    Size  Location     Type
  4443 ;;  InterruptHan    2    4[BANK0 ] PTR void 
  4444 ;;		 -> DIO5_ISR_Lora(1), INT0_DefaultInterruptHandler(1), 
  4445 ;; Auto vars:     Size  Location     Type
  4446 ;;		None
  4447 ;; Return value:  Size  Location     Type
  4448 ;;                  1    wreg      void 
  4449 ;; Registers used:
  4450 ;;		None
  4451 ;; Tracked objects:
  4452 ;;		On entry : F/0
  4453 ;;		On exit  : F/0
  4454 ;;		Unchanged: F/0
  4455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4456 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4459 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4460 ;;Total ram usage:        2 bytes
  4461 ;; Hardware stack levels used:    1
  4462 ;; Hardware stack levels required when called:    7
  4463 ;; This function calls:
  4464 ;;		Nothing
  4465 ;; This function is called by:
  4466 ;;		_EXT_INT_Initialize
  4467 ;;		_DIO5_ISR_Lora_Init
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471                           	psect	text25
  4472  00781E                     __ptext25:
  4473                           	opt stack 0
  4474  00781E                     _INT0_SetInterruptHandler:
  4475                           	opt stack 20
  4476                           
  4477                           ; BSR set to: 0
  4478                           
  4479                           ; BSR set to: 0
  4480                           ;incstack = 0
  4481  00781E  0012               	return		;funcret
  4482  007820                     __end_of_INT0_SetInterruptHandler:
  4483                           	opt stack 0
  4484                           tblptru	equ	0xFF8
  4485                           tblptrh	equ	0xFF7
  4486                           tblptrl	equ	0xFF6
  4487                           tablat	equ	0xFF5
  4488                           intcon	equ	0xFF2
  4489                           intcon2	equ	0xFF1
  4490                           intcon3	equ	0xFF0
  4491                           postinc0	equ	0xFEE
  4492                           wreg	equ	0xFE8
  4493                           postdec2	equ	0xFDD
  4494                           fsr2h	equ	0xFDA
  4495                           fsr2l	equ	0xFD9
  4496                           
  4497 ;; *************** function _LORAWAN_SetNetworkSessionKey *****************
  4498 ;; Defined at:
  4499 ;;		line 379 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  4500 ;; Parameters:    Size  Location     Type
  4501 ;;  networkSessi    2   14[BANK0 ] PTR unsigned char 
  4502 ;;		 -> nwkSKey(16), 
  4503 ;; Auto vars:     Size  Location     Type
  4504 ;;		None
  4505 ;; Return value:  Size  Location     Type
  4506 ;;                  1    wreg      void 
  4507 ;; Registers used:
  4508 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4509 ;; Tracked objects:
  4510 ;;		On entry : F/0
  4511 ;;		On exit  : D/0
  4512 ;;		Unchanged: 0/0
  4513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4514 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4517 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4518 ;;Total ram usage:        2 bytes
  4519 ;; Hardware stack levels used:    1
  4520 ;; Hardware stack levels required when called:    8
  4521 ;; This function calls:
  4522 ;;		_memcpy
  4523 ;; This function is called by:
  4524 ;;		_main
  4525 ;; This function uses a non-reentrant model
  4526 ;;
  4527                           
  4528                           	psect	text26
  4529  007118                     __ptext26:
  4530                           	opt stack 0
  4531  007118                     _LORAWAN_SetNetworkSessionKey:
  4532                           	opt stack 22
  4533                           
  4534                           ; BSR set to: 0
  4535                           ;lorawan.c: 381: if (networkSessionKeyNew != (0))
  4536                           
  4537                           ; BSR set to: 0
  4538                           ;incstack = 0
  4539  007118  516E               	movf	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew& (0+255),w,b
  4540  00711A  116F               	iorwf	(LORAWAN_SetNetworkSessionKey@networkSessionKeyNew+1)& (0+255),w,b
  4541  00711C  B4D8               	btfsc	status,2,c
  4542  00711E  0012               	return	
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;lorawan.c: 382: {
  4546                           ;lorawan.c: 383: memcpy(loRa.activationParameters.networkSessionKey, networkSessionKeyNe
      +                          w, 16);
  4547  007120  0E22               	movlw	low (_loRa+34)
  4548  007122  6F64               	movwf	memcpy@d1& (0+255),b
  4549  007124  0E02               	movlw	high (_loRa+34)
  4550  007126  6F65               	movwf	(memcpy@d1+1)& (0+255),b
  4551  007128  C06E  F066         	movff	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew,memcpy@s1
  4552  00712C  C06F  F067         	movff	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew+1,memcpy@s1+1
  4553  007130  6B69               	clrf	(memcpy@n+1)& (0+255),b
  4554  007132  0E10               	movlw	16
  4555  007134  6F68               	movwf	memcpy@n& (0+255),b
  4556  007136  ECCA  F033         	call	_memcpy	;wreg free
  4557                           
  4558                           ; BSR set to: 0
  4559                           ;lorawan.c: 384: loRa.macKeys.networkSessionKey = 1;
  4560  00713A  0102               	movlb	2	; () banked
  4561  00713C  89A5               	bsf	(_loRa+165)& (0+255),4,b
  4562                           
  4563                           ; BSR set to: 2
  4564                           ;lorawan.c: 385: loRa.macStatus.networkJoined = 0;
  4565  00713E  9902               	bcf	(_loRa+2)& (0+255),4,b
  4566  007140  0012               	return		;funcret
  4567  007142                     __end_of_LORAWAN_SetNetworkSessionKey:
  4568                           	opt stack 0
  4569                           tblptru	equ	0xFF8
  4570                           tblptrh	equ	0xFF7
  4571                           tblptrl	equ	0xFF6
  4572                           tablat	equ	0xFF5
  4573                           intcon	equ	0xFF2
  4574                           intcon2	equ	0xFF1
  4575                           intcon3	equ	0xFF0
  4576                           postinc0	equ	0xFEE
  4577                           wreg	equ	0xFE8
  4578                           postdec2	equ	0xFDD
  4579                           fsr2h	equ	0xFDA
  4580                           fsr2l	equ	0xFD9
  4581                           status	equ	0xFD8
  4582                           
  4583 ;; *************** function _LORAWAN_SetDeviceAddress *****************
  4584 ;; Defined at:
  4585 ;;		line 367 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;  deviceAddres    4    4[BANK0 ] unsigned long 
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;		None
  4590 ;; Return value:  Size  Location     Type
  4591 ;;                  1    wreg      void 
  4592 ;; Registers used:
  4593 ;;		None
  4594 ;; Tracked objects:
  4595 ;;		On entry : F/0
  4596 ;;		On exit  : F/2
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4599 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4602 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4603 ;;Total ram usage:        4 bytes
  4604 ;; Hardware stack levels used:    1
  4605 ;; Hardware stack levels required when called:    7
  4606 ;; This function calls:
  4607 ;;		Nothing
  4608 ;; This function is called by:
  4609 ;;		_main
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           	psect	text27
  4614  007586                     __ptext27:
  4615                           	opt stack 0
  4616  007586                     _LORAWAN_SetDeviceAddress:
  4617                           	opt stack 23
  4618                           
  4619                           ; BSR set to: 0
  4620                           ;lorawan.c: 369: loRa.activationParameters.deviceAddress.value = deviceAddressNew;
  4621                           
  4622                           ;incstack = 0
  4623  007586  C064  F21E         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew,_loRa+30
  4624  00758A  C065  F21F         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew+1,_loRa+31
  4625  00758E  C066  F220         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew+2,_loRa+32
  4626  007592  C067  F221         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew+3,_loRa+33
  4627                           
  4628                           ;lorawan.c: 370: loRa.macKeys.deviceAddress = 1;
  4629  007596  0102               	movlb	2	; () banked
  4630  007598  85A5               	bsf	(_loRa+165)& (0+255),2,b
  4631                           
  4632                           ;lorawan.c: 371: loRa.macStatus.networkJoined = 0;
  4633  00759A  9902               	bcf	(_loRa+2)& (0+255),4,b
  4634                           
  4635                           ; BSR set to: 2
  4636  00759C  0012               	return		;funcret
  4637  00759E                     __end_of_LORAWAN_SetDeviceAddress:
  4638                           	opt stack 0
  4639                           tblptru	equ	0xFF8
  4640                           tblptrh	equ	0xFF7
  4641                           tblptrl	equ	0xFF6
  4642                           tablat	equ	0xFF5
  4643                           intcon	equ	0xFF2
  4644                           intcon2	equ	0xFF1
  4645                           intcon3	equ	0xFF0
  4646                           postinc0	equ	0xFEE
  4647                           wreg	equ	0xFE8
  4648                           postdec2	equ	0xFDD
  4649                           fsr2h	equ	0xFDA
  4650                           fsr2l	equ	0xFD9
  4651                           status	equ	0xFD8
  4652                           
  4653 ;; *************** function _LORAWAN_SetApplicationSessionKey *****************
  4654 ;; Defined at:
  4655 ;;		line 394 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  4656 ;; Parameters:    Size  Location     Type
  4657 ;;  applicationS    2   14[BANK0 ] PTR unsigned char 
  4658 ;;		 -> appSKey(16), 
  4659 ;; Auto vars:     Size  Location     Type
  4660 ;;		None
  4661 ;; Return value:  Size  Location     Type
  4662 ;;                  1    wreg      void 
  4663 ;; Registers used:
  4664 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4665 ;; Tracked objects:
  4666 ;;		On entry : F/0
  4667 ;;		On exit  : D/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4670 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4673 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4674 ;;Total ram usage:        2 bytes
  4675 ;; Hardware stack levels used:    1
  4676 ;; Hardware stack levels required when called:    8
  4677 ;; This function calls:
  4678 ;;		_memcpy
  4679 ;; This function is called by:
  4680 ;;		_main
  4681 ;; This function uses a non-reentrant model
  4682 ;;
  4683                           
  4684                           	psect	text28
  4685  007142                     __ptext28:
  4686                           	opt stack 0
  4687  007142                     _LORAWAN_SetApplicationSessionKey:
  4688                           	opt stack 22
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;lorawan.c: 396: if (applicationSessionKeyNew != (0))
  4692                           
  4693                           ; BSR set to: 2
  4694                           ;incstack = 0
  4695  007142  516E               	movf	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew& (0+255),w,b
  4696  007144  116F               	iorwf	(LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew+1)& (0+255),w,b
  4697  007146  B4D8               	btfsc	status,2,c
  4698  007148  0012               	return	
  4699                           
  4700                           ; BSR set to: 0
  4701                           ;lorawan.c: 397: {
  4702                           ;lorawan.c: 398: memcpy( loRa.activationParameters.applicationSessionKey, applicationSes
      +                          sionKeyNew, 16);
  4703  00714A  0E32               	movlw	low (_loRa+50)
  4704  00714C  6F64               	movwf	memcpy@d1& (0+255),b
  4705  00714E  0E02               	movlw	high (_loRa+50)
  4706  007150  6F65               	movwf	(memcpy@d1+1)& (0+255),b
  4707  007152  C06E  F066         	movff	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew,memcpy@s1
  4708  007156  C06F  F067         	movff	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew+1,memcpy@s1+1
  4709  00715A  6B69               	clrf	(memcpy@n+1)& (0+255),b
  4710  00715C  0E10               	movlw	16
  4711  00715E  6F68               	movwf	memcpy@n& (0+255),b
  4712  007160  ECCA  F033         	call	_memcpy	;wreg free
  4713                           
  4714                           ; BSR set to: 0
  4715                           ;lorawan.c: 399: loRa.macKeys.applicationSessionKey = 1;
  4716  007164  0102               	movlb	2	; () banked
  4717  007166  8BA5               	bsf	(_loRa+165)& (0+255),5,b
  4718                           
  4719                           ; BSR set to: 2
  4720                           ;lorawan.c: 400: loRa.macStatus.networkJoined = 0;
  4721  007168  9902               	bcf	(_loRa+2)& (0+255),4,b
  4722  00716A  0012               	return		;funcret
  4723  00716C                     __end_of_LORAWAN_SetApplicationSessionKey:
  4724                           	opt stack 0
  4725                           tblptru	equ	0xFF8
  4726                           tblptrh	equ	0xFF7
  4727                           tblptrl	equ	0xFF6
  4728                           tablat	equ	0xFF5
  4729                           intcon	equ	0xFF2
  4730                           intcon2	equ	0xFF1
  4731                           intcon3	equ	0xFF0
  4732                           postinc0	equ	0xFEE
  4733                           wreg	equ	0xFE8
  4734                           postdec2	equ	0xFDD
  4735                           fsr2h	equ	0xFDA
  4736                           fsr2l	equ	0xFD9
  4737                           status	equ	0xFD8
  4738                           
  4739 ;; *************** function _LORAWAN_Mainloop *****************
  4740 ;; Defined at:
  4741 ;;		line 2238 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  4742 ;; Parameters:    Size  Location     Type
  4743 ;;		None
  4744 ;; Auto vars:     Size  Location     Type
  4745 ;;		None
  4746 ;; Return value:  Size  Location     Type
  4747 ;;                  1    wreg      void 
  4748 ;; Registers used:
  4749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+4, btemp+5, btemp
      ++6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4750 ;; Tracked objects:
  4751 ;;		On entry : 0/1
  4752 ;;		On exit  : 0/0
  4753 ;;		Unchanged: 0/0
  4754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4759 ;;Total ram usage:        0 bytes
  4760 ;; Hardware stack levels used:    1
  4761 ;; Hardware stack levels required when called:   18
  4762 ;; This function calls:
  4763 ;;		_INTERRUPT_GetDioStatus
  4764 ;;		_RADIO_DIO0
  4765 ;;		_RADIO_DIO1
  4766 ;;		_RADIO_DIO2
  4767 ;;		_RADIO_DIO3
  4768 ;;		_RADIO_DIO4
  4769 ;;		_RADIO_DIO5
  4770 ;;		_SwTimersExecute
  4771 ;; This function is called by:
  4772 ;;		_main
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           	psect	text29
  4777  006E02                     __ptext29:
  4778                           	opt stack 0
  4779  006E02                     _LORAWAN_Mainloop:
  4780                           	opt stack 12
  4781                           
  4782                           ;lorawan.c: 2240: SwTimersExecute();
  4783                           
  4784                           ;incstack = 0
  4785  006E02  ECF9  F02B         	call	_SwTimersExecute	;wreg free
  4786                           
  4787                           ; BSR set to: 0
  4788                           ;lorawan.c: 2243: localDioStatus = INTERRUPT_GetDioStatus();
  4789  006E06  EC52  F03B         	call	_INTERRUPT_GetDioStatus	;wreg free
  4790  006E0A  0101               	movlb	1	; () banked
  4791  006E0C  6F74               	movwf	_localDioStatus& (0+255),b
  4792                           
  4793                           ; BSR set to: 1
  4794                           ;lorawan.c: 2245: if ((localDioStatus & 0x01) != 0)
  4795  006E0E  B174               	btfsc	_localDioStatus& (0+255),0,b
  4796                           
  4797                           ; BSR set to: 1
  4798                           ;lorawan.c: 2246: {
  4799                           ;lorawan.c: 2247: RADIO_DIO0();
  4800  006E10  EC1C  F032         	call	_RADIO_DIO0	;wreg free
  4801                           
  4802                           ;lorawan.c: 2248: }
  4803                           ;lorawan.c: 2249: if ((localDioStatus & 0x02) != 0)
  4804  006E14  0101               	movlb	1	; () banked
  4805  006E16  B374               	btfsc	_localDioStatus& (0+255),1,b
  4806                           
  4807                           ; BSR set to: 1
  4808                           ;lorawan.c: 2250: {
  4809                           ;lorawan.c: 2251: RADIO_DIO1();
  4810  006E18  EC1F  F037         	call	_RADIO_DIO1	;wreg free
  4811                           
  4812                           ;lorawan.c: 2252: }
  4813                           ;lorawan.c: 2253: if ((localDioStatus & 0x04) != 0)
  4814  006E1C  0101               	movlb	1	; () banked
  4815  006E1E  B574               	btfsc	_localDioStatus& (0+255),2,b
  4816                           
  4817                           ; BSR set to: 1
  4818                           ;lorawan.c: 2254: {
  4819                           ;lorawan.c: 2255: RADIO_DIO2();
  4820  006E20  EC55  F035         	call	_RADIO_DIO2	;wreg free
  4821                           
  4822                           ;lorawan.c: 2256: }
  4823                           ;lorawan.c: 2257: if ((localDioStatus & 0x08) != 0)
  4824  006E24  0101               	movlb	1	; () banked
  4825  006E26  B774               	btfsc	_localDioStatus& (0+255),3,b
  4826                           
  4827                           ; BSR set to: 1
  4828                           ;lorawan.c: 2258: {
  4829                           ;lorawan.c: 2259: RADIO_DIO3();
  4830  006E28  ECE7  F03A         	call	_RADIO_DIO3	;wreg free
  4831                           
  4832                           ;lorawan.c: 2260: }
  4833                           ;lorawan.c: 2261: if ((localDioStatus & 0x10) != 0)
  4834  006E2C  0101               	movlb	1	; () banked
  4835  006E2E  B974               	btfsc	_localDioStatus& (0+255),4,b
  4836                           
  4837                           ; BSR set to: 1
  4838                           ;lorawan.c: 2262: {
  4839                           ;lorawan.c: 2263: RADIO_DIO4();
  4840  006E30  ECDB  F03A         	call	_RADIO_DIO4	;wreg free
  4841                           
  4842                           ;lorawan.c: 2264: }
  4843                           ;lorawan.c: 2265: if ((localDioStatus & 0x20) != 0)
  4844  006E34  0101               	movlb	1	; () banked
  4845  006E36  BB74               	btfsc	_localDioStatus& (0+255),5,b
  4846                           
  4847                           ; BSR set to: 1
  4848                           ;lorawan.c: 2266: {
  4849                           ;lorawan.c: 2267: RADIO_DIO5();
  4850  006E38  ECCF  F03A         	call	_RADIO_DIO5	;wreg free
  4851  006E3C  0012               	return		;funcret
  4852  006E3E                     __end_of_LORAWAN_Mainloop:
  4853                           	opt stack 0
  4854                           tblptru	equ	0xFF8
  4855                           tblptrh	equ	0xFF7
  4856                           tblptrl	equ	0xFF6
  4857                           tablat	equ	0xFF5
  4858                           intcon	equ	0xFF2
  4859                           intcon2	equ	0xFF1
  4860                           intcon3	equ	0xFF0
  4861                           postinc0	equ	0xFEE
  4862                           wreg	equ	0xFE8
  4863                           postdec2	equ	0xFDD
  4864                           fsr2h	equ	0xFDA
  4865                           fsr2l	equ	0xFD9
  4866                           status	equ	0xFD8
  4867                           
  4868 ;; *************** function _SwTimersExecute *****************
  4869 ;; Defined at:
  4870 ;;		line 260 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;		None
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;  i               1  140[BANK0 ] unsigned char 
  4875 ;; Return value:  Size  Location     Type
  4876 ;;                  1    wreg      void 
  4877 ;; Registers used:
  4878 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+4, btemp+5, btemp
      ++6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/1
  4881 ;;		On exit  : F/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4885 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4886 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4887 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4888 ;;Total ram usage:        5 bytes
  4889 ;; Hardware stack levels used:    1
  4890 ;; Hardware stack levels required when called:   17
  4891 ;; This function calls:
  4892 ;;		Absolute function
  4893 ;;		_AckRetransmissionCallback
  4894 ;;		_AutomaticReplyCallback
  4895 ;;		_DutyCycleCallback
  4896 ;;		_LORAWAN_LinkCheckCallback
  4897 ;;		_LORAWAN_ReceiveWindow1Callback
  4898 ;;		_LORAWAN_ReceiveWindow2Callback
  4899 ;;		_RADIO_RxFSKTimeout
  4900 ;;		_RADIO_WatchdogTimeout
  4901 ;;		_UnconfirmedTransmissionCallback
  4902 ;;		_UpdateJoinSuccessState
  4903 ;; This function is called by:
  4904 ;;		_LORAWAN_Mainloop
  4905 ;; This function uses a non-reentrant model
  4906 ;;
  4907                           
  4908                           	psect	text30
  4909  0057F2                     __ptext30:
  4910                           	opt stack 0
  4911  0057F2                     _SwTimersExecute:
  4912                           	opt stack 12
  4913                           
  4914                           ;sw_timer.c: 262: uint8_t i;
  4915                           ;sw_timer.c: 264: (INTCONbits.GIE = 0);
  4916                           
  4917                           ;incstack = 0
  4918  0057F2  9EF2               	bcf	intcon,7,c	;volatile
  4919                           
  4920                           ;sw_timer.c: 265: for (i = 0; i < allocatedTimers; i++)
  4921  0057F4  0100               	movlb	0	; () banked
  4922  0057F6  6BEC               	clrf	SwTimersExecute@i& (0+255),b
  4923  0057F8  D04D               	goto	l16018
  4924  0057FA                     l16004:
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;sw_timer.c: 266: {
  4928                           ;sw_timer.c: 269: if (swTimers[i].running == 1)
  4929  0057FA  51EC               	movf	SwTimersExecute@i& (0+255),w,b
  4930  0057FC  0D08               	mullw	8
  4931  0057FE  0E04               	movlw	low (_swTimers+4)
  4932  005800  24F3               	addwf	prodl,w,c
  4933  005802  6ED9               	movwf	fsr2l,c
  4934  005804  0E03               	movlw	high (_swTimers+4)
  4935  005806  20F4               	addwfc	prodh,w,c
  4936  005808  6EDA               	movwf	fsr2h,c
  4937  00580A  04DE               	decf	postinc2,w,c
  4938  00580C  E141               	bnz	l16016
  4939                           
  4940                           ; BSR set to: 0
  4941                           ;sw_timer.c: 270: {
  4942                           ;sw_timer.c: 271: if (0 == swTimers[i].ticksRemaining)
  4943  00580E  51EC               	movf	SwTimersExecute@i& (0+255),w,b
  4944  005810  0D08               	mullw	8
  4945  005812  0E00               	movlw	low _swTimers
  4946  005814  24F3               	addwf	prodl,w,c
  4947  005816  6ED9               	movwf	fsr2l,c
  4948  005818  0E03               	movlw	high _swTimers
  4949  00581A  20F4               	addwfc	prodh,w,c
  4950  00581C  6EDA               	movwf	fsr2h,c
  4951  00581E  50DE               	movf	postinc2,w,c
  4952  005820  10DE               	iorwf	postinc2,w,c
  4953  005822  10DE               	iorwf	postinc2,w,c
  4954  005824  10DE               	iorwf	postinc2,w,c
  4955  005826  E134               	bnz	l16016
  4956                           
  4957                           ; BSR set to: 0
  4958                           ;sw_timer.c: 272: {
  4959                           ;sw_timer.c: 273: swTimers[i].running = 0;
  4960  005828  51EC               	movf	SwTimersExecute@i& (0+255),w,b
  4961  00582A  0D08               	mullw	8
  4962  00582C  0E04               	movlw	low (_swTimers+4)
  4963  00582E  24F3               	addwf	prodl,w,c
  4964  005830  6ED9               	movwf	fsr2l,c
  4965  005832  0E03               	movlw	high (_swTimers+4)
  4966  005834  20F4               	addwfc	prodh,w,c
  4967  005836  6EDA               	movwf	fsr2h,c
  4968  005838  6ADF               	clrf	indf2,c
  4969                           
  4970                           ;sw_timer.c: 274: if ((0) != swTimers[i].callback)
  4971  00583A  51EC               	movf	SwTimersExecute@i& (0+255),w,b
  4972  00583C  0D08               	mullw	8
  4973  00583E  0E06               	movlw	low (_swTimers+6)
  4974  005840  24F3               	addwf	prodl,w,c
  4975  005842  6ED9               	movwf	fsr2l,c
  4976  005844  0E03               	movlw	high (_swTimers+6)
  4977  005846  20F4               	addwfc	prodh,w,c
  4978  005848  6EDA               	movwf	fsr2h,c
  4979  00584A  50DE               	movf	postinc2,w,c
  4980  00584C  10DE               	iorwf	postinc2,w,c
  4981  00584E  E020               	bz	l16016
  4982                           
  4983                           ; BSR set to: 0
  4984                           ;sw_timer.c: 275: {
  4985                           ;sw_timer.c: 276: (INTCONbits.GIE = 1);
  4986  005850  8EF2               	bsf	intcon,7,c	;volatile
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;sw_timer.c: 277: swTimers[i].callback(swTimers[i].callbackParameter);
  4990  005852  51EC               	movf	SwTimersExecute@i& (0+255),w,b
  4991  005854  0D08               	mullw	8
  4992  005856  0E05               	movlw	low (_swTimers+5)
  4993  005858  24F3               	addwf	prodl,w,c
  4994  00585A  6ED9               	movwf	fsr2l,c
  4995  00585C  0E03               	movlw	high (_swTimers+5)
  4996  00585E  20F4               	addwfc	prodh,w,c
  4997  005860  6EDA               	movwf	fsr2h,c
  4998  005862  50DF               	movf	indf2,w,c
  4999  005864  6EE6               	movwf	postinc1,c
  5000  005866  51EC               	movf	SwTimersExecute@i& (0+255),w,b
  5001  005868  0D08               	mullw	8
  5002  00586A  0E06               	movlw	low (_swTimers+6)
  5003  00586C  24F3               	addwf	prodl,w,c
  5004  00586E  6ED9               	movwf	fsr2l,c
  5005  005870  0E03               	movlw	high (_swTimers+6)
  5006  005872  20F4               	addwfc	prodh,w,c
  5007  005874  6EDA               	movwf	fsr2h,c
  5008  005876  D801               	call	u19518
  5009  005878  D00A               	goto	l16014
  5010  00587A                     u19518:
  5011  00587A  0005               	push	
  5012  00587C  6EFA               	movwf	pclath,c
  5013  00587E  50DE               	movf	postinc2,w,c
  5014  005880  6EFD               	movwf	tosl,c
  5015  005882  50DE               	movf	postinc2,w,c
  5016  005884  6EFE               	movwf	tosh,c
  5017  005886  50F8               	movf	tblptru,w,c
  5018  005888  6EFF               	movwf	tosu,c
  5019  00588A  50FA               	movf	pclath,w,c
  5020  00588C  0012               	return		;indir
  5021  00588E                     l16014:
  5022                           
  5023                           ;sw_timer.c: 278: (INTCONbits.GIE = 0);
  5024  00588E  9EF2               	bcf	intcon,7,c	;volatile
  5025  005890                     l16016:
  5026  005890  0100               	movlb	0	; () banked
  5027  005892  2BEC               	incf	SwTimersExecute@i& (0+255),f,b
  5028  005894                     l16018:
  5029                           
  5030                           ; BSR set to: 0
  5031  005894  0101               	movlb	1	; () banked
  5032  005896  5173               	movf	_allocatedTimers& (0+255),w,b	;volatile
  5033  005898  0100               	movlb	0	; () banked
  5034  00589A  5DEC               	subwf	SwTimersExecute@i& (0+255),w,b
  5035  00589C  E3AE               	bnc	l16004
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;sw_timer.c: 279: }
  5039                           ;sw_timer.c: 280: }
  5040                           ;sw_timer.c: 281: }
  5041                           ;sw_timer.c: 282: }
  5042                           ;sw_timer.c: 283: (INTCONbits.GIE = 1);
  5043  00589E  8EF2               	bsf	intcon,7,c	;volatile
  5044                           
  5045                           ; BSR set to: 0
  5046  0058A0  0012               	return		;funcret
  5047  0058A2                     __end_of_SwTimersExecute:
  5048                           	opt stack 0
  5049                           tosu	equ	0xFFF
  5050                           tosh	equ	0xFFE
  5051                           tosl	equ	0xFFD
  5052                           pclath	equ	0xFFA
  5053                           tblptru	equ	0xFF8
  5054                           tblptrh	equ	0xFF7
  5055                           tblptrl	equ	0xFF6
  5056                           tablat	equ	0xFF5
  5057                           prodh	equ	0xFF4
  5058                           prodl	equ	0xFF3
  5059                           intcon	equ	0xFF2
  5060                           intcon2	equ	0xFF1
  5061                           intcon3	equ	0xFF0
  5062                           postinc0	equ	0xFEE
  5063                           wreg	equ	0xFE8
  5064                           postinc1	equ	0xFE6
  5065                           indf2	equ	0xFDF
  5066                           postinc2	equ	0xFDE
  5067                           postdec2	equ	0xFDD
  5068                           fsr2h	equ	0xFDA
  5069                           fsr2l	equ	0xFD9
  5070                           status	equ	0xFD8
  5071                           
  5072 ;; *************** function _DutyCycleCallback *****************
  5073 ;; Defined at:
  5074 ;;		line 1221 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
  5075 ;; Parameters:    Size  Location     Type
  5076 ;;  param           1  [STACK] unsigned char 
  5077 ;; Auto vars:     Size  Location     Type
  5078 ;;  minim           4  [STACK] unsigned long 
  5079 ;;  i               1  [STACK] unsigned char 
  5080 ;;  found           1  [STACK] unsigned char 
  5081 ;; Return value:  Size  Location     Type
  5082 ;;                  1  [STACK] void 
  5083 ;; Registers used:
  5084 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+1, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9,
      + btemp+10, btemp+11, prodl, prodh, cstack
  5085 ;; Tracked objects:
  5086 ;;		On entry : F/0
  5087 ;;		On exit  : 0/0
  5088 ;;		Unchanged: 0/0
  5089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5094 ;;Total ram usage:        0 bytes
  5095 ;; Hardware stack levels used:    1
  5096 ;; Hardware stack levels required when called:   11
  5097 ;; This function calls:
  5098 ;;		_SwTimerSetTimeout
  5099 ;;		_SwTimerStart
  5100 ;;		___lldiv
  5101 ;; This function is called by:
  5102 ;;		_SetCallbackSoftwareTimers
  5103 ;;		_SwTimersExecute
  5104 ;; This function uses a reentrant model
  5105 ;;
  5106                           
  5107                           	psect	text31
  5108  002428                     __ptext31:
  5109                           	opt stack 0
  5110  002428                     _DutyCycleCallback:
  5111                           	opt stack 0
  5112                           
  5113                           ; BSR set to: 0
  5114                           ; autosize = 10, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0
  5115  002428  0E0A               	movlw	10
  5116  00242A  26E1               	addwf	fsr1l,f,c
  5117  00242C  0E00               	movlw	0
  5118  00242E  22E2               	addwfc	fsr1h,f,c
  5119                           
  5120                           ;lorawan_eu.c: 1223: uint32_t minim = (4294967295UL);
  5121                           
  5122                           ;incstack = 0
  5123  002430  6852               	setf	btemp+8,c
  5124  002432  6853               	setf	btemp+9,c
  5125  002434  6854               	setf	btemp+10,c
  5126  002436  6855               	setf	btemp+11,c
  5127                           
  5128                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  5129  002438  0EFA               	movlw	-6
  5130  00243A  C052  FFE3         	movff	btemp+8,plusw1
  5131  00243E  0EFB               	movlw	-5
  5132  002440  C053  FFE3         	movff	btemp+9,plusw1
  5133  002444  0EFC               	movlw	-4
  5134  002446  C054  FFE3         	movff	btemp+10,plusw1
  5135  00244A  0EFD               	movlw	-3
  5136  00244C  C055  FFE3         	movff	btemp+11,plusw1
  5137                           
  5138                           ;lorawan_eu.c: 1224: bool found = 0;
  5139                           ;stkvar	DutyCycleCallback@found @ sp[(-10)+9]
  5140  002450  0EFF               	movlw	-1
  5141  002452  6AE3               	clrf	plusw1,c
  5142                           
  5143                           ;lorawan_eu.c: 1225: uint8_t i;
  5144                           ;lorawan_eu.c: 1227: for (i=0; i < 16; i++)
  5145                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5146  002454  0EFE               	movlw	-2
  5147  002456  6AE3               	clrf	plusw1,c
  5148  002458                     l14854:
  5149                           
  5150                           ;lorawan_eu.c: 1228: {
  5151                           ;lorawan_eu.c: 1230: if ((Channels[i].status == 1) && ( Channels[i].channelTimer != 0 ))
  5152                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5153  002458  0EFE               	movlw	-2
  5154  00245A  50E3               	movf	plusw1,w,c
  5155  00245C  0D0E               	mullw	14
  5156  00245E  0E04               	movlw	low (_Channels+4)
  5157  002460  24F3               	addwf	prodl,w,c
  5158  002462  6ED9               	movwf	fsr2l,c
  5159  002464  0E04               	movlw	high (_Channels+4)
  5160  002466  20F4               	addwfc	prodh,w,c
  5161  002468  6EDA               	movwf	fsr2h,c
  5162  00246A  04DE               	decf	postinc2,w,c
  5163  00246C  E001 D0AA          	bnz	l14872
  5164                           
  5165                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5166  002470  0EFE               	movlw	-2
  5167  002472  50E3               	movf	plusw1,w,c
  5168  002474  0D0E               	mullw	14
  5169  002476  0E08               	movlw	low (_Channels+8)
  5170  002478  24F3               	addwf	prodl,w,c
  5171  00247A  6ED9               	movwf	fsr2l,c
  5172  00247C  0E04               	movlw	high (_Channels+8)
  5173  00247E  20F4               	addwfc	prodh,w,c
  5174  002480  6EDA               	movwf	fsr2h,c
  5175  002482  50DE               	movf	postinc2,w,c
  5176  002484  10DE               	iorwf	postinc2,w,c
  5177  002486  10DE               	iorwf	postinc2,w,c
  5178  002488  10DE               	iorwf	postinc2,w,c
  5179  00248A  E101 D09B          	bz	l14872
  5180                           
  5181                           ;lorawan_eu.c: 1231: {
  5182                           ;lorawan_eu.c: 1232: if ( Channels[i].channelTimer > loRa.lastTimerValue )
  5183                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5184  00248E  0EFE               	movlw	-2
  5185  002490  50E3               	movf	plusw1,w,c
  5186  002492  0D0E               	mullw	14
  5187  002494  0E08               	movlw	low (_Channels+8)
  5188  002496  24F3               	addwf	prodl,w,c
  5189  002498  6ED9               	movwf	fsr2l,c
  5190  00249A  0E04               	movlw	high (_Channels+8)
  5191  00249C  20F4               	addwfc	prodh,w,c
  5192  00249E  6EDA               	movwf	fsr2h,c
  5193  0024A0  50DE               	movf	postinc2,w,c
  5194  0024A2  0102               	movlb	2	; () banked
  5195  0024A4  5DC8               	subwf	(_loRa+200)& (0+255),w,b
  5196  0024A6  50DE               	movf	postinc2,w,c
  5197  0024A8  59C9               	subwfb	(_loRa+201)& (0+255),w,b
  5198  0024AA  50DE               	movf	postinc2,w,c
  5199  0024AC  59CA               	subwfb	(_loRa+202)& (0+255),w,b
  5200  0024AE  50DE               	movf	postinc2,w,c
  5201  0024B0  59CB               	subwfb	(_loRa+203)& (0+255),w,b
  5202  0024B2  E22F               	bc	l14862
  5203                           
  5204                           ; BSR set to: 2
  5205                           ;lorawan_eu.c: 1233: {
  5206                           ;lorawan_eu.c: 1234: Channels[i].channelTimer = Channels[i].channelTimer - loRa.lastTime
      +                          rValue;
  5207                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5208  0024B4  0EFE               	movlw	-2
  5209  0024B6  50E3               	movf	plusw1,w,c
  5210  0024B8  0D0E               	mullw	14
  5211  0024BA  0E08               	movlw	low (_Channels+8)
  5212  0024BC  24F3               	addwf	prodl,w,c
  5213  0024BE  6ED9               	movwf	fsr2l,c
  5214  0024C0  0E04               	movlw	high (_Channels+8)
  5215  0024C2  20F4               	addwfc	prodh,w,c
  5216  0024C4  6EDA               	movwf	fsr2h,c
  5217  0024C6  CFDE F052          	movff	postinc2,btemp+8
  5218  0024CA  CFDE F053          	movff	postinc2,btemp+9
  5219  0024CE  CFDE F054          	movff	postinc2,btemp+10
  5220  0024D2  CFDE F055          	movff	postinc2,btemp+11
  5221  0024D6  51C8               	movf	(_loRa+200)& (0+255),w,b
  5222  0024D8  5C52               	subwf	btemp+8,w,c
  5223  0024DA  6E4E               	movwf	btemp+4,c
  5224  0024DC  51C9               	movf	(_loRa+201)& (0+255),w,b
  5225  0024DE  5853               	subwfb	btemp+9,w,c
  5226  0024E0  6E4F               	movwf	btemp+5,c
  5227  0024E2  51CA               	movf	(_loRa+202)& (0+255),w,b
  5228  0024E4  5854               	subwfb	btemp+10,w,c
  5229  0024E6  6E50               	movwf	btemp+6,c
  5230  0024E8  51CB               	movf	(_loRa+203)& (0+255),w,b
  5231  0024EA  5855               	subwfb	btemp+11,w,c
  5232  0024EC  6E51               	movwf	btemp+7,c
  5233                           
  5234                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5235  0024EE  0EFE               	movlw	-2
  5236  0024F0  50E3               	movf	plusw1,w,c
  5237  0024F2  0D0E               	mullw	14
  5238  0024F4  0E08               	movlw	low (_Channels+8)
  5239  0024F6  24F3               	addwf	prodl,w,c
  5240  0024F8  6ED9               	movwf	fsr2l,c
  5241  0024FA  0E04               	movlw	high (_Channels+8)
  5242  0024FC  20F4               	addwfc	prodh,w,c
  5243  0024FE  6EDA               	movwf	fsr2h,c
  5244  002500  C04E  FFDE         	movff	btemp+4,postinc2
  5245  002504  C04F  FFDE         	movff	btemp+5,postinc2
  5246  002508  C050  FFDE         	movff	btemp+6,postinc2
  5247  00250C  C051  FFDE         	movff	btemp+7,postinc2
  5248                           
  5249                           ;lorawan_eu.c: 1235: }
  5250  002510  D00D               	goto	l14864
  5251  002512                     l14862:
  5252                           
  5253                           ; BSR set to: 2
  5254                           ;lorawan_eu.c: 1236: else
  5255                           ;lorawan_eu.c: 1237: {
  5256                           ;lorawan_eu.c: 1238: Channels[i].channelTimer = 0;
  5257                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5258  002512  0EFE               	movlw	-2
  5259  002514  50E3               	movf	plusw1,w,c
  5260  002516  0D0E               	mullw	14
  5261  002518  0E08               	movlw	low (_Channels+8)
  5262  00251A  24F3               	addwf	prodl,w,c
  5263  00251C  6ED9               	movwf	fsr2l,c
  5264  00251E  0E04               	movlw	high (_Channels+8)
  5265  002520  20F4               	addwfc	prodh,w,c
  5266  002522  6EDA               	movwf	fsr2h,c
  5267  002524  6ADE               	clrf	postinc2,c
  5268  002526  6ADE               	clrf	postinc2,c
  5269  002528  6ADE               	clrf	postinc2,c
  5270  00252A  6ADD               	clrf	postdec2,c
  5271  00252C                     l14864:
  5272                           
  5273                           ; BSR set to: 2
  5274                           ;lorawan_eu.c: 1239: }
  5275                           ;lorawan_eu.c: 1240: if ( (Channels[i].channelTimer <= minim) && (Channels[i].channelTim
      +                          er != 0) )
  5276                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5277  00252C  0EFE               	movlw	-2
  5278  00252E  50E3               	movf	plusw1,w,c
  5279  002530  0D0E               	mullw	14
  5280  002532  0E08               	movlw	low (_Channels+8)
  5281  002534  24F3               	addwf	prodl,w,c
  5282  002536  6ED9               	movwf	fsr2l,c
  5283  002538  0E04               	movlw	high (_Channels+8)
  5284  00253A  20F4               	addwfc	prodh,w,c
  5285  00253C  6EDA               	movwf	fsr2h,c
  5286                           
  5287                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  5288  00253E  0EFA               	movlw	-6
  5289  002540  CFE3 F04B          	movff	plusw1,btemp+1
  5290  002544  50DE               	movf	postinc2,w,c
  5291  002546  5C4B               	subwf	btemp+1,w,c
  5292  002548  0EFB               	movlw	-5
  5293  00254A  CFE3 F04B          	movff	plusw1,btemp+1
  5294  00254E  50DE               	movf	postinc2,w,c
  5295  002550  584B               	subwfb	btemp+1,w,c
  5296  002552  0EFC               	movlw	-4
  5297  002554  CFE3 F04B          	movff	plusw1,btemp+1
  5298  002558  50DE               	movf	postinc2,w,c
  5299  00255A  584B               	subwfb	btemp+1,w,c
  5300  00255C  0EFD               	movlw	-3
  5301  00255E  CFE3 F04B          	movff	plusw1,btemp+1
  5302  002562  50DE               	movf	postinc2,w,c
  5303  002564  584B               	subwfb	btemp+1,w,c
  5304  002566  E32E               	bnc	l14872
  5305                           
  5306                           ; BSR set to: 2
  5307                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5308  002568  0EFE               	movlw	-2
  5309  00256A  50E3               	movf	plusw1,w,c
  5310  00256C  0D0E               	mullw	14
  5311  00256E  0E08               	movlw	low (_Channels+8)
  5312  002570  24F3               	addwf	prodl,w,c
  5313  002572  6ED9               	movwf	fsr2l,c
  5314  002574  0E04               	movlw	high (_Channels+8)
  5315  002576  20F4               	addwfc	prodh,w,c
  5316  002578  6EDA               	movwf	fsr2h,c
  5317  00257A  50DE               	movf	postinc2,w,c
  5318  00257C  10DE               	iorwf	postinc2,w,c
  5319  00257E  10DE               	iorwf	postinc2,w,c
  5320  002580  10DE               	iorwf	postinc2,w,c
  5321  002582  E020               	bz	l14872
  5322                           
  5323                           ; BSR set to: 2
  5324                           ;lorawan_eu.c: 1241: {
  5325                           ;lorawan_eu.c: 1242: minim = Channels[i].channelTimer;
  5326                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5327  002584  0EFE               	movlw	-2
  5328  002586  50E3               	movf	plusw1,w,c
  5329  002588  0D0E               	mullw	14
  5330  00258A  0E08               	movlw	low (_Channels+8)
  5331  00258C  24F3               	addwf	prodl,w,c
  5332  00258E  6ED9               	movwf	fsr2l,c
  5333  002590  0E04               	movlw	high (_Channels+8)
  5334  002592  20F4               	addwfc	prodh,w,c
  5335  002594  6EDA               	movwf	fsr2h,c
  5336  002596  CFDE F052          	movff	postinc2,btemp+8
  5337  00259A  CFDE F053          	movff	postinc2,btemp+9
  5338  00259E  CFDE F054          	movff	postinc2,btemp+10
  5339  0025A2  CFDE F055          	movff	postinc2,btemp+11
  5340                           
  5341                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  5342  0025A6  0EFA               	movlw	-6
  5343  0025A8  C052  FFE3         	movff	btemp+8,plusw1
  5344  0025AC  0EFB               	movlw	-5
  5345  0025AE  C053  FFE3         	movff	btemp+9,plusw1
  5346  0025B2  0EFC               	movlw	-4
  5347  0025B4  C054  FFE3         	movff	btemp+10,plusw1
  5348  0025B8  0EFD               	movlw	-3
  5349  0025BA  C055  FFE3         	movff	btemp+11,plusw1
  5350                           
  5351                           ; BSR set to: 2
  5352                           ;lorawan_eu.c: 1243: found = 1;
  5353                           ;stkvar	DutyCycleCallback@found @ sp[(-10)+9]
  5354  0025BE  0EFF               	movlw	-1
  5355  0025C0  6AE3               	clrf	plusw1,c
  5356  0025C2  2AE3               	incf	plusw1,f,c
  5357  0025C4                     l14872:
  5358                           
  5359                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5360  0025C4  0EFE               	movlw	-2
  5361  0025C6  2AE3               	incf	plusw1,f,c
  5362                           
  5363                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5364  0025C8  CFE3 F04B          	movff	plusw1,btemp+1
  5365  0025CC  0E0F               	movlw	15
  5366  0025CE  644B               	cpfsgt	btemp+1,c
  5367  0025D0  D743               	goto	l14854
  5368                           
  5369                           ;lorawan_eu.c: 1244: }
  5370                           ;lorawan_eu.c: 1245: }
  5371                           ;lorawan_eu.c: 1246: }
  5372                           ;lorawan_eu.c: 1247: if ( found == 1 )
  5373                           ;stkvar	DutyCycleCallback@found @ sp[(-10)+9]
  5374  0025D2  0EFF               	movlw	-1
  5375  0025D4  04E3               	decf	plusw1,w,c
  5376  0025D6  E001 D096          	bnz	l1314
  5377                           
  5378                           ;lorawan_eu.c: 1248: {
  5379                           ;lorawan_eu.c: 1249: loRa.lastTimerValue = minim;
  5380                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  5381  0025DA  50E1               	movf	fsr1l,w,c
  5382  0025DC  0FFA               	addlw	-6
  5383  0025DE  6ED9               	movwf	fsr2l,c
  5384  0025E0  50E2               	movf	fsr1h,w,c
  5385  0025E2  6EDA               	movwf	fsr2h,c
  5386  0025E4  0EFF               	movlw	255
  5387  0025E6  22DA               	addwfc	fsr2h,f,c
  5388  0025E8  CFDE F2C8          	movff	postinc2,_loRa+200
  5389  0025EC  CFDE F2C9          	movff	postinc2,_loRa+201
  5390  0025F0  CFDE F2CA          	movff	postinc2,_loRa+202
  5391  0025F4  CFDE F2CB          	movff	postinc2,_loRa+203
  5392                           
  5393                           ;lorawan_eu.c: 1250: SwTimerSetTimeout (loRa.dutyCycleTimerId, ((minim) < 0x000FFFFFUL ?
      +                           ( (((uint32_t)(minim)) << (12)) / 125UL ) : ( (((uint32_t)(minim)) / 125UL) << (12) ) )
      +                          );
  5394                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  5395  0025F8  0EFD               	movlw	-3
  5396  0025FA  50E3               	movf	plusw1,w,c
  5397  0025FC  E10D               	bnz	u17660
  5398  0025FE  0EFA               	movlw	-6
  5399  002600  28E3               	incf	plusw1,w,c
  5400  002602  0EFB               	movlw	-5
  5401  002604  CFE3 F04B          	movff	plusw1,btemp+1
  5402  002608  0EFF               	movlw	255
  5403  00260A  5A4B               	subwfb	btemp+1,f,c
  5404  00260C  0EFC               	movlw	-4
  5405  00260E  CFE3 F04B          	movff	plusw1,btemp+1
  5406  002612  0E0F               	movlw	15
  5407  002614  5A4B               	subwfb	btemp+1,f,c
  5408  002616  E328               	bnc	l14884
  5409  002618                     u17660:
  5410                           
  5411                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  5412  002618  50E1               	movf	fsr1l,w,c
  5413  00261A  0FFA               	addlw	-6
  5414  00261C  6ED9               	movwf	fsr2l,c
  5415  00261E  50E2               	movf	fsr1h,w,c
  5416  002620  6EDA               	movwf	fsr2h,c
  5417  002622  0EFF               	movlw	255
  5418  002624  22DA               	addwfc	fsr2h,f,c
  5419  002626  CFDE F064          	movff	postinc2,___lldiv@dividend
  5420  00262A  CFDE F065          	movff	postinc2,___lldiv@dividend+1
  5421  00262E  CFDE F066          	movff	postinc2,___lldiv@dividend+2
  5422  002632  CFDE F067          	movff	postinc2,___lldiv@dividend+3
  5423  002636  0E7D               	movlw	125
  5424  002638  0100               	movlb	0	; () banked
  5425  00263A  6F68               	movwf	___lldiv@divisor& (0+255),b
  5426  00263C  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
  5427  00263E  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
  5428  002640  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
  5429  002642  EC35  F030         	call	___lldiv	;wreg free
  5430  002646  C064  F052         	movff	?___lldiv,btemp+8
  5431  00264A  C065  F053         	movff	?___lldiv+1,btemp+9
  5432  00264E  C066  F054         	movff	?___lldiv+2,btemp+10
  5433  002652  C067  F055         	movff	?___lldiv+3,btemp+11
  5434  002656  0E0C               	movlw	12
  5435  002658                     u17675:
  5436  002658  90D8               	bcf	status,0,c
  5437  00265A  3652               	rlcf	btemp+8,f,c
  5438  00265C  3653               	rlcf	btemp+9,f,c
  5439  00265E  3654               	rlcf	btemp+10,f,c
  5440  002660  3655               	rlcf	btemp+11,f,c
  5441  002662  2EE8               	decfsz	wreg,f,c
  5442  002664  D7F9               	goto	u17675
  5443  002666  D02C               	goto	L1
  5444  002668                     l14884:
  5445                           
  5446                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  5447  002668  0EFA               	movlw	-6
  5448  00266A  CFE3 F052          	movff	plusw1,btemp+8
  5449  00266E  0EFB               	movlw	-5
  5450  002670  CFE3 F053          	movff	plusw1,btemp+9
  5451  002674  0EFC               	movlw	-4
  5452  002676  CFE3 F054          	movff	plusw1,btemp+10
  5453  00267A  0EFD               	movlw	-3
  5454  00267C  CFE3 F055          	movff	plusw1,btemp+11
  5455  002680  0E0C               	movlw	12
  5456  002682                     u17685:
  5457  002682  90D8               	bcf	status,0,c
  5458  002684  3652               	rlcf	btemp+8,f,c
  5459  002686  3653               	rlcf	btemp+9,f,c
  5460  002688  3654               	rlcf	btemp+10,f,c
  5461  00268A  3655               	rlcf	btemp+11,f,c
  5462  00268C  2EE8               	decfsz	wreg,f,c
  5463  00268E  D7F9               	goto	u17685
  5464  002690  C052  F064         	movff	btemp+8,___lldiv@dividend
  5465  002694  C053  F065         	movff	btemp+9,___lldiv@dividend+1
  5466  002698  C054  F066         	movff	btemp+10,___lldiv@dividend+2
  5467  00269C  C055  F067         	movff	btemp+11,___lldiv@dividend+3
  5468  0026A0  0E7D               	movlw	125
  5469  0026A2  0100               	movlb	0	; () banked
  5470  0026A4  6F68               	movwf	___lldiv@divisor& (0+255),b
  5471  0026A6  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
  5472  0026A8  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
  5473  0026AA  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
  5474  0026AC  EC35  F030         	call	___lldiv	;wreg free
  5475  0026B0  C064  F052         	movff	?___lldiv,btemp+8
  5476  0026B4  C065  F053         	movff	?___lldiv+1,btemp+9
  5477  0026B8  C066  F054         	movff	?___lldiv+2,btemp+10
  5478  0026BC  C067  F055         	movff	?___lldiv+3,btemp+11
  5479  0026C0                     L1:
  5480                           
  5481                           ;stkvar	_DutyCycleCallback$2021 @ sp[(-10)+0]
  5482  0026C0  0EF6               	movlw	-10
  5483  0026C2  C052  FFE3         	movff	btemp+8,plusw1
  5484  0026C6  0EF7               	movlw	-9
  5485  0026C8  C053  FFE3         	movff	btemp+9,plusw1
  5486  0026CC  0EF8               	movlw	-8
  5487  0026CE  C054  FFE3         	movff	btemp+10,plusw1
  5488  0026D2  0EF9               	movlw	-7
  5489  0026D4  C055  FFE3         	movff	btemp+11,plusw1
  5490                           
  5491                           ; BSR set to: 0
  5492                           ;stkvar	_DutyCycleCallback$2021 @ sp[(-10)+0]
  5493  0026D8  50E1               	movf	fsr1l,w,c
  5494  0026DA  0FF6               	addlw	-10
  5495  0026DC  6ED9               	movwf	fsr2l,c
  5496  0026DE  50E2               	movf	fsr1h,w,c
  5497  0026E0  6EDA               	movwf	fsr2h,c
  5498  0026E2  0EFF               	movlw	255
  5499  0026E4  22DA               	addwfc	fsr2h,f,c
  5500  0026E6  CFDE F071          	movff	postinc2,SwTimerSetTimeout@timeout
  5501  0026EA  CFDE F072          	movff	postinc2,SwTimerSetTimeout@timeout+1
  5502  0026EE  CFDE F073          	movff	postinc2,SwTimerSetTimeout@timeout+2
  5503  0026F2  CFDE F074          	movff	postinc2,SwTimerSetTimeout@timeout+3
  5504  0026F6  0102               	movlb	2	; () banked
  5505  0026F8  51E9               	movf	(_loRa+233)& (0+255),w,b
  5506  0026FA  EC44  F036         	call	_SwTimerSetTimeout
  5507                           
  5508                           ; BSR set to: 0
  5509                           ;lorawan_eu.c: 1251: SwTimerStart (loRa.dutyCycleTimerId);
  5510  0026FE  0102               	movlb	2	; () banked
  5511  002700  51E9               	movf	(_loRa+233)& (0+255),w,b
  5512  002702  EC35  F02E         	call	_SwTimerStart
  5513  002706                     l1314:
  5514                           
  5515                           ; _DutyCycleCallback: autosize = 10, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 1, argsize = 1, vargsize = 0
  5516  002706  0EF5               	movlw	245
  5517  002708  26E1               	addwf	fsr1l,f,c
  5518  00270A  0EFF               	movlw	255
  5519  00270C  22E2               	addwfc	fsr1h,f,c
  5520  00270E  0CFF               	retlw	255	;funcret
  5521  002710                     __end_of_DutyCycleCallback:
  5522                           	opt stack 0
  5523                           tosu	equ	0xFFF
  5524                           tosh	equ	0xFFE
  5525                           tosl	equ	0xFFD
  5526                           pclath	equ	0xFFA
  5527                           tblptru	equ	0xFF8
  5528                           tblptrh	equ	0xFF7
  5529                           tblptrl	equ	0xFF6
  5530                           tablat	equ	0xFF5
  5531                           prodh	equ	0xFF4
  5532                           prodl	equ	0xFF3
  5533                           intcon	equ	0xFF2
  5534                           intcon2	equ	0xFF1
  5535                           intcon3	equ	0xFF0
  5536                           postinc0	equ	0xFEE
  5537                           wreg	equ	0xFE8
  5538                           postinc1	equ	0xFE6
  5539                           plusw1	equ	0xFE3
  5540                           fsr1h	equ	0xFE2
  5541                           fsr1l	equ	0xFE1
  5542                           indf2	equ	0xFDF
  5543                           postinc2	equ	0xFDE
  5544                           postdec2	equ	0xFDD
  5545                           fsr2h	equ	0xFDA
  5546                           fsr2l	equ	0xFD9
  5547                           status	equ	0xFD8
  5548                           
  5549 ;; *************** function _UpdateJoinSuccessState *****************
  5550 ;; Defined at:
  5551 ;;		line 1041 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  5552 ;; Parameters:    Size  Location     Type
  5553 ;;  param           1  [STACK] unsigned char 
  5554 ;; Auto vars:     Size  Location     Type
  5555 ;;		None
  5556 ;; Return value:  Size  Location     Type
  5557 ;;                  1  [STACK] void 
  5558 ;; Registers used:
  5559 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+8, btemp+9, btemp+10, btemp+11, tosl, prodl, prod
      +h, cstack
  5560 ;; Tracked objects:
  5561 ;;		On entry : F/0
  5562 ;;		On exit  : F/1
  5563 ;;		Unchanged: 0/0
  5564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5568 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5569 ;;Total ram usage:        0 bytes
  5570 ;; Hardware stack levels used:    1
  5571 ;; Hardware stack levels required when called:   11
  5572 ;; This function calls:
  5573 ;;		_RxJoinResponse
  5574 ;;		_SwTimerSetTimeout
  5575 ;;		_SwTimerStart
  5576 ;;		___lldiv
  5577 ;; This function is called by:
  5578 ;;		_SetCallbackSoftwareTimers
  5579 ;;		_LORAWAN_RxDone
  5580 ;;		_SwTimersExecute
  5581 ;; This function uses a reentrant model
  5582 ;;
  5583                           
  5584                           	psect	text32
  5585  004552                     __ptext32:
  5586                           	opt stack 0
  5587  004552                     _UpdateJoinSuccessState:
  5588                           	opt stack 0
  5589                           
  5590                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  5591  004552  52E6               	movf	postinc1,f,c
  5592  004554  52E6               	movf	postinc1,f,c
  5593  004556  52E6               	movf	postinc1,f,c
  5594  004558  52E6               	movf	postinc1,f,c
  5595                           
  5596                           ;lorawan.c: 1043: loRa.lorawanMacStatus.joining = 0;
  5597                           
  5598                           ;incstack = 0
  5599  00455A  0102               	movlb	2	; () banked
  5600  00455C  9500               	bcf	_loRa& (0+255),2,b
  5601                           
  5602                           ;lorawan.c: 1044: loRa.macStatus.networkJoined = 1;
  5603  00455E  8902               	bsf	(_loRa+2)& (0+255),4,b
  5604                           
  5605                           ; BSR set to: 2
  5606                           ;lorawan.c: 1045: loRa.macStatus.macState = IDLE;
  5607  004560  0EF0               	movlw	-16
  5608  004562  1702               	andwf	(_loRa+2)& (0+255),f,b
  5609                           
  5610                           ; BSR set to: 2
  5611                           ;lorawan.c: 1047: loRa.adrAckCnt = 0;
  5612  004564  6BD0               	clrf	(_loRa+208)& (0+255),b
  5613  004566  6BD1               	clrf	(_loRa+209)& (0+255),b
  5614                           
  5615                           ; BSR set to: 2
  5616                           ;lorawan.c: 1048: loRa.counterAdrAckDelay = 0;
  5617  004568  6BEE               	clrf	(_loRa+238)& (0+255),b
  5618                           
  5619                           ; BSR set to: 2
  5620                           ;lorawan.c: 1051: if (loRa.macStatus.linkCheck == 1)
  5621  00456A  A503               	btfss	(_loRa+3)& (0+255),2,b
  5622  00456C  D074               	goto	l13720
  5623                           
  5624                           ; BSR set to: 2
  5625                           ;lorawan.c: 1052: {
  5626                           ;lorawan.c: 1053: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 
      +                          0x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32
      +                          _t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
  5627  00456E  51CF               	movf	(_loRa+207)& (0+255),w,b
  5628  004570  E106               	bnz	u15610
  5629  004572  29CC               	incf	(_loRa+204)& (0+255),w,b
  5630  004574  0EFF               	movlw	255
  5631  004576  59CD               	subwfb	(_loRa+205)& (0+255),w,b
  5632  004578  0E0F               	movlw	15
  5633  00457A  59CE               	subwfb	(_loRa+206)& (0+255),w,b
  5634  00457C  E321               	bnc	l13714
  5635  00457E                     u15610:
  5636                           
  5637                           ; BSR set to: 2
  5638  00457E  C2CC  F064         	movff	_loRa+204,___lldiv@dividend
  5639  004582  C2CD  F065         	movff	_loRa+205,___lldiv@dividend+1
  5640  004586  C2CE  F066         	movff	_loRa+206,___lldiv@dividend+2
  5641  00458A  C2CF  F067         	movff	_loRa+207,___lldiv@dividend+3
  5642  00458E  0E7D               	movlw	125
  5643  004590  0100               	movlb	0	; () banked
  5644  004592  6F68               	movwf	___lldiv@divisor& (0+255),b
  5645  004594  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
  5646  004596  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
  5647  004598  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
  5648  00459A  EC35  F030         	call	___lldiv	;wreg free
  5649  00459E  C064  F052         	movff	?___lldiv,btemp+8
  5650  0045A2  C065  F053         	movff	?___lldiv+1,btemp+9
  5651  0045A6  C066  F054         	movff	?___lldiv+2,btemp+10
  5652  0045AA  C067  F055         	movff	?___lldiv+3,btemp+11
  5653  0045AE  0E0C               	movlw	12
  5654  0045B0                     u15625:
  5655  0045B0  90D8               	bcf	status,0,c
  5656  0045B2  3652               	rlcf	btemp+8,f,c
  5657  0045B4  3653               	rlcf	btemp+9,f,c
  5658  0045B6  3654               	rlcf	btemp+10,f,c
  5659  0045B8  3655               	rlcf	btemp+11,f,c
  5660  0045BA  2EE8               	decfsz	wreg,f,c
  5661  0045BC  D7F9               	goto	u15625
  5662  0045BE  D028               	goto	L2
  5663  0045C0                     l13714:
  5664                           
  5665                           ; BSR set to: 2
  5666  0045C0  C2CC  F052         	movff	_loRa+204,btemp+8
  5667  0045C4  C2CD  F053         	movff	_loRa+205,btemp+9
  5668  0045C8  C2CE  F054         	movff	_loRa+206,btemp+10
  5669  0045CC  C2CF  F055         	movff	_loRa+207,btemp+11
  5670  0045D0  0E0C               	movlw	12
  5671  0045D2                     u15635:
  5672  0045D2  90D8               	bcf	status,0,c
  5673  0045D4  3652               	rlcf	btemp+8,f,c
  5674  0045D6  3653               	rlcf	btemp+9,f,c
  5675  0045D8  3654               	rlcf	btemp+10,f,c
  5676  0045DA  3655               	rlcf	btemp+11,f,c
  5677  0045DC  2EE8               	decfsz	wreg,f,c
  5678  0045DE  D7F9               	goto	u15635
  5679  0045E0  C052  F064         	movff	btemp+8,___lldiv@dividend
  5680  0045E4  C053  F065         	movff	btemp+9,___lldiv@dividend+1
  5681  0045E8  C054  F066         	movff	btemp+10,___lldiv@dividend+2
  5682  0045EC  C055  F067         	movff	btemp+11,___lldiv@dividend+3
  5683  0045F0  0E7D               	movlw	125
  5684  0045F2  0100               	movlb	0	; () banked
  5685  0045F4  6F68               	movwf	___lldiv@divisor& (0+255),b
  5686  0045F6  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
  5687  0045F8  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
  5688  0045FA  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
  5689  0045FC  EC35  F030         	call	___lldiv	;wreg free
  5690  004600  C064  F052         	movff	?___lldiv,btemp+8
  5691  004604  C065  F053         	movff	?___lldiv+1,btemp+9
  5692  004608  C066  F054         	movff	?___lldiv+2,btemp+10
  5693  00460C  C067  F055         	movff	?___lldiv+3,btemp+11
  5694  004610                     L2:
  5695                           
  5696                           ;stkvar	_UpdateJoinSuccessState$3024 @ sp[(-4)+0]
  5697  004610  0EFC               	movlw	-4
  5698  004612  C052  FFE3         	movff	btemp+8,plusw1
  5699  004616  0EFD               	movlw	-3
  5700  004618  C053  FFE3         	movff	btemp+9,plusw1
  5701  00461C  0EFE               	movlw	-2
  5702  00461E  C054  FFE3         	movff	btemp+10,plusw1
  5703  004622  0EFF               	movlw	-1
  5704  004624  C055  FFE3         	movff	btemp+11,plusw1
  5705                           
  5706                           ; BSR set to: 0
  5707                           ;stkvar	_UpdateJoinSuccessState$3024 @ sp[(-4)+0]
  5708  004628  50E1               	movf	fsr1l,w,c
  5709  00462A  0FFC               	addlw	-4
  5710  00462C  6ED9               	movwf	fsr2l,c
  5711  00462E  50E2               	movf	fsr1h,w,c
  5712  004630  6EDA               	movwf	fsr2h,c
  5713  004632  0EFF               	movlw	255
  5714  004634  22DA               	addwfc	fsr2h,f,c
  5715  004636  CFDE F071          	movff	postinc2,SwTimerSetTimeout@timeout
  5716  00463A  CFDE F072          	movff	postinc2,SwTimerSetTimeout@timeout+1
  5717  00463E  CFDE F073          	movff	postinc2,SwTimerSetTimeout@timeout+2
  5718  004642  CFDE F074          	movff	postinc2,SwTimerSetTimeout@timeout+3
  5719  004646  0102               	movlb	2	; () banked
  5720  004648  51E7               	movf	(_loRa+231)& (0+255),w,b
  5721  00464A  EC44  F036         	call	_SwTimerSetTimeout
  5722                           
  5723                           ; BSR set to: 0
  5724                           ;lorawan.c: 1054: SwTimerStart(loRa.linkCheckTimerId);
  5725  00464E  0102               	movlb	2	; () banked
  5726  004650  51E7               	movf	(_loRa+231)& (0+255),w,b
  5727  004652  EC35  F02E         	call	_SwTimerStart
  5728  004656                     l13720:
  5729                           
  5730                           ;lorawan.c: 1055: }
  5731                           ;lorawan.c: 1057: if (rxPayload.RxJoinResponse != (0))
  5732  004656  0101               	movlb	1	; () banked
  5733  004658  5170               	movf	(_rxPayload+2)& (0+255),w,b
  5734  00465A  1171               	iorwf	(_rxPayload+3)& (0+255),w,b
  5735  00465C  E00E               	bz	l2039
  5736                           
  5737                           ; BSR set to: 1
  5738                           ;lorawan.c: 1058: {
  5739                           ;lorawan.c: 1059: rxPayload.RxJoinResponse(1);
  5740  00465E  EE21  F070         	lfsr	2,_rxPayload+2
  5741  004662  D801               	call	u15658
  5742  004664  D00A               	goto	l2039
  5743  004666                     u15658:
  5744  004666  0005               	push	
  5745  004668  6EFA               	movwf	pclath,c
  5746  00466A  50DE               	movf	postinc2,w,c
  5747  00466C  6EFD               	movwf	tosl,c
  5748  00466E  50DE               	movf	postinc2,w,c
  5749  004670  6EFE               	movwf	tosh,c
  5750  004672  50F8               	movf	tblptru,w,c
  5751  004674  6EFF               	movwf	tosu,c
  5752  004676  50FA               	movf	pclath,w,c
  5753  004678  0C01               	retlw	1	;indir
  5754  00467A                     l2039:
  5755                           
  5756                           ; BSR set to: 1
  5757                           ; _UpdateJoinSuccessState: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  5758  00467A  0EFB               	movlw	251
  5759  00467C  26E1               	addwf	fsr1l,f,c
  5760  00467E  0EFF               	movlw	255
  5761  004680  22E2               	addwfc	fsr1h,f,c
  5762  004682  0CFF               	retlw	255	;funcret
  5763  004684                     __end_of_UpdateJoinSuccessState:
  5764                           	opt stack 0
  5765                           tosu	equ	0xFFF
  5766                           tosh	equ	0xFFE
  5767                           tosl	equ	0xFFD
  5768                           pclath	equ	0xFFA
  5769                           tblptru	equ	0xFF8
  5770                           tblptrh	equ	0xFF7
  5771                           tblptrl	equ	0xFF6
  5772                           tablat	equ	0xFF5
  5773                           prodh	equ	0xFF4
  5774                           prodl	equ	0xFF3
  5775                           intcon	equ	0xFF2
  5776                           intcon2	equ	0xFF1
  5777                           intcon3	equ	0xFF0
  5778                           postinc0	equ	0xFEE
  5779                           wreg	equ	0xFE8
  5780                           postinc1	equ	0xFE6
  5781                           plusw1	equ	0xFE3
  5782                           fsr1h	equ	0xFE2
  5783                           fsr1l	equ	0xFE1
  5784                           indf2	equ	0xFDF
  5785                           postinc2	equ	0xFDE
  5786                           postdec2	equ	0xFDD
  5787                           fsr2h	equ	0xFDA
  5788                           fsr2l	equ	0xFD9
  5789                           status	equ	0xFD8
  5790                           
  5791 ;; *************** function _AutomaticReplyCallback *****************
  5792 ;; Defined at:
  5793 ;;		line 1017 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  5794 ;; Parameters:    Size  Location     Type
  5795 ;;  param           1  [STACK] unsigned char 
  5796 ;; Auto vars:     Size  Location     Type
  5797 ;;		None
  5798 ;; Return value:  Size  Location     Type
  5799 ;;                  1  [STACK] void 
  5800 ;; Registers used:
  5801 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5802 ;; Tracked objects:
  5803 ;;		On entry : F/0
  5804 ;;		On exit  : F/2
  5805 ;;		Unchanged: 0/0
  5806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5811 ;;Total ram usage:        0 bytes
  5812 ;; Hardware stack levels used:    1
  5813 ;; Hardware stack levels required when called:   14
  5814 ;; This function calls:
  5815 ;;		_LORAWAN_Send
  5816 ;; This function is called by:
  5817 ;;		_SetCallbackSoftwareTimers
  5818 ;;		_SwTimersExecute
  5819 ;; This function uses a reentrant model
  5820 ;;
  5821                           
  5822                           	psect	text33
  5823  0073D4                     __ptext33:
  5824                           	opt stack 0
  5825  0073D4                     _AutomaticReplyCallback:
  5826                           	opt stack 14
  5827                           
  5828                           ;lorawan.c: 1019: loRa.macStatus.macState = IDLE;
  5829                           
  5830                           ; BSR set to: 1
  5831                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  5832                           ;incstack = 0
  5833  0073D4  0EF0               	movlw	-16
  5834  0073D6  0102               	movlb	2	; () banked
  5835  0073D8  1702               	andwf	(_loRa+2)& (0+255),f,b
  5836                           
  5837                           ; BSR set to: 2
  5838                           ;lorawan.c: 1020: LORAWAN_Send (0, 0, 0, 0);
  5839  0073DA  0E00               	movlw	0
  5840  0073DC  0100               	movlb	0	; () banked
  5841  0073DE  6FE1               	movwf	LORAWAN_Send@port& (0+255),b
  5842  0073E0  6FE2               	movwf	LORAWAN_Send@buffer& (0+255),b
  5843  0073E2  6FE3               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
  5844  0073E4  6FE4               	movwf	LORAWAN_Send@bufferLength& (0+255),b
  5845  0073E6  EC2E  F02A         	call	_LORAWAN_Send
  5846                           
  5847                           ;lorawan.c: 1021: loRa.lorawanMacStatus.fPending = 0;
  5848  0073EA  0102               	movlb	2	; () banked
  5849  0073EC  9700               	bcf	_loRa& (0+255),3,b
  5850                           
  5851                           ; BSR set to: 2
  5852                           ; _AutomaticReplyCallback: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  5853  0073EE  52E5               	movf	postdec1,f,c
  5854  0073F0  0012               	return		;funcret
  5855  0073F2                     __end_of_AutomaticReplyCallback:
  5856                           	opt stack 0
  5857                           tosu	equ	0xFFF
  5858                           tosh	equ	0xFFE
  5859                           tosl	equ	0xFFD
  5860                           pclath	equ	0xFFA
  5861                           tblptru	equ	0xFF8
  5862                           tblptrh	equ	0xFF7
  5863                           tblptrl	equ	0xFF6
  5864                           tablat	equ	0xFF5
  5865                           prodh	equ	0xFF4
  5866                           prodl	equ	0xFF3
  5867                           intcon	equ	0xFF2
  5868                           intcon2	equ	0xFF1
  5869                           intcon3	equ	0xFF0
  5870                           postinc0	equ	0xFEE
  5871                           wreg	equ	0xFE8
  5872                           postinc1	equ	0xFE6
  5873                           postdec1	equ	0xFE5
  5874                           plusw1	equ	0xFE3
  5875                           fsr1h	equ	0xFE2
  5876                           fsr1l	equ	0xFE1
  5877                           indf2	equ	0xFDF
  5878                           postinc2	equ	0xFDE
  5879                           postdec2	equ	0xFDD
  5880                           fsr2h	equ	0xFDA
  5881                           fsr2l	equ	0xFD9
  5882                           status	equ	0xFD8
  5883                           
  5884 ;; *************** function _AckRetransmissionCallback *****************
  5885 ;; Defined at:
  5886 ;;		line 934 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;  param           1  [STACK] unsigned char 
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;  maximumPacke    1  [STACK] unsigned char 
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  1  [STACK] void 
  5893 ;; Registers used:
  5894 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+10, btemp+11, tos
      +l, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5895 ;; Tracked objects:
  5896 ;;		On entry : F/0
  5897 ;;		On exit  : C/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5904 ;;Total ram usage:        0 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; Hardware stack levels required when called:   13
  5907 ;; This function calls:
  5908 ;;		_FindSmallestDataRate
  5909 ;;		_LORAWAN_GetMaxPayloadSize
  5910 ;;		_RADIO_Transmit
  5911 ;;		_ResetParametersForConfirmedTransmission
  5912 ;;		_RxDataDone
  5913 ;;		_SelectChannelForTransmission
  5914 ;;		_UpdateRetransmissionAckTimeoutState
  5915 ;; This function is called by:
  5916 ;;		_SetCallbackSoftwareTimers
  5917 ;;		_SwTimersExecute
  5918 ;; This function uses a reentrant model
  5919 ;;
  5920                           
  5921                           	psect	text34
  5922  0049B8                     __ptext34:
  5923                           	opt stack 0
  5924  0049B8                     _AckRetransmissionCallback:
  5925                           	opt stack 0
  5926                           
  5927                           ; BSR set to: 2
  5928                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  5929  0049B8  52E6               	movf	postinc1,f,c
  5930                           
  5931                           ;lorawan.c: 936: uint8_t maximumPacketSize;
  5932                           ;lorawan.c: 938: if (loRa.macStatus.macPause == 0)
  5933                           
  5934                           ;incstack = 0
  5935  0049BA  0102               	movlb	2	; () banked
  5936  0049BC  B103               	btfsc	(_loRa+3)& (0+255),0,b
  5937  0049BE  D075               	goto	l14992
  5938                           
  5939                           ; BSR set to: 2
  5940                           ;lorawan.c: 939: {
  5941                           ;lorawan.c: 940: if (loRa.counterRepetitionsConfirmedUplink <= loRa.maxRepetitionsConfir
      +                          medUplink)
  5942  0049C0  51D9               	movf	(_loRa+217)& (0+255),w,b
  5943  0049C2  5DD7               	subwf	(_loRa+215)& (0+255),w,b
  5944  0049C4  E354               	bnc	l14982
  5945                           
  5946                           ; BSR set to: 2
  5947                           ;lorawan.c: 941: {
  5948                           ;lorawan.c: 942: maximumPacketSize = LORAWAN_GetMaxPayloadSize () + 13;
  5949  0049C6  EC65  F036         	call	_LORAWAN_GetMaxPayloadSize	;wreg free
  5950  0049CA  6E55               	movwf	btemp+11,c
  5951  0049CC  0E0D               	movlw	13
  5952  0049CE  2655               	addwf	btemp+11,f,c
  5953                           
  5954                           ;stkvar	AckRetransmissionCallback@maximumPacketSize @ sp[(-1)+0]
  5955  0049D0  0EFF               	movlw	-1
  5956  0049D2  C055  FFE3         	movff	btemp+11,plusw1
  5957                           
  5958                           ; BSR set to: 0
  5959                           ;lorawan.c: 945: if (loRa.lastPacketLength <= maximumPacketSize)
  5960                           ;stkvar	AckRetransmissionCallback@maximumPacketSize @ sp[(-1)+0]
  5961  0049D6  50E3               	movf	plusw1,w,c
  5962  0049D8  6E4B               	movwf	btemp+1,c
  5963  0049DA  6A4C               	clrf	btemp+2,c
  5964  0049DC  0102               	movlb	2	; () banked
  5965  0049DE  51D4               	movf	(_loRa+212)& (0+255),w,b
  5966  0049E0  5C4B               	subwf	btemp+1,w,c
  5967  0049E2  51D5               	movf	(_loRa+213)& (0+255),w,b
  5968  0049E4  584C               	subwfb	btemp+2,w,c
  5969  0049E6  E333               	bnc	l14976
  5970                           
  5971                           ; BSR set to: 2
  5972                           ;lorawan.c: 946: {
  5973                           ;lorawan.c: 947: if (SelectChannelForTransmission (1) == OK)
  5974  0049E8  0E01               	movlw	1
  5975  0049EA  ECE2  F032         	call	_SelectChannelForTransmission
  5976  0049EE  0900               	iorlw	0
  5977  0049F0  E12B               	bnz	l14972
  5978                           
  5979                           ; BSR set to: 0
  5980                           ;lorawan.c: 948: {
  5981                           ;lorawan.c: 950: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
  5982  0049F2  0EF0               	movlw	low (_macBuffer+16)
  5983  0049F4  6F94               	movwf	RADIO_Transmit@buffer& (0+255),b
  5984  0049F6  0E04               	movlw	high (_macBuffer+16)
  5985  0049F8  6F95               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
  5986  0049FA  C2D4  F096         	movff	_loRa+212,RADIO_Transmit@bufferLen
  5987  0049FE  ECF9  F017         	call	_RADIO_Transmit	;wreg free
  5988  004A02  C094  F04B         	movff	?_RADIO_Transmit,btemp+1
  5989  004A06  C095  F04C         	movff	?_RADIO_Transmit+1,btemp+2
  5990  004A0A  504B               	movf	btemp+1,w,c
  5991  004A0C  104C               	iorwf	btemp+2,w,c
  5992  004A0E  E11C               	bnz	l14972
  5993                           
  5994                           ; BSR set to: 0
  5995                           ;lorawan.c: 951: {
  5996                           ;lorawan.c: 952: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
  5997  004A10  0102               	movlb	2	; () banked
  5998  004A12  5102               	movf	(_loRa+2)& (0+255),w,b
  5999  004A14  0BF0               	andlw	-16
  6000  004A16  0901               	iorlw	1
  6001  004A18  6F02               	movwf	(_loRa+2)& (0+255),b
  6002                           
  6003                           ; BSR set to: 2
  6004                           ;lorawan.c: 953: loRa.counterRepetitionsConfirmedUplink ++ ;
  6005  004A1A  2BD9               	incf	(_loRa+217)& (0+255),f,b
  6006                           
  6007                           ; BSR set to: 2
  6008                           ;lorawan.c: 956: if ( ( (loRa.counterRepetitionsConfirmedUplink % 2) == 0) && (loRa.curr
      +                          entDataRate != 0) && (loRa.counterRepetitionsConfirmedUplink != (loRa.maxRepetitionsConf
      +                          irmedUplink + 1) ) )
  6009  004A1C  B1D9               	btfsc	(_loRa+217)& (0+255),0,b
  6010  004A1E  D047               	goto	l2012
  6011                           
  6012                           ; BSR set to: 2
  6013  004A20  51DF               	movf	(_loRa+223)& (0+255),w,b
  6014  004A22  E045               	bz	l2012
  6015                           
  6016                           ; BSR set to: 2
  6017  004A24  51D9               	movf	(_loRa+217)& (0+255),w,b
  6018  004A26  6E4B               	movwf	btemp+1,c
  6019  004A28  6A4C               	clrf	btemp+2,c
  6020  004A2A  51D7               	movf	(_loRa+215)& (0+255),w,b
  6021  004A2C  6E54               	movwf	btemp+10,c
  6022  004A2E  6A55               	clrf	btemp+11,c
  6023  004A30  2A54               	incf	btemp+10,f,c
  6024  004A32  0E00               	movlw	0
  6025  004A34  2255               	addwfc	btemp+11,f,c
  6026  004A36  504B               	movf	btemp+1,w,c
  6027  004A38  1854               	xorwf	btemp+10,w,c
  6028  004A3A  E103               	bnz	u17890
  6029  004A3C  504C               	movf	btemp+2,w,c
  6030  004A3E  1855               	xorwf	btemp+11,w,c
  6031  004A40  E036               	bz	l2012
  6032  004A42                     u17890:
  6033                           
  6034                           ; BSR set to: 2
  6035                           ;lorawan.c: 957: {
  6036                           ;lorawan.c: 958: FindSmallestDataRate();
  6037  004A42  EC00  F02D         	call	_FindSmallestDataRate	;wreg free
  6038  004A46  D033               	goto	l2012
  6039  004A48                     l14972:
  6040                           
  6041                           ; BSR set to: 0
  6042                           ;lorawan.c: 961: else
  6043                           ;lorawan.c: 962: {
  6044                           ;lorawan.c: 964: UpdateRetransmissionAckTimeoutState ();
  6045  004A48  EC17  F031         	call	_UpdateRetransmissionAckTimeoutState	;wreg free
  6046  004A4C  D030               	goto	l2012
  6047  004A4E                     l14976:
  6048                           
  6049                           ; BSR set to: 2
  6050                           ;lorawan.c: 973: else
  6051                           ;lorawan.c: 974: {
  6052                           ;lorawan.c: 975: ResetParametersForConfirmedTransmission ();
  6053  004A4E  EC4B  F03B         	call	_ResetParametersForConfirmedTransmission	;wreg free
  6054                           
  6055                           ; BSR set to: 2
  6056                           ;lorawan.c: 976: if (rxPayload.RxAppData != (0))
  6057  004A52  0101               	movlb	1	; () banked
  6058  004A54  516E               	movf	_rxPayload& (0+255),w,b
  6059  004A56  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
  6060  004A58  E02A               	bz	l2012
  6061                           
  6062                           ; BSR set to: 1
  6063                           ;lorawan.c: 977: {
  6064                           ;lorawan.c: 978: rxPayload.RxAppData((0), 0, INVALID_BUFFER_LEN);
  6065  004A5A  0E00               	movlw	0
  6066  004A5C  0100               	movlb	0	; () banked
  6067  004A5E  6F64               	movwf	RxDataDone@pData& (0+255),b
  6068  004A60  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
  6069  004A62  6F66               	movwf	RxDataDone@dataLength& (0+255),b
  6070  004A64  0E04               	movlw	4
  6071  004A66  6F67               	movwf	RxDataDone@status& (0+255),b
  6072  004A68  D801               	call	u17918
  6073  004A6A  D021               	goto	l2012
  6074  004A6C                     u17918:
  6075  004A6C  D013               	goto	u17958
  6076  004A6E                     l14982:
  6077                           
  6078                           ; BSR set to: 2
  6079                           ;lorawan.c: 982: else if ( (loRa.counterRepetitionsConfirmedUplink > loRa.maxRepetitions
      +                          ConfirmedUplink) && (loRa.macStatus.macPause == 0) )
  6080  004A6E  51D9               	movf	(_loRa+217)& (0+255),w,b
  6081  004A70  5DD7               	subwf	(_loRa+215)& (0+255),w,b
  6082  004A72  E21D               	bc	l2012
  6083                           
  6084                           ; BSR set to: 2
  6085  004A74  B103               	btfsc	(_loRa+3)& (0+255),0,b
  6086  004A76  D01B               	goto	l2012
  6087                           
  6088                           ; BSR set to: 2
  6089                           ;lorawan.c: 983: {
  6090                           ;lorawan.c: 984: ResetParametersForConfirmedTransmission ();
  6091  004A78  EC4B  F03B         	call	_ResetParametersForConfirmedTransmission	;wreg free
  6092                           
  6093                           ; BSR set to: 2
  6094                           ;lorawan.c: 985: if (rxPayload.RxAppData != (0))
  6095  004A7C  0101               	movlb	1	; () banked
  6096  004A7E  516E               	movf	_rxPayload& (0+255),w,b
  6097  004A80  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
  6098  004A82  E015               	bz	l2012
  6099                           
  6100                           ; BSR set to: 1
  6101                           ;lorawan.c: 986: {
  6102                           ;lorawan.c: 987: rxPayload.RxAppData((0), 0, MAC_NOT_OK);
  6103  004A84  0E00               	movlw	0
  6104  004A86  0100               	movlb	0	; () banked
  6105  004A88  6F64               	movwf	RxDataDone@pData& (0+255),b
  6106  004A8A  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
  6107  004A8C  6F66               	movwf	RxDataDone@dataLength& (0+255),b
  6108  004A8E  6F67               	movwf	RxDataDone@status& (0+255),b
  6109  004A90  D801               	call	u17958
  6110  004A92  D00D               	goto	l2012
  6111  004A94                     u17958:
  6112  004A94  0005               	push	
  6113  004A96  0101               	movlb	1	; () banked
  6114  004A98  6EFA               	movwf	pclath,c
  6115  004A9A  516E               	movf	_rxPayload& (0+255),w,b
  6116  004A9C  6EFD               	movwf	tosl,c
  6117  004A9E  516F               	movf	(_rxPayload+1)& (0+255),w,b
  6118  004AA0  6EFE               	movwf	tosh,c
  6119  004AA2  50F8               	movf	tblptru,w,c
  6120  004AA4  6EFF               	movwf	tosu,c
  6121  004AA6  50FA               	movf	pclath,w,c
  6122  004AA8  0012               	return		;indir
  6123  004AAA                     l14992:
  6124                           
  6125                           ; BSR set to: 2
  6126                           ;lorawan.c: 991: else
  6127                           ;lorawan.c: 992: {
  6128                           ;lorawan.c: 993: ResetParametersForConfirmedTransmission ();
  6129  004AAA  EC4B  F03B         	call	_ResetParametersForConfirmedTransmission	;wreg free
  6130  004AAE                     l2012:
  6131                           
  6132                           ; _AckRetransmissionCallback: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 1, argsize = 1, vargsize = 0
  6133  004AAE  52E5               	movf	postdec1,f,c
  6134  004AB0  52E5               	movf	postdec1,f,c
  6135  004AB2  0012               	return		;funcret
  6136  004AB4                     __end_of_AckRetransmissionCallback:
  6137                           	opt stack 0
  6138                           tosu	equ	0xFFF
  6139                           tosh	equ	0xFFE
  6140                           tosl	equ	0xFFD
  6141                           pclath	equ	0xFFA
  6142                           tblptru	equ	0xFF8
  6143                           tblptrh	equ	0xFF7
  6144                           tblptrl	equ	0xFF6
  6145                           tablat	equ	0xFF5
  6146                           prodh	equ	0xFF4
  6147                           prodl	equ	0xFF3
  6148                           intcon	equ	0xFF2
  6149                           intcon2	equ	0xFF1
  6150                           intcon3	equ	0xFF0
  6151                           postinc0	equ	0xFEE
  6152                           wreg	equ	0xFE8
  6153                           postinc1	equ	0xFE6
  6154                           postdec1	equ	0xFE5
  6155                           plusw1	equ	0xFE3
  6156                           fsr1h	equ	0xFE2
  6157                           fsr1l	equ	0xFE1
  6158                           indf2	equ	0xFDF
  6159                           postinc2	equ	0xFDE
  6160                           postdec2	equ	0xFDD
  6161                           fsr2h	equ	0xFDA
  6162                           fsr2l	equ	0xFD9
  6163                           status	equ	0xFD8
  6164                           
  6165 ;; *************** function _LORAWAN_LinkCheckCallback *****************
  6166 ;; Defined at:
  6167 ;;		line 881 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6168 ;; Parameters:    Size  Location     Type
  6169 ;;  param           1  [STACK] unsigned char 
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;  iCtr            1  [STACK] unsigned char 
  6172 ;; Return value:  Size  Location     Type
  6173 ;;                  1  [STACK] void 
  6174 ;; Registers used:
  6175 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh, c
      +stack
  6176 ;; Tracked objects:
  6177 ;;		On entry : F/0
  6178 ;;		On exit  : D/0
  6179 ;;		Unchanged: 0/0
  6180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6185 ;;Total ram usage:        0 bytes
  6186 ;; Hardware stack levels used:    1
  6187 ;; Hardware stack levels required when called:   11
  6188 ;; This function calls:
  6189 ;;		_SwTimerSetTimeout
  6190 ;;		_SwTimerStart
  6191 ;;		___lldiv
  6192 ;; This function is called by:
  6193 ;;		_SetCallbackSoftwareTimers
  6194 ;;		_SwTimersExecute
  6195 ;; This function uses a reentrant model
  6196 ;;
  6197                           
  6198                           	psect	text35
  6199  00402A                     __ptext35:
  6200                           	opt stack 0
  6201  00402A                     _LORAWAN_LinkCheckCallback:
  6202                           	opt stack 0
  6203                           
  6204                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  6205  00402A  0E05               	movlw	5
  6206  00402C  26E1               	addwf	fsr1l,f,c
  6207  00402E  0E00               	movlw	0
  6208  004030  22E2               	addwfc	fsr1h,f,c
  6209                           
  6210                           ;lorawan.c: 885: if ((loRa.macStatus.macPause == 0) && (loRa.macStatus.linkCheck == 1))
  6211                           
  6212                           ;incstack = 0
  6213  004032  0102               	movlb	2	; () banked
  6214  004034  A103               	btfss	(_loRa+3)& (0+255),0,b
  6215                           
  6216                           ; BSR set to: 2
  6217  004036  A503               	btfss	(_loRa+3)& (0+255),2,b
  6218  004038  D029               	goto	l14936
  6219                           
  6220                           ; BSR set to: 2
  6221                           ;lorawan.c: 886: {
  6222                           ;lorawan.c: 888: for(iCtr = 0; iCtr < loRa.crtMacCmdIndex; iCtr ++)
  6223                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  6224  00403A  0EFF               	movlw	-1
  6225  00403C  6AE3               	clrf	plusw1,c
  6226  00403E  D00E               	goto	l14926
  6227  004040                     l14920:
  6228                           
  6229                           ; BSR set to: 2
  6230                           ;lorawan.c: 889: {
  6231                           ;lorawan.c: 890: if(loRa.macCommands[iCtr].receivedCid == LINK_CHECK_CID)
  6232                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  6233  004040  0EFF               	movlw	-1
  6234  004042  50E3               	movf	plusw1,w,c
  6235  004044  0D02               	mullw	2
  6236  004046  0EA8               	movlw	low (_loRa+168)
  6237  004048  24F3               	addwf	prodl,w,c
  6238  00404A  6ED9               	movwf	fsr2l,c
  6239  00404C  0E02               	movlw	high (_loRa+168)
  6240  00404E  20F4               	addwfc	prodh,w,c
  6241  004050  6EDA               	movwf	fsr2h,c
  6242  004052  0E02               	movlw	2
  6243  004054  18DE               	xorwf	postinc2,w,c
  6244  004056  E008               	bz	l14928
  6245                           
  6246                           ; BSR set to: 2
  6247                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  6248  004058  0EFF               	movlw	-1
  6249  00405A  2AE3               	incf	plusw1,f,c
  6250  00405C                     l14926:
  6251                           
  6252                           ; BSR set to: 2
  6253                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  6254  00405C  0EFF               	movlw	-1
  6255  00405E  CFE3 F04B          	movff	plusw1,btemp+1
  6256  004062  51A7               	movf	(_loRa+167)& (0+255),w,b
  6257  004064  5C4B               	subwf	btemp+1,w,c
  6258  004066  E3EC               	bnc	l14920
  6259  004068                     l14928:
  6260                           
  6261                           ; BSR set to: 2
  6262                           ;lorawan.c: 893: }
  6263                           ;lorawan.c: 894: }
  6264                           ;lorawan.c: 896: if(iCtr == loRa.crtMacCmdIndex)
  6265                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  6266  004068  0EFF               	movlw	-1
  6267  00406A  50E3               	movf	plusw1,w,c
  6268  00406C  19A7               	xorwf	(_loRa+167)& (0+255),w,b
  6269  00406E  E10E               	bnz	l14936
  6270                           
  6271                           ; BSR set to: 2
  6272                           ;lorawan.c: 897: {
  6273                           ;lorawan.c: 898: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = LINK_CHECK_CID;
  6274  004070  51A7               	movf	(_loRa+167)& (0+255),w,b
  6275  004072  0D02               	mullw	2
  6276  004074  0EA8               	movlw	low (_loRa+168)
  6277  004076  24F3               	addwf	prodl,w,c
  6278  004078  6ED9               	movwf	fsr2l,c
  6279  00407A  0E02               	movlw	high (_loRa+168)
  6280  00407C  20F4               	addwfc	prodh,w,c
  6281  00407E  6EDA               	movwf	fsr2h,c
  6282  004080  0E02               	movlw	2
  6283  004082  6EDF               	movwf	indf2,c
  6284                           
  6285                           ; BSR set to: 2
  6286                           ;lorawan.c: 900: if(loRa.crtMacCmdIndex < 16)
  6287  004084  0E10               	movlw	16
  6288  004086  61A7               	cpfslt	(_loRa+167)& (0+255),b
  6289  004088  D001               	goto	l14936
  6290                           
  6291                           ; BSR set to: 2
  6292                           ;lorawan.c: 901: {
  6293                           ;lorawan.c: 902: loRa.crtMacCmdIndex ++;
  6294  00408A  2BA7               	incf	(_loRa+167)& (0+255),f,b
  6295  00408C                     l14936:
  6296                           
  6297                           ; BSR set to: 2
  6298                           ;lorawan.c: 903: }
  6299                           ;lorawan.c: 904: }
  6300                           ;lorawan.c: 905: }
  6301                           ;lorawan.c: 908: if (loRa.macStatus.linkCheck == 1)
  6302  00408C  A503               	btfss	(_loRa+3)& (0+255),2,b
  6303  00408E  D074               	goto	l1990
  6304                           
  6305                           ; BSR set to: 2
  6306                           ;lorawan.c: 909: {
  6307                           ;lorawan.c: 910: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 0
      +                          x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32_
      +                          t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
  6308  004090  51CF               	movf	(_loRa+207)& (0+255),w,b
  6309  004092  E106               	bnz	u17790
  6310  004094  29CC               	incf	(_loRa+204)& (0+255),w,b
  6311  004096  0EFF               	movlw	255
  6312  004098  59CD               	subwfb	(_loRa+205)& (0+255),w,b
  6313  00409A  0E0F               	movlw	15
  6314  00409C  59CE               	subwfb	(_loRa+206)& (0+255),w,b
  6315  00409E  E321               	bnc	l14942
  6316  0040A0                     u17790:
  6317                           
  6318                           ; BSR set to: 2
  6319  0040A0  C2CC  F064         	movff	_loRa+204,___lldiv@dividend
  6320  0040A4  C2CD  F065         	movff	_loRa+205,___lldiv@dividend+1
  6321  0040A8  C2CE  F066         	movff	_loRa+206,___lldiv@dividend+2
  6322  0040AC  C2CF  F067         	movff	_loRa+207,___lldiv@dividend+3
  6323  0040B0  0E7D               	movlw	125
  6324  0040B2  0100               	movlb	0	; () banked
  6325  0040B4  6F68               	movwf	___lldiv@divisor& (0+255),b
  6326  0040B6  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
  6327  0040B8  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
  6328  0040BA  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
  6329  0040BC  EC35  F030         	call	___lldiv	;wreg free
  6330  0040C0  C064  F052         	movff	?___lldiv,btemp+8
  6331  0040C4  C065  F053         	movff	?___lldiv+1,btemp+9
  6332  0040C8  C066  F054         	movff	?___lldiv+2,btemp+10
  6333  0040CC  C067  F055         	movff	?___lldiv+3,btemp+11
  6334  0040D0  0E0C               	movlw	12
  6335  0040D2                     u17805:
  6336  0040D2  90D8               	bcf	status,0,c
  6337  0040D4  3652               	rlcf	btemp+8,f,c
  6338  0040D6  3653               	rlcf	btemp+9,f,c
  6339  0040D8  3654               	rlcf	btemp+10,f,c
  6340  0040DA  3655               	rlcf	btemp+11,f,c
  6341  0040DC  2EE8               	decfsz	wreg,f,c
  6342  0040DE  D7F9               	goto	u17805
  6343  0040E0  D028               	goto	L3
  6344  0040E2                     l14942:
  6345                           
  6346                           ; BSR set to: 2
  6347  0040E2  C2CC  F052         	movff	_loRa+204,btemp+8
  6348  0040E6  C2CD  F053         	movff	_loRa+205,btemp+9
  6349  0040EA  C2CE  F054         	movff	_loRa+206,btemp+10
  6350  0040EE  C2CF  F055         	movff	_loRa+207,btemp+11
  6351  0040F2  0E0C               	movlw	12
  6352  0040F4                     u17815:
  6353  0040F4  90D8               	bcf	status,0,c
  6354  0040F6  3652               	rlcf	btemp+8,f,c
  6355  0040F8  3653               	rlcf	btemp+9,f,c
  6356  0040FA  3654               	rlcf	btemp+10,f,c
  6357  0040FC  3655               	rlcf	btemp+11,f,c
  6358  0040FE  2EE8               	decfsz	wreg,f,c
  6359  004100  D7F9               	goto	u17815
  6360  004102  C052  F064         	movff	btemp+8,___lldiv@dividend
  6361  004106  C053  F065         	movff	btemp+9,___lldiv@dividend+1
  6362  00410A  C054  F066         	movff	btemp+10,___lldiv@dividend+2
  6363  00410E  C055  F067         	movff	btemp+11,___lldiv@dividend+3
  6364  004112  0E7D               	movlw	125
  6365  004114  0100               	movlb	0	; () banked
  6366  004116  6F68               	movwf	___lldiv@divisor& (0+255),b
  6367  004118  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
  6368  00411A  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
  6369  00411C  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
  6370  00411E  EC35  F030         	call	___lldiv	;wreg free
  6371  004122  C064  F052         	movff	?___lldiv,btemp+8
  6372  004126  C065  F053         	movff	?___lldiv+1,btemp+9
  6373  00412A  C066  F054         	movff	?___lldiv+2,btemp+10
  6374  00412E  C067  F055         	movff	?___lldiv+3,btemp+11
  6375  004132                     L3:
  6376                           
  6377                           ;stkvar	_LORAWAN_LinkCheckCallback$3007 @ sp[(-5)+0]
  6378  004132  0EFB               	movlw	-5
  6379  004134  C052  FFE3         	movff	btemp+8,plusw1
  6380  004138  0EFC               	movlw	-4
  6381  00413A  C053  FFE3         	movff	btemp+9,plusw1
  6382  00413E  0EFD               	movlw	-3
  6383  004140  C054  FFE3         	movff	btemp+10,plusw1
  6384  004144  0EFE               	movlw	-2
  6385  004146  C055  FFE3         	movff	btemp+11,plusw1
  6386                           
  6387                           ; BSR set to: 0
  6388                           ;stkvar	_LORAWAN_LinkCheckCallback$3007 @ sp[(-5)+0]
  6389  00414A  50E1               	movf	fsr1l,w,c
  6390  00414C  0FFB               	addlw	-5
  6391  00414E  6ED9               	movwf	fsr2l,c
  6392  004150  50E2               	movf	fsr1h,w,c
  6393  004152  6EDA               	movwf	fsr2h,c
  6394  004154  0EFF               	movlw	255
  6395  004156  22DA               	addwfc	fsr2h,f,c
  6396  004158  CFDE F071          	movff	postinc2,SwTimerSetTimeout@timeout
  6397  00415C  CFDE F072          	movff	postinc2,SwTimerSetTimeout@timeout+1
  6398  004160  CFDE F073          	movff	postinc2,SwTimerSetTimeout@timeout+2
  6399  004164  CFDE F074          	movff	postinc2,SwTimerSetTimeout@timeout+3
  6400  004168  0102               	movlb	2	; () banked
  6401  00416A  51E7               	movf	(_loRa+231)& (0+255),w,b
  6402  00416C  EC44  F036         	call	_SwTimerSetTimeout
  6403                           
  6404                           ; BSR set to: 0
  6405                           ;lorawan.c: 911: SwTimerStart(loRa.linkCheckTimerId);
  6406  004170  0102               	movlb	2	; () banked
  6407  004172  51E7               	movf	(_loRa+231)& (0+255),w,b
  6408  004174  EC35  F02E         	call	_SwTimerStart
  6409  004178                     l1990:
  6410                           
  6411                           ; _LORAWAN_LinkCheckCallback: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 1, argsize = 1, vargsize = 0
  6412  004178  0EFA               	movlw	250
  6413  00417A  26E1               	addwf	fsr1l,f,c
  6414  00417C  0EFF               	movlw	255
  6415  00417E  22E2               	addwfc	fsr1h,f,c
  6416  004180  0CFF               	retlw	255	;funcret
  6417  004182                     __end_of_LORAWAN_LinkCheckCallback:
  6418                           	opt stack 0
  6419                           tosu	equ	0xFFF
  6420                           tosh	equ	0xFFE
  6421                           tosl	equ	0xFFD
  6422                           pclath	equ	0xFFA
  6423                           tblptru	equ	0xFF8
  6424                           tblptrh	equ	0xFF7
  6425                           tblptrl	equ	0xFF6
  6426                           tablat	equ	0xFF5
  6427                           prodh	equ	0xFF4
  6428                           prodl	equ	0xFF3
  6429                           intcon	equ	0xFF2
  6430                           intcon2	equ	0xFF1
  6431                           intcon3	equ	0xFF0
  6432                           postinc0	equ	0xFEE
  6433                           wreg	equ	0xFE8
  6434                           postinc1	equ	0xFE6
  6435                           postdec1	equ	0xFE5
  6436                           plusw1	equ	0xFE3
  6437                           fsr1h	equ	0xFE2
  6438                           fsr1l	equ	0xFE1
  6439                           indf2	equ	0xFDF
  6440                           postinc2	equ	0xFDE
  6441                           postdec2	equ	0xFDD
  6442                           fsr2h	equ	0xFDA
  6443                           fsr2l	equ	0xFD9
  6444                           status	equ	0xFD8
  6445                           
  6446 ;; *************** function _LORAWAN_ReceiveWindow1Callback *****************
  6447 ;; Defined at:
  6448 ;;		line 796 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6449 ;; Parameters:    Size  Location     Type
  6450 ;;  param           1  [STACK] unsigned char 
  6451 ;; Auto vars:     Size  Location     Type
  6452 ;;  freq            4  [STACK] unsigned long 
  6453 ;; Return value:  Size  Location     Type
  6454 ;;                  1  [STACK] void 
  6455 ;; Registers used:
  6456 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru, prodl, prodh, cstack
  6457 ;; Tracked objects:
  6458 ;;		On entry : F/0
  6459 ;;		On exit  : D/0
  6460 ;;		Unchanged: 0/0
  6461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6466 ;;Total ram usage:        0 bytes
  6467 ;; Hardware stack levels used:    1
  6468 ;; Hardware stack levels required when called:   13
  6469 ;; This function calls:
  6470 ;;		_ConfigureRadioRx
  6471 ;;		_GetRx1Freq
  6472 ;;		_RADIO_ReceiveStart
  6473 ;;		_RADIO_ReceiveStop
  6474 ;;		_RADIO_ReleaseData
  6475 ;; This function is called by:
  6476 ;;		_SetCallbackSoftwareTimers
  6477 ;;		_SwTimersExecute
  6478 ;; This function uses a reentrant model
  6479 ;;
  6480                           
  6481                           	psect	text36
  6482  005952                     __ptext36:
  6483                           	opt stack 0
  6484  005952                     _LORAWAN_ReceiveWindow1Callback:
  6485                           	opt stack 0
  6486                           
  6487                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  6488  005952  52E6               	movf	postinc1,f,c
  6489  005954  52E6               	movf	postinc1,f,c
  6490  005956  52E6               	movf	postinc1,f,c
  6491  005958  52E6               	movf	postinc1,f,c
  6492                           
  6493                           ;lorawan.c: 798: uint32_t freq;
  6494                           ;lorawan.c: 800: if(loRa.macStatus.macPause == 0)
  6495                           
  6496                           ;incstack = 0
  6497  00595A  0102               	movlb	2	; () banked
  6498  00595C  B103               	btfsc	(_loRa+3)& (0+255),0,b
  6499  00595E  D04B               	goto	l1963
  6500                           
  6501                           ; BSR set to: 2
  6502                           ;lorawan.c: 801: {
  6503                           ;lorawan.c: 802: if (CLASS_C == loRa.deviceClass)
  6504  005960  0E02               	movlw	2
  6505  005962  1912               	xorwf	(_loRa+18)& (0+255),w,b
  6506  005964  E102               	bnz	l14898
  6507                           
  6508                           ; BSR set to: 2
  6509                           ;lorawan.c: 803: {
  6510                           ;lorawan.c: 804: RADIO_ReceiveStop();
  6511  005966  EC08  F03A         	call	_RADIO_ReceiveStop	;wreg free
  6512  00596A                     l14898:
  6513                           
  6514                           ;lorawan.c: 805: }
  6515                           ;lorawan.c: 806: if (loRa.receiveWindow1Parameters.dataRate >= loRa.offset)
  6516  00596A  0102               	movlb	2	; () banked
  6517  00596C  51EF               	movf	(_loRa+239)& (0+255),w,b
  6518  00596E  5D17               	subwf	(_loRa+23)& (0+255),w,b
  6519  005970  E304               	bnc	l1961
  6520                           
  6521                           ; BSR set to: 2
  6522                           ;lorawan.c: 807: {
  6523                           ;lorawan.c: 808: loRa.receiveWindow1Parameters.dataRate = loRa.receiveWindow1Parameters.
      +                          dataRate - loRa.offset;
  6524  005972  51EF               	movf	(_loRa+239)& (0+255),w,b
  6525  005974  5D17               	subwf	(_loRa+23)& (0+255),w,b
  6526  005976  6F17               	movwf	(_loRa+23)& (0+255),b
  6527                           
  6528                           ;lorawan.c: 809: }
  6529  005978  D001               	goto	l14902
  6530  00597A                     l1961:
  6531                           
  6532                           ; BSR set to: 2
  6533                           ;lorawan.c: 810: else
  6534                           ;lorawan.c: 811: {
  6535                           ;lorawan.c: 812: loRa.receiveWindow1Parameters.dataRate = 0;
  6536  00597A  6B17               	clrf	(_loRa+23)& (0+255),b
  6537  00597C                     l14902:
  6538                           
  6539                           ; BSR set to: 2
  6540                           ;lorawan.c: 813: }
  6541                           ;lorawan.c: 815: freq = GetRx1Freq();
  6542  00597C  EC33  F03B         	call	_GetRx1Freq	;wreg free
  6543  005980  C064  F052         	movff	?_GetRx1Freq,btemp+8
  6544  005984  C065  F053         	movff	?_GetRx1Freq+1,btemp+9
  6545  005988  C066  F054         	movff	?_GetRx1Freq+2,btemp+10
  6546  00598C  C067  F055         	movff	?_GetRx1Freq+3,btemp+11
  6547                           
  6548                           ;stkvar	LORAWAN_ReceiveWindow1Callback@freq @ sp[(-4)+0]
  6549  005990  0EFC               	movlw	-4
  6550  005992  C052  FFE3         	movff	btemp+8,plusw1
  6551  005996  0EFD               	movlw	-3
  6552  005998  C053  FFE3         	movff	btemp+9,plusw1
  6553  00599C  0EFE               	movlw	-2
  6554  00599E  C054  FFE3         	movff	btemp+10,plusw1
  6555  0059A2  0EFF               	movlw	-1
  6556  0059A4  C055  FFE3         	movff	btemp+11,plusw1
  6557                           
  6558                           ; BSR set to: 2
  6559                           ;lorawan.c: 817: loRa.macStatus.macState = RX1_OPEN;
  6560  0059A8  5102               	movf	(_loRa+2)& (0+255),w,b
  6561  0059AA  0BF0               	andlw	-16
  6562  0059AC  0903               	iorlw	3
  6563  0059AE  6F02               	movwf	(_loRa+2)& (0+255),b
  6564                           
  6565                           ; BSR set to: 2
  6566                           ;lorawan.c: 819: RADIO_ReleaseData();
  6567  0059B0  ECEC  F03B         	call	_RADIO_ReleaseData	;wreg free
  6568                           
  6569                           ; BSR set to: 1
  6570                           ;lorawan.c: 821: ConfigureRadioRx(loRa.receiveWindow1Parameters.dataRate, freq);
  6571                           ;stkvar	LORAWAN_ReceiveWindow1Callback@freq @ sp[(-4)+0]
  6572  0059B4  50E1               	movf	fsr1l,w,c
  6573  0059B6  0FFC               	addlw	-4
  6574  0059B8  6ED9               	movwf	fsr2l,c
  6575  0059BA  50E2               	movf	fsr1h,w,c
  6576  0059BC  6EDA               	movwf	fsr2h,c
  6577  0059BE  0EFF               	movlw	255
  6578  0059C0  22DA               	addwfc	fsr2h,f,c
  6579  0059C2  CFDE F076          	movff	postinc2,ConfigureRadioRx@freq
  6580  0059C6  CFDE F077          	movff	postinc2,ConfigureRadioRx@freq+1
  6581  0059CA  CFDE F078          	movff	postinc2,ConfigureRadioRx@freq+2
  6582  0059CE  CFDE F079          	movff	postinc2,ConfigureRadioRx@freq+3
  6583  0059D2  0102               	movlb	2	; () banked
  6584  0059D4  5117               	movf	(_loRa+23)& (0+255),w,b
  6585  0059D6  EC1D  F039         	call	_ConfigureRadioRx
  6586                           
  6587                           ;lorawan.c: 823: RADIO_ReceiveStart(rxWindowSize[loRa.receiveWindow1Parameters.dataRate]
      +                          );
  6588  0059DA  0E85               	movlw	low _rxWindowSize
  6589  0059DC  0102               	movlb	2	; () banked
  6590  0059DE  2517               	addwf	(_loRa+23)& (0+255),w,b
  6591  0059E0  6EF6               	movwf	tblptrl,c
  6592  0059E2  6AF7               	clrf	tblptrh,c
  6593  0059E4  0E7F               	movlw	high _rxWindowSize
  6594  0059E6  22F7               	addwfc	tblptrh,f,c
  6595  0059E8                     	if	0	;There are less than 3 active tblptr bytes
  6596  0059E8                     	endif
  6597  0059E8  0008               	tblrd		*
  6598  0059EA  50F5               	movf	tablat,w,c
  6599  0059EC  0100               	movlb	0	; () banked
  6600  0059EE  6F94               	movwf	RADIO_ReceiveStart@rxWindowSize& (0+255),b
  6601  0059F0  6B95               	clrf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),b
  6602  0059F2  EC01  F016         	call	_RADIO_ReceiveStart	;wreg free
  6603  0059F6                     l1963:
  6604                           
  6605                           ; _LORAWAN_ReceiveWindow1Callback: autosize = 4, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 1, argsize = 1, vargsize = 0
  6606  0059F6  0EFB               	movlw	251
  6607  0059F8  26E1               	addwf	fsr1l,f,c
  6608  0059FA  0EFF               	movlw	255
  6609  0059FC  22E2               	addwfc	fsr1h,f,c
  6610  0059FE  0CFF               	retlw	255	;funcret
  6611  005A00                     __end_of_LORAWAN_ReceiveWindow1Callback:
  6612                           	opt stack 0
  6613                           tosu	equ	0xFFF
  6614                           tosh	equ	0xFFE
  6615                           tosl	equ	0xFFD
  6616                           pclath	equ	0xFFA
  6617                           tblptru	equ	0xFF8
  6618                           tblptrh	equ	0xFF7
  6619                           tblptrl	equ	0xFF6
  6620                           tablat	equ	0xFF5
  6621                           prodh	equ	0xFF4
  6622                           prodl	equ	0xFF3
  6623                           intcon	equ	0xFF2
  6624                           intcon2	equ	0xFF1
  6625                           intcon3	equ	0xFF0
  6626                           postinc0	equ	0xFEE
  6627                           wreg	equ	0xFE8
  6628                           postinc1	equ	0xFE6
  6629                           postdec1	equ	0xFE5
  6630                           plusw1	equ	0xFE3
  6631                           fsr1h	equ	0xFE2
  6632                           fsr1l	equ	0xFE1
  6633                           indf2	equ	0xFDF
  6634                           postinc2	equ	0xFDE
  6635                           postdec2	equ	0xFDD
  6636                           fsr2h	equ	0xFDA
  6637                           fsr2l	equ	0xFD9
  6638                           status	equ	0xFD8
  6639                           
  6640 ;; *************** function _LORAWAN_ReceiveWindow2Callback *****************
  6641 ;; Defined at:
  6642 ;;		line 827 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;  param           1  [STACK] unsigned char 
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;		None
  6647 ;; Return value:  Size  Location     Type
  6648 ;;                  1  [STACK] void 
  6649 ;; Registers used:
  6650 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, cstack
  6651 ;; Tracked objects:
  6652 ;;		On entry : D/0
  6653 ;;		On exit  : C/0
  6654 ;;		Unchanged: 0/0
  6655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6660 ;;Total ram usage:        0 bytes
  6661 ;; Hardware stack levels used:    1
  6662 ;; Hardware stack levels required when called:   14
  6663 ;; This function calls:
  6664 ;;		_ConfigureRadioRx
  6665 ;;		_LORAWAN_EnterContinuousReceive
  6666 ;;		_RADIO_GetStatus
  6667 ;;		_RADIO_ReceiveStart
  6668 ;;		_RADIO_ReceiveStop
  6669 ;;		_RADIO_ReleaseData
  6670 ;;		_ResetParametersForConfirmedTransmission
  6671 ;;		_ResetParametersForUnconfirmedTransmission
  6672 ;;		_RxDataDone
  6673 ;; This function is called by:
  6674 ;;		_LORAWAN_RxTimeout
  6675 ;;		_SetCallbackSoftwareTimers
  6676 ;;		_SwTimersExecute
  6677 ;; This function uses a reentrant model
  6678 ;;
  6679                           
  6680                           	psect	text37
  6681  005394                     __ptext37:
  6682                           	opt stack 0
  6683  005394                     _LORAWAN_ReceiveWindow2Callback:
  6684                           	opt stack 12
  6685                           
  6686                           ;lorawan.c: 830: if (loRa.macStatus.macPause == 0)
  6687                           
  6688                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  6689                           ;incstack = 0
  6690  005394  0102               	movlb	2	; () banked
  6691  005396  B103               	btfsc	(_loRa+3)& (0+255),0,b
  6692  005398  D057               	goto	l1966
  6693                           
  6694                           ; BSR set to: 2
  6695                           ;lorawan.c: 831: {
  6696                           ;lorawan.c: 832: if((RADIO_GetStatus() & (1 << (1))) == 0)
  6697  00539A  ECE9  F03B         	call	_RADIO_GetStatus	;wreg free
  6698  00539E  6E55               	movwf	btemp+11,c
  6699  0053A0  B255               	btfsc	btemp+11,1,c
  6700  0053A2  D04E               	goto	l13568
  6701                           
  6702                           ; BSR set to: 1
  6703                           ;lorawan.c: 833: {
  6704                           ;lorawan.c: 834: loRa.macStatus.macState = RX2_OPEN;
  6705  0053A4  0102               	movlb	2	; () banked
  6706  0053A6  5102               	movf	(_loRa+2)& (0+255),w,b
  6707  0053A8  0BF0               	andlw	-16
  6708  0053AA  0905               	iorlw	5
  6709  0053AC  6F02               	movwf	(_loRa+2)& (0+255),b
  6710                           
  6711                           ; BSR set to: 2
  6712                           ;lorawan.c: 836: RADIO_ReceiveStop();
  6713  0053AE  EC08  F03A         	call	_RADIO_ReceiveStop	;wreg free
  6714                           
  6715                           ; BSR set to: 1
  6716                           ;lorawan.c: 837: RADIO_ReleaseData();
  6717  0053B2  ECEC  F03B         	call	_RADIO_ReleaseData	;wreg free
  6718                           
  6719                           ; BSR set to: 1
  6720                           ;lorawan.c: 839: ConfigureRadioRx(loRa.receiveWindow2Parameters.dataRate, loRa.receiveWi
      +                          ndow2Parameters.frequency);
  6721  0053B6  C218  F076         	movff	_loRa+24,ConfigureRadioRx@freq
  6722  0053BA  C219  F077         	movff	_loRa+25,ConfigureRadioRx@freq+1
  6723  0053BE  C21A  F078         	movff	_loRa+26,ConfigureRadioRx@freq+2
  6724  0053C2  C21B  F079         	movff	_loRa+27,ConfigureRadioRx@freq+3
  6725  0053C6  0102               	movlb	2	; () banked
  6726  0053C8  511C               	movf	(_loRa+28)& (0+255),w,b
  6727  0053CA  EC1D  F039         	call	_ConfigureRadioRx
  6728                           
  6729                           ;lorawan.c: 841: if (CLASS_A == loRa.deviceClass)
  6730  0053CE  0102               	movlb	2	; () banked
  6731  0053D0  5112               	movf	(_loRa+18)& (0+255),w,b
  6732  0053D2  E12F               	bnz	l13564
  6733                           
  6734                           ; BSR set to: 2
  6735                           ;lorawan.c: 842: {
  6736                           ;lorawan.c: 843: if (RADIO_ReceiveStart(rxWindowSize[loRa.receiveWindow2Parameters.dataR
      +                          ate]) != OK)
  6737  0053D4  0E85               	movlw	low _rxWindowSize
  6738  0053D6  251C               	addwf	(_loRa+28)& (0+255),w,b
  6739  0053D8  6EF6               	movwf	tblptrl,c
  6740  0053DA  6AF7               	clrf	tblptrh,c
  6741  0053DC  0E7F               	movlw	high _rxWindowSize
  6742  0053DE  22F7               	addwfc	tblptrh,f,c
  6743  0053E0                     	if	0	;There are less than 3 active tblptr bytes
  6744  0053E0                     	endif
  6745  0053E0  0008               	tblrd		*
  6746  0053E2  50F5               	movf	tablat,w,c
  6747  0053E4  0100               	movlb	0	; () banked
  6748  0053E6  6F94               	movwf	RADIO_ReceiveStart@rxWindowSize& (0+255),b
  6749  0053E8  6B95               	clrf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),b
  6750  0053EA  EC01  F016         	call	_RADIO_ReceiveStart	;wreg free
  6751  0053EE  C094  F04B         	movff	?_RADIO_ReceiveStart,btemp+1
  6752  0053F2  C095  F04C         	movff	?_RADIO_ReceiveStart+1,btemp+2
  6753  0053F6  504B               	movf	btemp+1,w,c
  6754  0053F8  104C               	iorwf	btemp+2,w,c
  6755  0053FA  E02E               	bz	l1975
  6756                           
  6757                           ; BSR set to: 0
  6758                           ;lorawan.c: 844: {
  6759                           ;lorawan.c: 845: ResetParametersForConfirmedTransmission ();
  6760  0053FC  EC4B  F03B         	call	_ResetParametersForConfirmedTransmission	;wreg free
  6761                           
  6762                           ;lorawan.c: 846: ResetParametersForUnconfirmedTransmission ();
  6763  005400  EC44  F03B         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  6764                           
  6765                           ; BSR set to: 2
  6766                           ;lorawan.c: 847: if (rxPayload.RxAppData != (0))
  6767  005404  0101               	movlb	1	; () banked
  6768  005406  516E               	movf	_rxPayload& (0+255),w,b
  6769  005408  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
  6770  00540A  E026               	bz	l1975
  6771                           
  6772                           ; BSR set to: 1
  6773                           ;lorawan.c: 848: {
  6774                           ;lorawan.c: 849: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
  6775  00540C  0E00               	movlw	0
  6776  00540E  0100               	movlb	0	; () banked
  6777  005410  6F64               	movwf	RxDataDone@pData& (0+255),b
  6778  005412  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
  6779  005414  6F66               	movwf	RxDataDone@dataLength& (0+255),b
  6780  005416  6F67               	movwf	RxDataDone@status& (0+255),b
  6781  005418  D801               	call	u15298
  6782  00541A  D01E               	goto	l1975
  6783  00541C                     u15298:
  6784  00541C  0005               	push	
  6785  00541E  0101               	movlb	1	; () banked
  6786  005420  6EFA               	movwf	pclath,c
  6787  005422  516E               	movf	_rxPayload& (0+255),w,b
  6788  005424  6EFD               	movwf	tosl,c
  6789  005426  516F               	movf	(_rxPayload+1)& (0+255),w,b
  6790  005428  6EFE               	movwf	tosh,c
  6791  00542A  50F8               	movf	tblptru,w,c
  6792  00542C  6EFF               	movwf	tosu,c
  6793  00542E  50FA               	movf	pclath,w,c
  6794  005430  0012               	return		;indir
  6795  005432                     l13564:
  6796                           
  6797                           ; BSR set to: 2
  6798                           ;lorawan.c: 853: else
  6799                           ;lorawan.c: 854: {
  6800                           ;lorawan.c: 855: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
  6801  005432  5102               	movf	(_loRa+2)& (0+255),w,b
  6802  005434  0BF0               	andlw	-16
  6803  005436  0909               	iorlw	9
  6804  005438  6F02               	movwf	(_loRa+2)& (0+255),b
  6805                           
  6806                           ; BSR set to: 2
  6807                           ;lorawan.c: 856: LORAWAN_EnterContinuousReceive();
  6808  00543A  EC81  F031         	call	_LORAWAN_EnterContinuousReceive	;wreg free
  6809  00543E  D00C               	goto	l1975
  6810  005440                     l13568:
  6811                           
  6812                           ; BSR set to: 1
  6813                           ;lorawan.c: 859: else
  6814                           ;lorawan.c: 860: {
  6815                           ;lorawan.c: 863: loRa.rx2DelayExpired = 1;
  6816  005440  0E01               	movlw	1
  6817  005442  0102               	movlb	2	; () banked
  6818  005444  6FF1               	movwf	(_loRa+241)& (0+255),b
  6819                           
  6820                           ; BSR set to: 1
  6821                           ;lorawan.c: 864: }
  6822                           ;lorawan.c: 865: }
  6823  005446  D008               	goto	l1975
  6824  005448                     l1966:
  6825                           
  6826                           ; BSR set to: 2
  6827                           ;lorawan.c: 866: else
  6828                           ;lorawan.c: 867: {
  6829                           ;lorawan.c: 870: if (loRa.lorawanMacStatus.joining == 1)
  6830  005448  A500               	btfss	_loRa& (0+255),2,b
  6831  00544A  D002               	goto	l13572
  6832                           
  6833                           ; BSR set to: 2
  6834                           ;lorawan.c: 871: {
  6835                           ;lorawan.c: 872: loRa.lorawanMacStatus.joining = 0;
  6836  00544C  9500               	bcf	_loRa& (0+255),2,b
  6837                           
  6838                           ;lorawan.c: 873: loRa.macStatus.networkJoined = 0;
  6839  00544E  9902               	bcf	(_loRa+2)& (0+255),4,b
  6840  005450                     l13572:
  6841                           
  6842                           ; BSR set to: 2
  6843                           ;lorawan.c: 874: }
  6844                           ;lorawan.c: 876: ResetParametersForUnconfirmedTransmission();
  6845  005450  EC44  F03B         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  6846                           
  6847                           ;lorawan.c: 877: ResetParametersForConfirmedTransmission();
  6848  005454  EC4B  F03B         	call	_ResetParametersForConfirmedTransmission	;wreg free
  6849  005458                     l1975:
  6850                           
  6851                           ; _LORAWAN_ReceiveWindow2Callback: autosize = 0, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 1, argsize = 1, vargsize = 0
  6852  005458  52E5               	movf	postdec1,f,c
  6853  00545A  0012               	return		;funcret
  6854  00545C                     __end_of_LORAWAN_ReceiveWindow2Callback:
  6855                           	opt stack 0
  6856                           tosu	equ	0xFFF
  6857                           tosh	equ	0xFFE
  6858                           tosl	equ	0xFFD
  6859                           pclath	equ	0xFFA
  6860                           tblptru	equ	0xFF8
  6861                           tblptrh	equ	0xFF7
  6862                           tblptrl	equ	0xFF6
  6863                           tablat	equ	0xFF5
  6864                           prodh	equ	0xFF4
  6865                           prodl	equ	0xFF3
  6866                           intcon	equ	0xFF2
  6867                           intcon2	equ	0xFF1
  6868                           intcon3	equ	0xFF0
  6869                           postinc0	equ	0xFEE
  6870                           wreg	equ	0xFE8
  6871                           postinc1	equ	0xFE6
  6872                           postdec1	equ	0xFE5
  6873                           plusw1	equ	0xFE3
  6874                           fsr1h	equ	0xFE2
  6875                           fsr1l	equ	0xFE1
  6876                           indf2	equ	0xFDF
  6877                           postinc2	equ	0xFDE
  6878                           postdec2	equ	0xFDD
  6879                           fsr2h	equ	0xFDA
  6880                           fsr2l	equ	0xFD9
  6881                           status	equ	0xFD8
  6882                           
  6883 ;; *************** function _RADIO_WatchdogTimeout *****************
  6884 ;; Defined at:
  6885 ;;		line 1408 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  6886 ;; Parameters:    Size  Location     Type
  6887 ;;  param           1  [STACK] unsigned char 
  6888 ;; Auto vars:     Size  Location     Type
  6889 ;;		None
  6890 ;; Return value:  Size  Location     Type
  6891 ;;                  1  [STACK] void 
  6892 ;; Registers used:
  6893 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, cstack
  6894 ;; Tracked objects:
  6895 ;;		On entry : F/0
  6896 ;;		On exit  : C/0
  6897 ;;		Unchanged: 0/0
  6898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6903 ;;Total ram usage:        0 bytes
  6904 ;; Hardware stack levels used:    1
  6905 ;; Hardware stack levels required when called:   16
  6906 ;; This function calls:
  6907 ;;		_LORAWAN_RxTimeout
  6908 ;;		_LORAWAN_TxDone
  6909 ;;		_RADIO_WriteMode
  6910 ;; This function is called by:
  6911 ;;		_RADIO_Init
  6912 ;;		_SwTimersExecute
  6913 ;; This function uses a reentrant model
  6914 ;;
  6915                           
  6916                           	psect	text38
  6917  006BC2                     __ptext38:
  6918                           	opt stack 0
  6919  006BC2                     _RADIO_WatchdogTimeout:
  6920                           	opt stack 12
  6921                           
  6922                           ;radio_driver_SX1276.c: 1410: RADIO_WriteMode(MODE_STANDBY, RadioConfiguration.modulatio
      +                          n, 1);
  6923                           
  6924                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  6925                           ;incstack = 0
  6926  006BC2  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  6927  006BC6  0E01               	movlw	1
  6928  006BC8  0100               	movlb	0	; () banked
  6929  006BCA  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
  6930  006BCC  EC8F  F028         	call	_RADIO_WriteMode
  6931                           
  6932                           ;radio_driver_SX1276.c: 1411: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  6933  006BD0  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  6934  006BD4  0E00               	movlw	0
  6935  006BD6  0100               	movlb	0	; () banked
  6936  006BD8  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
  6937  006BDA  EC8F  F028         	call	_RADIO_WriteMode
  6938                           
  6939                           ;radio_driver_SX1276.c: 1412: RadioConfiguration.flags |= (1 << (4));
  6940  006BDE  0101               	movlb	1	; () banked
  6941  006BE0  8998               	bsf	(_RadioConfiguration+35)& (0+255),4,b
  6942                           
  6943                           ; BSR set to: 1
  6944                           ;radio_driver_SX1276.c: 1413: if ((RadioConfiguration.flags & (1 << (1))) != 0)
  6945  006BE2  A398               	btfss	(_RadioConfiguration+35)& (0+255),1,b
  6946  006BE4  D004               	goto	l645
  6947                           
  6948                           ; BSR set to: 1
  6949                           ;radio_driver_SX1276.c: 1414: {
  6950                           ;radio_driver_SX1276.c: 1415: RadioConfiguration.flags &= ~(1 << (1));
  6951  006BE6  9398               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  6952                           
  6953                           ; BSR set to: 1
  6954                           ;radio_driver_SX1276.c: 1416: LORAWAN_RxTimeout();
  6955  006BE8  EC88  F013         	call	_LORAWAN_RxTimeout	;wreg free
  6956                           
  6957                           ;radio_driver_SX1276.c: 1417: }
  6958  006BEC  D009               	goto	l648
  6959  006BEE                     l645:
  6960                           
  6961                           ; BSR set to: 1
  6962                           ;radio_driver_SX1276.c: 1418: else if ((RadioConfiguration.flags & (1 << (0))) != 0)
  6963  006BEE  A198               	btfss	(_RadioConfiguration+35)& (0+255),0,b
  6964  006BF0  D007               	goto	l648
  6965                           
  6966                           ; BSR set to: 1
  6967                           ;radio_driver_SX1276.c: 1419: {
  6968                           ;radio_driver_SX1276.c: 1420: RadioConfiguration.flags &= ~(1 << (0));
  6969  006BF2  9198               	bcf	(_RadioConfiguration+35)& (0+255),0,b
  6970                           
  6971                           ; BSR set to: 1
  6972                           ;radio_driver_SX1276.c: 1425: LORAWAN_TxDone(RadioConfiguration.watchdogTimerTimeout);
  6973  006BF4  C19F  F09E         	movff	_RadioConfiguration+42,LORAWAN_TxDone@timeOnAir
  6974  006BF8  C1A0  F09F         	movff	_RadioConfiguration+43,LORAWAN_TxDone@timeOnAir+1
  6975  006BFC  EC99  F005         	call	_LORAWAN_TxDone	;wreg free
  6976  006C00                     l648:
  6977                           
  6978                           ; _RADIO_WatchdogTimeout: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 1, argsize = 1, vargsize = 0
  6979  006C00  52E5               	movf	postdec1,f,c
  6980  006C02  0012               	return		;funcret
  6981  006C04                     __end_of_RADIO_WatchdogTimeout:
  6982                           	opt stack 0
  6983                           tosu	equ	0xFFF
  6984                           tosh	equ	0xFFE
  6985                           tosl	equ	0xFFD
  6986                           pclath	equ	0xFFA
  6987                           tblptru	equ	0xFF8
  6988                           tblptrh	equ	0xFF7
  6989                           tblptrl	equ	0xFF6
  6990                           tablat	equ	0xFF5
  6991                           prodh	equ	0xFF4
  6992                           prodl	equ	0xFF3
  6993                           intcon	equ	0xFF2
  6994                           intcon2	equ	0xFF1
  6995                           intcon3	equ	0xFF0
  6996                           postinc0	equ	0xFEE
  6997                           wreg	equ	0xFE8
  6998                           postinc1	equ	0xFE6
  6999                           postdec1	equ	0xFE5
  7000                           plusw1	equ	0xFE3
  7001                           fsr1h	equ	0xFE2
  7002                           fsr1l	equ	0xFE1
  7003                           indf2	equ	0xFDF
  7004                           postinc2	equ	0xFDE
  7005                           postdec2	equ	0xFDD
  7006                           fsr2h	equ	0xFDA
  7007                           fsr2l	equ	0xFD9
  7008                           status	equ	0xFD8
  7009                           
  7010 ;; *************** function _RADIO_RxFSKTimeout *****************
  7011 ;; Defined at:
  7012 ;;		line 1392 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  7013 ;; Parameters:    Size  Location     Type
  7014 ;;  param           1  [STACK] unsigned char 
  7015 ;; Auto vars:     Size  Location     Type
  7016 ;;  irqFlags        1  [STACK] unsigned char 
  7017 ;; Return value:  Size  Location     Type
  7018 ;;                  1  [STACK] void 
  7019 ;; Registers used:
  7020 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+11, tosl, tblptrl
      +, tblptrh, tblptru, prodl, prodh, cstack
  7021 ;; Tracked objects:
  7022 ;;		On entry : F/0
  7023 ;;		On exit  : C/0
  7024 ;;		Unchanged: 0/0
  7025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7030 ;;Total ram usage:        0 bytes
  7031 ;; Hardware stack levels used:    1
  7032 ;; Hardware stack levels required when called:   16
  7033 ;; This function calls:
  7034 ;;		_LORAWAN_RxTimeout
  7035 ;;		_RADIO_RegisterRead
  7036 ;;		_RADIO_WriteMode
  7037 ;;		_SwTimerStop
  7038 ;; This function is called by:
  7039 ;;		_RADIO_Init
  7040 ;;		_SwTimersExecute
  7041 ;; This function uses a reentrant model
  7042 ;;
  7043                           
  7044                           	psect	text39
  7045  006F5A                     __ptext39:
  7046                           	opt stack 0
  7047  006F5A                     _RADIO_RxFSKTimeout:
  7048                           	opt stack 0
  7049                           
  7050                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7051  006F5A  52E6               	movf	postinc1,f,c
  7052                           
  7053                           ;radio_driver_SX1276.c: 1394: uint8_t irqFlags;
  7054                           ;radio_driver_SX1276.c: 1395: irqFlags = RADIO_RegisterRead(0x3E);
  7055                           
  7056                           ;incstack = 0
  7057  006F5C  0E3E               	movlw	62
  7058  006F5E  EC30  F039         	call	_RADIO_RegisterRead
  7059  006F62  6E55               	movwf	btemp+11,c
  7060                           
  7061                           ;stkvar	RADIO_RxFSKTimeout@irqFlags @ sp[(-1)+0]
  7062  006F64  0EFF               	movlw	-1
  7063  006F66  C055  FFE3         	movff	btemp+11,plusw1
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;radio_driver_SX1276.c: 1396: if (0 == (irqFlags & (1<<(0))))
  7067                           ;stkvar	RADIO_RxFSKTimeout@irqFlags @ sp[(-1)+0]
  7068  006F6A  B0E3               	btfsc	plusw1,0,c
  7069  006F6C  D00E               	goto	l642
  7070                           
  7071                           ; BSR set to: 0
  7072                           ;radio_driver_SX1276.c: 1397: {
  7073                           ;radio_driver_SX1276.c: 1399: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  7074  006F6E  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  7075  006F72  0E00               	movlw	0
  7076  006F74  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
  7077  006F76  EC8F  F028         	call	_RADIO_WriteMode
  7078                           
  7079                           ;radio_driver_SX1276.c: 1401: SwTimerStop(RadioConfiguration.watchdogTimerId);
  7080  006F7A  0101               	movlb	1	; () banked
  7081  006F7C  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
  7082  006F7E  EC7F  F03A         	call	_SwTimerStop
  7083                           
  7084                           ; BSR set to: 0
  7085                           ;radio_driver_SX1276.c: 1402: RadioConfiguration.flags &= ~(1 << (1));
  7086  006F82  0101               	movlb	1	; () banked
  7087  006F84  9398               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  7088                           
  7089                           ; BSR set to: 1
  7090                           ;radio_driver_SX1276.c: 1403: LORAWAN_RxTimeout();
  7091  006F86  EC88  F013         	call	_LORAWAN_RxTimeout	;wreg free
  7092  006F8A                     l642:
  7093                           
  7094                           ; _RADIO_RxFSKTimeout: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 1, argsize = 1, vargsize = 0
  7095  006F8A  52E5               	movf	postdec1,f,c
  7096  006F8C  52E5               	movf	postdec1,f,c
  7097  006F8E  0012               	return		;funcret
  7098  006F90                     __end_of_RADIO_RxFSKTimeout:
  7099                           	opt stack 0
  7100                           tosu	equ	0xFFF
  7101                           tosh	equ	0xFFE
  7102                           tosl	equ	0xFFD
  7103                           pclath	equ	0xFFA
  7104                           tblptru	equ	0xFF8
  7105                           tblptrh	equ	0xFF7
  7106                           tblptrl	equ	0xFF6
  7107                           tablat	equ	0xFF5
  7108                           prodh	equ	0xFF4
  7109                           prodl	equ	0xFF3
  7110                           intcon	equ	0xFF2
  7111                           intcon2	equ	0xFF1
  7112                           intcon3	equ	0xFF0
  7113                           postinc0	equ	0xFEE
  7114                           wreg	equ	0xFE8
  7115                           postinc1	equ	0xFE6
  7116                           postdec1	equ	0xFE5
  7117                           plusw1	equ	0xFE3
  7118                           fsr1h	equ	0xFE2
  7119                           fsr1l	equ	0xFE1
  7120                           indf2	equ	0xFDF
  7121                           postinc2	equ	0xFDE
  7122                           postdec2	equ	0xFDD
  7123                           fsr2h	equ	0xFDA
  7124                           fsr2l	equ	0xFD9
  7125                           status	equ	0xFD8
  7126                           
  7127 ;; *************** function _UnconfirmedTransmissionCallback *****************
  7128 ;; Defined at:
  7129 ;;		line 997 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7130 ;; Parameters:    Size  Location     Type
  7131 ;;  param           1  [STACK] unsigned char 
  7132 ;; Auto vars:     Size  Location     Type
  7133 ;;		None
  7134 ;; Return value:  Size  Location     Type
  7135 ;;                  1  [STACK] void 
  7136 ;; Registers used:
  7137 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, tosl, tblptrl, tblptrh, tblptru, prod
      +l, prodh, cstack
  7138 ;; Tracked objects:
  7139 ;;		On entry : F/0
  7140 ;;		On exit  : C/0
  7141 ;;		Unchanged: 0/0
  7142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7147 ;;Total ram usage:        0 bytes
  7148 ;; Hardware stack levels used:    1
  7149 ;; Hardware stack levels required when called:   13
  7150 ;; This function calls:
  7151 ;;		_RADIO_Transmit
  7152 ;;		_ResetParametersForUnconfirmedTransmission
  7153 ;;		_RxDataDone
  7154 ;;		_SelectChannelForTransmission
  7155 ;; This function is called by:
  7156 ;;		_SetCallbackSoftwareTimers
  7157 ;;		_SwTimersExecute
  7158 ;; This function uses a reentrant model
  7159 ;;
  7160                           
  7161                           	psect	text40
  7162  0061C2                     __ptext40:
  7163                           	opt stack 0
  7164  0061C2                     _UnconfirmedTransmissionCallback:
  7165                           	opt stack 15
  7166                           
  7167                           ;lorawan.c: 1000: if ( (SelectChannelForTransmission (1) == OK) && (RADIO_Transmit (&mac
      +                          Buffer[16], loRa.lastPacketLength) == OK) )
  7168                           
  7169                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7170                           ;incstack = 0
  7171  0061C2  0E01               	movlw	1
  7172  0061C4  ECE2  F032         	call	_SelectChannelForTransmission
  7173  0061C8  0900               	iorlw	0
  7174  0061CA  E116               	bnz	l15002
  7175                           
  7176                           ; BSR set to: 0
  7177  0061CC  0EF0               	movlw	low (_macBuffer+16)
  7178  0061CE  6F94               	movwf	RADIO_Transmit@buffer& (0+255),b
  7179  0061D0  0E04               	movlw	high (_macBuffer+16)
  7180  0061D2  6F95               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
  7181  0061D4  C2D4  F096         	movff	_loRa+212,RADIO_Transmit@bufferLen
  7182  0061D8  ECF9  F017         	call	_RADIO_Transmit	;wreg free
  7183  0061DC  C094  F04B         	movff	?_RADIO_Transmit,btemp+1
  7184  0061E0  C095  F04C         	movff	?_RADIO_Transmit+1,btemp+2
  7185  0061E4  504B               	movf	btemp+1,w,c
  7186  0061E6  104C               	iorwf	btemp+2,w,c
  7187  0061E8  E107               	bnz	l15002
  7188                           
  7189                           ; BSR set to: 0
  7190                           ;lorawan.c: 1001: {
  7191                           ;lorawan.c: 1002: loRa.counterRepetitionsUnconfirmedUplink ++ ;
  7192  0061EA  0102               	movlb	2	; () banked
  7193  0061EC  2BD8               	incf	(_loRa+216)& (0+255),f,b
  7194                           
  7195                           ; BSR set to: 2
  7196                           ;lorawan.c: 1003: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
  7197  0061EE  5102               	movf	(_loRa+2)& (0+255),w,b
  7198  0061F0  0BF0               	andlw	-16
  7199  0061F2  0901               	iorlw	1
  7200  0061F4  6F02               	movwf	(_loRa+2)& (0+255),b
  7201                           
  7202                           ;lorawan.c: 1005: }
  7203  0061F6  D019               	goto	l2018
  7204  0061F8                     l15002:
  7205                           
  7206                           ; BSR set to: 0
  7207                           ;lorawan.c: 1006: else
  7208                           ;lorawan.c: 1008: {
  7209                           ;lorawan.c: 1009: ResetParametersForUnconfirmedTransmission ();
  7210  0061F8  EC44  F03B         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  7211                           
  7212                           ; BSR set to: 2
  7213                           ;lorawan.c: 1010: if (rxPayload.RxAppData != (0))
  7214  0061FC  0101               	movlb	1	; () banked
  7215  0061FE  516E               	movf	_rxPayload& (0+255),w,b
  7216  006200  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
  7217  006202  E013               	bz	l2018
  7218                           
  7219                           ; BSR set to: 1
  7220                           ;lorawan.c: 1011: {
  7221                           ;lorawan.c: 1012: rxPayload.RxAppData((0), 0, MAC_NOT_OK);
  7222  006204  0E00               	movlw	0
  7223  006206  0100               	movlb	0	; () banked
  7224  006208  6F64               	movwf	RxDataDone@pData& (0+255),b
  7225  00620A  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
  7226  00620C  6F66               	movwf	RxDataDone@dataLength& (0+255),b
  7227  00620E  6F67               	movwf	RxDataDone@status& (0+255),b
  7228  006210  D801               	call	u17998
  7229  006212  D00B               	goto	l2018
  7230  006214                     u17998:
  7231  006214  0005               	push	
  7232  006216  0101               	movlb	1	; () banked
  7233  006218  6EFA               	movwf	pclath,c
  7234  00621A  516E               	movf	_rxPayload& (0+255),w,b
  7235  00621C  6EFD               	movwf	tosl,c
  7236  00621E  516F               	movf	(_rxPayload+1)& (0+255),w,b
  7237  006220  6EFE               	movwf	tosh,c
  7238  006222  50F8               	movf	tblptru,w,c
  7239  006224  6EFF               	movwf	tosu,c
  7240  006226  50FA               	movf	pclath,w,c
  7241  006228  0012               	return		;indir
  7242  00622A                     l2018:
  7243                           
  7244                           ; _UnconfirmedTransmissionCallback: autosize = 0, savesize = 0, parsavesize = 0, tempsiz
      +                          e = 0 parsize = 1, argsize = 1, vargsize = 0
  7245  00622A  52E5               	movf	postdec1,f,c
  7246  00622C  0012               	return		;funcret
  7247  00622E                     __end_of_UnconfirmedTransmissionCallback:
  7248                           	opt stack 0
  7249                           tosu	equ	0xFFF
  7250                           tosh	equ	0xFFE
  7251                           tosl	equ	0xFFD
  7252                           pclath	equ	0xFFA
  7253                           tblptru	equ	0xFF8
  7254                           tblptrh	equ	0xFF7
  7255                           tblptrl	equ	0xFF6
  7256                           tablat	equ	0xFF5
  7257                           prodh	equ	0xFF4
  7258                           prodl	equ	0xFF3
  7259                           intcon	equ	0xFF2
  7260                           intcon2	equ	0xFF1
  7261                           intcon3	equ	0xFF0
  7262                           postinc0	equ	0xFEE
  7263                           wreg	equ	0xFE8
  7264                           postinc1	equ	0xFE6
  7265                           postdec1	equ	0xFE5
  7266                           plusw1	equ	0xFE3
  7267                           fsr1h	equ	0xFE2
  7268                           fsr1l	equ	0xFE1
  7269                           indf2	equ	0xFDF
  7270                           postinc2	equ	0xFDE
  7271                           postdec2	equ	0xFDD
  7272                           fsr2h	equ	0xFDA
  7273                           fsr2l	equ	0xFD9
  7274                           status	equ	0xFD8
  7275                           
  7276 ;; *************** function _GetRx1Freq *****************
  7277 ;; Defined at:
  7278 ;;		line 883 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
  7279 ;; Parameters:    Size  Location     Type
  7280 ;;		None
  7281 ;; Auto vars:     Size  Location     Type
  7282 ;;		None
  7283 ;; Return value:  Size  Location     Type
  7284 ;;                  4    4[BANK0 ] unsigned long 
  7285 ;; Registers used:
  7286 ;;		None
  7287 ;; Tracked objects:
  7288 ;;		On entry : F/2
  7289 ;;		On exit  : F/2
  7290 ;;		Unchanged: F/0
  7291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7292 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7295 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7296 ;;Total ram usage:        4 bytes
  7297 ;; Hardware stack levels used:    1
  7298 ;; Hardware stack levels required when called:    7
  7299 ;; This function calls:
  7300 ;;		Nothing
  7301 ;; This function is called by:
  7302 ;;		_LORAWAN_ReceiveWindow1Callback
  7303 ;; This function uses a non-reentrant model
  7304 ;;
  7305                           
  7306                           	psect	text41
  7307  007666                     __ptext41:
  7308                           	opt stack 0
  7309  007666                     _GetRx1Freq:
  7310                           	opt stack 20
  7311                           
  7312                           ; BSR set to: 2
  7313                           ;lorawan_eu.c: 885: return loRa.receiveWindow1Parameters.frequency;
  7314                           
  7315                           ;incstack = 0
  7316  007666  C213  F064         	movff	_loRa+19,?_GetRx1Freq
  7317  00766A  C214  F065         	movff	_loRa+20,?_GetRx1Freq+1
  7318  00766E  C215  F066         	movff	_loRa+21,?_GetRx1Freq+2
  7319  007672  C216  F067         	movff	_loRa+22,?_GetRx1Freq+3
  7320                           
  7321                           ; BSR set to: 2
  7322  007676  0012               	return		;funcret
  7323  007678                     __end_of_GetRx1Freq:
  7324                           	opt stack 0
  7325                           tosu	equ	0xFFF
  7326                           tosh	equ	0xFFE
  7327                           tosl	equ	0xFFD
  7328                           pclath	equ	0xFFA
  7329                           tblptru	equ	0xFF8
  7330                           tblptrh	equ	0xFF7
  7331                           tblptrl	equ	0xFF6
  7332                           tablat	equ	0xFF5
  7333                           prodh	equ	0xFF4
  7334                           prodl	equ	0xFF3
  7335                           intcon	equ	0xFF2
  7336                           intcon2	equ	0xFF1
  7337                           intcon3	equ	0xFF0
  7338                           postinc0	equ	0xFEE
  7339                           wreg	equ	0xFE8
  7340                           postinc1	equ	0xFE6
  7341                           postdec1	equ	0xFE5
  7342                           plusw1	equ	0xFE3
  7343                           fsr1h	equ	0xFE2
  7344                           fsr1l	equ	0xFE1
  7345                           indf2	equ	0xFDF
  7346                           postinc2	equ	0xFDE
  7347                           postdec2	equ	0xFDD
  7348                           fsr2h	equ	0xFDA
  7349                           fsr2l	equ	0xFD9
  7350                           status	equ	0xFD8
  7351                           
  7352 ;; *************** function _RADIO_DIO5 *****************
  7353 ;; Defined at:
  7354 ;;		line 1344 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  7355 ;; Parameters:    Size  Location     Type
  7356 ;;		None
  7357 ;; Auto vars:     Size  Location     Type
  7358 ;;  dioMapping      1    0        unsigned char 
  7359 ;; Return value:  Size  Location     Type
  7360 ;;                  1    wreg      void 
  7361 ;; Registers used:
  7362 ;;		wreg, status,2, status,0, cstack
  7363 ;; Tracked objects:
  7364 ;;		On entry : F/1
  7365 ;;		On exit  : 0/0
  7366 ;;		Unchanged: 0/0
  7367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7370 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7371 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7372 ;;Total ram usage:        1 bytes
  7373 ;; Hardware stack levels used:    1
  7374 ;; Hardware stack levels required when called:   11
  7375 ;; This function calls:
  7376 ;;		_RADIO_RegisterRead
  7377 ;;		_RADIO_UnhandledInterrupt
  7378 ;; This function is called by:
  7379 ;;		_LORAWAN_Mainloop
  7380 ;; This function uses a non-reentrant model
  7381 ;;
  7382                           
  7383                           	psect	text42
  7384  00759E                     __ptext42:
  7385                           	opt stack 0
  7386  00759E                     _RADIO_DIO5:
  7387                           	opt stack 18
  7388                           
  7389                           ; BSR set to: 1
  7390                           ;radio_driver_SX1276.c: 1347: uint8_t dioMapping;
  7391                           ;radio_driver_SX1276.c: 1348: dioMapping = (RADIO_RegisterRead(0x41) & 0x30) >> (4);
  7392                           
  7393                           ; BSR set to: 2
  7394                           ;incstack = 0
  7395  00759E  0E41               	movlw	65
  7396  0075A0  EC30  F039         	call	_RADIO_RegisterRead
  7397                           
  7398                           ;radio_driver_SX1276.c: 1350: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  7399  0075A4  0E01               	movlw	1
  7400  0075A6  EC30  F039         	call	_RADIO_RegisterRead
  7401  0075AA  6F69               	movwf	??_RADIO_DIO5& (0+255),b
  7402  0075AC  AF69               	btfss	??_RADIO_DIO5& (0+255),7,b
  7403  0075AE  0012               	return	
  7404                           
  7405                           ; BSR set to: 0
  7406                           ;radio_driver_SX1276.c: 1356: RADIO_UnhandledInterrupt(MODULATION_LORA);
  7407  0075B0  0E01               	movlw	1
  7408  0075B2  EF67  F039         	goto	_RADIO_UnhandledInterrupt
  7409  0075B6                     __end_of_RADIO_DIO5:
  7410                           	opt stack 0
  7411                           tosu	equ	0xFFF
  7412                           tosh	equ	0xFFE
  7413                           tosl	equ	0xFFD
  7414                           pclath	equ	0xFFA
  7415                           tblptru	equ	0xFF8
  7416                           tblptrh	equ	0xFF7
  7417                           tblptrl	equ	0xFF6
  7418                           tablat	equ	0xFF5
  7419                           prodh	equ	0xFF4
  7420                           prodl	equ	0xFF3
  7421                           intcon	equ	0xFF2
  7422                           intcon2	equ	0xFF1
  7423                           intcon3	equ	0xFF0
  7424                           postinc0	equ	0xFEE
  7425                           wreg	equ	0xFE8
  7426                           postinc1	equ	0xFE6
  7427                           postdec1	equ	0xFE5
  7428                           plusw1	equ	0xFE3
  7429                           fsr1h	equ	0xFE2
  7430                           fsr1l	equ	0xFE1
  7431                           indf2	equ	0xFDF
  7432                           postinc2	equ	0xFDE
  7433                           postdec2	equ	0xFDD
  7434                           fsr2h	equ	0xFDA
  7435                           fsr2l	equ	0xFD9
  7436                           status	equ	0xFD8
  7437                           
  7438 ;; *************** function _RADIO_DIO4 *****************
  7439 ;; Defined at:
  7440 ;;		line 1321 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  7441 ;; Parameters:    Size  Location     Type
  7442 ;;		None
  7443 ;; Auto vars:     Size  Location     Type
  7444 ;;  dioMapping      1    0        unsigned char 
  7445 ;; Return value:  Size  Location     Type
  7446 ;;                  1    wreg      void 
  7447 ;; Registers used:
  7448 ;;		wreg, status,2, status,0, cstack
  7449 ;; Tracked objects:
  7450 ;;		On entry : F/1
  7451 ;;		On exit  : 0/0
  7452 ;;		Unchanged: 0/0
  7453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7456 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7457 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7458 ;;Total ram usage:        1 bytes
  7459 ;; Hardware stack levels used:    1
  7460 ;; Hardware stack levels required when called:   11
  7461 ;; This function calls:
  7462 ;;		_RADIO_RegisterRead
  7463 ;;		_RADIO_UnhandledInterrupt
  7464 ;; This function is called by:
  7465 ;;		_LORAWAN_Mainloop
  7466 ;; This function uses a non-reentrant model
  7467 ;;
  7468                           
  7469                           	psect	text43
  7470  0075B6                     __ptext43:
  7471                           	opt stack 0
  7472  0075B6                     _RADIO_DIO4:
  7473                           	opt stack 18
  7474                           
  7475                           ; BSR set to: 1
  7476                           ;radio_driver_SX1276.c: 1324: uint8_t dioMapping;
  7477                           ;radio_driver_SX1276.c: 1325: dioMapping = (RADIO_RegisterRead(0x41) & 0xC0) >> (6);
  7478                           
  7479                           ;incstack = 0
  7480  0075B6  0E41               	movlw	65
  7481  0075B8  EC30  F039         	call	_RADIO_RegisterRead
  7482                           
  7483                           ;radio_driver_SX1276.c: 1327: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  7484  0075BC  0E01               	movlw	1
  7485  0075BE  EC30  F039         	call	_RADIO_RegisterRead
  7486  0075C2  6F69               	movwf	??_RADIO_DIO4& (0+255),b
  7487  0075C4  AF69               	btfss	??_RADIO_DIO4& (0+255),7,b
  7488  0075C6  0012               	return	
  7489                           
  7490                           ; BSR set to: 0
  7491                           ;radio_driver_SX1276.c: 1333: RADIO_UnhandledInterrupt(MODULATION_LORA);
  7492  0075C8  0E01               	movlw	1
  7493  0075CA  EF67  F039         	goto	_RADIO_UnhandledInterrupt
  7494  0075CE                     __end_of_RADIO_DIO4:
  7495                           	opt stack 0
  7496                           tosu	equ	0xFFF
  7497                           tosh	equ	0xFFE
  7498                           tosl	equ	0xFFD
  7499                           pclath	equ	0xFFA
  7500                           tblptru	equ	0xFF8
  7501                           tblptrh	equ	0xFF7
  7502                           tblptrl	equ	0xFF6
  7503                           tablat	equ	0xFF5
  7504                           prodh	equ	0xFF4
  7505                           prodl	equ	0xFF3
  7506                           intcon	equ	0xFF2
  7507                           intcon2	equ	0xFF1
  7508                           intcon3	equ	0xFF0
  7509                           postinc0	equ	0xFEE
  7510                           wreg	equ	0xFE8
  7511                           postinc1	equ	0xFE6
  7512                           postdec1	equ	0xFE5
  7513                           plusw1	equ	0xFE3
  7514                           fsr1h	equ	0xFE2
  7515                           fsr1l	equ	0xFE1
  7516                           indf2	equ	0xFDF
  7517                           postinc2	equ	0xFDE
  7518                           postdec2	equ	0xFDD
  7519                           fsr2h	equ	0xFDA
  7520                           fsr2l	equ	0xFD9
  7521                           status	equ	0xFD8
  7522                           
  7523 ;; *************** function _RADIO_DIO3 *****************
  7524 ;; Defined at:
  7525 ;;		line 1298 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  7526 ;; Parameters:    Size  Location     Type
  7527 ;;		None
  7528 ;; Auto vars:     Size  Location     Type
  7529 ;;  dioMapping      1    0        unsigned char 
  7530 ;; Return value:  Size  Location     Type
  7531 ;;                  1    wreg      void 
  7532 ;; Registers used:
  7533 ;;		wreg, status,2, status,0, cstack
  7534 ;; Tracked objects:
  7535 ;;		On entry : F/1
  7536 ;;		On exit  : 0/0
  7537 ;;		Unchanged: 0/0
  7538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7541 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7542 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7543 ;;Total ram usage:        1 bytes
  7544 ;; Hardware stack levels used:    1
  7545 ;; Hardware stack levels required when called:   11
  7546 ;; This function calls:
  7547 ;;		_RADIO_RegisterRead
  7548 ;;		_RADIO_UnhandledInterrupt
  7549 ;; This function is called by:
  7550 ;;		_LORAWAN_Mainloop
  7551 ;; This function uses a non-reentrant model
  7552 ;;
  7553                           
  7554                           	psect	text44
  7555  0075CE                     __ptext44:
  7556                           	opt stack 0
  7557  0075CE                     _RADIO_DIO3:
  7558                           	opt stack 18
  7559                           
  7560                           ; BSR set to: 1
  7561                           ;radio_driver_SX1276.c: 1301: uint8_t dioMapping;
  7562                           ;radio_driver_SX1276.c: 1302: dioMapping = RADIO_RegisterRead(0x40) & 0x03;
  7563                           
  7564                           ;incstack = 0
  7565  0075CE  0E40               	movlw	64
  7566  0075D0  EC30  F039         	call	_RADIO_RegisterRead
  7567                           
  7568                           ;radio_driver_SX1276.c: 1304: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  7569  0075D4  0E01               	movlw	1
  7570  0075D6  EC30  F039         	call	_RADIO_RegisterRead
  7571  0075DA  6F69               	movwf	??_RADIO_DIO3& (0+255),b
  7572  0075DC  AF69               	btfss	??_RADIO_DIO3& (0+255),7,b
  7573  0075DE  0012               	return	
  7574                           
  7575                           ; BSR set to: 0
  7576                           ;radio_driver_SX1276.c: 1310: RADIO_UnhandledInterrupt(MODULATION_LORA);
  7577  0075E0  0E01               	movlw	1
  7578  0075E2  EF67  F039         	goto	_RADIO_UnhandledInterrupt
  7579  0075E6                     __end_of_RADIO_DIO3:
  7580                           	opt stack 0
  7581                           tosu	equ	0xFFF
  7582                           tosh	equ	0xFFE
  7583                           tosl	equ	0xFFD
  7584                           pclath	equ	0xFFA
  7585                           tblptru	equ	0xFF8
  7586                           tblptrh	equ	0xFF7
  7587                           tblptrl	equ	0xFF6
  7588                           tablat	equ	0xFF5
  7589                           prodh	equ	0xFF4
  7590                           prodl	equ	0xFF3
  7591                           intcon	equ	0xFF2
  7592                           intcon2	equ	0xFF1
  7593                           intcon3	equ	0xFF0
  7594                           postinc0	equ	0xFEE
  7595                           wreg	equ	0xFE8
  7596                           postinc1	equ	0xFE6
  7597                           postdec1	equ	0xFE5
  7598                           plusw1	equ	0xFE3
  7599                           fsr1h	equ	0xFE2
  7600                           fsr1l	equ	0xFE1
  7601                           indf2	equ	0xFDF
  7602                           postinc2	equ	0xFDE
  7603                           postdec2	equ	0xFDD
  7604                           fsr2h	equ	0xFDA
  7605                           fsr2l	equ	0xFD9
  7606                           status	equ	0xFD8
  7607                           
  7608 ;; *************** function _RADIO_DIO2 *****************
  7609 ;; Defined at:
  7610 ;;		line 1268 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  7611 ;; Parameters:    Size  Location     Type
  7612 ;;		None
  7613 ;; Auto vars:     Size  Location     Type
  7614 ;;  dioMapping      1   30[BANK0 ] unsigned char 
  7615 ;;  opMode          1    0        unsigned char 
  7616 ;; Return value:  Size  Location     Type
  7617 ;;                  1    wreg      void 
  7618 ;; Registers used:
  7619 ;;		wreg, status,2, status,0, cstack
  7620 ;; Tracked objects:
  7621 ;;		On entry : F/1
  7622 ;;		On exit  : 0/0
  7623 ;;		Unchanged: 0/0
  7624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7626 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7627 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7628 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7629 ;;Total ram usage:        2 bytes
  7630 ;; Hardware stack levels used:    1
  7631 ;; Hardware stack levels required when called:   12
  7632 ;; This function calls:
  7633 ;;		_RADIO_FHSSChangeChannel
  7634 ;;		_RADIO_RegisterRead
  7635 ;;		_RADIO_UnhandledInterrupt
  7636 ;; This function is called by:
  7637 ;;		_LORAWAN_Mainloop
  7638 ;; This function uses a non-reentrant model
  7639 ;;
  7640                           
  7641                           	psect	text45
  7642  006AAA                     __ptext45:
  7643                           	opt stack 0
  7644  006AAA                     _RADIO_DIO2:
  7645                           	opt stack 17
  7646                           
  7647                           ; BSR set to: 1
  7648                           ;radio_driver_SX1276.c: 1271: uint8_t dioMapping;
  7649                           ;radio_driver_SX1276.c: 1272: uint8_t opMode;
  7650                           ;radio_driver_SX1276.c: 1273: dioMapping = (RADIO_RegisterRead(0x40) & 0x0C) >> (2);
  7651                           
  7652                           ;incstack = 0
  7653  006AAA  0E40               	movlw	64
  7654  006AAC  EC30  F039         	call	_RADIO_RegisterRead
  7655  006AB0  6F7D               	movwf	??_RADIO_DIO2& (0+255),b
  7656  006AB2  90D8               	bcf	status,0,c
  7657  006AB4  337D               	rrcf	??_RADIO_DIO2& (0+255),f,b
  7658  006AB6  90D8               	bcf	status,0,c
  7659  006AB8  317D               	rrcf	??_RADIO_DIO2& (0+255),w,b
  7660  006ABA  0B03               	andlw	3
  7661  006ABC  6F7E               	movwf	RADIO_DIO2@dioMapping& (0+255),b
  7662                           
  7663                           ;radio_driver_SX1276.c: 1274: opMode = RADIO_RegisterRead(0x01);
  7664  006ABE  0E01               	movlw	1
  7665  006AC0  EC30  F039         	call	_RADIO_RegisterRead
  7666                           
  7667                           ;radio_driver_SX1276.c: 1276: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  7668  006AC4  0E01               	movlw	1
  7669  006AC6  EC30  F039         	call	_RADIO_RegisterRead
  7670  006ACA  6F7D               	movwf	??_RADIO_DIO2& (0+255),b
  7671  006ACC  AF7D               	btfss	??_RADIO_DIO2& (0+255),7,b
  7672  006ACE  0012               	return	
  7673  006AD0  D003               	goto	l15188
  7674  006AD2                     l15184:
  7675                           
  7676                           ; BSR set to: 0
  7677                           ;radio_driver_SX1276.c: 1288: RADIO_UnhandledInterrupt(MODULATION_LORA);
  7678  006AD2  0E01               	movlw	1
  7679  006AD4  EF67  F039         	goto	_RADIO_UnhandledInterrupt
  7680  006AD8                     l15188:
  7681                           
  7682                           ; BSR set to: 0
  7683  006AD8  517E               	movf	RADIO_DIO2@dioMapping& (0+255),w,b
  7684                           
  7685                           ; Switch size 1, requested type "speed"
  7686                           ; Number of cases is 3, Range of values is 0 to 2
  7687                           ; switch strategies available:
  7688                           ; Name         Instructions Cycles
  7689                           ; simple_byte           10     6 (average)
  7690                           ;	Chosen strategy is simple_byte
  7691  006ADA  E102 EF5F  F038    	bz	_RADIO_FHSSChangeChannel
  7692  006AE0  0A01               	xorlw	1	; case 1
  7693  006AE2  E102 EF5F  F038    	bz	_RADIO_FHSSChangeChannel
  7694  006AE8  0A03               	xorlw	3	; case 2
  7695  006AEA  E102 EF5F  F038    	bz	_RADIO_FHSSChangeChannel
  7696  006AF0  D7F0               	goto	l15184
  7697  006AF2                     __end_of_RADIO_DIO2:
  7698                           	opt stack 0
  7699                           tosu	equ	0xFFF
  7700                           tosh	equ	0xFFE
  7701                           tosl	equ	0xFFD
  7702                           pclath	equ	0xFFA
  7703                           tblptru	equ	0xFF8
  7704                           tblptrh	equ	0xFF7
  7705                           tblptrl	equ	0xFF6
  7706                           tablat	equ	0xFF5
  7707                           prodh	equ	0xFF4
  7708                           prodl	equ	0xFF3
  7709                           intcon	equ	0xFF2
  7710                           intcon2	equ	0xFF1
  7711                           intcon3	equ	0xFF0
  7712                           postinc0	equ	0xFEE
  7713                           wreg	equ	0xFE8
  7714                           postinc1	equ	0xFE6
  7715                           postdec1	equ	0xFE5
  7716                           plusw1	equ	0xFE3
  7717                           fsr1h	equ	0xFE2
  7718                           fsr1l	equ	0xFE1
  7719                           indf2	equ	0xFDF
  7720                           postinc2	equ	0xFDE
  7721                           postdec2	equ	0xFDD
  7722                           fsr2h	equ	0xFDA
  7723                           fsr2l	equ	0xFD9
  7724                           status	equ	0xFD8
  7725                           
  7726 ;; *************** function _RADIO_DIO1 *****************
  7727 ;; Defined at:
  7728 ;;		line 1231 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  7729 ;; Parameters:    Size  Location     Type
  7730 ;;		None
  7731 ;; Auto vars:     Size  Location     Type
  7732 ;;  dioMapping      1   79[BANK0 ] unsigned char 
  7733 ;; Return value:  Size  Location     Type
  7734 ;;                  1    wreg      void 
  7735 ;; Registers used:
  7736 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, cstack
  7737 ;; Tracked objects:
  7738 ;;		On entry : F/1
  7739 ;;		On exit  : 0/0
  7740 ;;		Unchanged: 0/0
  7741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7743 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7744 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7745 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7746 ;;Total ram usage:        2 bytes
  7747 ;; Hardware stack levels used:    1
  7748 ;; Hardware stack levels required when called:   17
  7749 ;; This function calls:
  7750 ;;		_RADIO_FHSSChangeChannel
  7751 ;;		_RADIO_RegisterRead
  7752 ;;		_RADIO_RxTimeout
  7753 ;;		_RADIO_UnhandledInterrupt
  7754 ;; This function is called by:
  7755 ;;		_LORAWAN_Mainloop
  7756 ;; This function uses a non-reentrant model
  7757 ;;
  7758                           
  7759                           	psect	text46
  7760  006E3E                     __ptext46:
  7761                           	opt stack 0
  7762  006E3E                     _RADIO_DIO1:
  7763                           	opt stack 12
  7764                           
  7765                           ; BSR set to: 1
  7766                           ;radio_driver_SX1276.c: 1234: uint8_t dioMapping;
  7767                           ;radio_driver_SX1276.c: 1235: dioMapping = (RADIO_RegisterRead(0x40) & 0x30) >> (4);
  7768                           
  7769                           ;incstack = 0
  7770  006E3E  0E40               	movlw	64
  7771  006E40  EC30  F039         	call	_RADIO_RegisterRead
  7772  006E44  6FAE               	movwf	??_RADIO_DIO1& (0+255),b
  7773  006E46  39AE               	swapf	??_RADIO_DIO1& (0+255),w,b
  7774  006E48  0B0F               	andlw	15
  7775  006E4A  0B03               	andlw	3
  7776  006E4C  6FAF               	movwf	RADIO_DIO1@dioMapping& (0+255),b
  7777                           
  7778                           ;radio_driver_SX1276.c: 1237: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  7779  006E4E  0E01               	movlw	1
  7780  006E50  EC30  F039         	call	_RADIO_RegisterRead
  7781  006E54  6FAE               	movwf	??_RADIO_DIO1& (0+255),b
  7782  006E56  AFAE               	btfss	??_RADIO_DIO1& (0+255),7,b
  7783  006E58  D00D               	goto	l15176
  7784  006E5A  D003               	goto	l15172
  7785  006E5C                     l15168:
  7786                           
  7787                           ; BSR set to: 0
  7788                           ;radio_driver_SX1276.c: 1249: RADIO_UnhandledInterrupt(MODULATION_LORA);
  7789  006E5C  0E01               	movlw	1
  7790  006E5E  EF67  F039         	goto	_RADIO_UnhandledInterrupt
  7791  006E62                     l15172:
  7792                           
  7793                           ; BSR set to: 0
  7794  006E62  51AF               	movf	RADIO_DIO1@dioMapping& (0+255),w,b
  7795                           
  7796                           ; Switch size 1, requested type "speed"
  7797                           ; Number of cases is 2, Range of values is 0 to 1
  7798                           ; switch strategies available:
  7799                           ; Name         Instructions Cycles
  7800                           ; simple_byte            7     4 (average)
  7801                           ;	Chosen strategy is simple_byte
  7802  006E64  E102 EFF5  F038    	bz	_RADIO_RxTimeout
  7803  006E6A  0A01               	xorlw	1	; case 1
  7804  006E6C  E102 EF5F  F038    	bz	_RADIO_FHSSChangeChannel
  7805  006E72  D7F4               	goto	l15168
  7806  006E74                     l15176:
  7807                           
  7808                           ; BSR set to: 0
  7809  006E74  51AF               	movf	RADIO_DIO1@dioMapping& (0+255),w,b
  7810                           
  7811                           ; Switch size 1, requested type "speed"
  7812                           ; Number of cases is 1, Range of values is 0 to 0
  7813                           ; switch strategies available:
  7814                           ; Name         Instructions Cycles
  7815                           ; simple_byte            4     3 (average)
  7816                           ;	Chosen strategy is simple_byte
  7817  006E76  0012               	return	
  7818  006E78                     __end_of_RADIO_DIO1:
  7819                           	opt stack 0
  7820                           tosu	equ	0xFFF
  7821                           tosh	equ	0xFFE
  7822                           tosl	equ	0xFFD
  7823                           pclath	equ	0xFFA
  7824                           tblptru	equ	0xFF8
  7825                           tblptrh	equ	0xFF7
  7826                           tblptrl	equ	0xFF6
  7827                           tablat	equ	0xFF5
  7828                           prodh	equ	0xFF4
  7829                           prodl	equ	0xFF3
  7830                           intcon	equ	0xFF2
  7831                           intcon2	equ	0xFF1
  7832                           intcon3	equ	0xFF0
  7833                           postinc0	equ	0xFEE
  7834                           wreg	equ	0xFE8
  7835                           postinc1	equ	0xFE6
  7836                           postdec1	equ	0xFE5
  7837                           plusw1	equ	0xFE3
  7838                           fsr1h	equ	0xFE2
  7839                           fsr1l	equ	0xFE1
  7840                           indf2	equ	0xFDF
  7841                           postinc2	equ	0xFDE
  7842                           postdec2	equ	0xFDD
  7843                           fsr2h	equ	0xFDA
  7844                           fsr2l	equ	0xFD9
  7845                           status	equ	0xFD8
  7846                           
  7847 ;; *************** function _RADIO_RxTimeout *****************
  7848 ;; Defined at:
  7849 ;;		line 1066 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  7850 ;; Parameters:    Size  Location     Type
  7851 ;;		None
  7852 ;; Auto vars:     Size  Location     Type
  7853 ;;		None
  7854 ;; Return value:  Size  Location     Type
  7855 ;;                  1    wreg      void 
  7856 ;; Registers used:
  7857 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, cstack
  7858 ;; Tracked objects:
  7859 ;;		On entry : E/0
  7860 ;;		On exit  : C/0
  7861 ;;		Unchanged: 0/0
  7862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7867 ;;Total ram usage:        0 bytes
  7868 ;; Hardware stack levels used:    1
  7869 ;; Hardware stack levels required when called:   16
  7870 ;; This function calls:
  7871 ;;		_LORAWAN_RxTimeout
  7872 ;;		_RADIO_RegisterWrite
  7873 ;;		_RADIO_WriteMode
  7874 ;;		_SwTimerStop
  7875 ;; This function is called by:
  7876 ;;		_RADIO_DIO1
  7877 ;; This function uses a non-reentrant model
  7878 ;;
  7879                           
  7880                           	psect	text47
  7881  0071EA                     __ptext47:
  7882                           	opt stack 0
  7883  0071EA                     _RADIO_RxTimeout:
  7884                           	opt stack 12
  7885                           
  7886                           ;radio_driver_SX1276.c: 1069: SwTimerStop(RadioConfiguration.watchdogTimerId);
  7887                           
  7888                           ;incstack = 0
  7889  0071EA  0101               	movlb	1	; () banked
  7890  0071EC  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
  7891  0071EE  EC7F  F03A         	call	_SwTimerStop
  7892                           
  7893                           ; BSR set to: 0
  7894                           ;radio_driver_SX1276.c: 1070: RADIO_RegisterWrite(0x12, 1<<(7));
  7895  0071F2  0E80               	movlw	128
  7896  0071F4  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
  7897  0071F6  0E12               	movlw	18
  7898  0071F8  EC17  F03A         	call	_RADIO_RegisterWrite
  7899                           
  7900                           ;radio_driver_SX1276.c: 1072: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  7901  0071FC  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  7902  007200  0E00               	movlw	0
  7903  007202  0100               	movlb	0	; () banked
  7904  007204  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
  7905  007206  EC8F  F028         	call	_RADIO_WriteMode
  7906                           
  7907                           ;radio_driver_SX1276.c: 1073: RadioConfiguration.flags &= ~(1 << (1));
  7908  00720A  0101               	movlb	1	; () banked
  7909  00720C  9398               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  7910                           
  7911                           ; BSR set to: 1
  7912                           ;radio_driver_SX1276.c: 1075: LORAWAN_RxTimeout ();
  7913  00720E  EF88  F013         	goto	_LORAWAN_RxTimeout	;wreg free
  7914  007212                     __end_of_RADIO_RxTimeout:
  7915                           	opt stack 0
  7916                           tosu	equ	0xFFF
  7917                           tosh	equ	0xFFE
  7918                           tosl	equ	0xFFD
  7919                           pclath	equ	0xFFA
  7920                           tblptru	equ	0xFF8
  7921                           tblptrh	equ	0xFF7
  7922                           tblptrl	equ	0xFF6
  7923                           tablat	equ	0xFF5
  7924                           prodh	equ	0xFF4
  7925                           prodl	equ	0xFF3
  7926                           intcon	equ	0xFF2
  7927                           intcon2	equ	0xFF1
  7928                           intcon3	equ	0xFF0
  7929                           postinc0	equ	0xFEE
  7930                           wreg	equ	0xFE8
  7931                           postinc1	equ	0xFE6
  7932                           postdec1	equ	0xFE5
  7933                           plusw1	equ	0xFE3
  7934                           fsr1h	equ	0xFE2
  7935                           fsr1l	equ	0xFE1
  7936                           indf2	equ	0xFDF
  7937                           postinc2	equ	0xFDE
  7938                           postdec2	equ	0xFDD
  7939                           fsr2h	equ	0xFDA
  7940                           fsr2l	equ	0xFD9
  7941                           status	equ	0xFD8
  7942                           
  7943 ;; *************** function _RADIO_FHSSChangeChannel *****************
  7944 ;; Defined at:
  7945 ;;		line 1158 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  7946 ;; Parameters:    Size  Location     Type
  7947 ;;		None
  7948 ;; Auto vars:     Size  Location     Type
  7949 ;;  irqFlags        1    0        unsigned char 
  7950 ;; Return value:  Size  Location     Type
  7951 ;;                  1    wreg      void 
  7952 ;; Registers used:
  7953 ;;		wreg, status,2, status,0, cstack
  7954 ;; Tracked objects:
  7955 ;;		On entry : E/0
  7956 ;;		On exit  : 0/0
  7957 ;;		Unchanged: 0/0
  7958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7963 ;;Total ram usage:        0 bytes
  7964 ;; Hardware stack levels used:    1
  7965 ;; Hardware stack levels required when called:   11
  7966 ;; This function calls:
  7967 ;;		_RADIO_RegisterRead
  7968 ;;		_RADIO_RegisterWrite
  7969 ;;		_RADIO_WriteFrequency
  7970 ;; This function is called by:
  7971 ;;		_RADIO_DIO1
  7972 ;;		_RADIO_DIO2
  7973 ;; This function uses a non-reentrant model
  7974 ;;
  7975                           
  7976                           	psect	text48
  7977  0070BE                     __ptext48:
  7978                           	opt stack 0
  7979  0070BE                     _RADIO_FHSSChangeChannel:
  7980                           	opt stack 17
  7981                           
  7982                           ;radio_driver_SX1276.c: 1160: uint8_t irqFlags;
  7983                           ;radio_driver_SX1276.c: 1161: irqFlags = RADIO_RegisterRead(0x12);
  7984                           
  7985                           ;incstack = 0
  7986  0070BE  0E12               	movlw	18
  7987  0070C0  EC30  F039         	call	_RADIO_RegisterRead
  7988                           
  7989                           ; BSR set to: 0
  7990                           ;radio_driver_SX1276.c: 1163: if ((0) != RadioConfiguration.frequencyHopPeriod)
  7991  0070C4  0101               	movlb	1	; () banked
  7992  0070C6  5193               	movf	(_RadioConfiguration+30)& (0+255),w,b
  7993  0070C8  1194               	iorwf	(_RadioConfiguration+31)& (0+255),w,b
  7994  0070CA  E00A               	bz	l564
  7995                           
  7996                           ; BSR set to: 1
  7997                           ;radio_driver_SX1276.c: 1164: {
  7998                           ;radio_driver_SX1276.c: 1165: if ((0) != RadioConfiguration.fhssNextFrequency)
  7999  0070CC  51A4               	movf	(_RadioConfiguration+47)& (0+255),w,b
  8000  0070CE  11A5               	iorwf	(_RadioConfiguration+48)& (0+255),w,b
  8001  0070D0  E007               	bz	l564
  8002                           
  8003                           ; BSR set to: 1
  8004                           ;radio_driver_SX1276.c: 1166: {
  8005                           ;radio_driver_SX1276.c: 1167: RADIO_WriteFrequency(RadioConfiguration.fhssNextFrequency(
      +                          ));
  8006  0070D2  0100               	movlb	0	; () banked
  8007  0070D4  6B71               	clrf	RADIO_WriteFrequency@frequency& (0+255),b
  8008  0070D6  6B72               	clrf	(RADIO_WriteFrequency@frequency+1)& (0+255),b
  8009  0070D8  6B73               	clrf	(RADIO_WriteFrequency@frequency+2)& (0+255),b
  8010  0070DA  6B74               	clrf	(RADIO_WriteFrequency@frequency+3)& (0+255),b
  8011  0070DC  EC21  F028         	call	_RADIO_WriteFrequency	;wreg free
  8012  0070E0                     l564:
  8013                           
  8014                           ;radio_driver_SX1276.c: 1168: }
  8015                           ;radio_driver_SX1276.c: 1169: }
  8016                           ;radio_driver_SX1276.c: 1172: RADIO_RegisterWrite(0x12, 1<<(1));
  8017  0070E0  0E02               	movlw	2
  8018  0070E2  0100               	movlb	0	; () banked
  8019  0070E4  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
  8020  0070E6  0E12               	movlw	18
  8021  0070E8  EF17  F03A         	goto	_RADIO_RegisterWrite
  8022  0070EC                     __end_of_RADIO_FHSSChangeChannel:
  8023                           	opt stack 0
  8024                           tosu	equ	0xFFF
  8025                           tosh	equ	0xFFE
  8026                           tosl	equ	0xFFD
  8027                           pclath	equ	0xFFA
  8028                           tblptru	equ	0xFF8
  8029                           tblptrh	equ	0xFF7
  8030                           tblptrl	equ	0xFF6
  8031                           tablat	equ	0xFF5
  8032                           prodh	equ	0xFF4
  8033                           prodl	equ	0xFF3
  8034                           intcon	equ	0xFF2
  8035                           intcon2	equ	0xFF1
  8036                           intcon3	equ	0xFF0
  8037                           postinc0	equ	0xFEE
  8038                           wreg	equ	0xFE8
  8039                           postinc1	equ	0xFE6
  8040                           postdec1	equ	0xFE5
  8041                           plusw1	equ	0xFE3
  8042                           fsr1h	equ	0xFE2
  8043                           fsr1l	equ	0xFE1
  8044                           indf2	equ	0xFDF
  8045                           postinc2	equ	0xFDE
  8046                           postdec2	equ	0xFDD
  8047                           fsr2h	equ	0xFDA
  8048                           fsr2l	equ	0xFD9
  8049                           status	equ	0xFD8
  8050                           
  8051 ;; *************** function _RADIO_DIO0 *****************
  8052 ;; Defined at:
  8053 ;;		line 1176 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8054 ;; Parameters:    Size  Location     Type
  8055 ;;		None
  8056 ;; Auto vars:     Size  Location     Type
  8057 ;;  opMode          1  146[BANK0 ] unsigned char 
  8058 ;;  dioMapping      1  145[BANK0 ] unsigned char 
  8059 ;; Return value:  Size  Location     Type
  8060 ;;                  1    wreg      void 
  8061 ;; Registers used:
  8062 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8063 ;; Tracked objects:
  8064 ;;		On entry : F/1
  8065 ;;		On exit  : 0/0
  8066 ;;		Unchanged: 0/0
  8067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8069 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8070 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8071 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8072 ;;Total ram usage:        4 bytes
  8073 ;; Hardware stack levels used:    1
  8074 ;; Hardware stack levels required when called:   17
  8075 ;; This function calls:
  8076 ;;		_RADIO_FSKPacketSent
  8077 ;;		_RADIO_FSKPayloadReady
  8078 ;;		_RADIO_RegisterRead
  8079 ;;		_RADIO_RxDone
  8080 ;;		_RADIO_TxDone
  8081 ;;		_RADIO_UnhandledInterrupt
  8082 ;; This function is called by:
  8083 ;;		_LORAWAN_Mainloop
  8084 ;; This function uses a non-reentrant model
  8085 ;;
  8086                           
  8087                           	psect	text49
  8088  006438                     __ptext49:
  8089                           	opt stack 0
  8090  006438                     _RADIO_DIO0:
  8091                           	opt stack 12
  8092                           
  8093                           ; BSR set to: 1
  8094                           ;radio_driver_SX1276.c: 1179: uint8_t dioMapping;
  8095                           ;radio_driver_SX1276.c: 1180: uint8_t opMode;
  8096                           ;radio_driver_SX1276.c: 1181: dioMapping = (RADIO_RegisterRead(0x40) & 0xC0) >> (6);
  8097                           
  8098                           ;incstack = 0
  8099  006438  0E40               	movlw	64
  8100  00643A  EC30  F039         	call	_RADIO_RegisterRead
  8101  00643E  6FEF               	movwf	??_RADIO_DIO0& (0+255),b
  8102  006440  0E06               	movlw	6
  8103  006442  6FF0               	movwf	(??_RADIO_DIO0+1)& (0+255),b
  8104  006444                     u18115:
  8105  006444  90D8               	bcf	status,0,c
  8106  006446  33EF               	rrcf	??_RADIO_DIO0& (0+255),f,b
  8107  006448  2FF0               	decfsz	(??_RADIO_DIO0+1)& (0+255),f,b
  8108  00644A  D7FC               	goto	u18115
  8109  00644C  51EF               	movf	??_RADIO_DIO0& (0+255),w,b
  8110  00644E  0B03               	andlw	3
  8111  006450  6FF1               	movwf	RADIO_DIO0@dioMapping& (0+255),b
  8112                           
  8113                           ;radio_driver_SX1276.c: 1182: opMode = RADIO_RegisterRead(0x01);
  8114  006452  0E01               	movlw	1
  8115  006454  EC30  F039         	call	_RADIO_RegisterRead
  8116  006458  6FF2               	movwf	RADIO_DIO0@opMode& (0+255),b
  8117                           
  8118                           ; BSR set to: 0
  8119                           ;radio_driver_SX1276.c: 1184: if ((opMode & 0x80) != 0)
  8120  00645A  AFF2               	btfss	RADIO_DIO0@opMode& (0+255),7,b
  8121  00645C  D01C               	goto	l15158
  8122  00645E  D003               	goto	l15142
  8123  006460                     l15138:
  8124                           
  8125                           ; BSR set to: 0
  8126                           ;radio_driver_SX1276.c: 1196: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8127  006460  0E01               	movlw	1
  8128  006462  EF67  F039         	goto	_RADIO_UnhandledInterrupt
  8129  006466                     l15142:
  8130                           
  8131                           ; BSR set to: 0
  8132  006466  51F1               	movf	RADIO_DIO0@dioMapping& (0+255),w,b
  8133                           
  8134                           ; Switch size 1, requested type "speed"
  8135                           ; Number of cases is 2, Range of values is 0 to 1
  8136                           ; switch strategies available:
  8137                           ; Name         Instructions Cycles
  8138                           ; simple_byte            7     4 (average)
  8139                           ;	Chosen strategy is simple_byte
  8140  006468  E102 EFFB  F028    	bz	_RADIO_RxDone
  8141  00646E  0A01               	xorlw	1	; case 1
  8142  006470  E102 EFF0  F01D    	bz	_RADIO_TxDone
  8143  006476  D7F4               	goto	l15138
  8144  006478                     l15144:
  8145                           
  8146                           ; BSR set to: 0
  8147                           ;radio_driver_SX1276.c: 1207: opMode &= 0x07;
  8148  006478  0E07               	movlw	7
  8149  00647A  17F2               	andwf	RADIO_DIO0@opMode& (0+255),f,b
  8150                           
  8151                           ;radio_driver_SX1276.c: 1208: if (MODE_TX == opMode)
  8152  00647C  0E03               	movlw	3
  8153  00647E  19F2               	xorwf	RADIO_DIO0@opMode& (0+255),w,b
  8154  006480  E102               	bnz	l15148
  8155                           
  8156                           ; BSR set to: 0
  8157                           ;radio_driver_SX1276.c: 1209: {
  8158                           ;radio_driver_SX1276.c: 1211: RADIO_FSKPacketSent();
  8159  006482  EF27  F01D         	goto	_RADIO_FSKPacketSent	;wreg free
  8160  006486                     l15148:
  8161                           
  8162                           ; BSR set to: 0
  8163                           ;radio_driver_SX1276.c: 1213: else if (MODE_RXCONT == opMode)
  8164  006486  0E05               	movlw	5
  8165  006488  19F2               	xorwf	RADIO_DIO0@opMode& (0+255),w,b
  8166  00648A  E102               	bnz	l15154
  8167                           
  8168                           ; BSR set to: 0
  8169                           ;radio_driver_SX1276.c: 1214: {
  8170                           ;radio_driver_SX1276.c: 1216: RADIO_FSKPayloadReady();
  8171  00648C  EF53  F02D         	goto	_RADIO_FSKPayloadReady	;wreg free
  8172  006490                     l15154:
  8173                           
  8174                           ; BSR set to: 0
  8175                           ;radio_driver_SX1276.c: 1224: RADIO_UnhandledInterrupt(MODULATION_FSK);
  8176  006490  0E00               	movlw	0
  8177  006492  EF67  F039         	goto	_RADIO_UnhandledInterrupt
  8178  006496                     l15158:
  8179                           
  8180                           ; BSR set to: 0
  8181  006496  51F1               	movf	RADIO_DIO0@dioMapping& (0+255),w,b
  8182                           
  8183                           ; Switch size 1, requested type "speed"
  8184                           ; Number of cases is 1, Range of values is 0 to 0
  8185                           ; switch strategies available:
  8186                           ; Name         Instructions Cycles
  8187                           ; simple_byte            4     3 (average)
  8188                           ;	Chosen strategy is simple_byte
  8189  006498  E0EF               	bz	l15144
  8190  00649A  D7FA               	goto	l15154
  8191  00649C                     __end_of_RADIO_DIO0:
  8192                           	opt stack 0
  8193                           tosu	equ	0xFFF
  8194                           tosh	equ	0xFFE
  8195                           tosl	equ	0xFFD
  8196                           pclath	equ	0xFFA
  8197                           tblptru	equ	0xFF8
  8198                           tblptrh	equ	0xFF7
  8199                           tblptrl	equ	0xFF6
  8200                           tablat	equ	0xFF5
  8201                           prodh	equ	0xFF4
  8202                           prodl	equ	0xFF3
  8203                           intcon	equ	0xFF2
  8204                           intcon2	equ	0xFF1
  8205                           intcon3	equ	0xFF0
  8206                           postinc0	equ	0xFEE
  8207                           wreg	equ	0xFE8
  8208                           postinc1	equ	0xFE6
  8209                           postdec1	equ	0xFE5
  8210                           plusw1	equ	0xFE3
  8211                           fsr1h	equ	0xFE2
  8212                           fsr1l	equ	0xFE1
  8213                           indf2	equ	0xFDF
  8214                           postinc2	equ	0xFDE
  8215                           postdec2	equ	0xFDD
  8216                           fsr2h	equ	0xFDA
  8217                           fsr2l	equ	0xFD9
  8218                           status	equ	0xFD8
  8219                           
  8220 ;; *************** function _RADIO_UnhandledInterrupt *****************
  8221 ;; Defined at:
  8222 ;;		line 1139 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8223 ;; Parameters:    Size  Location     Type
  8224 ;;  modulation      1    wreg     enum E18698
  8225 ;; Auto vars:     Size  Location     Type
  8226 ;;  modulation      1    8[BANK0 ] enum E18698
  8227 ;; Return value:  Size  Location     Type
  8228 ;;                  1    wreg      void 
  8229 ;; Registers used:
  8230 ;;		wreg, status,2, status,0, cstack
  8231 ;; Tracked objects:
  8232 ;;		On entry : E/0
  8233 ;;		On exit  : 0/0
  8234 ;;		Unchanged: 0/0
  8235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8237 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8239 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8240 ;;Total ram usage:        1 bytes
  8241 ;; Hardware stack levels used:    1
  8242 ;; Hardware stack levels required when called:   10
  8243 ;; This function calls:
  8244 ;;		_RADIO_RegisterWrite
  8245 ;; This function is called by:
  8246 ;;		_RADIO_DIO0
  8247 ;;		_RADIO_DIO1
  8248 ;;		_RADIO_DIO2
  8249 ;;		_RADIO_DIO3
  8250 ;;		_RADIO_DIO4
  8251 ;;		_RADIO_DIO5
  8252 ;; This function uses a non-reentrant model
  8253 ;;
  8254                           
  8255                           	psect	text50
  8256  0072CE                     __ptext50:
  8257                           	opt stack 0
  8258  0072CE                     _RADIO_UnhandledInterrupt:
  8259                           	opt stack 18
  8260                           
  8261                           ;incstack = 0
  8262                           ;RADIO_UnhandledInterrupt@modulation stored from wreg
  8263  0072CE  0100               	movlb	0	; () banked
  8264  0072D0  6F68               	movwf	RADIO_UnhandledInterrupt@modulation& (0+255),b
  8265                           
  8266                           ;radio_driver_SX1276.c: 1144: if (MODULATION_LORA == modulation)
  8267  0072D2  0568               	decf	RADIO_UnhandledInterrupt@modulation& (0+255),w,b
  8268  0072D4  E104               	bnz	l14724
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;radio_driver_SX1276.c: 1145: {
  8272                           ;radio_driver_SX1276.c: 1146: RADIO_RegisterWrite(0x12, 0xFF);
  8273  0072D6  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
  8274  0072D8  0E12               	movlw	18
  8275  0072DA  EF17  F03A         	goto	_RADIO_RegisterWrite
  8276  0072DE                     l14724:
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;radio_driver_SX1276.c: 1148: else
  8280                           ;radio_driver_SX1276.c: 1149: {
  8281                           ;radio_driver_SX1276.c: 1152: RADIO_RegisterWrite(0x3E, 0xFF);
  8282  0072DE  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
  8283  0072E0  0E3E               	movlw	62
  8284  0072E2  EC17  F03A         	call	_RADIO_RegisterWrite
  8285                           
  8286                           ;radio_driver_SX1276.c: 1153: RADIO_RegisterWrite(0x3F, 0xFF);
  8287  0072E6  0100               	movlb	0	; () banked
  8288  0072E8  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
  8289  0072EA  0E3F               	movlw	63
  8290  0072EC  EF17  F03A         	goto	_RADIO_RegisterWrite
  8291  0072F0                     __end_of_RADIO_UnhandledInterrupt:
  8292                           	opt stack 0
  8293                           tosu	equ	0xFFF
  8294                           tosh	equ	0xFFE
  8295                           tosl	equ	0xFFD
  8296                           pclath	equ	0xFFA
  8297                           tblptru	equ	0xFF8
  8298                           tblptrh	equ	0xFF7
  8299                           tblptrl	equ	0xFF6
  8300                           tablat	equ	0xFF5
  8301                           prodh	equ	0xFF4
  8302                           prodl	equ	0xFF3
  8303                           intcon	equ	0xFF2
  8304                           intcon2	equ	0xFF1
  8305                           intcon3	equ	0xFF0
  8306                           postinc0	equ	0xFEE
  8307                           wreg	equ	0xFE8
  8308                           postinc1	equ	0xFE6
  8309                           postdec1	equ	0xFE5
  8310                           plusw1	equ	0xFE3
  8311                           fsr1h	equ	0xFE2
  8312                           fsr1l	equ	0xFE1
  8313                           indf2	equ	0xFDF
  8314                           postinc2	equ	0xFDE
  8315                           postdec2	equ	0xFDD
  8316                           fsr2h	equ	0xFDA
  8317                           fsr2l	equ	0xFD9
  8318                           status	equ	0xFD8
  8319                           
  8320 ;; *************** function _RADIO_TxDone *****************
  8321 ;; Defined at:
  8322 ;;		line 1078 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8323 ;; Parameters:    Size  Location     Type
  8324 ;;		None
  8325 ;; Auto vars:     Size  Location     Type
  8326 ;;  timeOnAir       4  116[BANK0 ] unsigned long 
  8327 ;; Return value:  Size  Location     Type
  8328 ;;                  1    wreg      void 
  8329 ;; Registers used:
  8330 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8331 ;; Tracked objects:
  8332 ;;		On entry : E/0
  8333 ;;		On exit  : C/0
  8334 ;;		Unchanged: 0/0
  8335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8337 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8338 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8339 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8340 ;;Total ram usage:       12 bytes
  8341 ;; Hardware stack levels used:    1
  8342 ;; Hardware stack levels required when called:   15
  8343 ;; This function calls:
  8344 ;;		_LORAWAN_TxDone
  8345 ;;		_RADIO_RegisterWrite
  8346 ;;		_RADIO_WriteMode
  8347 ;;		_SwTimerReadValue
  8348 ;;		_SwTimerStop
  8349 ;; This function is called by:
  8350 ;;		_RADIO_DIO0
  8351 ;; This function uses a non-reentrant model
  8352 ;;
  8353                           
  8354                           	psect	text51
  8355  003BE0                     __ptext51:
  8356                           	opt stack 0
  8357  003BE0                     _RADIO_TxDone:
  8358                           	opt stack 13
  8359                           
  8360                           ;radio_driver_SX1276.c: 1080: uint32_t timeOnAir;
  8361                           ;radio_driver_SX1276.c: 1082: SwTimerStop(RadioConfiguration.watchdogTimerId);
  8362                           
  8363                           ;incstack = 0
  8364  003BE0  0101               	movlb	1	; () banked
  8365  003BE2  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
  8366  003BE4  EC7F  F03A         	call	_SwTimerStop
  8367                           
  8368                           ; BSR set to: 0
  8369                           ;radio_driver_SX1276.c: 1083: RADIO_RegisterWrite(0x12, 1<<(3));
  8370  003BE8  0E08               	movlw	8
  8371  003BEA  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
  8372  003BEC  0E12               	movlw	18
  8373  003BEE  EC17  F03A         	call	_RADIO_RegisterWrite
  8374                           
  8375                           ;radio_driver_SX1276.c: 1084: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  8376  003BF2  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  8377  003BF6  0E00               	movlw	0
  8378  003BF8  0100               	movlb	0	; () banked
  8379  003BFA  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
  8380  003BFC  EC8F  F028         	call	_RADIO_WriteMode
  8381                           
  8382                           ;radio_driver_SX1276.c: 1085: RadioConfiguration.flags &= ~(1 << (0));
  8383  003C00  0101               	movlb	1	; () banked
  8384  003C02  9198               	bcf	(_RadioConfiguration+35)& (0+255),0,b
  8385                           
  8386                           ; BSR set to: 1
  8387                           ;radio_driver_SX1276.c: 1086: if ((RadioConfiguration.flags & (1 << (4))) == 0)
  8388  003C04  B998               	btfsc	(_RadioConfiguration+35)& (0+255),4,b
  8389  003C06  0012               	return	
  8390                           
  8391                           ; BSR set to: 1
  8392                           ;radio_driver_SX1276.c: 1087: {
  8393                           ;radio_driver_SX1276.c: 1088: timeOnAir = ((uint32_t)20000) - ((SwTimerReadValue(RadioCo
      +                          nfiguration.timeOnAirTimerId)) < 0x00DFAC1FUL ? ( (((uint32_t)(SwTimerReadValue(RadioCon
      +                          figuration.timeOnAirTimerId))) * 125UL) >> (12) ) : ( (((uint32_t)(SwTimerReadValue(Radi
      +                          oConfiguration.t
  8394  003C08  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
  8395  003C0A  EC85  F036         	call	_SwTimerReadValue
  8396  003C0E  518E               	movf	(?_SwTimerReadValue+3)& (0+255),w,b
  8397  003C10  E107               	bnz	u17310
  8398  003C12  0E1F               	movlw	31
  8399  003C14  5D8B               	subwf	?_SwTimerReadValue& (0+255),w,b
  8400  003C16  0EAC               	movlw	172
  8401  003C18  598C               	subwfb	(?_SwTimerReadValue+1)& (0+255),w,b
  8402  003C1A  0EDF               	movlw	223
  8403  003C1C  598D               	subwfb	(?_SwTimerReadValue+2)& (0+255),w,b
  8404  003C1E  E346               	bnc	l14690
  8405  003C20                     u17310:
  8406                           
  8407                           ; BSR set to: 0
  8408  003C20  0101               	movlb	1	; () banked
  8409  003C22  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
  8410  003C24  EC85  F036         	call	_SwTimerReadValue
  8411  003C28  0E0D               	movlw	13
  8412  003C2A  D005               	goto	u17320
  8413  003C2C                     u17325:
  8414  003C2C  90D8               	bcf	status,0,c
  8415  003C2E  338E               	rrcf	(?_SwTimerReadValue+3)& (0+255),f,b
  8416  003C30  338D               	rrcf	(?_SwTimerReadValue+2)& (0+255),f,b
  8417  003C32  338C               	rrcf	(?_SwTimerReadValue+1)& (0+255),f,b
  8418  003C34  338B               	rrcf	?_SwTimerReadValue& (0+255),f,b
  8419  003C36                     u17320:
  8420  003C36  2EE8               	decfsz	wreg,f,c
  8421  003C38  D7F9               	goto	u17325
  8422  003C3A  0E7D               	movlw	125
  8423  003C3C  038B               	mulwf	?_SwTimerReadValue& (0+255),b
  8424  003C3E  CFF3 F0D0          	movff	prodl,??_RADIO_TxDone
  8425  003C42  CFF4 F0D1          	movff	prodh,??_RADIO_TxDone+1
  8426  003C46  6BD2               	clrf	(??_RADIO_TxDone+2)& (0+255),b
  8427  003C48  6BD3               	clrf	(??_RADIO_TxDone+3)& (0+255),b
  8428  003C4A  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
  8429  003C4C  50F3               	movf	prodl,w,c
  8430  003C4E  27D1               	addwf	(??_RADIO_TxDone+1)& (0+255),f,b
  8431  003C50  50F4               	movf	prodh,w,c
  8432  003C52  23D2               	addwfc	(??_RADIO_TxDone+2)& (0+255),f,b
  8433  003C54  0E00               	movlw	0
  8434  003C56  23D3               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
  8435  003C58  038B               	mulwf	?_SwTimerReadValue& (0+255),b
  8436  003C5A  50F3               	movf	prodl,w,c
  8437  003C5C  27D1               	addwf	(??_RADIO_TxDone+1)& (0+255),f,b
  8438  003C5E  50F4               	movf	prodh,w,c
  8439  003C60  23D2               	addwfc	(??_RADIO_TxDone+2)& (0+255),f,b
  8440  003C62  0E00               	movlw	0
  8441  003C64  23D3               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
  8442  003C66  0E7D               	movlw	125
  8443  003C68  038D               	mulwf	(?_SwTimerReadValue+2)& (0+255),b
  8444  003C6A  50F3               	movf	prodl,w,c
  8445  003C6C  27D2               	addwf	(??_RADIO_TxDone+2)& (0+255),f,b
  8446  003C6E  50F4               	movf	prodh,w,c
  8447  003C70  23D3               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
  8448  003C72  0E00               	movlw	0
  8449  003C74  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
  8450  003C76  50F3               	movf	prodl,w,c
  8451  003C78  27D2               	addwf	(??_RADIO_TxDone+2)& (0+255),f,b
  8452  003C7A  50F4               	movf	prodh,w,c
  8453  003C7C  23D3               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
  8454  003C7E  0E00               	movlw	0
  8455  003C80  038B               	mulwf	?_SwTimerReadValue& (0+255),b
  8456  003C82  50F3               	movf	prodl,w,c
  8457  003C84  27D2               	addwf	(??_RADIO_TxDone+2)& (0+255),f,b
  8458  003C86  50F4               	movf	prodh,w,c
  8459  003C88  23D3               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
  8460  003C8A  0E7D               	movlw	125
  8461  003C8C  038E               	mulwf	(?_SwTimerReadValue+3)& (0+255),b
  8462  003C8E  50F3               	movf	prodl,w,c
  8463  003C90  27D3               	addwf	(??_RADIO_TxDone+3)& (0+255),f,b
  8464  003C92  0E00               	movlw	0
  8465  003C94  038D               	mulwf	(?_SwTimerReadValue+2)& (0+255),b
  8466  003C96  50F3               	movf	prodl,w,c
  8467  003C98  27D3               	addwf	(??_RADIO_TxDone+3)& (0+255),f,b
  8468  003C9A  0E00               	movlw	0
  8469  003C9C  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
  8470  003C9E  50F3               	movf	prodl,w,c
  8471  003CA0  27D3               	addwf	(??_RADIO_TxDone+3)& (0+255),f,b
  8472  003CA2  0E00               	movlw	0
  8473  003CA4  038B               	mulwf	?_SwTimerReadValue& (0+255),b
  8474  003CA6  50F3               	movf	prodl,w,c
  8475  003CA8  27D3               	addwf	(??_RADIO_TxDone+3)& (0+255),f,b
  8476  003CAA  D045               	goto	L4
  8477  003CAC                     l14690:
  8478                           
  8479                           ; BSR set to: 0
  8480  003CAC  0101               	movlb	1	; () banked
  8481  003CAE  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
  8482  003CB0  EC85  F036         	call	_SwTimerReadValue
  8483  003CB4  0E7D               	movlw	125
  8484  003CB6  038B               	mulwf	?_SwTimerReadValue& (0+255),b
  8485  003CB8  CFF3 F0D0          	movff	prodl,??_RADIO_TxDone
  8486  003CBC  CFF4 F0D1          	movff	prodh,??_RADIO_TxDone+1
  8487  003CC0  6BD2               	clrf	(??_RADIO_TxDone+2)& (0+255),b
  8488  003CC2  6BD3               	clrf	(??_RADIO_TxDone+3)& (0+255),b
  8489  003CC4  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
  8490  003CC6  50F3               	movf	prodl,w,c
  8491  003CC8  27D1               	addwf	(??_RADIO_TxDone+1)& (0+255),f,b
  8492  003CCA  50F4               	movf	prodh,w,c
  8493  003CCC  23D2               	addwfc	(??_RADIO_TxDone+2)& (0+255),f,b
  8494  003CCE  0E00               	movlw	0
  8495  003CD0  23D3               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
  8496  003CD2  038B               	mulwf	?_SwTimerReadValue& (0+255),b
  8497  003CD4  50F3               	movf	prodl,w,c
  8498  003CD6  27D1               	addwf	(??_RADIO_TxDone+1)& (0+255),f,b
  8499  003CD8  50F4               	movf	prodh,w,c
  8500  003CDA  23D2               	addwfc	(??_RADIO_TxDone+2)& (0+255),f,b
  8501  003CDC  0E00               	movlw	0
  8502  003CDE  23D3               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
  8503  003CE0  0E7D               	movlw	125
  8504  003CE2  038D               	mulwf	(?_SwTimerReadValue+2)& (0+255),b
  8505  003CE4  50F3               	movf	prodl,w,c
  8506  003CE6  27D2               	addwf	(??_RADIO_TxDone+2)& (0+255),f,b
  8507  003CE8  50F4               	movf	prodh,w,c
  8508  003CEA  23D3               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
  8509  003CEC  0E00               	movlw	0
  8510  003CEE  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
  8511  003CF0  50F3               	movf	prodl,w,c
  8512  003CF2  27D2               	addwf	(??_RADIO_TxDone+2)& (0+255),f,b
  8513  003CF4  50F4               	movf	prodh,w,c
  8514  003CF6  23D3               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
  8515  003CF8  0E00               	movlw	0
  8516  003CFA  038B               	mulwf	?_SwTimerReadValue& (0+255),b
  8517  003CFC  50F3               	movf	prodl,w,c
  8518  003CFE  27D2               	addwf	(??_RADIO_TxDone+2)& (0+255),f,b
  8519  003D00  50F4               	movf	prodh,w,c
  8520  003D02  23D3               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
  8521  003D04  0E7D               	movlw	125
  8522  003D06  038E               	mulwf	(?_SwTimerReadValue+3)& (0+255),b
  8523  003D08  50F3               	movf	prodl,w,c
  8524  003D0A  27D3               	addwf	(??_RADIO_TxDone+3)& (0+255),f,b
  8525  003D0C  0E00               	movlw	0
  8526  003D0E  038D               	mulwf	(?_SwTimerReadValue+2)& (0+255),b
  8527  003D10  50F3               	movf	prodl,w,c
  8528  003D12  27D3               	addwf	(??_RADIO_TxDone+3)& (0+255),f,b
  8529  003D14  0E00               	movlw	0
  8530  003D16  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
  8531  003D18  50F3               	movf	prodl,w,c
  8532  003D1A  27D3               	addwf	(??_RADIO_TxDone+3)& (0+255),f,b
  8533  003D1C  0E00               	movlw	0
  8534  003D1E  038B               	mulwf	?_SwTimerReadValue& (0+255),b
  8535  003D20  50F3               	movf	prodl,w,c
  8536  003D22  27D3               	addwf	(??_RADIO_TxDone+3)& (0+255),f,b
  8537  003D24  0E0D               	movlw	13
  8538  003D26  D005               	goto	u17330
  8539  003D28                     u17335:
  8540  003D28  90D8               	bcf	status,0,c
  8541  003D2A  33D3               	rrcf	(??_RADIO_TxDone+3)& (0+255),f,b
  8542  003D2C  33D2               	rrcf	(??_RADIO_TxDone+2)& (0+255),f,b
  8543  003D2E  33D1               	rrcf	(??_RADIO_TxDone+1)& (0+255),f,b
  8544  003D30  33D0               	rrcf	??_RADIO_TxDone& (0+255),f,b
  8545  003D32                     u17330:
  8546  003D32  2EE8               	decfsz	wreg,f,c
  8547  003D34  D7F9               	goto	u17335
  8548  003D36                     L4:
  8549  003D36  C0D0  F0D8         	movff	??_RADIO_TxDone,_RADIO_TxDone$761
  8550  003D3A  C0D1  F0D9         	movff	??_RADIO_TxDone+1,_RADIO_TxDone$761+1
  8551  003D3E  C0D2  F0DA         	movff	??_RADIO_TxDone+2,_RADIO_TxDone$761+2
  8552  003D42  C0D3  F0DB         	movff	??_RADIO_TxDone+3,_RADIO_TxDone$761+3
  8553                           
  8554                           ; BSR set to: 0
  8555  003D46  51D8               	movf	_RADIO_TxDone$761& (0+255),w,b
  8556  003D48  0820               	sublw	32
  8557  003D4A  6FD4               	movwf	RADIO_TxDone@timeOnAir& (0+255),b
  8558  003D4C  0E4E               	movlw	78
  8559  003D4E  55D9               	subfwb	(_RADIO_TxDone$761+1)& (0+255),w,b
  8560  003D50  6FD5               	movwf	(RADIO_TxDone@timeOnAir+1)& (0+255),b
  8561  003D52  0E00               	movlw	0
  8562  003D54  55DA               	subfwb	(_RADIO_TxDone$761+2)& (0+255),w,b
  8563  003D56  6FD6               	movwf	(RADIO_TxDone@timeOnAir+2)& (0+255),b
  8564  003D58  0E00               	movlw	0
  8565  003D5A  55DB               	subfwb	(_RADIO_TxDone$761+3)& (0+255),w,b
  8566  003D5C  6FD7               	movwf	(RADIO_TxDone@timeOnAir+3)& (0+255),b
  8567                           
  8568                           ; BSR set to: 0
  8569                           ;radio_driver_SX1276.c: 1089: LORAWAN_TxDone((uint16_t)timeOnAir);
  8570  003D5E  C0D4  F09E         	movff	RADIO_TxDone@timeOnAir,LORAWAN_TxDone@timeOnAir
  8571  003D62  C0D5  F09F         	movff	RADIO_TxDone@timeOnAir+1,LORAWAN_TxDone@timeOnAir+1
  8572  003D66  EF99  F005         	goto	_LORAWAN_TxDone	;wreg free
  8573  003D6A                     __end_of_RADIO_TxDone:
  8574                           	opt stack 0
  8575                           tosu	equ	0xFFF
  8576                           tosh	equ	0xFFE
  8577                           tosl	equ	0xFFD
  8578                           pclath	equ	0xFFA
  8579                           tblptru	equ	0xFF8
  8580                           tblptrh	equ	0xFF7
  8581                           tblptrl	equ	0xFF6
  8582                           tablat	equ	0xFF5
  8583                           prodh	equ	0xFF4
  8584                           prodl	equ	0xFF3
  8585                           intcon	equ	0xFF2
  8586                           intcon2	equ	0xFF1
  8587                           intcon3	equ	0xFF0
  8588                           postinc0	equ	0xFEE
  8589                           wreg	equ	0xFE8
  8590                           postinc1	equ	0xFE6
  8591                           postdec1	equ	0xFE5
  8592                           plusw1	equ	0xFE3
  8593                           fsr1h	equ	0xFE2
  8594                           fsr1l	equ	0xFE1
  8595                           indf2	equ	0xFDF
  8596                           postinc2	equ	0xFDE
  8597                           postdec2	equ	0xFDD
  8598                           fsr2h	equ	0xFDA
  8599                           fsr2l	equ	0xFD9
  8600                           status	equ	0xFD8
  8601                           
  8602 ;; *************** function _RADIO_RxDone *****************
  8603 ;; Defined at:
  8604 ;;		line 961 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8605 ;; Parameters:    Size  Location     Type
  8606 ;;		None
  8607 ;; Auto vars:     Size  Location     Type
  8608 ;;  i               1  142[BANK0 ] unsigned char 
  8609 ;;  irqFlags        1  141[BANK0 ] unsigned char 
  8610 ;; Return value:  Size  Location     Type
  8611 ;;                  1    wreg      void 
  8612 ;; Registers used:
  8613 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+8, btemp+9, btemp+10, btemp+11, tos
      +l, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8614 ;; Tracked objects:
  8615 ;;		On entry : E/0
  8616 ;;		On exit  : C/0
  8617 ;;		Unchanged: 0/0
  8618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8620 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8622 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8623 ;;Total ram usage:        2 bytes
  8624 ;; Hardware stack levels used:    1
  8625 ;; Hardware stack levels required when called:   16
  8626 ;; This function calls:
  8627 ;;		_HALSPICSAssert
  8628 ;;		_HALSPICSDeassert
  8629 ;;		_HALSPISend
  8630 ;;		_LORAWAN_RxDone
  8631 ;;		_RADIO_RegisterRead
  8632 ;;		_RADIO_RegisterWrite
  8633 ;;		_RADIO_WriteMode
  8634 ;;		_SwTimerStop
  8635 ;;		___abdiv
  8636 ;; This function is called by:
  8637 ;;		_RADIO_DIO0
  8638 ;; This function uses a non-reentrant model
  8639 ;;
  8640                           
  8641                           	psect	text52
  8642  0051F6                     __ptext52:
  8643                           	opt stack 0
  8644  0051F6                     _RADIO_RxDone:
  8645                           	opt stack 12
  8646                           
  8647                           ;radio_driver_SX1276.c: 963: uint8_t i, irqFlags;
  8648                           ;radio_driver_SX1276.c: 964: irqFlags = RADIO_RegisterRead(0x12);
  8649                           
  8650                           ;incstack = 0
  8651  0051F6  0E12               	movlw	18
  8652  0051F8  EC30  F039         	call	_RADIO_RegisterRead
  8653  0051FC  6FED               	movwf	RADIO_RxDone@irqFlags& (0+255),b
  8654                           
  8655                           ;radio_driver_SX1276.c: 967: RADIO_RegisterWrite(0x12, (1<<(6)) | (1<<(5)) | (1<<(4)));
  8656  0051FE  0E70               	movlw	112
  8657  005200  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
  8658  005202  0E12               	movlw	18
  8659  005204  EC17  F03A         	call	_RADIO_RegisterWrite
  8660                           
  8661                           ;radio_driver_SX1276.c: 968: if (((1<<(6)) | (1<<(4))) == (irqFlags & ((1<<(6)) | (1<<(4
      +                          )))))
  8662  005208  0100               	movlb	0	; () banked
  8663  00520A  51ED               	movf	RADIO_RxDone@irqFlags& (0+255),w,b
  8664  00520C  0B50               	andlw	80
  8665  00520E  0A50               	xorlw	80
  8666  005210  A4D8               	btfss	status,2,c
  8667  005212  0012               	return	
  8668                           
  8669                           ; BSR set to: 0
  8670                           ;radio_driver_SX1276.c: 969: {
  8671                           ;radio_driver_SX1276.c: 971: SwTimerStop(RadioConfiguration.watchdogTimerId);
  8672  005214  0101               	movlb	1	; () banked
  8673  005216  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
  8674  005218  EC7F  F03A         	call	_SwTimerStop
  8675                           
  8676                           ; BSR set to: 0
  8677                           ;radio_driver_SX1276.c: 974: i = RADIO_RegisterRead(0x1C);
  8678  00521C  0E1C               	movlw	28
  8679  00521E  EC30  F039         	call	_RADIO_RegisterRead
  8680  005222  6FEE               	movwf	RADIO_RxDone@i& (0+255),b
  8681                           
  8682                           ; BSR set to: 0
  8683                           ;radio_driver_SX1276.c: 975: if ((0 == RadioConfiguration.crcOn) || ((0 == (irqFlags & (
      +                          1<<(5)))) && (0 != (i & (1<<(6))))))
  8684  005224  0101               	movlb	1	; () banked
  8685  005226  5191               	movf	(_RadioConfiguration+28)& (0+255),w,b
  8686  005228  E004               	bz	l14592
  8687                           
  8688                           ; BSR set to: 1
  8689  00522A  0100               	movlb	0	; () banked
  8690  00522C  ABED               	btfss	RADIO_RxDone@irqFlags& (0+255),5,b
  8691                           
  8692                           ; BSR set to: 0
  8693  00522E  ADEE               	btfss	RADIO_RxDone@i& (0+255),6,b
  8694  005230  D037               	goto	l14614
  8695  005232                     l14592:
  8696                           
  8697                           ;radio_driver_SX1276.c: 976: {
  8698                           ;radio_driver_SX1276.c: 984: RadioConfiguration.dataBufferLen = RADIO_RegisterRead(0x13)
      +                          ;
  8699  005232  0E13               	movlw	19
  8700  005234  EC30  F039         	call	_RADIO_RegisterRead
  8701  005238  0101               	movlb	1	; () banked
  8702  00523A  6F99               	movwf	(_RadioConfiguration+36)& (0+255),b
  8703                           
  8704                           ;radio_driver_SX1276.c: 985: RADIO_RegisterWrite(0x0D, 0x00);
  8705  00523C  0100               	movlb	0	; () banked
  8706  00523E  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
  8707  005240  0E0D               	movlw	13
  8708  005242  EC17  F03A         	call	_RADIO_RegisterWrite
  8709                           
  8710                           ;radio_driver_SX1276.c: 987: HALSPICSAssert();
  8711  005246  EC01  F03C         	call	_HALSPICSAssert	;wreg free
  8712                           
  8713                           ;radio_driver_SX1276.c: 988: HALSPISend(0x00);
  8714  00524A  0E00               	movlw	0
  8715  00524C  ECBC  F03B         	call	_HALSPISend
  8716                           
  8717                           ;radio_driver_SX1276.c: 989: for (i = 0; i < RadioConfiguration.dataBufferLen; i++)
  8718  005250  0100               	movlb	0	; () banked
  8719  005252  6BEE               	clrf	RADIO_RxDone@i& (0+255),b
  8720  005254  D00D               	goto	l14604
  8721  005256                     l14600:
  8722                           
  8723                           ; BSR set to: 0
  8724                           ;radio_driver_SX1276.c: 990: {
  8725                           ;radio_driver_SX1276.c: 991: RadioConfiguration.dataBuffer[i] = HALSPISend(0xFF);
  8726  005256  51EE               	movf	RADIO_RxDone@i& (0+255),w,b
  8727  005258  0101               	movlb	1	; () banked
  8728  00525A  259A               	addwf	(_RadioConfiguration+37)& (0+255),w,b
  8729  00525C  6ED9               	movwf	fsr2l,c
  8730  00525E  0E00               	movlw	0
  8731  005260  219B               	addwfc	(_RadioConfiguration+38)& (0+255),w,b
  8732  005262  6EDA               	movwf	fsr2h,c
  8733  005264  0EFF               	movlw	255
  8734  005266  ECBC  F03B         	call	_HALSPISend
  8735  00526A  6EDF               	movwf	indf2,c
  8736  00526C  0100               	movlb	0	; () banked
  8737  00526E  2BEE               	incf	RADIO_RxDone@i& (0+255),f,b
  8738  005270                     l14604:
  8739                           
  8740                           ; BSR set to: 0
  8741  005270  0101               	movlb	1	; () banked
  8742  005272  5199               	movf	(_RadioConfiguration+36)& (0+255),w,b
  8743  005274  0100               	movlb	0	; () banked
  8744  005276  5DEE               	subwf	RADIO_RxDone@i& (0+255),w,b
  8745  005278  E3EE               	bnc	l14600
  8746                           
  8747                           ; BSR set to: 0
  8748                           ;radio_driver_SX1276.c: 992: }
  8749                           ;radio_driver_SX1276.c: 993: HALSPICSDeassert();
  8750  00527A  ECFF  F03B         	call	_HALSPICSDeassert	;wreg free
  8751                           
  8752                           ;radio_driver_SX1276.c: 994: RadioConfiguration.flags |= (1 << (2));
  8753  00527E  0101               	movlb	1	; () banked
  8754  005280  8598               	bsf	(_RadioConfiguration+35)& (0+255),2,b
  8755                           
  8756                           ; BSR set to: 1
  8757                           ;radio_driver_SX1276.c: 996: RadioConfiguration.packetSNR = RADIO_RegisterRead(0x19);
  8758  005282  0E19               	movlw	25
  8759  005284  EC30  F039         	call	_RADIO_RegisterRead
  8760  005288  0101               	movlb	1	; () banked
  8761  00528A  6FA7               	movwf	(_RadioConfiguration+50)& (0+255),b
  8762                           
  8763                           ; BSR set to: 1
  8764                           ;radio_driver_SX1276.c: 997: RadioConfiguration.packetSNR /= (int8_t)4;
  8765  00528C  0E04               	movlw	4
  8766  00528E  0100               	movlb	0	; () banked
  8767  005290  6F64               	movwf	___abdiv@divisor& (0+255),b
  8768  005292  0101               	movlb	1	; () banked
  8769  005294  51A7               	movf	(_RadioConfiguration+50)& (0+255),w,b
  8770  005296  ECF5  F033         	call	___abdiv
  8771  00529A  0101               	movlb	1	; () banked
  8772  00529C  6FA7               	movwf	(_RadioConfiguration+50)& (0+255),b
  8773                           
  8774                           ;radio_driver_SX1276.c: 998: }
  8775  00529E  D002               	goto	l14616
  8776  0052A0                     l14614:
  8777                           
  8778                           ; BSR set to: 0
  8779                           ;radio_driver_SX1276.c: 999: else
  8780                           ;radio_driver_SX1276.c: 1000: {
  8781                           ;radio_driver_SX1276.c: 1002: RadioConfiguration.flags |= (1 << (3));
  8782  0052A0  0101               	movlb	1	; () banked
  8783  0052A2  8798               	bsf	(_RadioConfiguration+35)& (0+255),3,b
  8784  0052A4                     l14616:
  8785                           
  8786                           ; BSR set to: 1
  8787                           ;radio_driver_SX1276.c: 1003: }
  8788                           ;radio_driver_SX1276.c: 1004: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  8789  0052A4  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  8790  0052A8  0E00               	movlw	0
  8791  0052AA  0100               	movlb	0	; () banked
  8792  0052AC  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
  8793  0052AE  EC8F  F028         	call	_RADIO_WriteMode
  8794                           
  8795                           ;radio_driver_SX1276.c: 1005: RadioConfiguration.flags &= ~(1 << (1));
  8796  0052B2  0101               	movlb	1	; () banked
  8797  0052B4  9398               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  8798                           
  8799                           ; BSR set to: 1
  8800                           ;radio_driver_SX1276.c: 1006: LORAWAN_RxDone(RadioConfiguration.dataBuffer, RadioConfigu
      +                          ration.dataBufferLen);
  8801  0052B6  C19A  F16B         	movff	_RadioConfiguration+37,LORAWAN_RxDone@buffer
  8802  0052BA  C19B  F16C         	movff	_RadioConfiguration+38,LORAWAN_RxDone@buffer+1
  8803  0052BE  C199  F16D         	movff	_RadioConfiguration+36,LORAWAN_RxDone@bufferLength
  8804  0052C2  EF4A  F000         	goto	_LORAWAN_RxDone	;wreg free
  8805  0052C6                     __end_of_RADIO_RxDone:
  8806                           	opt stack 0
  8807                           tosu	equ	0xFFF
  8808                           tosh	equ	0xFFE
  8809                           tosl	equ	0xFFD
  8810                           pclath	equ	0xFFA
  8811                           tblptru	equ	0xFF8
  8812                           tblptrh	equ	0xFF7
  8813                           tblptrl	equ	0xFF6
  8814                           tablat	equ	0xFF5
  8815                           prodh	equ	0xFF4
  8816                           prodl	equ	0xFF3
  8817                           intcon	equ	0xFF2
  8818                           intcon2	equ	0xFF1
  8819                           intcon3	equ	0xFF0
  8820                           postinc0	equ	0xFEE
  8821                           wreg	equ	0xFE8
  8822                           postinc1	equ	0xFE6
  8823                           postdec1	equ	0xFE5
  8824                           plusw1	equ	0xFE3
  8825                           fsr1h	equ	0xFE2
  8826                           fsr1l	equ	0xFE1
  8827                           indf2	equ	0xFDF
  8828                           postinc2	equ	0xFDE
  8829                           postdec2	equ	0xFDD
  8830                           fsr2h	equ	0xFDA
  8831                           fsr2l	equ	0xFD9
  8832                           status	equ	0xFD8
  8833                           
  8834 ;; *************** function ___abdiv *****************
  8835 ;; Defined at:
  8836 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\abdiv.c"
  8837 ;; Parameters:    Size  Location     Type
  8838 ;;  dividend        1    wreg     char 
  8839 ;;  divisor         1    4[BANK0 ] char 
  8840 ;; Auto vars:     Size  Location     Type
  8841 ;;  dividend        1    8[BANK0 ] char 
  8842 ;;  quotient        1    7[BANK0 ] char 
  8843 ;;  sign            1    6[BANK0 ] unsigned char 
  8844 ;;  counter         1    5[BANK0 ] unsigned char 
  8845 ;; Return value:  Size  Location     Type
  8846 ;;                  1    wreg      char 
  8847 ;; Registers used:
  8848 ;;		wreg, status,2, status,0
  8849 ;; Tracked objects:
  8850 ;;		On entry : F/1
  8851 ;;		On exit  : F/0
  8852 ;;		Unchanged: 0/0
  8853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8854 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8855 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8857 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8858 ;;Total ram usage:        5 bytes
  8859 ;; Hardware stack levels used:    1
  8860 ;; Hardware stack levels required when called:    7
  8861 ;; This function calls:
  8862 ;;		Nothing
  8863 ;; This function is called by:
  8864 ;;		_RADIO_RxDone
  8865 ;; This function uses a non-reentrant model
  8866 ;;
  8867                           
  8868                           	psect	text53
  8869  0067EA                     __ptext53:
  8870                           	opt stack 0
  8871  0067EA                     ___abdiv:
  8872                           	opt stack 20
  8873                           
  8874                           ;incstack = 0
  8875                           ;___abdiv@dividend stored from wreg
  8876  0067EA  0100               	movlb	0	; () banked
  8877  0067EC  6F68               	movwf	___abdiv@dividend& (0+255),b
  8878  0067EE  6B66               	clrf	___abdiv@sign& (0+255),b
  8879                           
  8880                           ; BSR set to: 0
  8881  0067F0  AF64               	btfss	___abdiv@divisor& (0+255),7,b
  8882  0067F2  D003               	goto	l14486
  8883                           
  8884                           ; BSR set to: 0
  8885  0067F4  6D64               	negf	___abdiv@divisor& (0+255),b
  8886                           
  8887                           ; BSR set to: 0
  8888  0067F6  0E01               	movlw	1
  8889  0067F8  6F66               	movwf	___abdiv@sign& (0+255),b
  8890  0067FA                     l14486:
  8891                           
  8892                           ; BSR set to: 0
  8893  0067FA  AF68               	btfss	___abdiv@dividend& (0+255),7,b
  8894  0067FC  D003               	goto	l14492
  8895                           
  8896                           ; BSR set to: 0
  8897  0067FE  6D68               	negf	___abdiv@dividend& (0+255),b
  8898                           
  8899                           ; BSR set to: 0
  8900  006800  0E01               	movlw	1
  8901  006802  1B66               	xorwf	___abdiv@sign& (0+255),f,b
  8902  006804                     l14492:
  8903                           
  8904                           ; BSR set to: 0
  8905  006804  6B67               	clrf	___abdiv@quotient& (0+255),b
  8906                           
  8907                           ; BSR set to: 0
  8908  006806  5164               	movf	___abdiv@divisor& (0+255),w,b
  8909  006808  E014               	bz	l14514
  8910                           
  8911                           ; BSR set to: 0
  8912  00680A  0E01               	movlw	1
  8913  00680C  6F65               	movwf	___abdiv@counter& (0+255),b
  8914  00680E  D003               	goto	l14502
  8915  006810                     l14498:
  8916                           
  8917                           ; BSR set to: 0
  8918  006810  90D8               	bcf	status,0,c
  8919  006812  3764               	rlcf	___abdiv@divisor& (0+255),f,b
  8920                           
  8921                           ; BSR set to: 0
  8922  006814  2B65               	incf	___abdiv@counter& (0+255),f,b
  8923  006816                     l14502:
  8924                           
  8925                           ; BSR set to: 0
  8926  006816  AF64               	btfss	___abdiv@divisor& (0+255),7,b
  8927  006818  D7FB               	goto	l14498
  8928  00681A                     l14504:
  8929                           
  8930                           ; BSR set to: 0
  8931  00681A  90D8               	bcf	status,0,c
  8932  00681C  3767               	rlcf	___abdiv@quotient& (0+255),f,b
  8933  00681E  5164               	movf	___abdiv@divisor& (0+255),w,b
  8934  006820  5D68               	subwf	___abdiv@dividend& (0+255),w,b
  8935  006822  E303               	bnc	l14510
  8936                           
  8937                           ; BSR set to: 0
  8938  006824  5164               	movf	___abdiv@divisor& (0+255),w,b
  8939  006826  5F68               	subwf	___abdiv@dividend& (0+255),f,b
  8940                           
  8941                           ; BSR set to: 0
  8942  006828  8167               	bsf	___abdiv@quotient& (0+255),0,b
  8943  00682A                     l14510:
  8944                           
  8945                           ; BSR set to: 0
  8946  00682A  90D8               	bcf	status,0,c
  8947  00682C  3364               	rrcf	___abdiv@divisor& (0+255),f,b
  8948                           
  8949                           ; BSR set to: 0
  8950  00682E  2F65               	decfsz	___abdiv@counter& (0+255),f,b
  8951  006830  D7F4               	goto	l14504
  8952  006832                     l14514:
  8953                           
  8954                           ; BSR set to: 0
  8955  006832  5166               	movf	___abdiv@sign& (0+255),w,b
  8956  006834  E001               	bz	l14518
  8957                           
  8958                           ; BSR set to: 0
  8959  006836  6D67               	negf	___abdiv@quotient& (0+255),b
  8960  006838                     l14518:
  8961                           
  8962                           ; BSR set to: 0
  8963  006838  5167               	movf	___abdiv@quotient& (0+255),w,b
  8964                           
  8965                           ; BSR set to: 0
  8966  00683A  0012               	return		;funcret
  8967  00683C                     __end_of___abdiv:
  8968                           	opt stack 0
  8969                           tosu	equ	0xFFF
  8970                           tosh	equ	0xFFE
  8971                           tosl	equ	0xFFD
  8972                           pclath	equ	0xFFA
  8973                           tblptru	equ	0xFF8
  8974                           tblptrh	equ	0xFF7
  8975                           tblptrl	equ	0xFF6
  8976                           tablat	equ	0xFF5
  8977                           prodh	equ	0xFF4
  8978                           prodl	equ	0xFF3
  8979                           intcon	equ	0xFF2
  8980                           intcon2	equ	0xFF1
  8981                           intcon3	equ	0xFF0
  8982                           postinc0	equ	0xFEE
  8983                           wreg	equ	0xFE8
  8984                           postinc1	equ	0xFE6
  8985                           postdec1	equ	0xFE5
  8986                           plusw1	equ	0xFE3
  8987                           fsr1h	equ	0xFE2
  8988                           fsr1l	equ	0xFE1
  8989                           indf2	equ	0xFDF
  8990                           postinc2	equ	0xFDE
  8991                           postdec2	equ	0xFDD
  8992                           fsr2h	equ	0xFDA
  8993                           fsr2l	equ	0xFD9
  8994                           status	equ	0xFD8
  8995                           
  8996 ;; *************** function _RADIO_FSKPayloadReady *****************
  8997 ;; Defined at:
  8998 ;;		line 1010 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8999 ;; Parameters:    Size  Location     Type
  9000 ;;		None
  9001 ;; Auto vars:     Size  Location     Type
  9002 ;;  i               1  142[BANK0 ] unsigned char 
  9003 ;;  irqFlags        1  141[BANK0 ] unsigned char 
  9004 ;; Return value:  Size  Location     Type
  9005 ;;                  1    wreg      void 
  9006 ;; Registers used:
  9007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9008 ;; Tracked objects:
  9009 ;;		On entry : F/0
  9010 ;;		On exit  : C/0
  9011 ;;		Unchanged: 0/0
  9012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9014 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9016 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9017 ;;Total ram usage:        2 bytes
  9018 ;; Hardware stack levels used:    1
  9019 ;; Hardware stack levels required when called:   16
  9020 ;; This function calls:
  9021 ;;		_HALSPICSAssert
  9022 ;;		_HALSPICSDeassert
  9023 ;;		_HALSPISend
  9024 ;;		_LORAWAN_RxDone
  9025 ;;		_LORAWAN_RxTimeout
  9026 ;;		_RADIO_RegisterRead
  9027 ;;		_RADIO_WriteMode
  9028 ;;		_SwTimerStop
  9029 ;; This function is called by:
  9030 ;;		_RADIO_DIO0
  9031 ;; This function uses a non-reentrant model
  9032 ;;
  9033                           
  9034                           	psect	text54
  9035  005AA6                     __ptext54:
  9036                           	opt stack 0
  9037  005AA6                     _RADIO_FSKPayloadReady:
  9038                           	opt stack 12
  9039                           
  9040                           ; BSR set to: 0
  9041                           ;radio_driver_SX1276.c: 1012: uint8_t irqFlags;
  9042                           ;radio_driver_SX1276.c: 1013: uint8_t i;
  9043                           ;radio_driver_SX1276.c: 1015: irqFlags = RADIO_RegisterRead(0x3F);
  9044                           
  9045                           ; BSR set to: 0
  9046                           ;incstack = 0
  9047  005AA6  0E3F               	movlw	63
  9048  005AA8  EC30  F039         	call	_RADIO_RegisterRead
  9049  005AAC  6FED               	movwf	RADIO_FSKPayloadReady@irqFlags& (0+255),b
  9050                           
  9051                           ; BSR set to: 0
  9052                           ;radio_driver_SX1276.c: 1016: if ((1<<(2)) == (irqFlags & (1<<(2))))
  9053  005AAE  A5ED               	btfss	RADIO_FSKPayloadReady@irqFlags& (0+255),2,b
  9054  005AB0  0012               	return	
  9055                           
  9056                           ; BSR set to: 0
  9057                           ;radio_driver_SX1276.c: 1017: {
  9058                           ;radio_driver_SX1276.c: 1022: SwTimerStop(RadioConfiguration.watchdogTimerId);
  9059  005AB2  0101               	movlb	1	; () banked
  9060  005AB4  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
  9061  005AB6  EC7F  F03A         	call	_SwTimerStop
  9062                           
  9063                           ;radio_driver_SX1276.c: 1023: SwTimerStop(RadioConfiguration.fskRxWindowTimerId);
  9064  005ABA  0101               	movlb	1	; () banked
  9065  005ABC  519D               	movf	(_RadioConfiguration+40)& (0+255),w,b
  9066  005ABE  EC7F  F03A         	call	_SwTimerStop
  9067                           
  9068                           ; BSR set to: 0
  9069                           ;radio_driver_SX1276.c: 1025: HALSPICSAssert();
  9070  005AC2  EC01  F03C         	call	_HALSPICSAssert	;wreg free
  9071                           
  9072                           ;radio_driver_SX1276.c: 1026: HALSPISend(0x00);
  9073  005AC6  0E00               	movlw	0
  9074  005AC8  ECBC  F03B         	call	_HALSPISend
  9075                           
  9076                           ;radio_driver_SX1276.c: 1027: RadioConfiguration.dataBufferLen = HALSPISend(0xFF);
  9077  005ACC  0EFF               	movlw	255
  9078  005ACE  ECBC  F03B         	call	_HALSPISend
  9079  005AD2  0101               	movlb	1	; () banked
  9080  005AD4  6F99               	movwf	(_RadioConfiguration+36)& (0+255),b
  9081                           
  9082                           ; BSR set to: 1
  9083                           ;radio_driver_SX1276.c: 1028: for (i = 0; i < RadioConfiguration.dataBufferLen; i++)
  9084  005AD6  0100               	movlb	0	; () banked
  9085  005AD8  6BEE               	clrf	RADIO_FSKPayloadReady@i& (0+255),b
  9086  005ADA  D00D               	goto	l14640
  9087  005ADC                     l14636:
  9088                           
  9089                           ; BSR set to: 0
  9090                           ;radio_driver_SX1276.c: 1029: {
  9091                           ;radio_driver_SX1276.c: 1030: RadioConfiguration.dataBuffer[i] = HALSPISend(0xFF);
  9092  005ADC  51EE               	movf	RADIO_FSKPayloadReady@i& (0+255),w,b
  9093  005ADE  0101               	movlb	1	; () banked
  9094  005AE0  259A               	addwf	(_RadioConfiguration+37)& (0+255),w,b
  9095  005AE2  6ED9               	movwf	fsr2l,c
  9096  005AE4  0E00               	movlw	0
  9097  005AE6  219B               	addwfc	(_RadioConfiguration+38)& (0+255),w,b
  9098  005AE8  6EDA               	movwf	fsr2h,c
  9099  005AEA  0EFF               	movlw	255
  9100  005AEC  ECBC  F03B         	call	_HALSPISend
  9101  005AF0  6EDF               	movwf	indf2,c
  9102  005AF2  0100               	movlb	0	; () banked
  9103  005AF4  2BEE               	incf	RADIO_FSKPayloadReady@i& (0+255),f,b
  9104  005AF6                     l14640:
  9105                           
  9106                           ; BSR set to: 0
  9107  005AF6  0101               	movlb	1	; () banked
  9108  005AF8  5199               	movf	(_RadioConfiguration+36)& (0+255),w,b
  9109  005AFA  0100               	movlb	0	; () banked
  9110  005AFC  5DEE               	subwf	RADIO_FSKPayloadReady@i& (0+255),w,b
  9111  005AFE  E3EE               	bnc	l14636
  9112                           
  9113                           ; BSR set to: 0
  9114                           ;radio_driver_SX1276.c: 1031: }
  9115                           ;radio_driver_SX1276.c: 1032: HALSPICSDeassert();
  9116  005B00  ECFF  F03B         	call	_HALSPICSDeassert	;wreg free
  9117                           
  9118                           ;radio_driver_SX1276.c: 1034: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  9119  005B04  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  9120  005B08  0E00               	movlw	0
  9121  005B0A  0100               	movlb	0	; () banked
  9122  005B0C  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
  9123  005B0E  EC8F  F028         	call	_RADIO_WriteMode
  9124                           
  9125                           ;radio_driver_SX1276.c: 1035: RadioConfiguration.flags &= ~(1 << (1));
  9126  005B12  0101               	movlb	1	; () banked
  9127  005B14  9398               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  9128                           
  9129                           ; BSR set to: 1
  9130                           ;radio_driver_SX1276.c: 1037: RadioConfiguration.packetSNR = -128;
  9131  005B16  0E80               	movlw	128
  9132  005B18  6FA7               	movwf	(_RadioConfiguration+50)& (0+255),b
  9133                           
  9134                           ; BSR set to: 1
  9135                           ;radio_driver_SX1276.c: 1039: if (1 == RadioConfiguration.crcOn)
  9136  005B1A  0591               	decf	(_RadioConfiguration+28)& (0+255),w,b
  9137  005B1C  E103               	bnz	l14654
  9138                           
  9139                           ; BSR set to: 1
  9140                           ;radio_driver_SX1276.c: 1040: {
  9141                           ;radio_driver_SX1276.c: 1041: if ((1<<(1)) == (irqFlags & (1<<(1))))
  9142  005B1E  0100               	movlb	0	; () banked
  9143  005B20  A3ED               	btfss	RADIO_FSKPayloadReady@irqFlags& (0+255),1,b
  9144  005B22  D003               	goto	l14656
  9145  005B24                     l14654:
  9146                           
  9147                           ;radio_driver_SX1276.c: 1042: {
  9148                           ;radio_driver_SX1276.c: 1043: RadioConfiguration.flags |= (1 << (2));
  9149  005B24  0101               	movlb	1	; () banked
  9150  005B26  8598               	bsf	(_RadioConfiguration+35)& (0+255),2,b
  9151                           
  9152                           ;radio_driver_SX1276.c: 1044: }
  9153  005B28  D002               	goto	l14660
  9154  005B2A                     l14656:
  9155                           
  9156                           ; BSR set to: 0
  9157                           ;radio_driver_SX1276.c: 1045: else
  9158                           ;radio_driver_SX1276.c: 1046: {
  9159                           ;radio_driver_SX1276.c: 1047: RadioConfiguration.flags &= ~(1 << (2));
  9160  005B2A  0101               	movlb	1	; () banked
  9161  005B2C  9598               	bcf	(_RadioConfiguration+35)& (0+255),2,b
  9162  005B2E                     l14660:
  9163                           
  9164                           ; BSR set to: 1
  9165                           ;radio_driver_SX1276.c: 1053: }
  9166                           ;radio_driver_SX1276.c: 1055: if ((RadioConfiguration.flags & (1 << (2))) != 0)
  9167  005B2E  A598               	btfss	(_RadioConfiguration+35)& (0+255),2,b
  9168  005B30  EF88  F013         	goto	_LORAWAN_RxTimeout
  9169                           
  9170                           ; BSR set to: 1
  9171                           ;radio_driver_SX1276.c: 1056: {
  9172                           ;radio_driver_SX1276.c: 1057: LORAWAN_RxDone(RadioConfiguration.dataBuffer, RadioConfigu
      +                          ration.dataBufferLen);
  9173  005B34  C19A  F16B         	movff	_RadioConfiguration+37,LORAWAN_RxDone@buffer
  9174  005B38  C19B  F16C         	movff	_RadioConfiguration+38,LORAWAN_RxDone@buffer+1
  9175  005B3C  C199  F16D         	movff	_RadioConfiguration+36,LORAWAN_RxDone@bufferLength
  9176  005B40  EF4A  F000         	goto	_LORAWAN_RxDone	;wreg free
  9177  005B44                     __end_of_RADIO_FSKPayloadReady:
  9178                           	opt stack 0
  9179                           tosu	equ	0xFFF
  9180                           tosh	equ	0xFFE
  9181                           tosl	equ	0xFFD
  9182                           pclath	equ	0xFFA
  9183                           tblptru	equ	0xFF8
  9184                           tblptrh	equ	0xFF7
  9185                           tblptrl	equ	0xFF6
  9186                           tablat	equ	0xFF5
  9187                           prodh	equ	0xFF4
  9188                           prodl	equ	0xFF3
  9189                           intcon	equ	0xFF2
  9190                           intcon2	equ	0xFF1
  9191                           intcon3	equ	0xFF0
  9192                           postinc0	equ	0xFEE
  9193                           wreg	equ	0xFE8
  9194                           postinc1	equ	0xFE6
  9195                           postdec1	equ	0xFE5
  9196                           plusw1	equ	0xFE3
  9197                           fsr1h	equ	0xFE2
  9198                           fsr1l	equ	0xFE1
  9199                           indf2	equ	0xFDF
  9200                           postinc2	equ	0xFDE
  9201                           postdec2	equ	0xFDD
  9202                           fsr2h	equ	0xFDA
  9203                           fsr2l	equ	0xFD9
  9204                           status	equ	0xFD8
  9205                           
  9206 ;; *************** function _LORAWAN_RxTimeout *****************
  9207 ;; Defined at:
  9208 ;;		line 464 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
  9209 ;; Parameters:    Size  Location     Type
  9210 ;;		None
  9211 ;; Auto vars:     Size  Location     Type
  9212 ;;  minim           4   73[BANK0 ] unsigned long 
  9213 ;;  i               1   77[BANK0 ] unsigned char 
  9214 ;; Return value:  Size  Location     Type
  9215 ;;                  1    wreg      void 
  9216 ;; Registers used:
  9217 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, cstack
  9218 ;; Tracked objects:
  9219 ;;		On entry : F/1
  9220 ;;		On exit  : C/0
  9221 ;;		Unchanged: 0/0
  9222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9224 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9225 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9226 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9227 ;;Total ram usage:        9 bytes
  9228 ;; Hardware stack levels used:    1
  9229 ;; Hardware stack levels required when called:   15
  9230 ;; This function calls:
  9231 ;;		_LORAWAN_ReceiveWindow2Callback
  9232 ;;		_RADIO_Transmit
  9233 ;;		_ResetParametersForConfirmedTransmission
  9234 ;;		_ResetParametersForUnconfirmedTransmission
  9235 ;;		_RxDataDone
  9236 ;;		_SelectChannelForTransmission
  9237 ;;		_SetJoinFailState
  9238 ;;		_SwTimerSetTimeout
  9239 ;;		_SwTimerStart
  9240 ;;		___lldiv
  9241 ;; This function is called by:
  9242 ;;		_RADIO_FSKPayloadReady
  9243 ;;		_RADIO_RxTimeout
  9244 ;;		_RADIO_RxFSKTimeout
  9245 ;;		_RADIO_WatchdogTimeout
  9246 ;; This function uses a non-reentrant model
  9247 ;;
  9248                           
  9249                           	psect	text55
  9250  002710                     __ptext55:
  9251                           	opt stack 0
  9252  002710                     _LORAWAN_RxTimeout:
  9253                           	opt stack 12
  9254                           
  9255                           ; BSR set to: 1
  9256                           ;lorawan_eu.c: 466: uint8_t i;
  9257                           ;lorawan_eu.c: 467: uint32_t minim = (4294967295UL);
  9258                           
  9259                           ;incstack = 0
  9260  002710  0100               	movlb	0	; () banked
  9261  002712  69A9               	setf	LORAWAN_RxTimeout@minim& (0+255),b
  9262  002714  69AA               	setf	(LORAWAN_RxTimeout@minim+1)& (0+255),b
  9263  002716  69AB               	setf	(LORAWAN_RxTimeout@minim+2)& (0+255),b
  9264  002718  69AC               	setf	(LORAWAN_RxTimeout@minim+3)& (0+255),b
  9265                           
  9266                           ;lorawan_eu.c: 469: if (loRa.macStatus.macPause == 0)
  9267  00271A  0102               	movlb	2	; () banked
  9268  00271C  B103               	btfsc	(_loRa+3)& (0+255),0,b
  9269  00271E  D13C               	goto	l14374
  9270                           
  9271                           ; BSR set to: 2
  9272                           ;lorawan_eu.c: 470: {
  9273                           ;lorawan_eu.c: 472: if ( loRa.macStatus.macState == RX1_OPEN )
  9274  002720  5102               	movf	(_loRa+2)& (0+255),w,b
  9275  002722  0B0F               	andlw	15
  9276  002724  0A03               	xorlw	3
  9277  002726  E10E               	bnz	l1066
  9278                           
  9279                           ; BSR set to: 2
  9280                           ;lorawan_eu.c: 473: {
  9281                           ;lorawan_eu.c: 474: if (CLASS_A == loRa.deviceClass)
  9282  002728  5112               	movf	(_loRa+18)& (0+255),w,b
  9283  00272A  E105               	bnz	l14310
  9284                           
  9285                           ; BSR set to: 2
  9286                           ;lorawan_eu.c: 475: {
  9287                           ;lorawan_eu.c: 476: loRa.macStatus.macState = BETWEEN_RX1_RX2;
  9288  00272C  5102               	movf	(_loRa+2)& (0+255),w,b
  9289  00272E  0BF0               	andlw	-16
  9290  002730  0904               	iorlw	4
  9291  002732  6F02               	movwf	(_loRa+2)& (0+255),b
  9292                           
  9293                           ;lorawan_eu.c: 477: }
  9294  002734  0012               	return	
  9295  002736                     l14310:
  9296                           
  9297                           ; BSR set to: 2
  9298                           ;lorawan_eu.c: 478: else if (CLASS_C == loRa.deviceClass)
  9299  002736  0E02               	movlw	2
  9300  002738  1912               	xorwf	(_loRa+18)& (0+255),w,b
  9301  00273A  A4D8               	btfss	status,2,c
  9302  00273C  0012               	return	
  9303                           
  9304                           ; BSR set to: 2
  9305                           ;lorawan_eu.c: 479: {
  9306                           ;lorawan_eu.c: 480: LORAWAN_ReceiveWindow2Callback(0);
  9307  00273E  6AE6               	clrf	postinc1,c
  9308  002740  EFCA  F029         	goto	_LORAWAN_ReceiveWindow2Callback	;wreg free
  9309  002744                     l1066:
  9310                           
  9311                           ; BSR set to: 2
  9312                           ;lorawan_eu.c: 483: else
  9313                           ;lorawan_eu.c: 484: {
  9314                           ;lorawan_eu.c: 486: if (loRa.lorawanMacStatus.joining == 1)
  9315  002744  B500               	btfsc	_loRa& (0+255),2,b
  9316                           
  9317                           ; BSR set to: 2
  9318                           ;lorawan_eu.c: 487: {
  9319                           ;lorawan_eu.c: 488: SetJoinFailState();
  9320  002746  EFB6  F038         	goto	_SetJoinFailState	;wreg free
  9321                           
  9322                           ; BSR set to: 2
  9323                           ;lorawan_eu.c: 491: else if (loRa.macStatus.networkJoined == 1)
  9324                           
  9325                           ;lorawan_eu.c: 489: }
  9326  00274A  A902               	btfss	(_loRa+2)& (0+255),4,b
  9327  00274C  0012               	return	
  9328                           
  9329                           ; BSR set to: 2
  9330                           ;lorawan_eu.c: 492: {
  9331                           ;lorawan_eu.c: 493: if (loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage == 1)
  9332  00274E  A100               	btfss	_loRa& (0+255),0,b
  9333  002750  D04F               	goto	l14332
  9334                           
  9335                           ; BSR set to: 2
  9336                           ;lorawan_eu.c: 494: {
  9337                           ;lorawan_eu.c: 495: if (loRa.counterRepetitionsConfirmedUplink <= loRa.maxRepetitionsCon
      +                          firmedUplink)
  9338  002752  51D9               	movf	(_loRa+217)& (0+255),w,b
  9339  002754  5DD7               	subwf	(_loRa+215)& (0+255),w,b
  9340  002756  E334               	bnc	l14326
  9341                           
  9342                           ; BSR set to: 2
  9343                           ;lorawan_eu.c: 496: {
  9344                           ;lorawan_eu.c: 497: loRa.macStatus.macState = RETRANSMISSION_DELAY;
  9345  002758  5102               	movf	(_loRa+2)& (0+255),w,b
  9346  00275A  0BF0               	andlw	-16
  9347  00275C  0906               	iorlw	6
  9348  00275E  6F02               	movwf	(_loRa+2)& (0+255),b
  9349                           
  9350                           ; BSR set to: 2
  9351                           ;lorawan_eu.c: 498: SwTimerSetTimeout(loRa.ackTimeoutTimerId, ( (((uint32_t)(loRa.protoc
      +                          olParameters.ackTimeout)) << (12)) / 125UL ));
  9352  002760  51A0               	movf	(_loRa+160)& (0+255),w,b
  9353  002762  0100               	movlb	0	; () banked
  9354  002764  6FA5               	movwf	??_LORAWAN_RxTimeout& (0+255),b
  9355  002766  0102               	movlb	2	; () banked
  9356  002768  51A1               	movf	(_loRa+161)& (0+255),w,b
  9357  00276A  0100               	movlb	0	; () banked
  9358  00276C  6FA6               	movwf	(??_LORAWAN_RxTimeout+1)& (0+255),b
  9359  00276E  6BA7               	clrf	(??_LORAWAN_RxTimeout+2)& (0+255),b
  9360  002770  6BA8               	clrf	(??_LORAWAN_RxTimeout+3)& (0+255),b
  9361  002772  0E0C               	movlw	12
  9362  002774                     u16675:
  9363  002774  90D8               	bcf	status,0,c
  9364  002776  37A5               	rlcf	??_LORAWAN_RxTimeout& (0+255),f,b
  9365  002778  37A6               	rlcf	(??_LORAWAN_RxTimeout+1)& (0+255),f,b
  9366  00277A  37A7               	rlcf	(??_LORAWAN_RxTimeout+2)& (0+255),f,b
  9367  00277C  37A8               	rlcf	(??_LORAWAN_RxTimeout+3)& (0+255),f,b
  9368  00277E  2EE8               	decfsz	wreg,f,c
  9369  002780  D7F9               	goto	u16675
  9370  002782  C0A5  F064         	movff	??_LORAWAN_RxTimeout,___lldiv@dividend
  9371  002786  C0A6  F065         	movff	??_LORAWAN_RxTimeout+1,___lldiv@dividend+1
  9372  00278A  C0A7  F066         	movff	??_LORAWAN_RxTimeout+2,___lldiv@dividend+2
  9373  00278E  C0A8  F067         	movff	??_LORAWAN_RxTimeout+3,___lldiv@dividend+3
  9374  002792  0E7D               	movlw	125
  9375  002794  6F68               	movwf	___lldiv@divisor& (0+255),b
  9376  002796  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
  9377  002798  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
  9378  00279A  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
  9379  00279C  EC35  F030         	call	___lldiv	;wreg free
  9380  0027A0  C064  F071         	movff	?___lldiv,SwTimerSetTimeout@timeout
  9381  0027A4  C065  F072         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
  9382  0027A8  C066  F073         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
  9383  0027AC  C067  F074         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
  9384  0027B0  0102               	movlb	2	; () banked
  9385  0027B2  51E8               	movf	(_loRa+232)& (0+255),w,b
  9386  0027B4  EC44  F036         	call	_SwTimerSetTimeout
  9387                           
  9388                           ; BSR set to: 0
  9389                           ;lorawan_eu.c: 499: SwTimerStart(loRa.ackTimeoutTimerId);
  9390  0027B8  0102               	movlb	2	; () banked
  9391  0027BA  51E8               	movf	(_loRa+232)& (0+255),w,b
  9392  0027BC  EF35  F02E         	goto	_SwTimerStart
  9393  0027C0                     l14326:
  9394                           
  9395                           ; BSR set to: 2
  9396                           ;lorawan_eu.c: 501: else
  9397                           ;lorawan_eu.c: 502: {
  9398                           ;lorawan_eu.c: 503: ResetParametersForConfirmedTransmission ();
  9399  0027C0  EC4B  F03B         	call	_ResetParametersForConfirmedTransmission	;wreg free
  9400                           
  9401                           ; BSR set to: 2
  9402                           ;lorawan_eu.c: 504: if (rxPayload.RxAppData != (0))
  9403  0027C4  0101               	movlb	1	; () banked
  9404  0027C6  516E               	movf	_rxPayload& (0+255),w,b
  9405  0027C8  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
  9406  0027CA  B4D8               	btfsc	status,2,c
  9407  0027CC  0012               	return	
  9408  0027CE                     l14330:
  9409                           
  9410                           ; BSR set to: 1
  9411                           ;lorawan_eu.c: 505: {
  9412                           ;lorawan_eu.c: 506: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
  9413  0027CE  0E00               	movlw	0
  9414  0027D0  0100               	movlb	0	; () banked
  9415  0027D2  6F64               	movwf	RxDataDone@pData& (0+255),b
  9416  0027D4  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
  9417  0027D6  6F66               	movwf	RxDataDone@dataLength& (0+255),b
  9418  0027D8  6F67               	movwf	RxDataDone@status& (0+255),b
  9419  0027DA  0005               	push	
  9420  0027DC  0101               	movlb	1	; () banked
  9421  0027DE  6EFA               	movwf	pclath,c
  9422  0027E0  516E               	movf	_rxPayload& (0+255),w,b
  9423  0027E2  6EFD               	movwf	tosl,c
  9424  0027E4  516F               	movf	(_rxPayload+1)& (0+255),w,b
  9425  0027E6  6EFE               	movwf	tosh,c
  9426  0027E8  50F8               	movf	tblptru,w,c
  9427  0027EA  6EFF               	movwf	tosu,c
  9428  0027EC  50FA               	movf	pclath,w,c
  9429  0027EE  0012               	return		;indir
  9430  0027F0                     l14332:
  9431                           
  9432                           ; BSR set to: 2
  9433                           ;lorawan_eu.c: 511: else
  9434                           ;lorawan_eu.c: 512: {
  9435                           ;lorawan_eu.c: 513: if (loRa.counterRepetitionsUnconfirmedUplink <= loRa.maxRepetitionsU
      +                          nconfirmedUplink)
  9436  0027F0  51D8               	movf	(_loRa+216)& (0+255),w,b
  9437  0027F2  5DD6               	subwf	(_loRa+214)& (0+255),w,b
  9438  0027F4  E201 D0B7          	bnc	l14368
  9439                           
  9440                           ; BSR set to: 2
  9441                           ;lorawan_eu.c: 514: {
  9442                           ;lorawan_eu.c: 515: loRa.macStatus.macState = RETRANSMISSION_DELAY;
  9443  0027F8  5102               	movf	(_loRa+2)& (0+255),w,b
  9444  0027FA  0BF0               	andlw	-16
  9445  0027FC  0906               	iorlw	6
  9446  0027FE  6F02               	movwf	(_loRa+2)& (0+255),b
  9447                           
  9448                           ; BSR set to: 2
  9449                           ;lorawan_eu.c: 516: if (SelectChannelForTransmission (1) == OK)
  9450  002800  0E01               	movlw	1
  9451  002802  ECE2  F032         	call	_SelectChannelForTransmission
  9452  002806  0900               	iorlw	0
  9453  002808  E119               	bnz	l1080
  9454                           
  9455                           ; BSR set to: 0
  9456                           ;lorawan_eu.c: 517: {
  9457                           ;lorawan_eu.c: 519: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
  9458  00280A  0EF0               	movlw	low (_macBuffer+16)
  9459  00280C  6F94               	movwf	RADIO_Transmit@buffer& (0+255),b
  9460  00280E  0E04               	movlw	high (_macBuffer+16)
  9461  002810  6F95               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
  9462  002812  C2D4  F096         	movff	_loRa+212,RADIO_Transmit@bufferLen
  9463  002816  ECF9  F017         	call	_RADIO_Transmit	;wreg free
  9464  00281A  5194               	movf	?_RADIO_Transmit& (0+255),w,b
  9465  00281C  1195               	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
  9466  00281E  E107               	bnz	l14344
  9467                           
  9468                           ; BSR set to: 0
  9469                           ;lorawan_eu.c: 520: {
  9470                           ;lorawan_eu.c: 521: loRa.counterRepetitionsUnconfirmedUplink ++ ;
  9471  002820  0102               	movlb	2	; () banked
  9472  002822  2BD8               	incf	(_loRa+216)& (0+255),f,b
  9473                           
  9474                           ; BSR set to: 2
  9475                           ;lorawan_eu.c: 522: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
  9476  002824  5102               	movf	(_loRa+2)& (0+255),w,b
  9477  002826  0BF0               	andlw	-16
  9478  002828  0901               	iorlw	1
  9479  00282A  6F02               	movwf	(_loRa+2)& (0+255),b
  9480                           
  9481                           ;lorawan_eu.c: 523: }
  9482  00282C  0012               	return	
  9483  00282E                     l14344:
  9484                           
  9485                           ; BSR set to: 0
  9486                           ;lorawan_eu.c: 524: else
  9487                           ;lorawan_eu.c: 526: {
  9488                           ;lorawan_eu.c: 527: ResetParametersForUnconfirmedTransmission ();
  9489  00282E  EC44  F03B         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  9490                           
  9491                           ; BSR set to: 2
  9492                           ;lorawan_eu.c: 528: if (rxPayload.RxAppData != (0))
  9493  002832  0101               	movlb	1	; () banked
  9494  002834  516E               	movf	_rxPayload& (0+255),w,b
  9495  002836  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
  9496  002838  E1CA               	bnz	l14330
  9497  00283A  0012               	return	
  9498  00283C                     l1080:
  9499                           
  9500                           ; BSR set to: 0
  9501                           ;lorawan_eu.c: 534: else
  9502                           ;lorawan_eu.c: 535: {
  9503                           ;lorawan_eu.c: 537: for (i = 0; i <= loRa.maxChannels; i ++)
  9504  00283C  6BAD               	clrf	LORAWAN_RxTimeout@i& (0+255),b
  9505  00283E  D05B               	goto	l14364
  9506  002840                     l14350:
  9507                           
  9508                           ; BSR set to: 2
  9509                           ;lorawan_eu.c: 538: {
  9510                           ;lorawan_eu.c: 539: if ( (Channels[i].status == 1) && (Channels[i].channelTimer != 0) &&
      +                           (Channels[i].channelTimer <= minim) && (loRa.currentDataRate >= Channels[i].dataRange.m
      +                          in) && (loRa.currentDataRate <= Channels[i].dataRange.max) )
  9511  002840  0100               	movlb	0	; () banked
  9512  002842  51AD               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
  9513  002844  0D0E               	mullw	14
  9514  002846  0E04               	movlw	low (_Channels+4)
  9515  002848  24F3               	addwf	prodl,w,c
  9516  00284A  6ED9               	movwf	fsr2l,c
  9517  00284C  0E04               	movlw	high (_Channels+4)
  9518  00284E  20F4               	addwfc	prodh,w,c
  9519  002850  6EDA               	movwf	fsr2h,c
  9520  002852  04DE               	decf	postinc2,w,c
  9521  002854  E14E               	bnz	l14362
  9522                           
  9523                           ; BSR set to: 0
  9524  002856  51AD               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
  9525  002858  0D0E               	mullw	14
  9526  00285A  0E08               	movlw	low (_Channels+8)
  9527  00285C  24F3               	addwf	prodl,w,c
  9528  00285E  6ED9               	movwf	fsr2l,c
  9529  002860  0E04               	movlw	high (_Channels+8)
  9530  002862  20F4               	addwfc	prodh,w,c
  9531  002864  6EDA               	movwf	fsr2h,c
  9532  002866  50DE               	movf	postinc2,w,c
  9533  002868  10DE               	iorwf	postinc2,w,c
  9534  00286A  10DE               	iorwf	postinc2,w,c
  9535  00286C  10DE               	iorwf	postinc2,w,c
  9536  00286E  E041               	bz	l14362
  9537                           
  9538                           ; BSR set to: 0
  9539  002870  51AD               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
  9540  002872  0D0E               	mullw	14
  9541  002874  0E08               	movlw	low (_Channels+8)
  9542  002876  24F3               	addwf	prodl,w,c
  9543  002878  6ED9               	movwf	fsr2l,c
  9544  00287A  0E04               	movlw	high (_Channels+8)
  9545  00287C  20F4               	addwfc	prodh,w,c
  9546  00287E  6EDA               	movwf	fsr2h,c
  9547  002880  50DE               	movf	postinc2,w,c
  9548  002882  5DA9               	subwf	LORAWAN_RxTimeout@minim& (0+255),w,b
  9549  002884  50DE               	movf	postinc2,w,c
  9550  002886  59AA               	subwfb	(LORAWAN_RxTimeout@minim+1)& (0+255),w,b
  9551  002888  50DE               	movf	postinc2,w,c
  9552  00288A  59AB               	subwfb	(LORAWAN_RxTimeout@minim+2)& (0+255),w,b
  9553  00288C  50DE               	movf	postinc2,w,c
  9554  00288E  59AC               	subwfb	(LORAWAN_RxTimeout@minim+3)& (0+255),w,b
  9555  002890  E330               	bnc	l14362
  9556                           
  9557                           ; BSR set to: 0
  9558  002892  51AD               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
  9559  002894  0D0E               	mullw	14
  9560  002896  0E05               	movlw	low (_Channels+5)
  9561  002898  24F3               	addwf	prodl,w,c
  9562  00289A  6ED9               	movwf	fsr2l,c
  9563  00289C  0E04               	movlw	high (_Channels+5)
  9564  00289E  20F4               	addwfc	prodh,w,c
  9565  0028A0  6EDA               	movwf	fsr2h,c
  9566  0028A2  50DF               	movf	223,w,c
  9567  0028A4  0B0F               	andlw	15
  9568  0028A6  6FA5               	movwf	??_LORAWAN_RxTimeout& (0+255),b
  9569  0028A8  51A5               	movf	??_LORAWAN_RxTimeout& (0+255),w,b
  9570  0028AA  0102               	movlb	2	; () banked
  9571  0028AC  5DDF               	subwf	(_loRa+223)& (0+255),w,b
  9572  0028AE  E321               	bnc	l14362
  9573                           
  9574                           ; BSR set to: 2
  9575  0028B0  0100               	movlb	0	; () banked
  9576  0028B2  51AD               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
  9577  0028B4  0D0E               	mullw	14
  9578  0028B6  0E05               	movlw	low (_Channels+5)
  9579  0028B8  24F3               	addwf	prodl,w,c
  9580  0028BA  6ED9               	movwf	fsr2l,c
  9581  0028BC  0E04               	movlw	high (_Channels+5)
  9582  0028BE  20F4               	addwfc	prodh,w,c
  9583  0028C0  6EDA               	movwf	fsr2h,c
  9584  0028C2  38DF               	swapf	223,w,c
  9585  0028C4  0B0F               	andlw	15
  9586  0028C6  6FA5               	movwf	??_LORAWAN_RxTimeout& (0+255),b
  9587  0028C8  0102               	movlb	2	; () banked
  9588  0028CA  51DF               	movf	(_loRa+223)& (0+255),w,b
  9589  0028CC  0100               	movlb	0	; () banked
  9590  0028CE  5DA5               	subwf	??_LORAWAN_RxTimeout& (0+255),w,b
  9591  0028D0  E310               	bnc	l14362
  9592                           
  9593                           ; BSR set to: 0
  9594                           ;lorawan_eu.c: 540: {
  9595                           ;lorawan_eu.c: 541: minim = Channels[i].channelTimer;
  9596  0028D2  51AD               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
  9597  0028D4  0D0E               	mullw	14
  9598  0028D6  0E08               	movlw	low (_Channels+8)
  9599  0028D8  24F3               	addwf	prodl,w,c
  9600  0028DA  6ED9               	movwf	fsr2l,c
  9601  0028DC  0E04               	movlw	high (_Channels+8)
  9602  0028DE  20F4               	addwfc	prodh,w,c
  9603  0028E0  6EDA               	movwf	fsr2h,c
  9604  0028E2  CFDE F0A9          	movff	postinc2,LORAWAN_RxTimeout@minim
  9605  0028E6  CFDE F0AA          	movff	postinc2,LORAWAN_RxTimeout@minim+1
  9606  0028EA  CFDE F0AB          	movff	postinc2,LORAWAN_RxTimeout@minim+2
  9607  0028EE  CFDE F0AC          	movff	postinc2,LORAWAN_RxTimeout@minim+3
  9608  0028F2                     l14362:
  9609  0028F2  0100               	movlb	0	; () banked
  9610  0028F4  2BAD               	incf	LORAWAN_RxTimeout@i& (0+255),f,b
  9611  0028F6                     l14364:
  9612                           
  9613                           ; BSR set to: 0
  9614  0028F6  51AD               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
  9615  0028F8  0102               	movlb	2	; () banked
  9616  0028FA  5DED               	subwf	(_loRa+237)& (0+255),w,b
  9617  0028FC  E2A1               	bc	l14350
  9618                           
  9619                           ; BSR set to: 2
  9620                           ;lorawan_eu.c: 542: }
  9621                           ;lorawan_eu.c: 543: }
  9622                           ;lorawan_eu.c: 544: SwTimerSetTimeout (loRa.unconfirmedRetransmisionTimerId, ( (((uint32
      +                          _t)(minim + 50)) << (12)) / 125UL ) );
  9623  0028FE  C0A9  F0A5         	movff	LORAWAN_RxTimeout@minim,??_LORAWAN_RxTimeout
  9624  002902  C0AA  F0A6         	movff	LORAWAN_RxTimeout@minim+1,??_LORAWAN_RxTimeout+1
  9625  002906  C0AB  F0A7         	movff	LORAWAN_RxTimeout@minim+2,??_LORAWAN_RxTimeout+2
  9626  00290A  C0AC  F0A8         	movff	LORAWAN_RxTimeout@minim+3,??_LORAWAN_RxTimeout+3
  9627  00290E  0E0C               	movlw	12
  9628  002910                     u16805:
  9629  002910  90D8               	bcf	status,0,c
  9630  002912  0100               	movlb	0	; () banked
  9631  002914  37A5               	rlcf	??_LORAWAN_RxTimeout& (0+255),f,b
  9632  002916  37A6               	rlcf	(??_LORAWAN_RxTimeout+1)& (0+255),f,b
  9633  002918  37A7               	rlcf	(??_LORAWAN_RxTimeout+2)& (0+255),f,b
  9634  00291A  37A8               	rlcf	(??_LORAWAN_RxTimeout+3)& (0+255),f,b
  9635  00291C  2EE8               	decfsz	wreg,f,c
  9636  00291E  D7F8               	goto	u16805
  9637  002920  0E00               	movlw	0
  9638  002922  25A5               	addwf	??_LORAWAN_RxTimeout& (0+255),w,b
  9639  002924  6F64               	movwf	___lldiv@dividend& (0+255),b
  9640  002926  0E20               	movlw	32
  9641  002928  21A6               	addwfc	(??_LORAWAN_RxTimeout+1)& (0+255),w,b
  9642  00292A  6F65               	movwf	(___lldiv@dividend+1)& (0+255),b
  9643  00292C  0E03               	movlw	3
  9644  00292E  21A7               	addwfc	(??_LORAWAN_RxTimeout+2)& (0+255),w,b
  9645  002930  6F66               	movwf	(___lldiv@dividend+2)& (0+255),b
  9646  002932  0E00               	movlw	0
  9647  002934  21A8               	addwfc	(??_LORAWAN_RxTimeout+3)& (0+255),w,b
  9648  002936  6F67               	movwf	(___lldiv@dividend+3)& (0+255),b
  9649  002938  0E7D               	movlw	125
  9650  00293A  6F68               	movwf	___lldiv@divisor& (0+255),b
  9651  00293C  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
  9652  00293E  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
  9653  002940  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
  9654  002942  EC35  F030         	call	___lldiv	;wreg free
  9655  002946  C064  F071         	movff	?___lldiv,SwTimerSetTimeout@timeout
  9656  00294A  C065  F072         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
  9657  00294E  C066  F073         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
  9658  002952  C067  F074         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
  9659  002956  0102               	movlb	2	; () banked
  9660  002958  51EA               	movf	(_loRa+234)& (0+255),w,b
  9661  00295A  EC44  F036         	call	_SwTimerSetTimeout
  9662                           
  9663                           ;lorawan_eu.c: 545: SwTimerStart (loRa.unconfirmedRetransmisionTimerId);
  9664  00295E  0102               	movlb	2	; () banked
  9665  002960  51EA               	movf	(_loRa+234)& (0+255),w,b
  9666  002962  EF35  F02E         	goto	_SwTimerStart
  9667  002966                     l14368:
  9668                           
  9669                           ; BSR set to: 2
  9670                           ;lorawan_eu.c: 548: else
  9671                           ;lorawan_eu.c: 549: {
  9672                           ;lorawan_eu.c: 550: ResetParametersForUnconfirmedTransmission ();
  9673  002966  EC44  F03B         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  9674                           
  9675                           ; BSR set to: 2
  9676                           ;lorawan_eu.c: 551: if (rxPayload.RxAppData != (0))
  9677  00296A  0101               	movlb	1	; () banked
  9678  00296C  516E               	movf	_rxPayload& (0+255),w,b
  9679  00296E  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
  9680  002970  B4D8               	btfsc	status,2,c
  9681  002972  0012               	return	
  9682                           
  9683                           ; BSR set to: 1
  9684                           ;lorawan_eu.c: 552: {
  9685                           ;lorawan_eu.c: 553: rxPayload.RxAppData((0), 0, MAC_OK);
  9686  002974  0E00               	movlw	0
  9687  002976  0100               	movlb	0	; () banked
  9688  002978  6F64               	movwf	RxDataDone@pData& (0+255),b
  9689  00297A  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
  9690  00297C  6F66               	movwf	RxDataDone@dataLength& (0+255),b
  9691  00297E  0E01               	movlw	1
  9692  002980  6F67               	movwf	RxDataDone@status& (0+255),b
  9693  002982  0005               	push	
  9694  002984  0101               	movlb	1	; () banked
  9695  002986  6EFA               	movwf	pclath,c
  9696  002988  516E               	movf	_rxPayload& (0+255),w,b
  9697  00298A  6EFD               	movwf	tosl,c
  9698  00298C  516F               	movf	(_rxPayload+1)& (0+255),w,b
  9699  00298E  6EFE               	movwf	tosh,c
  9700  002990  50F8               	movf	tblptru,w,c
  9701  002992  6EFF               	movwf	tosu,c
  9702  002994  50FA               	movf	pclath,w,c
  9703  002996  0012               	return		;indir
  9704  002998                     l14374:
  9705                           
  9706                           ; BSR set to: 2
  9707                           ;lorawan_eu.c: 560: else
  9708                           ;lorawan_eu.c: 561: {
  9709                           ;lorawan_eu.c: 563: if (rxPayload.RxAppData != (0))
  9710  002998  0101               	movlb	1	; () banked
  9711  00299A  516E               	movf	_rxPayload& (0+255),w,b
  9712  00299C  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
  9713  00299E  B4D8               	btfsc	status,2,c
  9714  0029A0  0012               	return	
  9715                           
  9716                           ; BSR set to: 1
  9717                           ;lorawan_eu.c: 564: {
  9718                           ;lorawan_eu.c: 565: rxPayload.RxAppData((0), 0, RADIO_NOT_OK);
  9719  0029A2  0E00               	movlw	0
  9720  0029A4  0100               	movlb	0	; () banked
  9721  0029A6  6F64               	movwf	RxDataDone@pData& (0+255),b
  9722  0029A8  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
  9723  0029AA  6F66               	movwf	RxDataDone@dataLength& (0+255),b
  9724  0029AC  0E02               	movlw	2
  9725  0029AE  6F67               	movwf	RxDataDone@status& (0+255),b
  9726  0029B0  0005               	push	
  9727  0029B2  0101               	movlb	1	; () banked
  9728  0029B4  6EFA               	movwf	pclath,c
  9729  0029B6  516E               	movf	_rxPayload& (0+255),w,b
  9730  0029B8  6EFD               	movwf	tosl,c
  9731  0029BA  516F               	movf	(_rxPayload+1)& (0+255),w,b
  9732  0029BC  6EFE               	movwf	tosh,c
  9733  0029BE  50F8               	movf	tblptru,w,c
  9734  0029C0  6EFF               	movwf	tosu,c
  9735  0029C2  50FA               	movf	pclath,w,c
  9736  0029C4  0012               	return		;indir
  9737  0029C6                     __end_of_LORAWAN_RxTimeout:
  9738                           	opt stack 0
  9739                           tosu	equ	0xFFF
  9740                           tosh	equ	0xFFE
  9741                           tosl	equ	0xFFD
  9742                           pclath	equ	0xFFA
  9743                           tblptru	equ	0xFF8
  9744                           tblptrh	equ	0xFF7
  9745                           tblptrl	equ	0xFF6
  9746                           tablat	equ	0xFF5
  9747                           prodh	equ	0xFF4
  9748                           prodl	equ	0xFF3
  9749                           intcon	equ	0xFF2
  9750                           intcon2	equ	0xFF1
  9751                           intcon3	equ	0xFF0
  9752                           postinc0	equ	0xFEE
  9753                           wreg	equ	0xFE8
  9754                           postinc1	equ	0xFE6
  9755                           postdec1	equ	0xFE5
  9756                           plusw1	equ	0xFE3
  9757                           fsr1h	equ	0xFE2
  9758                           fsr1l	equ	0xFE1
  9759                           indf2	equ	0xFDF
  9760                           postinc2	equ	0xFDE
  9761                           postdec2	equ	0xFDD
  9762                           fsr2h	equ	0xFDA
  9763                           fsr2l	equ	0xFD9
  9764                           status	equ	0xFD8
  9765                           
  9766 ;; *************** function _LORAWAN_RxDone *****************
  9767 ;; Defined at:
  9768 ;;		line 1121 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  9769 ;; Parameters:    Size  Location     Type
  9770 ;;  buffer          2  107[BANK1 ] PTR unsigned char 
  9771 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
  9772 ;;  bufferLength    1  109[BANK1 ] unsigned char 
  9773 ;; Auto vars:     Size  Location     Type
  9774 ;;  hdr             2   18[BANK3 ] PTR struct .
  9775 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
  9776 ;;  joinAccept      2   15[BANK3 ] PTR struct .
  9777 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
  9778 ;;  computedMic     4   11[BANK3 ] unsigned long 
  9779 ;;  extractedMic    4    3[BANK3 ] unsigned long 
  9780 ;;  packet          2    9[BANK3 ] PTR unsigned char 
  9781 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), NULL(0), 
  9782 ;;  frmPayloadLe    1   17[BANK3 ] unsigned char 
  9783 ;;  temp            1    8[BANK3 ] unsigned char 
  9784 ;;  bufferIndex     1    7[BANK3 ] unsigned char 
  9785 ;;  mhdr            1    2[BANK3 ] struct .
  9786 ;;  channelIndex    1    1[BANK3 ] unsigned char 
  9787 ;;  fPort           1    0[BANK3 ] unsigned char 
  9788 ;; Return value:  Size  Location     Type
  9789 ;;                  1    wreg      enum E19138
  9790 ;; Registers used:
  9791 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+8, btemp+9, btemp+10, btemp+11, tos
      +l, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9792 ;; Tracked objects:
  9793 ;;		On entry : F/1
  9794 ;;		On exit  : C/0
  9795 ;;		Unchanged: 0/0
  9796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9797 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9798 ;;      Locals:         0       0       0       0      20       0       0       0       0       0       0       0       
      +0       0       0       0
  9799 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9800 ;;      Totals:         0       5       3       0      20       0       0       0       0       0       0       0       
      +0       0       0       0
  9801 ;;Total ram usage:       28 bytes
  9802 ;; Hardware stack levels used:    1
  9803 ;; Hardware stack levels required when called:   15
  9804 ;; This function calls:
  9805 ;;		_AESCmac
  9806 ;;		_AESEncodeLoRa
  9807 ;;		_AssembleEncryptionBlock
  9808 ;;		_CheckFlags
  9809 ;;		_CheckMcastFlags
  9810 ;;		_ComputeMic
  9811 ;;		_ComputeSessionKeys
  9812 ;;		_EncryptFRMPayload
  9813 ;;		_ExtractMic
  9814 ;;		_LORAWAN_EnterContinuousReceive
  9815 ;;		_LORAWAN_Send
  9816 ;;		_MacExecuteCommands
  9817 ;;		_RADIO_GetStatus
  9818 ;;		_RADIO_ReleaseData
  9819 ;;		_RxDataDone
  9820 ;;		_SearchAvailableChannel
  9821 ;;		_SetJoinFailState
  9822 ;;		_SetReceptionNotOkState
  9823 ;;		_StartReTxTimer
  9824 ;;		_SwTimerStop
  9825 ;;		_UpdateCfList
  9826 ;;		_UpdateDLSettings
  9827 ;;		_UpdateJoinSuccessState
  9828 ;;		_UpdateReceiveDelays
  9829 ;;		_UpdateRetransmissionAckTimeoutState
  9830 ;;		_memcpy
  9831 ;; This function is called by:
  9832 ;;		_RADIO_RxDone
  9833 ;;		_RADIO_FSKPayloadReady
  9834 ;; This function uses a non-reentrant model
  9835 ;;
  9836                           
  9837                           	psect	text56
  9838  000094                     __ptext56:
  9839                           	opt stack 0
  9840  000094                     _LORAWAN_RxDone:
  9841                           	opt stack 12
  9842                           
  9843                           ; BSR set to: 1
  9844                           ;lorawan.c: 1123: uint32_t computedMic, extractedMic;
  9845                           ;lorawan.c: 1124: Mhdr_t mhdr;
  9846                           ;lorawan.c: 1125: uint8_t fPort, bufferIndex, channelIndex;
  9847                           ;lorawan.c: 1126: uint8_t frmPayloadLength;
  9848                           ;lorawan.c: 1127: uint8_t *packet;
  9849                           ;lorawan.c: 1128: uint8_t temp;
  9850                           ;lorawan.c: 1130: RADIO_ReleaseData();
  9851                           
  9852                           ;incstack = 0
  9853  000094  ECEC  F03B         	call	_RADIO_ReleaseData	;wreg free
  9854                           
  9855                           ; BSR set to: 1
  9856                           ;lorawan.c: 1132: if (loRa.macStatus.macPause == 0)
  9857  000098  0102               	movlb	2	; () banked
  9858  00009A  B103               	btfsc	(_loRa+3)& (0+255),0,b
  9859  00009C  EF68  F005         	goto	l14292
  9860                           
  9861                           ; BSR set to: 2
  9862                           ;lorawan.c: 1133: {
  9863                           ;lorawan.c: 1134: mhdr.value = buffer[0];
  9864  0000A0  C16B  FFD9         	movff	LORAWAN_RxDone@buffer,fsr2l
  9865  0000A4  C16C  FFDA         	movff	LORAWAN_RxDone@buffer+1,fsr2h
  9866  0000A8  50DF               	movf	indf2,w,c
  9867  0000AA  0103               	movlb	3	; () banked
  9868  0000AC  6FA2               	movwf	LORAWAN_RxDone@mhdr& (0+255),b
  9869                           
  9870                           ; BSR set to: 3
  9871                           ;lorawan.c: 1135: if ( (mhdr.bits.mType == FRAME_TYPE_JOIN_ACCEPT) && (loRa.activationPa
      +                          rameters.activationType == 0) )
  9872  0000AE  39A2               	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
  9873  0000B0  32E8               	rrcf	wreg,f,c
  9874  0000B2  0B07               	andlw	7
  9875  0000B4  06E8               	decf	wreg,f,c
  9876  0000B6  E001 D0C7          	bnz	l13964
  9877                           
  9878                           ; BSR set to: 3
  9879  0000BA  0102               	movlb	2	; () banked
  9880  0000BC  511D               	movf	(_loRa+29)& (0+255),w,b
  9881  0000BE  E001 D0C3          	bnz	l13964
  9882                           
  9883                           ; BSR set to: 2
  9884                           ;lorawan.c: 1136: {
  9885                           ;lorawan.c: 1137: temp = bufferLength - 1;
  9886  0000C2  0101               	movlb	1	; () banked
  9887  0000C4  056D               	decf	LORAWAN_RxDone@bufferLength& (0+255),w,b
  9888  0000C6  0103               	movlb	3	; () banked
  9889  0000C8  6FA8               	movwf	LORAWAN_RxDone@temp& (0+255),b
  9890                           
  9891                           ;lorawan.c: 1138: while (temp > 0)
  9892  0000CA  D020               	goto	l13920
  9893  0000CC                     l13914:
  9894                           
  9895                           ; BSR set to: 3
  9896                           ;lorawan.c: 1139: {
  9897                           ;lorawan.c: 1141: AESEncodeLoRa (&buffer[bufferLength - temp], loRa.activationParameters
      +                          .applicationKey);
  9898  0000CC  0101               	movlb	1	; () banked
  9899  0000CE  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
  9900  0000D0  256B               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
  9901  0000D2  0100               	movlb	0	; () banked
  9902  0000D4  6FE8               	movwf	??_LORAWAN_RxDone& (0+255),b
  9903  0000D6  0E00               	movlw	0
  9904  0000D8  0101               	movlb	1	; () banked
  9905  0000DA  216C               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
  9906  0000DC  0100               	movlb	0	; () banked
  9907  0000DE  6FE9               	movwf	(??_LORAWAN_RxDone+1)& (0+255),b
  9908  0000E0  0103               	movlb	3	; () banked
  9909  0000E2  51A8               	movf	LORAWAN_RxDone@temp& (0+255),w,b
  9910  0000E4  0100               	movlb	0	; () banked
  9911  0000E6  5DE8               	subwf	??_LORAWAN_RxDone& (0+255),w,b
  9912  0000E8  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
  9913  0000EA  51E9               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
  9914  0000EC  A0D8               	btfss	status,0,c
  9915  0000EE  05E9               	decf	(??_LORAWAN_RxDone+1)& (0+255),w,b
  9916  0000F0  6F91               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
  9917  0000F2  0E42               	movlw	low (_loRa+66)
  9918  0000F4  6F92               	movwf	AESEncodeLoRa@key& (0+255),b
  9919  0000F6  0E02               	movlw	high (_loRa+66)
  9920  0000F8  6F93               	movwf	(AESEncodeLoRa@key+1)& (0+255),b
  9921  0000FA  EC09  F039         	call	_AESEncodeLoRa	;wreg free
  9922                           
  9923                           ; BSR set to: 0
  9924                           ;lorawan.c: 1142: if (temp > 16)
  9925  0000FE  0E10               	movlw	16
  9926  000100  0103               	movlb	3	; () banked
  9927  000102  65A8               	cpfsgt	LORAWAN_RxDone@temp& (0+255),b
  9928  000104  D002               	goto	l2070
  9929                           
  9930                           ; BSR set to: 3
  9931                           ;lorawan.c: 1143: {
  9932                           ;lorawan.c: 1144: temp -= 16;
  9933  000106  5FA8               	subwf	LORAWAN_RxDone@temp& (0+255),f,b
  9934                           
  9935                           ;lorawan.c: 1145: }
  9936  000108  D001               	goto	l13920
  9937  00010A                     l2070:
  9938                           
  9939                           ; BSR set to: 3
  9940                           ;lorawan.c: 1146: else
  9941                           ;lorawan.c: 1147: {
  9942                           ;lorawan.c: 1148: temp = 0;
  9943  00010A  6BA8               	clrf	LORAWAN_RxDone@temp& (0+255),b
  9944  00010C                     l13920:
  9945                           
  9946                           ; BSR set to: 3
  9947  00010C  51A8               	movf	LORAWAN_RxDone@temp& (0+255),w,b
  9948  00010E  E1DE               	bnz	l13914
  9949                           
  9950                           ; BSR set to: 3
  9951                           ;lorawan.c: 1149: }
  9952                           ;lorawan.c: 1150: }
  9953                           ;lorawan.c: 1153: computedMic = ComputeMic (loRa.activationParameters.applicationKey, bu
      +                          ffer, bufferLength - sizeof(extractedMic));
  9954  000110  0E42               	movlw	low (_loRa+66)
  9955  000112  0100               	movlb	0	; () banked
  9956  000114  6FDA               	movwf	ComputeMic@key& (0+255),b
  9957  000116  0E02               	movlw	high (_loRa+66)
  9958  000118  6FDB               	movwf	(ComputeMic@key+1)& (0+255),b
  9959  00011A  C16B  F0DC         	movff	LORAWAN_RxDone@buffer,ComputeMic@buffer
  9960  00011E  C16C  F0DD         	movff	LORAWAN_RxDone@buffer+1,ComputeMic@buffer+1
  9961  000122  0101               	movlb	1	; () banked
  9962  000124  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
  9963  000126  0FFC               	addlw	252
  9964  000128  0100               	movlb	0	; () banked
  9965  00012A  6FDE               	movwf	ComputeMic@bufferLength& (0+255),b
  9966  00012C  EC1E  F034         	call	_ComputeMic	;wreg free
  9967  000130  C0DA  F3AB         	movff	?_ComputeMic,LORAWAN_RxDone@computedMic
  9968  000134  C0DB  F3AC         	movff	?_ComputeMic+1,LORAWAN_RxDone@computedMic+1
  9969  000138  C0DC  F3AD         	movff	?_ComputeMic+2,LORAWAN_RxDone@computedMic+2
  9970  00013C  C0DD  F3AE         	movff	?_ComputeMic+3,LORAWAN_RxDone@computedMic+3
  9971                           
  9972                           ; BSR set to: 0
  9973                           ;lorawan.c: 1154: extractedMic = ExtractMic (buffer, bufferLength);
  9974  000140  C16B  F06E         	movff	LORAWAN_RxDone@buffer,ExtractMic@buffer
  9975  000144  C16C  F06F         	movff	LORAWAN_RxDone@buffer+1,ExtractMic@buffer+1
  9976  000148  C16D  F070         	movff	LORAWAN_RxDone@bufferLength,ExtractMic@bufferLength
  9977  00014C  EC02  F036         	call	_ExtractMic	;wreg free
  9978  000150  C06E  F3A3         	movff	?_ExtractMic,LORAWAN_RxDone@extractedMic
  9979  000154  C06F  F3A4         	movff	?_ExtractMic+1,LORAWAN_RxDone@extractedMic+1
  9980  000158  C070  F3A5         	movff	?_ExtractMic+2,LORAWAN_RxDone@extractedMic+2
  9981  00015C  C071  F3A6         	movff	?_ExtractMic+3,LORAWAN_RxDone@extractedMic+3
  9982                           
  9983                           ; BSR set to: 0
  9984                           ;lorawan.c: 1155: if (extractedMic != computedMic)
  9985  000160  0103               	movlb	3	; () banked
  9986  000162  51AB               	movf	LORAWAN_RxDone@computedMic& (0+255),w,b
  9987  000164  19A3               	xorwf	LORAWAN_RxDone@extractedMic& (0+255),w,b
  9988  000166  E109               	bnz	u15930
  9989  000168  51AC               	movf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
  9990  00016A  19A4               	xorwf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
  9991  00016C  E106               	bnz	u15930
  9992  00016E  51AD               	movf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
  9993  000170  19A5               	xorwf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
  9994  000172  E103               	bnz	u15930
  9995  000174  51AE               	movf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
  9996  000176  19A6               	xorwf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
  9997  000178  E011               	bz	l13938
  9998  00017A                     u15930:
  9999                           
 10000                           ; BSR set to: 3
 10001                           ;lorawan.c: 1156: {
 10002                           ;lorawan.c: 1157: if ((loRa.macStatus.macState == RX2_OPEN) || ((loRa.macStatus.macState
      +                           == RX1_OPEN) && (loRa.rx2DelayExpired)))
 10003  00017A  0102               	movlb	2	; () banked
 10004  00017C  5102               	movf	(_loRa+2)& (0+255),w,b
 10005  00017E  0B0F               	andlw	15
 10006  000180  0A05               	xorlw	5
 10007  000182  E102 EFB6  F038    	bz	_SetJoinFailState
 10008                           
 10009                           ; BSR set to: 2
 10010  000188  5102               	movf	(_loRa+2)& (0+255),w,b
 10011  00018A  0B0F               	andlw	15
 10012  00018C  0A03               	xorlw	3
 10013  00018E  A4D8               	btfss	status,2,c
 10014  000190  0012               	return	
 10015                           
 10016                           ; BSR set to: 2
 10017  000192  51F1               	movf	(_loRa+241)& (0+255),w,b
 10018  000194  B4D8               	btfsc	status,2,c
 10019  000196  0012               	return	
 10020                           
 10021                           ; BSR set to: 2
 10022                           ;lorawan.c: 1158: {
 10023                           ;lorawan.c: 1159: SetJoinFailState();
 10024  000198  EFB6  F038         	goto	_SetJoinFailState	;wreg free
 10025  00019C                     l13938:
 10026                           
 10027                           ; BSR set to: 3
 10028                           ;lorawan.c: 1163: }
 10029                           ;lorawan.c: 1166: if (loRa.macStatus.macState == RX1_OPEN)
 10030  00019C  0102               	movlb	2	; () banked
 10031  00019E  5102               	movf	(_loRa+2)& (0+255),w,b
 10032  0001A0  0B0F               	andlw	15
 10033  0001A2  0A03               	xorlw	3
 10034  0001A4  E103               	bnz	l13942
 10035                           
 10036                           ; BSR set to: 2
 10037                           ;lorawan.c: 1167: {
 10038                           ;lorawan.c: 1168: SwTimerStop (loRa.joinAccept2TimerId);
 10039  0001A6  51E3               	movf	(_loRa+227)& (0+255),w,b
 10040  0001A8  EC7F  F03A         	call	_SwTimerStop
 10041  0001AC                     l13942:
 10042                           
 10043                           ;lorawan.c: 1169: }
 10044                           ;lorawan.c: 1171: JoinAccept_t *joinAccept;
 10045                           ;lorawan.c: 1172: joinAccept = (JoinAccept_t*)buffer;
 10046  0001AC  C16B  F3AF         	movff	LORAWAN_RxDone@buffer,LORAWAN_RxDone@joinAccept
 10047  0001B0  C16C  F3B0         	movff	LORAWAN_RxDone@buffer+1,LORAWAN_RxDone@joinAccept+1
 10048                           
 10049                           ;lorawan.c: 1174: loRa.activationParameters.deviceAddress.value = joinAccept->members.de
      +                          viceAddress.value;
 10050  0001B4  0103               	movlb	3	; () banked
 10051  0001B6  EE20 F007          	lfsr	2,7
 10052  0001BA  51AF               	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 10053  0001BC  26D9               	addwf	fsr2l,f,c
 10054  0001BE  51B0               	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 10055  0001C0  22DA               	addwfc	fsr2h,f,c
 10056  0001C2  CFDE F21E          	movff	postinc2,_loRa+30
 10057  0001C6  CFDE F21F          	movff	postinc2,_loRa+31
 10058  0001CA  CFDE F220          	movff	postinc2,_loRa+32
 10059  0001CE  CFDE F221          	movff	postinc2,_loRa+33
 10060                           
 10061                           ; BSR set to: 3
 10062                           ;lorawan.c: 1176: UpdateReceiveDelays (joinAccept->members.rxDelay & 0x0F);
 10063  0001D2  EE20 F00C          	lfsr	2,12
 10064  0001D6  51AF               	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 10065  0001D8  26D9               	addwf	fsr2l,f,c
 10066  0001DA  51B0               	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 10067  0001DC  22DA               	addwfc	fsr2h,f,c
 10068  0001DE  50DF               	movf	indf2,w,c
 10069  0001E0  0B0F               	andlw	15
 10070  0001E2  EC0B  F035         	call	_UpdateReceiveDelays
 10071                           
 10072                           ; BSR set to: 2
 10073                           ;lorawan.c: 1178: UpdateDLSettings(joinAccept->members.DLSettings.bits.rx2DataRate, join
      +                          Accept->members.DLSettings.bits.rx1DROffset);
 10074  0001E6  0103               	movlb	3	; () banked
 10075  0001E8  EE20 F00B          	lfsr	2,11
 10076  0001EC  51AF               	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 10077  0001EE  26D9               	addwf	fsr2l,f,c
 10078  0001F0  51B0               	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 10079  0001F2  22DA               	addwfc	fsr2h,f,c
 10080  0001F4  38DF               	swapf	223,w,c
 10081  0001F6  0B07               	andlw	7
 10082  0001F8  0100               	movlb	0	; () banked
 10083  0001FA  6F64               	movwf	UpdateDLSettings@dlRx1DrOffset& (0+255),b
 10084  0001FC  0103               	movlb	3	; () banked
 10085  0001FE  EE20 F00B          	lfsr	2,11
 10086  000202  51AF               	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 10087  000204  26D9               	addwf	fsr2l,f,c
 10088  000206  51B0               	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 10089  000208  22DA               	addwfc	fsr2h,f,c
 10090  00020A  50DF               	movf	223,w,c
 10091  00020C  0B0F               	andlw	15
 10092  00020E  ECA9  F03A         	call	_UpdateDLSettings
 10093                           
 10094                           ; BSR set to: 0
 10095                           ;lorawan.c: 1180: UpdateCfList (bufferLength, joinAccept);
 10096  000212  C3AF  F070         	movff	LORAWAN_RxDone@joinAccept,UpdateCfList@joinAccept
 10097  000216  C3B0  F071         	movff	LORAWAN_RxDone@joinAccept+1,UpdateCfList@joinAccept+1
 10098  00021A  0101               	movlb	1	; () banked
 10099  00021C  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10100  00021E  ECF0  F018         	call	_UpdateCfList
 10101                           
 10102                           ;lorawan.c: 1182: ComputeSessionKeys (joinAccept);
 10103  000222  C3AF  F0A4         	movff	LORAWAN_RxDone@joinAccept,ComputeSessionKeys@joinAcceptBuffer
 10104  000226  C3B0  F0A5         	movff	LORAWAN_RxDone@joinAccept+1,ComputeSessionKeys@joinAcceptBuffer+1
 10105  00022A  ECFD  F02E         	call	_ComputeSessionKeys	;wreg free
 10106                           
 10107                           ; BSR set to: 0
 10108                           ;lorawan.c: 1184: UpdateJoinSuccessState(0);
 10109  00022E  6AE6               	clrf	postinc1,c
 10110  000230  ECA9  F022         	call	_UpdateJoinSuccessState	;wreg free
 10111                           
 10112                           ; BSR set to: 1
 10113                           ;lorawan.c: 1186: loRa.fCntUp.value = 0;
 10114  000234  0102               	movlb	2	; () banked
 10115  000236  6B06               	clrf	(_loRa+6)& (0+255),b
 10116  000238  6B07               	clrf	(_loRa+7)& (0+255),b
 10117  00023A  6B08               	clrf	(_loRa+8)& (0+255),b
 10118  00023C  6B09               	clrf	(_loRa+9)& (0+255),b
 10119                           
 10120                           ; BSR set to: 2
 10121                           ;lorawan.c: 1187: loRa.fCntDown.value = 0;
 10122  00023E  6B0A               	clrf	(_loRa+10)& (0+255),b
 10123  000240  6B0B               	clrf	(_loRa+11)& (0+255),b
 10124  000242  6B0C               	clrf	(_loRa+12)& (0+255),b
 10125  000244  6B0D               	clrf	(_loRa+13)& (0+255),b
 10126  000246  0012               	return	
 10127  000248                     l13964:
 10128                           
 10129                           ;lorawan.c: 1191: else if ( (mhdr.bits.mType == FRAME_TYPE_DATA_UNCONFIRMED_DOWN) || (mh
      +                          dr.bits.mType == FRAME_TYPE_DATA_CONFIRMED_DOWN) )
 10130  000248  0103               	movlb	3	; () banked
 10131  00024A  39A2               	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 10132  00024C  32E8               	rrcf	wreg,f,c
 10133  00024E  0B07               	andlw	7
 10134  000250  0A03               	xorlw	3
 10135  000252  E007               	bz	l2082
 10136                           
 10137                           ; BSR set to: 3
 10138  000254  39A2               	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 10139  000256  32E8               	rrcf	wreg,f,c
 10140  000258  0B07               	andlw	7
 10141  00025A  0A05               	xorlw	5
 10142  00025C  E002 EF4C  F031    	bnz	_SetReceptionNotOkState
 10143  000262                     l2082:
 10144                           
 10145                           ; BSR set to: 3
 10146                           ;lorawan.c: 1192: {
 10147                           ;lorawan.c: 1193: loRa.crtMacCmdIndex = 0;
 10148  000262  0102               	movlb	2	; () banked
 10149  000264  6BA7               	clrf	(_loRa+167)& (0+255),b
 10150                           
 10151                           ; BSR set to: 2
 10152                           ;lorawan.c: 1195: Hdr_t *hdr;
 10153                           ;lorawan.c: 1196: hdr=(Hdr_t*)buffer;
 10154  000266  C16B  F3B2         	movff	LORAWAN_RxDone@buffer,LORAWAN_RxDone@hdr
 10155  00026A  C16C  F3B3         	movff	LORAWAN_RxDone@buffer+1,LORAWAN_RxDone@hdr+1
 10156                           
 10157                           ;lorawan.c: 1199: if ( (CLASS_C == loRa.deviceClass) && (hdr->members.devAddr.value == l
      +                          oRa.activationParameters.mcastDeviceAddress.value) && (1 == loRa.macStatus.mcastEnable) 
      +                          )
 10158  00026E  0E02               	movlw	2
 10159  000270  1912               	xorwf	(_loRa+18)& (0+255),w,b
 10160  000272  E001 D18D          	bnz	l14082
 10161                           
 10162                           ; BSR set to: 2
 10163  000276  0103               	movlb	3	; () banked
 10164  000278  EE20 F001          	lfsr	2,1
 10165  00027C  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10166  00027E  26D9               	addwf	fsr2l,f,c
 10167  000280  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10168  000282  22DA               	addwfc	fsr2h,f,c
 10169  000284  0102               	movlb	2	; () banked
 10170  000286  5162               	movf	(_loRa+98)& (0+255),w,b
 10171  000288  18DE               	xorwf	postinc2,w,c
 10172  00028A  E109               	bnz	u16011
 10173  00028C  5163               	movf	(_loRa+99)& (0+255),w,b
 10174  00028E  18DE               	xorwf	postinc2,w,c
 10175  000290  E106               	bnz	u16011
 10176  000292  5164               	movf	(_loRa+100)& (0+255),w,b
 10177  000294  18DE               	xorwf	postinc2,w,c
 10178  000296  E103               	bnz	u16011
 10179  000298  5165               	movf	(_loRa+101)& (0+255),w,b
 10180  00029A  18DE               	xorwf	postinc2,w,c
 10181  00029C  A4D8               	btfss	status,2,c
 10182  00029E                     u16011:
 10183  00029E  D178               	goto	l14082
 10184                           
 10185                           ; BSR set to: 2
 10186  0002A0  A504               	btfss	(_loRa+4)& (0+255),2,b
 10187  0002A2  D176               	goto	l14082
 10188                           
 10189                           ; BSR set to: 2
 10190                           ;lorawan.c: 1200: {
 10191                           ;lorawan.c: 1202: if (0 == CheckMcastFlags(hdr))
 10192  0002A4  C3B2  F064         	movff	LORAWAN_RxDone@hdr,CheckMcastFlags@hdr
 10193  0002A8  C3B3  F065         	movff	LORAWAN_RxDone@hdr+1,CheckMcastFlags@hdr+1
 10194  0002AC  EC70  F030         	call	_CheckMcastFlags	;wreg free
 10195  0002B0  0900               	iorlw	0
 10196  0002B2  E107               	bnz	l13982
 10197  0002B4                     l13976:
 10198                           
 10199                           ;lorawan.c: 1203: {
 10200                           ;lorawan.c: 1204: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 10201  0002B4  0102               	movlb	2	; () banked
 10202  0002B6  5102               	movf	(_loRa+2)& (0+255),w,b
 10203  0002B8  0BF0               	andlw	-16
 10204  0002BA  0909               	iorlw	9
 10205  0002BC  6F02               	movwf	(_loRa+2)& (0+255),b
 10206                           
 10207                           ; BSR set to: 2
 10208                           ;lorawan.c: 1205: LORAWAN_EnterContinuousReceive();
 10209  0002BE  EF81  F031         	goto	_LORAWAN_EnterContinuousReceive	;wreg free
 10210  0002C2                     l13982:
 10211                           
 10212                           ;lorawan.c: 1207: }
 10213                           ;lorawan.c: 1209: AssembleEncryptionBlock (1, hdr->members.fCnt, bufferLength - sizeof (
      +                          computedMic), 0x49, 1);
 10214  0002C2  0103               	movlb	3	; () banked
 10215  0002C4  EE20 F006          	lfsr	2,6
 10216  0002C8  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10217  0002CA  26D9               	addwf	fsr2l,f,c
 10218  0002CC  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10219  0002CE  22DA               	addwfc	fsr2h,f,c
 10220  0002D0  CFDE F0E8          	movff	postinc2,??_LORAWAN_RxDone
 10221  0002D4  CFDD F0E9          	movff	postdec2,??_LORAWAN_RxDone+1
 10222  0002D8  C0E8  F06E         	movff	??_LORAWAN_RxDone,AssembleEncryptionBlock@frameCounter
 10223  0002DC  C0E9  F06F         	movff	??_LORAWAN_RxDone+1,AssembleEncryptionBlock@frameCounter+1
 10224  0002E0  0100               	movlb	0	; () banked
 10225  0002E2  6B70               	clrf	(AssembleEncryptionBlock@frameCounter+2)& (0+255),b
 10226  0002E4  6B71               	clrf	(AssembleEncryptionBlock@frameCounter+3)& (0+255),b
 10227  0002E6  0101               	movlb	1	; () banked
 10228  0002E8  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10229  0002EA  0FFC               	addlw	252
 10230  0002EC  0100               	movlb	0	; () banked
 10231  0002EE  6F72               	movwf	AssembleEncryptionBlock@blockId& (0+255),b
 10232  0002F0  0E49               	movlw	73
 10233  0002F2  6F73               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 10234  0002F4  0E01               	movlw	1
 10235  0002F6  6F74               	movwf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 10236  0002F8  ECA0  F02B         	call	_AssembleEncryptionBlock
 10237                           
 10238                           ;lorawan.c: 1210: memcpy (&radioBuffer[0], aesBuffer, sizeof (aesBuffer));
 10239  0002FC  0EEF               	movlw	low _radioBuffer
 10240  0002FE  6F64               	movwf	memcpy@d1& (0+255),b
 10241  000300  0E05               	movlw	high _radioBuffer
 10242  000302  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 10243  000304  0EAB               	movlw	low _aesBuffer
 10244  000306  6F66               	movwf	memcpy@s1& (0+255),b
 10245  000308  0E01               	movlw	high _aesBuffer
 10246  00030A  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 10247  00030C  6B69               	clrf	(memcpy@n+1)& (0+255),b
 10248  00030E  0E10               	movlw	16
 10249  000310  6F68               	movwf	memcpy@n& (0+255),b
 10250  000312  ECCA  F033         	call	_memcpy	;wreg free
 10251                           
 10252                           ;lorawan.c: 1211: memcpy (&radioBuffer[16], buffer, bufferLength-sizeof(computedMic));
 10253  000316  0EFF               	movlw	low (_radioBuffer+16)
 10254  000318  6F64               	movwf	memcpy@d1& (0+255),b
 10255  00031A  0E05               	movlw	high (_radioBuffer+16)
 10256  00031C  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 10257  00031E  C16B  F066         	movff	LORAWAN_RxDone@buffer,memcpy@s1
 10258  000322  C16C  F067         	movff	LORAWAN_RxDone@buffer+1,memcpy@s1+1
 10259  000326  0EFC               	movlw	252
 10260  000328  0101               	movlb	1	; () banked
 10261  00032A  256D               	addwf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10262  00032C  0100               	movlb	0	; () banked
 10263  00032E  6F68               	movwf	memcpy@n& (0+255),b
 10264  000330  6B69               	clrf	(memcpy@n+1)& (0+255),b
 10265  000332  0EFF               	movlw	255
 10266  000334  2369               	addwfc	(memcpy@n+1)& (0+255),f,b
 10267  000336  ECCA  F033         	call	_memcpy	;wreg free
 10268                           
 10269                           ; BSR set to: 0
 10270                           ;lorawan.c: 1212: AESCmac(loRa.activationParameters.mcastNetworkSessionKey, aesBuffer, &
      +                          radioBuffer[0], bufferLength - sizeof(computedMic) + sizeof (aesBuffer));
 10271  00033A  0E66               	movlw	low (_loRa+102)
 10272  00033C  6FCC               	movwf	AESCmac@key& (0+255),b
 10273  00033E  0E02               	movlw	high (_loRa+102)
 10274  000340  6FCD               	movwf	(AESCmac@key+1)& (0+255),b
 10275  000342  0EAB               	movlw	low _aesBuffer
 10276  000344  6FCE               	movwf	AESCmac@output& (0+255),b
 10277  000346  0E01               	movlw	high _aesBuffer
 10278  000348  6FCF               	movwf	(AESCmac@output+1)& (0+255),b
 10279  00034A  0EEF               	movlw	low _radioBuffer
 10280  00034C  6FD0               	movwf	AESCmac@input& (0+255),b
 10281  00034E  0E05               	movlw	high _radioBuffer
 10282  000350  6FD1               	movwf	(AESCmac@input+1)& (0+255),b
 10283  000352  0101               	movlb	1	; () banked
 10284  000354  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10285  000356  0F0C               	addlw	12
 10286  000358  0100               	movlb	0	; () banked
 10287  00035A  6FD2               	movwf	AESCmac@size& (0+255),b
 10288  00035C  EC15  F00C         	call	_AESCmac	;wreg free
 10289                           
 10290                           ; BSR set to: 0
 10291                           ;lorawan.c: 1214: memcpy(&computedMic, aesBuffer, sizeof(computedMic));
 10292  000360  0EAB               	movlw	low LORAWAN_RxDone@computedMic
 10293  000362  6F64               	movwf	memcpy@d1& (0+255),b
 10294  000364  0E03               	movlw	high LORAWAN_RxDone@computedMic
 10295  000366  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 10296  000368  0EAB               	movlw	low _aesBuffer
 10297  00036A  6F66               	movwf	memcpy@s1& (0+255),b
 10298  00036C  0E01               	movlw	high _aesBuffer
 10299  00036E  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 10300  000370  6B69               	clrf	(memcpy@n+1)& (0+255),b
 10301  000372  0E04               	movlw	4
 10302  000374  6F68               	movwf	memcpy@n& (0+255),b
 10303  000376  ECCA  F033         	call	_memcpy	;wreg free
 10304                           
 10305                           ; BSR set to: 0
 10306                           ;lorawan.c: 1215: extractedMic = ExtractMic (&buffer[0], bufferLength);
 10307  00037A  C16B  F06E         	movff	LORAWAN_RxDone@buffer,ExtractMic@buffer
 10308  00037E  C16C  F06F         	movff	LORAWAN_RxDone@buffer+1,ExtractMic@buffer+1
 10309  000382  C16D  F070         	movff	LORAWAN_RxDone@bufferLength,ExtractMic@bufferLength
 10310  000386  EC02  F036         	call	_ExtractMic	;wreg free
 10311  00038A  C06E  F3A3         	movff	?_ExtractMic,LORAWAN_RxDone@extractedMic
 10312  00038E  C06F  F3A4         	movff	?_ExtractMic+1,LORAWAN_RxDone@extractedMic+1
 10313  000392  C070  F3A5         	movff	?_ExtractMic+2,LORAWAN_RxDone@extractedMic+2
 10314  000396  C071  F3A6         	movff	?_ExtractMic+3,LORAWAN_RxDone@extractedMic+3
 10315                           
 10316                           ; BSR set to: 0
 10317                           ;lorawan.c: 1217: if (computedMic != extractedMic)
 10318  00039A  0103               	movlb	3	; () banked
 10319  00039C  51A3               	movf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 10320  00039E  19AB               	xorwf	LORAWAN_RxDone@computedMic& (0+255),w,b
 10321  0003A0  E189               	bnz	l13976
 10322  0003A2  51A4               	movf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 10323  0003A4  19AC               	xorwf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 10324  0003A6  E186               	bnz	l13976
 10325  0003A8  51A5               	movf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 10326  0003AA  19AD               	xorwf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 10327  0003AC  E183               	bnz	l13976
 10328  0003AE  51A6               	movf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 10329  0003B0  19AE               	xorwf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 10330  0003B2  E180               	bnz	l13976
 10331                           
 10332                           ; BSR set to: 3
 10333                           ;lorawan.c: 1222: }
 10334                           ;lorawan.c: 1224: if (hdr->members.fCnt >= loRa.fMcastCntDown.members.valueLow)
 10335  0003B4  EE20 F006          	lfsr	2,6
 10336  0003B8  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10337  0003BA  26D9               	addwf	fsr2l,f,c
 10338  0003BC  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10339  0003BE  22DA               	addwfc	fsr2h,f,c
 10340  0003C0  0102               	movlb	2	; () banked
 10341  0003C2  510E               	movf	(_loRa+14)& (0+255),w,b
 10342  0003C4  5CDE               	subwf	postinc2,w,c
 10343  0003C6  510F               	movf	(_loRa+15)& (0+255),w,b
 10344  0003C8  58DE               	subwfb	postinc2,w,c
 10345  0003CA  E336               	bnc	l14016
 10346                           
 10347                           ; BSR set to: 2
 10348                           ;lorawan.c: 1225: {
 10349                           ;lorawan.c: 1226: if ( (hdr->members.fCnt - loRa.fMcastCntDown.members.valueLow) > loRa.
      +                          protocolParameters.maxMultiFcntGap )
 10350  0003CC  0103               	movlb	3	; () banked
 10351  0003CE  EE20 F006          	lfsr	2,6
 10352  0003D2  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10353  0003D4  26D9               	addwf	fsr2l,f,c
 10354  0003D6  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10355  0003D8  22DA               	addwfc	fsr2h,f,c
 10356  0003DA  CFDE F0E8          	movff	postinc2,??_LORAWAN_RxDone
 10357  0003DE  CFDD F0E9          	movff	postdec2,??_LORAWAN_RxDone+1
 10358  0003E2  0102               	movlb	2	; () banked
 10359  0003E4  510E               	movf	(_loRa+14)& (0+255),w,b
 10360  0003E6  0100               	movlb	0	; () banked
 10361  0003E8  5FE8               	subwf	??_LORAWAN_RxDone& (0+255),f,b
 10362  0003EA  0102               	movlb	2	; () banked
 10363  0003EC  510F               	movf	(_loRa+15)& (0+255),w,b
 10364  0003EE  0100               	movlb	0	; () banked
 10365  0003F0  5BE9               	subwfb	(??_LORAWAN_RxDone+1)& (0+255),f,b
 10366  0003F2  51E8               	movf	??_LORAWAN_RxDone& (0+255),w,b
 10367  0003F4  0102               	movlb	2	; () banked
 10368  0003F6  5D9E               	subwf	(_loRa+158)& (0+255),w,b
 10369  0003F8  0100               	movlb	0	; () banked
 10370  0003FA  51E9               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 10371  0003FC  0102               	movlb	2	; () banked
 10372  0003FE  599F               	subwfb	(_loRa+159)& (0+255),w,b
 10373  000400  E20F               	bc	l14014
 10374  000402                     l14002:
 10375                           
 10376                           ; BSR set to: 2
 10377                           ;lorawan.c: 1227: {
 10378                           ;lorawan.c: 1228: if (rxPayload.RxAppData != (0))
 10379  000402  0101               	movlb	1	; () banked
 10380  000404  516E               	movf	_rxPayload& (0+255),w,b
 10381  000406  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 10382  000408  E101 D754          	bz	l13976
 10383                           
 10384                           ; BSR set to: 1
 10385                           ;lorawan.c: 1229: {
 10386                           ;lorawan.c: 1230: rxPayload.RxAppData ((0), 0, MCAST_RE_KEYING_NEEDED);
 10387  00040C  0E00               	movlw	0
 10388  00040E  0100               	movlb	0	; () banked
 10389  000410  6F64               	movwf	RxDataDone@pData& (0+255),b
 10390  000412  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
 10391  000414  6F66               	movwf	RxDataDone@dataLength& (0+255),b
 10392  000416  0E05               	movlw	5
 10393  000418  6F67               	movwf	RxDataDone@status& (0+255),b
 10394  00041A  D801               	call	u16088
 10395  00041C  D74B               	goto	l13976
 10396  00041E                     u16088:
 10397  00041E  D0AD               	goto	u16188
 10398  000420                     l14014:
 10399                           
 10400                           ; BSR set to: 2
 10401                           ;lorawan.c: 1237: else
 10402                           ;lorawan.c: 1238: {
 10403                           ;lorawan.c: 1239: loRa.fMcastCntDown.members.valueLow = hdr->members.fCnt;
 10404  000420  0103               	movlb	3	; () banked
 10405  000422  EE20 F006          	lfsr	2,6
 10406  000426  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10407  000428  26D9               	addwf	fsr2l,f,c
 10408  00042A  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10409  00042C  22DA               	addwfc	fsr2h,f,c
 10410  00042E  CFDE F20E          	movff	postinc2,_loRa+14
 10411  000432  CFDD F20F          	movff	postdec2,_loRa+15
 10412  000436  D013               	goto	l14034
 10413  000438                     l14016:
 10414                           
 10415                           ; BSR set to: 2
 10416                           ;lorawan.c: 1242: else
 10417                           ;lorawan.c: 1243: {
 10418                           ;lorawan.c: 1244: if ( (0 == hdr->members.fCnt) && (0xFFFF == loRa.fMcastCntDown.members
      +                          .valueLow) )
 10419  000438  0103               	movlb	3	; () banked
 10420  00043A  EE20 F006          	lfsr	2,6
 10421  00043E  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10422  000440  26D9               	addwf	fsr2l,f,c
 10423  000442  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10424  000444  22DA               	addwfc	fsr2h,f,c
 10425  000446  50DE               	movf	postinc2,w,c
 10426  000448  10DE               	iorwf	postinc2,w,c
 10427  00044A  E1DB               	bnz	l14002
 10428                           
 10429                           ; BSR set to: 3
 10430  00044C  0102               	movlb	2	; () banked
 10431  00044E  290E               	incf	(_loRa+14)& (0+255),w,b
 10432  000450  E1D8               	bnz	l14002
 10433  000452  290F               	incf	(_loRa+15)& (0+255),w,b
 10434  000454  E1D6               	bnz	l14002
 10435                           
 10436                           ; BSR set to: 2
 10437                           ;lorawan.c: 1245: {
 10438                           ;lorawan.c: 1246: loRa.fMcastCntDown.members.valueLow = 0;
 10439  000456  6B0E               	clrf	(_loRa+14)& (0+255),b
 10440  000458  6B0F               	clrf	(_loRa+15)& (0+255),b
 10441                           
 10442                           ; BSR set to: 2
 10443                           ;lorawan.c: 1247: loRa.fMcastCntDown.members.valueHigh ++;
 10444  00045A  4B10               	infsnz	(_loRa+16)& (0+255),f,b
 10445  00045C  2B11               	incf	(_loRa+17)& (0+255),f,b
 10446  00045E                     l14034:
 10447                           
 10448                           ;lorawan.c: 1259: }
 10449                           ;lorawan.c: 1260: }
 10450                           ;lorawan.c: 1262: if (loRa.fMcastCntDown.value == (4294967295UL))
 10451  00045E  0102               	movlb	2	; () banked
 10452  000460  290E               	incf	(_loRa+14)& (0+255),w,b
 10453  000462  E107               	bnz	l14046
 10454  000464  290F               	incf	(_loRa+15)& (0+255),w,b
 10455  000466  E105               	bnz	l14046
 10456  000468  2910               	incf	(_loRa+16)& (0+255),w,b
 10457  00046A  E103               	bnz	l14046
 10458  00046C  2911               	incf	(_loRa+17)& (0+255),w,b
 10459  00046E  E101               	bnz	l14046
 10460  000470  D7C8               	goto	l14002
 10461  000472                     l14046:
 10462                           
 10463                           ; BSR set to: 2
 10464                           ;lorawan.c: 1272: }
 10465                           ;lorawan.c: 1274: if (CLASS_C_RX2_1_OPEN == loRa.macStatus.macState)
 10466  000472  5102               	movf	(_loRa+2)& (0+255),w,b
 10467  000474  0B0F               	andlw	15
 10468  000476  0A08               	xorlw	8
 10469  000478  E108               	bnz	l14050
 10470                           
 10471                           ; BSR set to: 2
 10472                           ;lorawan.c: 1275: {
 10473                           ;lorawan.c: 1276: SwTimerStop (loRa.receiveWindow1TimerId);
 10474  00047A  51E4               	movf	(_loRa+228)& (0+255),w,b
 10475  00047C  EC7F  F03A         	call	_SwTimerStop
 10476                           
 10477                           ;lorawan.c: 1277: SwTimerStop (loRa.receiveWindow2TimerId);
 10478  000480  0102               	movlb	2	; () banked
 10479  000482  51E5               	movf	(_loRa+229)& (0+255),w,b
 10480  000484  EC7F  F03A         	call	_SwTimerStop
 10481                           
 10482                           ;lorawan.c: 1278: }
 10483  000488  D007               	goto	l14054
 10484  00048A                     l14050:
 10485                           
 10486                           ; BSR set to: 2
 10487                           ;lorawan.c: 1279: else if (RX1_OPEN == loRa.macStatus.macState)
 10488  00048A  5102               	movf	(_loRa+2)& (0+255),w,b
 10489  00048C  0B0F               	andlw	15
 10490  00048E  0A03               	xorlw	3
 10491  000490  E103               	bnz	l14054
 10492                           
 10493                           ; BSR set to: 2
 10494                           ;lorawan.c: 1280: {
 10495                           ;lorawan.c: 1281: SwTimerStop (loRa.receiveWindow2TimerId);
 10496  000492  51E5               	movf	(_loRa+229)& (0+255),w,b
 10497  000494  EC7F  F03A         	call	_SwTimerStop
 10498  000498                     l14054:
 10499                           
 10500                           ;lorawan.c: 1282: }
 10501                           ;lorawan.c: 1284: buffer = buffer + 8;
 10502  000498  0E08               	movlw	8
 10503  00049A  0101               	movlb	1	; () banked
 10504  00049C  276B               	addwf	LORAWAN_RxDone@buffer& (0+255),f,b
 10505  00049E  0E00               	movlw	0
 10506  0004A0  236C               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 10507                           
 10508                           ; BSR set to: 1
 10509                           ;lorawan.c: 1286: if ( (sizeof(extractedMic) + hdr->members.fCtrl.fOptsLen + 8) != buffe
      +                          rLength)
 10510  0004A2  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10511  0004A4  0100               	movlb	0	; () banked
 10512  0004A6  6FE8               	movwf	??_LORAWAN_RxDone& (0+255),b
 10513  0004A8  6BE9               	clrf	(??_LORAWAN_RxDone+1)& (0+255),b
 10514  0004AA  0103               	movlb	3	; () banked
 10515  0004AC  EE20 F005          	lfsr	2,5
 10516  0004B0  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10517  0004B2  26D9               	addwf	fsr2l,f,c
 10518  0004B4  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10519  0004B6  22DA               	addwfc	fsr2h,f,c
 10520  0004B8  50DF               	movf	223,w,c
 10521  0004BA  0B0F               	andlw	15
 10522  0004BC  0100               	movlb	0	; () banked
 10523  0004BE  6FEA               	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 10524  0004C0  6BEB               	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 10525  0004C2  0E0C               	movlw	12
 10526  0004C4  27EA               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 10527  0004C6  0E00               	movlw	0
 10528  0004C8  23EB               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 10529  0004CA  51E8               	movf	??_LORAWAN_RxDone& (0+255),w,b
 10530  0004CC  19EA               	xorwf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 10531  0004CE  E103               	bnz	u16160
 10532  0004D0  51E9               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 10533  0004D2  19EB               	xorwf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 10534  0004D4  E03A               	bz	l2099
 10535  0004D6                     u16160:
 10536                           
 10537                           ; BSR set to: 0
 10538                           ;lorawan.c: 1287: {
 10539                           ;lorawan.c: 1288: fPort = *(buffer++);
 10540  0004D6  C16B  FFD9         	movff	LORAWAN_RxDone@buffer,fsr2l
 10541  0004DA  C16C  FFDA         	movff	LORAWAN_RxDone@buffer+1,fsr2h
 10542  0004DE  50DF               	movf	indf2,w,c
 10543  0004E0  0103               	movlb	3	; () banked
 10544  0004E2  6FA0               	movwf	LORAWAN_RxDone@fPort& (0+255),b
 10545                           
 10546                           ; BSR set to: 3
 10547  0004E4  0101               	movlb	1	; () banked
 10548  0004E6  4B6B               	infsnz	LORAWAN_RxDone@buffer& (0+255),f,b
 10549  0004E8  2B6C               	incf	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 10550                           
 10551                           ; BSR set to: 1
 10552                           ;lorawan.c: 1290: frmPayloadLength = bufferLength - 8 - sizeof (extractedMic);
 10553  0004EA  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10554  0004EC  0FF4               	addlw	244
 10555  0004EE  0103               	movlb	3	; () banked
 10556  0004F0  6FB1               	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 10557                           
 10558                           ; BSR set to: 3
 10559                           ;lorawan.c: 1291: bufferIndex = 16 + 9;
 10560  0004F2  0E19               	movlw	25
 10561  0004F4  6FA7               	movwf	LORAWAN_RxDone@bufferIndex& (0+255),b
 10562                           
 10563                           ; BSR set to: 3
 10564                           ;lorawan.c: 1293: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fMcastCntDown
      +                          .value, loRa.activationParameters.mcastApplicationSessionKey, bufferIndex, radioBuffer, 
      +                          1);
 10565  0004F6  C16B  F0A4         	movff	LORAWAN_RxDone@buffer,EncryptFRMPayload@buffer
 10566  0004FA  C16C  F0A5         	movff	LORAWAN_RxDone@buffer+1,EncryptFRMPayload@buffer+1
 10567  0004FE  05B1               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 10568  000500  0100               	movlb	0	; () banked
 10569  000502  6FA6               	movwf	EncryptFRMPayload@bufferLength& (0+255),b
 10570  000504  0E01               	movlw	1
 10571  000506  6FA7               	movwf	EncryptFRMPayload@dir& (0+255),b
 10572  000508  C20E  F0A8         	movff	_loRa+14,EncryptFRMPayload@frameCounter
 10573  00050C  C20F  F0A9         	movff	_loRa+15,EncryptFRMPayload@frameCounter+1
 10574  000510  C210  F0AA         	movff	_loRa+16,EncryptFRMPayload@frameCounter+2
 10575  000514  C211  F0AB         	movff	_loRa+17,EncryptFRMPayload@frameCounter+3
 10576  000518  0E76               	movlw	low (_loRa+118)
 10577  00051A  6FAC               	movwf	EncryptFRMPayload@key& (0+255),b
 10578  00051C  0E02               	movlw	high (_loRa+118)
 10579  00051E  6FAD               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 10580  000520  C3A7  F0AE         	movff	LORAWAN_RxDone@bufferIndex,EncryptFRMPayload@macBufferIndex
 10581  000524  0EEF               	movlw	low _radioBuffer
 10582  000526  6FAF               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 10583  000528  0E05               	movlw	high _radioBuffer
 10584  00052A  6FB0               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 10585  00052C  0E01               	movlw	1
 10586  00052E  6FB1               	movwf	EncryptFRMPayload@multicastStatus& (0+255),b
 10587  000530  ECC1  F020         	call	_EncryptFRMPayload	;wreg free
 10588                           
 10589                           ; BSR set to: 0
 10590                           ;lorawan.c: 1294: packet = buffer - 1;
 10591  000534  0EFF               	movlw	255
 10592  000536  0101               	movlb	1	; () banked
 10593  000538  256B               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 10594  00053A  0103               	movlb	3	; () banked
 10595  00053C  6FA9               	movwf	LORAWAN_RxDone@packet& (0+255),b
 10596  00053E  0EFF               	movlw	255
 10597  000540  0101               	movlb	1	; () banked
 10598  000542  216C               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 10599  000544  0103               	movlb	3	; () banked
 10600  000546  6FAA               	movwf	(LORAWAN_RxDone@packet+1)& (0+255),b
 10601                           
 10602                           ;lorawan.c: 1295: }
 10603  000548  D004               	goto	l2100
 10604  00054A                     l2099:
 10605                           
 10606                           ; BSR set to: 0
 10607                           ;lorawan.c: 1296: else
 10608                           ;lorawan.c: 1297: {
 10609                           ;lorawan.c: 1298: frmPayloadLength = 0;
 10610  00054A  0103               	movlb	3	; () banked
 10611  00054C  6BB1               	clrf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 10612                           
 10613                           ;lorawan.c: 1299: packet = (0);
 10614  00054E  6BA9               	clrf	LORAWAN_RxDone@packet& (0+255),b
 10615  000550  6BAA               	clrf	(LORAWAN_RxDone@packet+1)& (0+255),b
 10616  000552                     l2100:
 10617                           
 10618                           ; BSR set to: 3
 10619                           ;lorawan.c: 1300: }
 10620                           ;lorawan.c: 1302: loRa.macStatus.rxDone = 1;
 10621  000552  0102               	movlb	2	; () banked
 10622  000554  8303               	bsf	(_loRa+3)& (0+255),1,b
 10623                           
 10624                           ; BSR set to: 2
 10625                           ;lorawan.c: 1303: loRa.macStatus.macState = IDLE;
 10626  000556  0EF0               	movlw	-16
 10627  000558  1702               	andwf	(_loRa+2)& (0+255),f,b
 10628                           
 10629                           ; BSR set to: 2
 10630                           ;lorawan.c: 1305: if (rxPayload.RxAppData != (0))
 10631  00055A  0101               	movlb	1	; () banked
 10632  00055C  516E               	movf	_rxPayload& (0+255),w,b
 10633  00055E  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 10634  000560  E101 D6A8          	bz	l13976
 10635                           
 10636                           ; BSR set to: 1
 10637                           ;lorawan.c: 1306: {
 10638                           ;lorawan.c: 1307: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 10639  000564  C3A9  F064         	movff	LORAWAN_RxDone@packet,RxDataDone@pData
 10640  000568  C3AA  F065         	movff	LORAWAN_RxDone@packet+1,RxDataDone@pData+1
 10641  00056C  C3B1  F066         	movff	LORAWAN_RxDone@frmPayloadLength,RxDataDone@dataLength
 10642  000570  0E01               	movlw	1
 10643  000572  0100               	movlb	0	; () banked
 10644  000574  6F67               	movwf	RxDataDone@status& (0+255),b
 10645  000576  D801               	call	u16188
 10646  000578  D69D               	goto	l13976
 10647  00057A                     u16188:
 10648  00057A  0005               	push	
 10649  00057C  0101               	movlb	1	; () banked
 10650  00057E  6EFA               	movwf	pclath,c
 10651  000580  516E               	movf	_rxPayload& (0+255),w,b
 10652  000582  6EFD               	movwf	tosl,c
 10653  000584  516F               	movf	(_rxPayload+1)& (0+255),w,b
 10654  000586  6EFE               	movwf	tosh,c
 10655  000588  50F8               	movf	tblptru,w,c
 10656  00058A  6EFF               	movwf	tosu,c
 10657  00058C  50FA               	movf	pclath,w,c
 10658  00058E  0012               	return		;indir
 10659  000590                     l14082:
 10660                           
 10661                           ; BSR set to: 2
 10662                           ;lorawan.c: 1313: }
 10663                           ;lorawan.c: 1316: if (hdr->members.devAddr.value != loRa.activationParameters.deviceAddr
      +                          ess.value)
 10664  000590  0103               	movlb	3	; () banked
 10665  000592  EE20 F001          	lfsr	2,1
 10666  000596  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10667  000598  26D9               	addwf	fsr2l,f,c
 10668  00059A  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10669  00059C  22DA               	addwfc	fsr2h,f,c
 10670  00059E  0102               	movlb	2	; () banked
 10671  0005A0  511E               	movf	(_loRa+30)& (0+255),w,b
 10672  0005A2  18DE               	xorwf	postinc2,w,c
 10673  0005A4  E109               	bnz	u16190
 10674  0005A6  511F               	movf	(_loRa+31)& (0+255),w,b
 10675  0005A8  18DE               	xorwf	postinc2,w,c
 10676  0005AA  E106               	bnz	u16190
 10677  0005AC  5120               	movf	(_loRa+32)& (0+255),w,b
 10678  0005AE  18DE               	xorwf	postinc2,w,c
 10679  0005B0  E103               	bnz	u16190
 10680  0005B2  5121               	movf	(_loRa+33)& (0+255),w,b
 10681  0005B4  18DE               	xorwf	postinc2,w,c
 10682  0005B6  E008               	bz	l14094
 10683  0005B8                     u16190:
 10684                           
 10685                           ; BSR set to: 2
 10686                           ;lorawan.c: 1317: {
 10687                           ;lorawan.c: 1318: SetReceptionNotOkState();
 10688  0005B8  EC4C  F031         	call	_SetReceptionNotOkState	;wreg free
 10689  0005BC                     l14086:
 10690                           
 10691                           ;lorawan.c: 1319: if (CLASS_C == loRa.deviceClass)
 10692  0005BC  0E02               	movlw	2
 10693  0005BE  0102               	movlb	2	; () banked
 10694  0005C0                     L5:
 10695  0005C0  1912               	xorwf	(_loRa+18)& (0+255),w,b
 10696  0005C2  E101 D677          	bz	l13976
 10697  0005C6  0012               	return	
 10698  0005C8                     l14094:
 10699                           
 10700                           ; BSR set to: 2
 10701                           ;lorawan.c: 1325: }
 10702                           ;lorawan.c: 1327: AssembleEncryptionBlock (1, hdr->members.fCnt, bufferLength - sizeof (
      +                          computedMic), 0x49, 0);
 10703  0005C8  0103               	movlb	3	; () banked
 10704  0005CA  EE20 F006          	lfsr	2,6
 10705  0005CE  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10706  0005D0  26D9               	addwf	fsr2l,f,c
 10707  0005D2  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10708  0005D4  22DA               	addwfc	fsr2h,f,c
 10709  0005D6  CFDE F0E8          	movff	postinc2,??_LORAWAN_RxDone
 10710  0005DA  CFDD F0E9          	movff	postdec2,??_LORAWAN_RxDone+1
 10711  0005DE  C0E8  F06E         	movff	??_LORAWAN_RxDone,AssembleEncryptionBlock@frameCounter
 10712  0005E2  C0E9  F06F         	movff	??_LORAWAN_RxDone+1,AssembleEncryptionBlock@frameCounter+1
 10713  0005E6  0100               	movlb	0	; () banked
 10714  0005E8  6B70               	clrf	(AssembleEncryptionBlock@frameCounter+2)& (0+255),b
 10715  0005EA  6B71               	clrf	(AssembleEncryptionBlock@frameCounter+3)& (0+255),b
 10716  0005EC  0101               	movlb	1	; () banked
 10717  0005EE  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10718  0005F0  0FFC               	addlw	252
 10719  0005F2  0100               	movlb	0	; () banked
 10720  0005F4  6F72               	movwf	AssembleEncryptionBlock@blockId& (0+255),b
 10721  0005F6  0E49               	movlw	73
 10722  0005F8  6F73               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 10723  0005FA  6B74               	clrf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 10724  0005FC  0E01               	movlw	1
 10725  0005FE  ECA0  F02B         	call	_AssembleEncryptionBlock
 10726                           
 10727                           ;lorawan.c: 1328: memcpy (&radioBuffer[0], aesBuffer, sizeof (aesBuffer));
 10728  000602  0EEF               	movlw	low _radioBuffer
 10729  000604  6F64               	movwf	memcpy@d1& (0+255),b
 10730  000606  0E05               	movlw	high _radioBuffer
 10731  000608  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 10732  00060A  0EAB               	movlw	low _aesBuffer
 10733  00060C  6F66               	movwf	memcpy@s1& (0+255),b
 10734  00060E  0E01               	movlw	high _aesBuffer
 10735  000610  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 10736  000612  6B69               	clrf	(memcpy@n+1)& (0+255),b
 10737  000614  0E10               	movlw	16
 10738  000616  6F68               	movwf	memcpy@n& (0+255),b
 10739  000618  ECCA  F033         	call	_memcpy	;wreg free
 10740                           
 10741                           ;lorawan.c: 1329: memcpy (&radioBuffer[16], buffer, bufferLength-sizeof(computedMic));
 10742  00061C  0EFF               	movlw	low (_radioBuffer+16)
 10743  00061E  6F64               	movwf	memcpy@d1& (0+255),b
 10744  000620  0E05               	movlw	high (_radioBuffer+16)
 10745  000622  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 10746  000624  C16B  F066         	movff	LORAWAN_RxDone@buffer,memcpy@s1
 10747  000628  C16C  F067         	movff	LORAWAN_RxDone@buffer+1,memcpy@s1+1
 10748  00062C  0EFC               	movlw	252
 10749  00062E  0101               	movlb	1	; () banked
 10750  000630  256D               	addwf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10751  000632  0100               	movlb	0	; () banked
 10752  000634  6F68               	movwf	memcpy@n& (0+255),b
 10753  000636  6B69               	clrf	(memcpy@n+1)& (0+255),b
 10754  000638  0EFF               	movlw	255
 10755  00063A  2369               	addwfc	(memcpy@n+1)& (0+255),f,b
 10756  00063C  ECCA  F033         	call	_memcpy	;wreg free
 10757                           
 10758                           ; BSR set to: 0
 10759                           ;lorawan.c: 1330: AESCmac(loRa.activationParameters.networkSessionKey, aesBuffer, &radio
      +                          Buffer[0], bufferLength - sizeof(computedMic) + sizeof (aesBuffer));
 10760  000640  0E22               	movlw	low (_loRa+34)
 10761  000642  6FCC               	movwf	AESCmac@key& (0+255),b
 10762  000644  0E02               	movlw	high (_loRa+34)
 10763  000646  6FCD               	movwf	(AESCmac@key+1)& (0+255),b
 10764  000648  0EAB               	movlw	low _aesBuffer
 10765  00064A  6FCE               	movwf	AESCmac@output& (0+255),b
 10766  00064C  0E01               	movlw	high _aesBuffer
 10767  00064E  6FCF               	movwf	(AESCmac@output+1)& (0+255),b
 10768  000650  0EEF               	movlw	low _radioBuffer
 10769  000652  6FD0               	movwf	AESCmac@input& (0+255),b
 10770  000654  0E05               	movlw	high _radioBuffer
 10771  000656  6FD1               	movwf	(AESCmac@input+1)& (0+255),b
 10772  000658  0101               	movlb	1	; () banked
 10773  00065A  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10774  00065C  0F0C               	addlw	12
 10775  00065E  0100               	movlb	0	; () banked
 10776  000660  6FD2               	movwf	AESCmac@size& (0+255),b
 10777  000662  EC15  F00C         	call	_AESCmac	;wreg free
 10778                           
 10779                           ; BSR set to: 0
 10780                           ;lorawan.c: 1332: memcpy(&computedMic, aesBuffer, sizeof(computedMic));
 10781  000666  0EAB               	movlw	low LORAWAN_RxDone@computedMic
 10782  000668  6F64               	movwf	memcpy@d1& (0+255),b
 10783  00066A  0E03               	movlw	high LORAWAN_RxDone@computedMic
 10784  00066C  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 10785  00066E  0EAB               	movlw	low _aesBuffer
 10786  000670  6F66               	movwf	memcpy@s1& (0+255),b
 10787  000672  0E01               	movlw	high _aesBuffer
 10788  000674  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 10789  000676  6B69               	clrf	(memcpy@n+1)& (0+255),b
 10790  000678  0E04               	movlw	4
 10791  00067A  6F68               	movwf	memcpy@n& (0+255),b
 10792  00067C  ECCA  F033         	call	_memcpy	;wreg free
 10793                           
 10794                           ; BSR set to: 0
 10795                           ;lorawan.c: 1333: extractedMic = ExtractMic (&buffer[0], bufferLength);
 10796  000680  C16B  F06E         	movff	LORAWAN_RxDone@buffer,ExtractMic@buffer
 10797  000684  C16C  F06F         	movff	LORAWAN_RxDone@buffer+1,ExtractMic@buffer+1
 10798  000688  C16D  F070         	movff	LORAWAN_RxDone@bufferLength,ExtractMic@bufferLength
 10799  00068C  EC02  F036         	call	_ExtractMic	;wreg free
 10800  000690  C06E  F3A3         	movff	?_ExtractMic,LORAWAN_RxDone@extractedMic
 10801  000694  C06F  F3A4         	movff	?_ExtractMic+1,LORAWAN_RxDone@extractedMic+1
 10802  000698  C070  F3A5         	movff	?_ExtractMic+2,LORAWAN_RxDone@extractedMic+2
 10803  00069C  C071  F3A6         	movff	?_ExtractMic+3,LORAWAN_RxDone@extractedMic+3
 10804                           
 10805                           ; BSR set to: 0
 10806                           ;lorawan.c: 1336: if (computedMic != extractedMic)
 10807  0006A0  0103               	movlb	3	; () banked
 10808  0006A2  51A3               	movf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 10809  0006A4  19AB               	xorwf	LORAWAN_RxDone@computedMic& (0+255),w,b
 10810  0006A6  E109               	bnz	u16210
 10811  0006A8  51A4               	movf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 10812  0006AA  19AC               	xorwf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 10813  0006AC  E106               	bnz	u16210
 10814  0006AE  51A5               	movf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 10815  0006B0  19AD               	xorwf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 10816  0006B2  E103               	bnz	u16210
 10817  0006B4  51A6               	movf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 10818  0006B6  19AE               	xorwf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 10819  0006B8  E003               	bz	l14114
 10820  0006BA                     u16210:
 10821                           
 10822                           ; BSR set to: 3
 10823                           ;lorawan.c: 1337: {
 10824                           ;lorawan.c: 1338: SetReceptionNotOkState();
 10825  0006BA  EC4C  F031         	call	_SetReceptionNotOkState	;wreg free
 10826  0006BE  D77E               	goto	l14086
 10827  0006C0                     l14114:
 10828                           
 10829                           ; BSR set to: 3
 10830                           ;lorawan.c: 1345: }
 10831                           ;lorawan.c: 1348: if (hdr->members.fCnt >= loRa.fCntDown.members.valueLow)
 10832  0006C0  EE20 F006          	lfsr	2,6
 10833  0006C4  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10834  0006C6  26D9               	addwf	fsr2l,f,c
 10835  0006C8  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10836  0006CA  22DA               	addwfc	fsr2h,f,c
 10837  0006CC  0102               	movlb	2	; () banked
 10838  0006CE  510A               	movf	(_loRa+10)& (0+255),w,b
 10839  0006D0  5CDE               	subwf	postinc2,w,c
 10840  0006D2  510B               	movf	(_loRa+11)& (0+255),w,b
 10841  0006D4  58DE               	subwfb	postinc2,w,c
 10842  0006D6  E346               	bnc	l14144
 10843                           
 10844                           ; BSR set to: 2
 10845                           ;lorawan.c: 1349: {
 10846                           ;lorawan.c: 1350: if ((hdr->members.fCnt - loRa.fCntDown.members.valueLow) > loRa.protoc
      +                          olParameters.maxFcntGap)
 10847  0006D8  0103               	movlb	3	; () banked
 10848  0006DA  EE20 F006          	lfsr	2,6
 10849  0006DE  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10850  0006E0  26D9               	addwf	fsr2l,f,c
 10851  0006E2  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10852  0006E4  22DA               	addwfc	fsr2h,f,c
 10853  0006E6  CFDE F0E8          	movff	postinc2,??_LORAWAN_RxDone
 10854  0006EA  CFDD F0E9          	movff	postdec2,??_LORAWAN_RxDone+1
 10855  0006EE  0102               	movlb	2	; () banked
 10856  0006F0  510A               	movf	(_loRa+10)& (0+255),w,b
 10857  0006F2  0100               	movlb	0	; () banked
 10858  0006F4  5FE8               	subwf	??_LORAWAN_RxDone& (0+255),f,b
 10859  0006F6  0102               	movlb	2	; () banked
 10860  0006F8  510B               	movf	(_loRa+11)& (0+255),w,b
 10861  0006FA  0100               	movlb	0	; () banked
 10862  0006FC  5BE9               	subwfb	(??_LORAWAN_RxDone+1)& (0+255),f,b
 10863  0006FE  51E8               	movf	??_LORAWAN_RxDone& (0+255),w,b
 10864  000700  0102               	movlb	2	; () banked
 10865  000702  5D9C               	subwf	(_loRa+156)& (0+255),w,b
 10866  000704  0100               	movlb	0	; () banked
 10867  000706  51E9               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 10868  000708  0102               	movlb	2	; () banked
 10869  00070A  599D               	subwfb	(_loRa+157)& (0+255),w,b
 10870  00070C  E21F               	bc	l14142
 10871                           
 10872                           ; BSR set to: 2
 10873                           ;lorawan.c: 1351: {
 10874                           ;lorawan.c: 1352: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 10875  00070E  9100               	bcf	_loRa& (0+255),0,b
 10876                           
 10877                           ; BSR set to: 2
 10878                           ;lorawan.c: 1353: loRa.macStatus.macState = IDLE;
 10879  000710  0EF0               	movlw	-16
 10880  000712  1702               	andwf	(_loRa+2)& (0+255),f,b
 10881                           
 10882                           ; BSR set to: 2
 10883                           ;lorawan.c: 1354: if (rxPayload.RxAppData != (0))
 10884  000714  0101               	movlb	1	; () banked
 10885  000716  516E               	movf	_rxPayload& (0+255),w,b
 10886  000718  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 10887  00071A  E015               	bz	l14128
 10888                           
 10889                           ; BSR set to: 1
 10890                           ;lorawan.c: 1355: {
 10891                           ;lorawan.c: 1356: loRa.lorawanMacStatus.synchronization = 0;
 10892  00071C  0102               	movlb	2	; () banked
 10893  00071E  9B00               	bcf	_loRa& (0+255),5,b
 10894                           
 10895                           ; BSR set to: 2
 10896                           ;lorawan.c: 1357: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 10897  000720  0E00               	movlw	0
 10898  000722  0100               	movlb	0	; () banked
 10899  000724  6F64               	movwf	RxDataDone@pData& (0+255),b
 10900  000726  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
 10901  000728  6F66               	movwf	RxDataDone@dataLength& (0+255),b
 10902  00072A  6F67               	movwf	RxDataDone@status& (0+255),b
 10903  00072C  D801               	call	u16268
 10904  00072E  D00B               	goto	l14128
 10905  000730                     u16268:
 10906  000730  0005               	push	
 10907  000732  0101               	movlb	1	; () banked
 10908  000734  6EFA               	movwf	pclath,c
 10909  000736  516E               	movf	_rxPayload& (0+255),w,b
 10910  000738  6EFD               	movwf	tosl,c
 10911  00073A  516F               	movf	(_rxPayload+1)& (0+255),w,b
 10912  00073C  6EFE               	movwf	tosh,c
 10913  00073E  50F8               	movf	tblptru,w,c
 10914  000740  6EFF               	movwf	tosu,c
 10915  000742  50FA               	movf	pclath,w,c
 10916  000744  0012               	return		;indir
 10917  000746                     l14128:
 10918                           
 10919                           ; BSR set to: 1
 10920                           ;lorawan.c: 1358: }
 10921                           ;lorawan.c: 1359: loRa.macStatus.rxDone = 0;
 10922  000746  0102               	movlb	2	; () banked
 10923  000748  9303               	bcf	(_loRa+3)& (0+255),1,b
 10924  00074A  D036               	goto	l14164
 10925  00074C                     l14142:
 10926                           
 10927                           ; BSR set to: 2
 10928                           ;lorawan.c: 1370: else
 10929                           ;lorawan.c: 1371: {
 10930                           ;lorawan.c: 1372: loRa.fCntDown.members.valueLow = hdr->members.fCnt;
 10931  00074C  0103               	movlb	3	; () banked
 10932  00074E  EE20 F006          	lfsr	2,6
 10933  000752  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10934  000754  26D9               	addwf	fsr2l,f,c
 10935  000756  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10936  000758  22DA               	addwfc	fsr2h,f,c
 10937  00075A  CFDE F20A          	movff	postinc2,_loRa+10
 10938  00075E  CFDD F20B          	movff	postdec2,_loRa+11
 10939  000762  D021               	goto	l14162
 10940  000764                     l14144:
 10941                           
 10942                           ; BSR set to: 2
 10943                           ;lorawan.c: 1375: else
 10944                           ;lorawan.c: 1376: {
 10945                           ;lorawan.c: 1377: if((hdr->members.fCnt == 0) && (loRa.fCntDown.members.valueLow == 0xFF
      +                          FF))
 10946  000764  0103               	movlb	3	; () banked
 10947  000766  EE20 F006          	lfsr	2,6
 10948  00076A  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10949  00076C  26D9               	addwf	fsr2l,f,c
 10950  00076E  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10951  000770  22DA               	addwfc	fsr2h,f,c
 10952  000772  50DE               	movf	postinc2,w,c
 10953  000774  10DE               	iorwf	postinc2,w,c
 10954  000776  E114               	bnz	l14152
 10955                           
 10956                           ; BSR set to: 3
 10957  000778  0102               	movlb	2	; () banked
 10958  00077A  290A               	incf	(_loRa+10)& (0+255),w,b
 10959  00077C  E111               	bnz	l14152
 10960  00077E  290B               	incf	(_loRa+11)& (0+255),w,b
 10961  000780  E10F               	bnz	l14152
 10962                           
 10963                           ; BSR set to: 2
 10964                           ;lorawan.c: 1378: {
 10965                           ;lorawan.c: 1380: loRa.fCntDown.members.valueLow = hdr->members.fCnt;
 10966  000782  0103               	movlb	3	; () banked
 10967  000784  EE20 F006          	lfsr	2,6
 10968  000788  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10969  00078A  26D9               	addwf	fsr2l,f,c
 10970  00078C  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10971  00078E  22DA               	addwfc	fsr2h,f,c
 10972  000790  CFDE F20A          	movff	postinc2,_loRa+10
 10973  000794  CFDD F20B          	movff	postdec2,_loRa+11
 10974                           
 10975                           ; BSR set to: 3
 10976                           ;lorawan.c: 1381: loRa.fCntDown.members.valueHigh ++;
 10977  000798  0102               	movlb	2	; () banked
 10978  00079A  4B0C               	infsnz	(_loRa+12)& (0+255),f,b
 10979  00079C  2B0D               	incf	(_loRa+13)& (0+255),f,b
 10980                           
 10981                           ;lorawan.c: 1382: }
 10982  00079E  D003               	goto	l14162
 10983  0007A0                     l14152:
 10984                           
 10985                           ;lorawan.c: 1383: else
 10986                           ;lorawan.c: 1384: {
 10987                           ;lorawan.c: 1385: SetReceptionNotOkState();
 10988  0007A0  EC4C  F031         	call	_SetReceptionNotOkState	;wreg free
 10989  0007A4  D70B               	goto	l14086
 10990  0007A6                     l14162:
 10991                           
 10992                           ;lorawan.c: 1393: }
 10993                           ;lorawan.c: 1394: }
 10994                           ;lorawan.c: 1396: if (loRa.fCntDown.value == (4294967295UL))
 10995  0007A6  0102               	movlb	2	; () banked
 10996  0007A8  290A               	incf	(_loRa+10)& (0+255),w,b
 10997  0007AA  E109               	bnz	l14174
 10998  0007AC  290B               	incf	(_loRa+11)& (0+255),w,b
 10999  0007AE  E107               	bnz	l14174
 11000  0007B0  290C               	incf	(_loRa+12)& (0+255),w,b
 11001  0007B2  E105               	bnz	l14174
 11002  0007B4  290D               	incf	(_loRa+13)& (0+255),w,b
 11003  0007B6  E103               	bnz	l14174
 11004  0007B8                     l14164:
 11005                           
 11006                           ; BSR set to: 2
 11007                           ;lorawan.c: 1397: {
 11008                           ;lorawan.c: 1400: loRa.macStatus.rejoinNeeded = 1;
 11009  0007B8  8304               	bsf	(_loRa+4)& (0+255),1,b
 11010                           
 11011                           ; BSR set to: 2
 11012                           ;lorawan.c: 1401: if (CLASS_C == loRa.deviceClass)
 11013  0007BA  0E02               	movlw	2
 11014  0007BC  D701               	goto	L5
 11015  0007BE                     l14174:
 11016                           
 11017                           ; BSR set to: 2
 11018                           ;lorawan.c: 1407: }
 11019                           ;lorawan.c: 1410: if (loRa.macStatus.macState == RX1_OPEN)
 11020  0007BE  5102               	movf	(_loRa+2)& (0+255),w,b
 11021  0007C0  0B0F               	andlw	15
 11022  0007C2  0A03               	xorlw	3
 11023  0007C4  E103               	bnz	l14178
 11024                           
 11025                           ; BSR set to: 2
 11026                           ;lorawan.c: 1411: {
 11027                           ;lorawan.c: 1412: SwTimerStop (loRa.receiveWindow2TimerId);
 11028  0007C6  51E5               	movf	(_loRa+229)& (0+255),w,b
 11029  0007C8  EC7F  F03A         	call	_SwTimerStop
 11030  0007CC                     l14178:
 11031                           
 11032                           ;lorawan.c: 1413: }
 11033                           ;lorawan.c: 1415: loRa.counterRepetitionsUnconfirmedUplink = 1;
 11034  0007CC  0E01               	movlw	1
 11035  0007CE  0102               	movlb	2	; () banked
 11036  0007D0  6FD8               	movwf	(_loRa+216)& (0+255),b
 11037                           
 11038                           ; BSR set to: 2
 11039                           ;lorawan.c: 1417: CheckFlags (hdr);
 11040  0007D2  C3B2  F064         	movff	LORAWAN_RxDone@hdr,CheckFlags@hdr
 11041  0007D6  C3B3  F065         	movff	LORAWAN_RxDone@hdr+1,CheckFlags@hdr+1
 11042  0007DA  EC12  F033         	call	_CheckFlags	;wreg free
 11043                           
 11044                           ;lorawan.c: 1419: if (hdr->members.fCtrl.fOptsLen != 0)
 11045  0007DE  0103               	movlb	3	; () banked
 11046  0007E0  EE20 F005          	lfsr	2,5
 11047  0007E4  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11048  0007E6  26D9               	addwf	fsr2l,f,c
 11049  0007E8  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11050  0007EA  22DA               	addwfc	fsr2h,f,c
 11051  0007EC  50DF               	movf	223,w,c
 11052  0007EE  0B0F               	andlw	15
 11053  0007F0  E01B               	bz	l14186
 11054                           
 11055                           ; BSR set to: 3
 11056                           ;lorawan.c: 1420: {
 11057                           ;lorawan.c: 1421: buffer = MacExecuteCommands(hdr->members.MacCommands, hdr->members.fCt
      +                          rl.fOptsLen);
 11058  0007F2  0E08               	movlw	8
 11059  0007F4  25B2               	addwf	LORAWAN_RxDone@hdr& (0+255),w,b
 11060  0007F6  0100               	movlb	0	; () banked
 11061  0007F8  6F7A               	movwf	MacExecuteCommands@buffer& (0+255),b
 11062  0007FA  0E00               	movlw	0
 11063  0007FC  0103               	movlb	3	; () banked
 11064  0007FE  21B3               	addwfc	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11065  000800  0100               	movlb	0	; () banked
 11066  000802  6F7B               	movwf	(MacExecuteCommands@buffer+1)& (0+255),b
 11067  000804  0103               	movlb	3	; () banked
 11068  000806  EE20 F005          	lfsr	2,5
 11069  00080A  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11070  00080C  26D9               	addwf	fsr2l,f,c
 11071  00080E  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11072  000810  22DA               	addwfc	fsr2h,f,c
 11073  000812  50DF               	movf	223,w,c
 11074  000814  0B0F               	andlw	15
 11075  000816  0100               	movlb	0	; () banked
 11076  000818  6F7C               	movwf	MacExecuteCommands@fOptsLen& (0+255),b
 11077  00081A  EC01  F017         	call	_MacExecuteCommands	;wreg free
 11078  00081E  C07A  F16B         	movff	?_MacExecuteCommands,LORAWAN_RxDone@buffer
 11079  000822  C07B  F16C         	movff	?_MacExecuteCommands+1,LORAWAN_RxDone@buffer+1
 11080                           
 11081                           ;lorawan.c: 1422: }
 11082  000826  D005               	goto	l14188
 11083  000828                     l14186:
 11084                           
 11085                           ; BSR set to: 3
 11086                           ;lorawan.c: 1423: else
 11087                           ;lorawan.c: 1424: {
 11088                           ;lorawan.c: 1425: buffer = buffer + 8;
 11089  000828  0E08               	movlw	8
 11090  00082A  0101               	movlb	1	; () banked
 11091  00082C  276B               	addwf	LORAWAN_RxDone@buffer& (0+255),f,b
 11092  00082E  0E00               	movlw	0
 11093  000830  236C               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 11094  000832                     l14188:
 11095                           
 11096                           ;lorawan.c: 1426: }
 11097                           ;lorawan.c: 1427: if ( (sizeof(extractedMic) + hdr->members.fCtrl.fOptsLen + 8) != buffe
      +                          rLength)
 11098  000832  0101               	movlb	1	; () banked
 11099  000834  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11100  000836  0100               	movlb	0	; () banked
 11101  000838  6FE8               	movwf	??_LORAWAN_RxDone& (0+255),b
 11102  00083A  6BE9               	clrf	(??_LORAWAN_RxDone+1)& (0+255),b
 11103  00083C  0103               	movlb	3	; () banked
 11104  00083E  EE20 F005          	lfsr	2,5
 11105  000842  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11106  000844  26D9               	addwf	fsr2l,f,c
 11107  000846  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11108  000848  22DA               	addwfc	fsr2h,f,c
 11109  00084A  50DF               	movf	223,w,c
 11110  00084C  0B0F               	andlw	15
 11111  00084E  0100               	movlb	0	; () banked
 11112  000850  6FEA               	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 11113  000852  6BEB               	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 11114  000854  0E0C               	movlw	12
 11115  000856  27EA               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 11116  000858  0E00               	movlw	0
 11117  00085A  23EB               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 11118  00085C  51E8               	movf	??_LORAWAN_RxDone& (0+255),w,b
 11119  00085E  19EA               	xorwf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 11120  000860  E104               	bnz	u16350
 11121  000862  51E9               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11122  000864  19EB               	xorwf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 11123  000866  E101 D09B          	bz	l2120
 11124  00086A                     u16350:
 11125                           
 11126                           ; BSR set to: 0
 11127                           ;lorawan.c: 1428: {
 11128                           ;lorawan.c: 1429: fPort = *(buffer++);
 11129  00086A  C16B  FFD9         	movff	LORAWAN_RxDone@buffer,fsr2l
 11130  00086E  C16C  FFDA         	movff	LORAWAN_RxDone@buffer+1,fsr2h
 11131  000872  50DF               	movf	indf2,w,c
 11132  000874  0103               	movlb	3	; () banked
 11133  000876  6FA0               	movwf	LORAWAN_RxDone@fPort& (0+255),b
 11134                           
 11135                           ; BSR set to: 3
 11136  000878  0101               	movlb	1	; () banked
 11137  00087A  4B6B               	infsnz	LORAWAN_RxDone@buffer& (0+255),f,b
 11138  00087C  2B6C               	incf	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 11139                           
 11140                           ; BSR set to: 1
 11141                           ;lorawan.c: 1431: frmPayloadLength = bufferLength - 8 - hdr->members.fCtrl.fOptsLen - si
      +                          zeof (extractedMic);
 11142  00087E  0103               	movlb	3	; () banked
 11143  000880  EE20 F005          	lfsr	2,5
 11144  000884  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11145  000886  26D9               	addwf	fsr2l,f,c
 11146  000888  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11147  00088A  22DA               	addwfc	fsr2h,f,c
 11148  00088C  50DF               	movf	223,w,c
 11149  00088E  0B0F               	andlw	15
 11150  000890  0100               	movlb	0	; () banked
 11151  000892  6FE8               	movwf	??_LORAWAN_RxDone& (0+255),b
 11152  000894  51E8               	movf	??_LORAWAN_RxDone& (0+255),w,b
 11153  000896  0101               	movlb	1	; () banked
 11154  000898  5D6D               	subwf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11155  00089A  0FF4               	addlw	244
 11156  00089C  0103               	movlb	3	; () banked
 11157  00089E  6FB1               	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 11158                           
 11159                           ; BSR set to: 3
 11160                           ;lorawan.c: 1432: bufferIndex = 16 + 8 + hdr->members.fCtrl.fOptsLen + sizeof (fPort);
 11161  0008A0  EE20 F005          	lfsr	2,5
 11162  0008A4  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11163  0008A6  26D9               	addwf	fsr2l,f,c
 11164  0008A8  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11165  0008AA  22DA               	addwfc	fsr2h,f,c
 11166  0008AC  50DF               	movf	223,w,c
 11167  0008AE  0B0F               	andlw	15
 11168  0008B0  0F19               	addlw	25
 11169  0008B2  6FA7               	movwf	LORAWAN_RxDone@bufferIndex& (0+255),b
 11170                           
 11171                           ; BSR set to: 3
 11172                           ;lorawan.c: 1434: if (fPort != 0)
 11173  0008B4  51A0               	movf	LORAWAN_RxDone@fPort& (0+255),w,b
 11174  0008B6  E029               	bz	l14204
 11175                           
 11176                           ; BSR set to: 3
 11177                           ;lorawan.c: 1435: {
 11178                           ;lorawan.c: 1436: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fCntDown.valu
      +                          e, loRa.activationParameters.applicationSessionKey, bufferIndex, radioBuffer, 0);
 11179  0008B8  C16B  F0A4         	movff	LORAWAN_RxDone@buffer,EncryptFRMPayload@buffer
 11180  0008BC  C16C  F0A5         	movff	LORAWAN_RxDone@buffer+1,EncryptFRMPayload@buffer+1
 11181  0008C0  05B1               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 11182  0008C2  0100               	movlb	0	; () banked
 11183  0008C4  6FA6               	movwf	EncryptFRMPayload@bufferLength& (0+255),b
 11184  0008C6  0E01               	movlw	1
 11185  0008C8  6FA7               	movwf	EncryptFRMPayload@dir& (0+255),b
 11186  0008CA  C20A  F0A8         	movff	_loRa+10,EncryptFRMPayload@frameCounter
 11187  0008CE  C20B  F0A9         	movff	_loRa+11,EncryptFRMPayload@frameCounter+1
 11188  0008D2  C20C  F0AA         	movff	_loRa+12,EncryptFRMPayload@frameCounter+2
 11189  0008D6  C20D  F0AB         	movff	_loRa+13,EncryptFRMPayload@frameCounter+3
 11190  0008DA  0E32               	movlw	low (_loRa+50)
 11191  0008DC  6FAC               	movwf	EncryptFRMPayload@key& (0+255),b
 11192  0008DE  0E02               	movlw	high (_loRa+50)
 11193  0008E0  6FAD               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 11194  0008E2  C3A7  F0AE         	movff	LORAWAN_RxDone@bufferIndex,EncryptFRMPayload@macBufferIndex
 11195  0008E6  0EEF               	movlw	low _radioBuffer
 11196  0008E8  6FAF               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 11197  0008EA  0E05               	movlw	high _radioBuffer
 11198  0008EC  6FB0               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 11199  0008EE  6BB1               	clrf	EncryptFRMPayload@multicastStatus& (0+255),b
 11200  0008F0  ECC1  F020         	call	_EncryptFRMPayload	;wreg free
 11201                           
 11202                           ; BSR set to: 0
 11203                           ;lorawan.c: 1437: packet = buffer - 1;
 11204  0008F4  0EFF               	movlw	255
 11205  0008F6  0101               	movlb	1	; () banked
 11206  0008F8  256B               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 11207  0008FA  0103               	movlb	3	; () banked
 11208  0008FC  6FA9               	movwf	LORAWAN_RxDone@packet& (0+255),b
 11209  0008FE  0EFF               	movlw	255
 11210  000900  0101               	movlb	1	; () banked
 11211  000902  216C               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 11212  000904  0103               	movlb	3	; () banked
 11213  000906  6FAA               	movwf	(LORAWAN_RxDone@packet+1)& (0+255),b
 11214                           
 11215                           ;lorawan.c: 1438: }
 11216  000908  D04F               	goto	l14214
 11217  00090A                     l14204:
 11218                           
 11219                           ; BSR set to: 3
 11220                           ;lorawan.c: 1439: else
 11221                           ;lorawan.c: 1440: {
 11222                           ;lorawan.c: 1442: if(bufferLength > (13 + hdr->members.fCtrl.fOptsLen))
 11223  00090A  0101               	movlb	1	; () banked
 11224  00090C  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11225  00090E  0100               	movlb	0	; () banked
 11226  000910  6FE8               	movwf	??_LORAWAN_RxDone& (0+255),b
 11227  000912  6BE9               	clrf	(??_LORAWAN_RxDone+1)& (0+255),b
 11228  000914  0103               	movlb	3	; () banked
 11229  000916  EE20 F005          	lfsr	2,5
 11230  00091A  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11231  00091C  26D9               	addwf	fsr2l,f,c
 11232  00091E  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11233  000920  22DA               	addwfc	fsr2h,f,c
 11234  000922  50DF               	movf	223,w,c
 11235  000924  0B0F               	andlw	15
 11236  000926  0100               	movlb	0	; () banked
 11237  000928  6FEA               	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 11238  00092A  6BEB               	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 11239  00092C  0E0D               	movlw	13
 11240  00092E  27EA               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 11241  000930  0E00               	movlw	0
 11242  000932  23EB               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 11243  000934  51E8               	movf	??_LORAWAN_RxDone& (0+255),w,b
 11244  000936  5DEA               	subwf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 11245  000938  51EB               	movf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 11246  00093A  0A80               	xorlw	128
 11247  00093C  6FEC               	movwf	(??_LORAWAN_RxDone+4)& (0+255),b
 11248  00093E  51E9               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11249  000940  0A80               	xorlw	128
 11250  000942  59EC               	subwfb	(??_LORAWAN_RxDone+4)& (0+255),w,b
 11251  000944  E22D               	bc	l2120
 11252                           
 11253                           ; BSR set to: 0
 11254                           ;lorawan.c: 1443: {
 11255                           ;lorawan.c: 1445: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fCntDown.valu
      +                          e, loRa.activationParameters.networkSessionKey, bufferIndex, radioBuffer, 0);
 11256  000946  C16B  F0A4         	movff	LORAWAN_RxDone@buffer,EncryptFRMPayload@buffer
 11257  00094A  C16C  F0A5         	movff	LORAWAN_RxDone@buffer+1,EncryptFRMPayload@buffer+1
 11258  00094E  0103               	movlb	3	; () banked
 11259  000950  05B1               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 11260  000952  0100               	movlb	0	; () banked
 11261  000954  6FA6               	movwf	EncryptFRMPayload@bufferLength& (0+255),b
 11262  000956  0E01               	movlw	1
 11263  000958  6FA7               	movwf	EncryptFRMPayload@dir& (0+255),b
 11264  00095A  C20A  F0A8         	movff	_loRa+10,EncryptFRMPayload@frameCounter
 11265  00095E  C20B  F0A9         	movff	_loRa+11,EncryptFRMPayload@frameCounter+1
 11266  000962  C20C  F0AA         	movff	_loRa+12,EncryptFRMPayload@frameCounter+2
 11267  000966  C20D  F0AB         	movff	_loRa+13,EncryptFRMPayload@frameCounter+3
 11268  00096A  0E22               	movlw	low (_loRa+34)
 11269  00096C  6FAC               	movwf	EncryptFRMPayload@key& (0+255),b
 11270  00096E  0E02               	movlw	high (_loRa+34)
 11271  000970  6FAD               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 11272  000972  C3A7  F0AE         	movff	LORAWAN_RxDone@bufferIndex,EncryptFRMPayload@macBufferIndex
 11273  000976  0EEF               	movlw	low _radioBuffer
 11274  000978  6FAF               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 11275  00097A  0E05               	movlw	high _radioBuffer
 11276  00097C  6FB0               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 11277  00097E  6BB1               	clrf	EncryptFRMPayload@multicastStatus& (0+255),b
 11278  000980  ECC1  F020         	call	_EncryptFRMPayload	;wreg free
 11279                           
 11280                           ; BSR set to: 0
 11281                           ;lorawan.c: 1446: buffer = MacExecuteCommands(buffer, frmPayloadLength - 1 );
 11282  000984  C16B  F07A         	movff	LORAWAN_RxDone@buffer,MacExecuteCommands@buffer
 11283  000988  C16C  F07B         	movff	LORAWAN_RxDone@buffer+1,MacExecuteCommands@buffer+1
 11284  00098C  0103               	movlb	3	; () banked
 11285  00098E  05B1               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 11286  000990  0100               	movlb	0	; () banked
 11287  000992  6F7C               	movwf	MacExecuteCommands@fOptsLen& (0+255),b
 11288  000994  EC01  F017         	call	_MacExecuteCommands	;wreg free
 11289  000998  C07A  F16B         	movff	?_MacExecuteCommands,LORAWAN_RxDone@buffer
 11290  00099C  C07B  F16C         	movff	?_MacExecuteCommands+1,LORAWAN_RxDone@buffer+1
 11291  0009A0                     l2120:
 11292                           
 11293                           ; BSR set to: 0
 11294                           ;lorawan.c: 1453: else
 11295                           ;lorawan.c: 1454: {
 11296                           ;lorawan.c: 1455: frmPayloadLength = 0;
 11297  0009A0  0103               	movlb	3	; () banked
 11298  0009A2  6BB1               	clrf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 11299                           
 11300                           ;lorawan.c: 1456: packet = (0);
 11301  0009A4  6BA9               	clrf	LORAWAN_RxDone@packet& (0+255),b
 11302  0009A6  6BAA               	clrf	(LORAWAN_RxDone@packet+1)& (0+255),b
 11303  0009A8                     l14214:
 11304                           
 11305                           ; BSR set to: 3
 11306                           ;lorawan.c: 1457: }
 11307                           ;lorawan.c: 1459: loRa.counterRepetitionsUnconfirmedUplink = 1;
 11308  0009A8  0E01               	movlw	1
 11309  0009AA  0102               	movlb	2	; () banked
 11310  0009AC  6FD8               	movwf	(_loRa+216)& (0+255),b
 11311                           
 11312                           ; BSR set to: 2
 11313                           ;lorawan.c: 1461: loRa.adrAckCnt = 0;
 11314  0009AE  6BD0               	clrf	(_loRa+208)& (0+255),b
 11315  0009B0  6BD1               	clrf	(_loRa+209)& (0+255),b
 11316                           
 11317                           ; BSR set to: 2
 11318                           ;lorawan.c: 1462: loRa.counterAdrAckDelay = 0;
 11319  0009B2  6BEE               	clrf	(_loRa+238)& (0+255),b
 11320                           
 11321                           ; BSR set to: 2
 11322                           ;lorawan.c: 1463: loRa.lorawanMacStatus.adrAckRequest = 0;
 11323  0009B4  9900               	bcf	_loRa& (0+255),4,b
 11324                           
 11325                           ; BSR set to: 2
 11326                           ;lorawan.c: 1465: loRa.macStatus.rxDone = 1;
 11327  0009B6  8303               	bsf	(_loRa+3)& (0+255),1,b
 11328                           
 11329                           ; BSR set to: 2
 11330                           ;lorawan.c: 1467: if ( loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage == 1 )
 11331  0009B8  A100               	btfss	_loRa& (0+255),0,b
 11332  0009BA  D04F               	goto	l14258
 11333                           
 11334                           ; BSR set to: 2
 11335                           ;lorawan.c: 1468: {
 11336                           ;lorawan.c: 1469: if (hdr->members.fCtrl.ack == 1)
 11337  0009BC  0103               	movlb	3	; () banked
 11338  0009BE  EE20 F005          	lfsr	2,5
 11339  0009C2  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11340  0009C4  26D9               	addwf	fsr2l,f,c
 11341  0009C6  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11342  0009C8  22DA               	addwfc	fsr2h,f,c
 11343  0009CA  AADF               	btfss	indf2,5,c
 11344  0009CC  D043               	goto	l14256
 11345                           
 11346                           ; BSR set to: 3
 11347                           ;lorawan.c: 1470: {
 11348                           ;lorawan.c: 1471: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 11349  0009CE  0102               	movlb	2	; () banked
 11350  0009D0  9100               	bcf	_loRa& (0+255),0,b
 11351                           
 11352                           ; BSR set to: 2
 11353                           ;lorawan.c: 1472: loRa.macStatus.macState = IDLE;
 11354  0009D2  0EF0               	movlw	-16
 11355  0009D4  1702               	andwf	(_loRa+2)& (0+255),f,b
 11356                           
 11357                           ; BSR set to: 2
 11358                           ;lorawan.c: 1473: if (rxPayload.RxAppData != (0))
 11359  0009D6  0101               	movlb	1	; () banked
 11360  0009D8  516E               	movf	_rxPayload& (0+255),w,b
 11361  0009DA  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 11362  0009DC  E018               	bz	l14238
 11363                           
 11364                           ; BSR set to: 1
 11365                           ;lorawan.c: 1474: {
 11366                           ;lorawan.c: 1475: loRa.lorawanMacStatus.synchronization = 0;
 11367  0009DE  0102               	movlb	2	; () banked
 11368  0009E0  9B00               	bcf	_loRa& (0+255),5,b
 11369                           
 11370                           ; BSR set to: 2
 11371                           ;lorawan.c: 1476: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 11372  0009E2  C3A9  F064         	movff	LORAWAN_RxDone@packet,RxDataDone@pData
 11373  0009E6  C3AA  F065         	movff	LORAWAN_RxDone@packet+1,RxDataDone@pData+1
 11374  0009EA  C3B1  F066         	movff	LORAWAN_RxDone@frmPayloadLength,RxDataDone@dataLength
 11375  0009EE  0E01               	movlw	1
 11376  0009F0  0100               	movlb	0	; () banked
 11377  0009F2  6F67               	movwf	RxDataDone@status& (0+255),b
 11378  0009F4  D801               	call	u16418
 11379  0009F6  D00B               	goto	l14238
 11380  0009F8                     u16418:
 11381  0009F8  0005               	push	
 11382  0009FA  0101               	movlb	1	; () banked
 11383  0009FC  6EFA               	movwf	pclath,c
 11384  0009FE  516E               	movf	_rxPayload& (0+255),w,b
 11385  000A00  6EFD               	movwf	tosl,c
 11386  000A02  516F               	movf	(_rxPayload+1)& (0+255),w,b
 11387  000A04  6EFE               	movwf	tosh,c
 11388  000A06  50F8               	movf	tblptru,w,c
 11389  000A08  6EFF               	movwf	tosu,c
 11390  000A0A  50FA               	movf	pclath,w,c
 11391  000A0C  0012               	return		;indir
 11392  000A0E                     l14238:
 11393                           
 11394                           ; BSR set to: 1
 11395                           ;lorawan.c: 1477: }
 11396                           ;lorawan.c: 1478: loRa.macStatus.rxDone = 0;
 11397  000A0E  0102               	movlb	2	; () banked
 11398  000A10  9303               	bcf	(_loRa+3)& (0+255),1,b
 11399                           
 11400                           ; BSR set to: 2
 11401                           ;lorawan.c: 1479: if ( (loRa.macStatus.automaticReply == 1) && (loRa.lorawanMacStatus.sy
      +                          nchronization == 0) && ( (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1) |
      +                          | (loRa.lorawanMacStatus.fPending == 1) ) )
 11402  000A12  BB02               	btfsc	(_loRa+2)& (0+255),5,b
 11403                           
 11404                           ; BSR set to: 2
 11405  000A14  BB00               	btfsc	_loRa& (0+255),5,b
 11406  000A16  D5D2               	goto	l14086
 11407                           
 11408                           ; BSR set to: 2
 11409  000A18  B300               	btfsc	_loRa& (0+255),1,b
 11410  000A1A  D002               	goto	l14248
 11411                           
 11412                           ; BSR set to: 2
 11413  000A1C  A700               	btfss	_loRa& (0+255),3,b
 11414  000A1E  D5CE               	goto	l14086
 11415  000A20                     l14248:
 11416                           
 11417                           ; BSR set to: 2
 11418                           ;lorawan.c: 1480: {
 11419                           ;lorawan.c: 1481: if (SearchAvailableChannel (loRa.maxChannels, 1, &channelIndex) == OK)
 11420  000A20  0E01               	movlw	1
 11421  000A22  0100               	movlb	0	; () banked
 11422  000A24  6F79               	movwf	SearchAvailableChannel@transmissionType& (0+255),b
 11423  000A26  0EA1               	movlw	low LORAWAN_RxDone@channelIndex
 11424  000A28  6F7A               	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 11425  000A2A  0E03               	movlw	high LORAWAN_RxDone@channelIndex
 11426  000A2C  6F7B               	movwf	(SearchAvailableChannel@channelIndex+1)& (0+255),b
 11427  000A2E  0102               	movlb	2	; () banked
 11428  000A30  51ED               	movf	(_loRa+237)& (0+255),w,b
 11429  000A32  ECB1  F027         	call	_SearchAvailableChannel
 11430  000A36  0900               	iorlw	0
 11431  000A38  E10A               	bnz	l14254
 11432                           
 11433                           ; BSR set to: 0
 11434                           ;lorawan.c: 1482: {
 11435                           ;lorawan.c: 1483: LORAWAN_Send (0, 0, 0, 0);
 11436  000A3A  0E00               	movlw	0
 11437  000A3C  6FE1               	movwf	LORAWAN_Send@port& (0+255),b
 11438  000A3E  6FE2               	movwf	LORAWAN_Send@buffer& (0+255),b
 11439  000A40  6FE3               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
 11440  000A42  6FE4               	movwf	LORAWAN_Send@bufferLength& (0+255),b
 11441  000A44  EC2E  F02A         	call	_LORAWAN_Send
 11442  000A48                     l14252:
 11443                           
 11444                           ;lorawan.c: 1484: loRa.lorawanMacStatus.fPending = 0;
 11445  000A48  0102               	movlb	2	; () banked
 11446  000A4A  9700               	bcf	_loRa& (0+255),3,b
 11447                           
 11448                           ;lorawan.c: 1485: }
 11449  000A4C  D5B7               	goto	l14086
 11450  000A4E                     l14254:
 11451                           
 11452                           ; BSR set to: 0
 11453                           ;lorawan.c: 1486: else
 11454                           ;lorawan.c: 1487: {
 11455                           ;lorawan.c: 1489: StartReTxTimer();
 11456  000A4E  EC0F  F022         	call	_StartReTxTimer	;wreg free
 11457  000A52  D5B4               	goto	l14086
 11458  000A54                     l14256:
 11459                           
 11460                           ; BSR set to: 3
 11461                           ;lorawan.c: 1494: else
 11462                           ;lorawan.c: 1495: {
 11463                           ;lorawan.c: 1496: UpdateRetransmissionAckTimeoutState ();
 11464  000A54  EC17  F031         	call	_UpdateRetransmissionAckTimeoutState	;wreg free
 11465  000A58  D5B1               	goto	l14086
 11466  000A5A                     l14258:
 11467                           
 11468                           ; BSR set to: 2
 11469                           ;lorawan.c: 1499: else
 11470                           ;lorawan.c: 1500: {
 11471                           ;lorawan.c: 1501: loRa.macStatus.macState = IDLE;
 11472  000A5A  0EF0               	movlw	-16
 11473  000A5C  1702               	andwf	(_loRa+2)& (0+255),f,b
 11474                           
 11475                           ; BSR set to: 2
 11476                           ;lorawan.c: 1503: if (rxPayload.RxAppData != (0))
 11477  000A5E  0101               	movlb	1	; () banked
 11478  000A60  516E               	movf	_rxPayload& (0+255),w,b
 11479  000A62  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 11480  000A64  E018               	bz	l14266
 11481                           
 11482                           ; BSR set to: 1
 11483                           ;lorawan.c: 1504: {
 11484                           ;lorawan.c: 1505: loRa.lorawanMacStatus.synchronization = 0;
 11485  000A66  0102               	movlb	2	; () banked
 11486  000A68  9B00               	bcf	_loRa& (0+255),5,b
 11487                           
 11488                           ; BSR set to: 2
 11489                           ;lorawan.c: 1506: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 11490  000A6A  C3A9  F064         	movff	LORAWAN_RxDone@packet,RxDataDone@pData
 11491  000A6E  C3AA  F065         	movff	LORAWAN_RxDone@packet+1,RxDataDone@pData+1
 11492  000A72  C3B1  F066         	movff	LORAWAN_RxDone@frmPayloadLength,RxDataDone@dataLength
 11493  000A76  0E01               	movlw	1
 11494  000A78  0100               	movlb	0	; () banked
 11495  000A7A  6F67               	movwf	RxDataDone@status& (0+255),b
 11496  000A7C  D801               	call	u16488
 11497  000A7E  D00B               	goto	l14266
 11498  000A80                     u16488:
 11499  000A80  0005               	push	
 11500  000A82  0101               	movlb	1	; () banked
 11501  000A84  6EFA               	movwf	pclath,c
 11502  000A86  516E               	movf	_rxPayload& (0+255),w,b
 11503  000A88  6EFD               	movwf	tosl,c
 11504  000A8A  516F               	movf	(_rxPayload+1)& (0+255),w,b
 11505  000A8C  6EFE               	movwf	tosh,c
 11506  000A8E  50F8               	movf	tblptru,w,c
 11507  000A90  6EFF               	movwf	tosu,c
 11508  000A92  50FA               	movf	pclath,w,c
 11509  000A94  0012               	return		;indir
 11510  000A96                     l14266:
 11511                           
 11512                           ; BSR set to: 1
 11513                           ;lorawan.c: 1507: }
 11514                           ;lorawan.c: 1509: if ( (loRa.macStatus.automaticReply == 1) && (loRa.lorawanMacStatus.sy
      +                          nchronization == 0) && ( (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1) |
      +                          | (loRa.lorawanMacStatus.fPending == 1) ) )
 11515  000A96  0102               	movlb	2	; () banked
 11516  000A98  BB02               	btfsc	(_loRa+2)& (0+255),5,b
 11517                           
 11518                           ; BSR set to: 2
 11519  000A9A  BB00               	btfsc	_loRa& (0+255),5,b
 11520  000A9C  D58F               	goto	l14086
 11521                           
 11522                           ; BSR set to: 2
 11523  000A9E  B300               	btfsc	_loRa& (0+255),1,b
 11524  000AA0  D002               	goto	l14274
 11525                           
 11526                           ; BSR set to: 2
 11527  000AA2  A700               	btfss	_loRa& (0+255),3,b
 11528  000AA4  D58B               	goto	l14086
 11529  000AA6                     l14274:
 11530                           
 11531                           ; BSR set to: 2
 11532                           ;lorawan.c: 1510: {
 11533                           ;lorawan.c: 1511: if (SearchAvailableChannel (loRa.maxChannels, 1, &channelIndex) == OK)
 11534  000AA6  0E01               	movlw	1
 11535  000AA8  0100               	movlb	0	; () banked
 11536  000AAA  6F79               	movwf	SearchAvailableChannel@transmissionType& (0+255),b
 11537  000AAC  0EA1               	movlw	low LORAWAN_RxDone@channelIndex
 11538  000AAE  6F7A               	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 11539  000AB0  0E03               	movlw	high LORAWAN_RxDone@channelIndex
 11540  000AB2  6F7B               	movwf	(SearchAvailableChannel@channelIndex+1)& (0+255),b
 11541  000AB4  0102               	movlb	2	; () banked
 11542  000AB6  51ED               	movf	(_loRa+237)& (0+255),w,b
 11543  000AB8  ECB1  F027         	call	_SearchAvailableChannel
 11544  000ABC  0900               	iorlw	0
 11545  000ABE  E1C7               	bnz	l14254
 11546                           
 11547                           ; BSR set to: 0
 11548                           ;lorawan.c: 1512: {
 11549                           ;lorawan.c: 1513: LORAWAN_Send (0, 0, 0, 0);
 11550  000AC0  0E00               	movlw	0
 11551  000AC2  6FE1               	movwf	LORAWAN_Send@port& (0+255),b
 11552  000AC4  6FE2               	movwf	LORAWAN_Send@buffer& (0+255),b
 11553  000AC6  6FE3               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
 11554  000AC8  6FE4               	movwf	LORAWAN_Send@bufferLength& (0+255),b
 11555  000ACA  EC2E  F02A         	call	_LORAWAN_Send
 11556  000ACE  D7BC               	goto	l14252
 11557  000AD0                     l14292:
 11558                           
 11559                           ; BSR set to: 2
 11560                           ;lorawan.c: 1537: else
 11561                           ;lorawan.c: 1538: {
 11562                           ;lorawan.c: 1540: if ( rxPayload.RxAppData != (0) )
 11563  000AD0  0101               	movlb	1	; () banked
 11564  000AD2  516E               	movf	_rxPayload& (0+255),w,b
 11565  000AD4  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 11566  000AD6  B4D8               	btfsc	status,2,c
 11567  000AD8  0012               	return	
 11568                           
 11569                           ; BSR set to: 1
 11570                           ;lorawan.c: 1541: {
 11571                           ;lorawan.c: 1542: if ((RADIO_GetStatus() & (1 << (3))) == 0)
 11572  000ADA  ECE9  F03B         	call	_RADIO_GetStatus	;wreg free
 11573  000ADE  0100               	movlb	0	; () banked
 11574  000AE0  6FE8               	movwf	??_LORAWAN_RxDone& (0+255),b
 11575  000AE2  B7E8               	btfsc	??_LORAWAN_RxDone& (0+255),3,b
 11576  000AE4  D013               	goto	l14298
 11577                           
 11578                           ; BSR set to: 0
 11579                           ;lorawan.c: 1543: {
 11580                           ;lorawan.c: 1544: rxPayload.RxAppData(buffer, bufferLength, RADIO_OK);
 11581  000AE6  C16B  F064         	movff	LORAWAN_RxDone@buffer,RxDataDone@pData
 11582  000AEA  C16C  F065         	movff	LORAWAN_RxDone@buffer+1,RxDataDone@pData+1
 11583  000AEE  C16D  F066         	movff	LORAWAN_RxDone@bufferLength,RxDataDone@dataLength
 11584  000AF2  0E03               	movlw	3
 11585  000AF4  6F67               	movwf	RxDataDone@status& (0+255),b
 11586  000AF6  0005               	push	
 11587  000AF8  0101               	movlb	1	; () banked
 11588  000AFA  6EFA               	movwf	pclath,c
 11589  000AFC  516E               	movf	_rxPayload& (0+255),w,b
 11590  000AFE  6EFD               	movwf	tosl,c
 11591  000B00  516F               	movf	(_rxPayload+1)& (0+255),w,b
 11592  000B02  6EFE               	movwf	tosh,c
 11593  000B04  50F8               	movf	tblptru,w,c
 11594  000B06  6EFF               	movwf	tosu,c
 11595  000B08  50FA               	movf	pclath,w,c
 11596  000B0A  0012               	return		;indir
 11597  000B0C                     l14298:
 11598                           
 11599                           ; BSR set to: 0
 11600                           ;lorawan.c: 1546: else
 11601                           ;lorawan.c: 1547: {
 11602                           ;lorawan.c: 1548: rxPayload.RxAppData(buffer, bufferLength, RADIO_NOT_OK);
 11603  000B0C  C16B  F064         	movff	LORAWAN_RxDone@buffer,RxDataDone@pData
 11604  000B10  C16C  F065         	movff	LORAWAN_RxDone@buffer+1,RxDataDone@pData+1
 11605  000B14  C16D  F066         	movff	LORAWAN_RxDone@bufferLength,RxDataDone@dataLength
 11606  000B18  0E02               	movlw	2
 11607  000B1A  6F67               	movwf	RxDataDone@status& (0+255),b
 11608  000B1C  0005               	push	
 11609  000B1E  0101               	movlb	1	; () banked
 11610  000B20  6EFA               	movwf	pclath,c
 11611  000B22  516E               	movf	_rxPayload& (0+255),w,b
 11612  000B24  6EFD               	movwf	tosl,c
 11613  000B26  516F               	movf	(_rxPayload+1)& (0+255),w,b
 11614  000B28  6EFE               	movwf	tosh,c
 11615  000B2A  50F8               	movf	tblptru,w,c
 11616  000B2C  6EFF               	movwf	tosu,c
 11617  000B2E  50FA               	movf	pclath,w,c
 11618  000B30  0012               	return		;indir
 11619  000B32                     __end_of_LORAWAN_RxDone:
 11620                           	opt stack 0
 11621                           tosu	equ	0xFFF
 11622                           tosh	equ	0xFFE
 11623                           tosl	equ	0xFFD
 11624                           pclath	equ	0xFFA
 11625                           tblptru	equ	0xFF8
 11626                           tblptrh	equ	0xFF7
 11627                           tblptrl	equ	0xFF6
 11628                           tablat	equ	0xFF5
 11629                           prodh	equ	0xFF4
 11630                           prodl	equ	0xFF3
 11631                           intcon	equ	0xFF2
 11632                           intcon2	equ	0xFF1
 11633                           intcon3	equ	0xFF0
 11634                           postinc0	equ	0xFEE
 11635                           wreg	equ	0xFE8
 11636                           postinc1	equ	0xFE6
 11637                           postdec1	equ	0xFE5
 11638                           plusw1	equ	0xFE3
 11639                           fsr1h	equ	0xFE2
 11640                           fsr1l	equ	0xFE1
 11641                           indf2	equ	0xFDF
 11642                           postinc2	equ	0xFDE
 11643                           postdec2	equ	0xFDD
 11644                           fsr2h	equ	0xFDA
 11645                           fsr2l	equ	0xFD9
 11646                           status	equ	0xFD8
 11647                           
 11648 ;; *************** function _UpdateRetransmissionAckTimeoutState *****************
 11649 ;; Defined at:
 11650 ;;		line 1034 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 11651 ;; Parameters:    Size  Location     Type
 11652 ;;		None
 11653 ;; Auto vars:     Size  Location     Type
 11654 ;;		None
 11655 ;; Return value:  Size  Location     Type
 11656 ;;                  1    wreg      void 
 11657 ;; Registers used:
 11658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11659 ;; Tracked objects:
 11660 ;;		On entry : C/0
 11661 ;;		On exit  : F/0
 11662 ;;		Unchanged: 0/0
 11663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11666 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11667 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11668 ;;Total ram usage:        4 bytes
 11669 ;; Hardware stack levels used:    1
 11670 ;; Hardware stack levels required when called:   11
 11671 ;; This function calls:
 11672 ;;		_SwTimerSetTimeout
 11673 ;;		_SwTimerStart
 11674 ;;		___lldiv
 11675 ;; This function is called by:
 11676 ;;		_AckRetransmissionCallback
 11677 ;;		_LORAWAN_RxDone
 11678 ;; This function uses a non-reentrant model
 11679 ;;
 11680                           
 11681                           	psect	text57
 11682  00622E                     __ptext57:
 11683                           	opt stack 0
 11684  00622E                     _UpdateRetransmissionAckTimeoutState:
 11685                           	opt stack 16
 11686                           
 11687                           ;lorawan.c: 1036: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 11688                           
 11689                           ;incstack = 0
 11690  00622E  0102               	movlb	2	; () banked
 11691  006230  5102               	movf	(_loRa+2)& (0+255),w,b
 11692  006232  0BF0               	andlw	-16
 11693  006234  0906               	iorlw	6
 11694  006236  6F02               	movwf	(_loRa+2)& (0+255),b
 11695                           
 11696                           ; BSR set to: 2
 11697                           ;lorawan.c: 1037: SwTimerSetTimeout(loRa.ackTimeoutTimerId, ( (((uint32_t)(loRa.protocol
      +                          Parameters.ackTimeout)) << (12)) / 125UL ));
 11698  006238  51A0               	movf	(_loRa+160)& (0+255),w,b
 11699  00623A  0100               	movlb	0	; () banked
 11700  00623C  6F94               	movwf	??_UpdateRetransmissionAckTimeoutState& (0+255),b
 11701  00623E  0102               	movlb	2	; () banked
 11702  006240  51A1               	movf	(_loRa+161)& (0+255),w,b
 11703  006242  0100               	movlb	0	; () banked
 11704  006244  6F95               	movwf	(??_UpdateRetransmissionAckTimeoutState+1)& (0+255),b
 11705  006246  6B96               	clrf	(??_UpdateRetransmissionAckTimeoutState+2)& (0+255),b
 11706  006248  6B97               	clrf	(??_UpdateRetransmissionAckTimeoutState+3)& (0+255),b
 11707  00624A  0E0C               	movlw	12
 11708  00624C                     u15595:
 11709  00624C  90D8               	bcf	status,0,c
 11710  00624E  3794               	rlcf	??_UpdateRetransmissionAckTimeoutState& (0+255),f,b
 11711  006250  3795               	rlcf	(??_UpdateRetransmissionAckTimeoutState+1)& (0+255),f,b
 11712  006252  3796               	rlcf	(??_UpdateRetransmissionAckTimeoutState+2)& (0+255),f,b
 11713  006254  3797               	rlcf	(??_UpdateRetransmissionAckTimeoutState+3)& (0+255),f,b
 11714  006256  2EE8               	decfsz	wreg,f,c
 11715  006258  D7F9               	goto	u15595
 11716  00625A  C094  F064         	movff	??_UpdateRetransmissionAckTimeoutState,___lldiv@dividend
 11717  00625E  C095  F065         	movff	??_UpdateRetransmissionAckTimeoutState+1,___lldiv@dividend+1
 11718  006262  C096  F066         	movff	??_UpdateRetransmissionAckTimeoutState+2,___lldiv@dividend+2
 11719  006266  C097  F067         	movff	??_UpdateRetransmissionAckTimeoutState+3,___lldiv@dividend+3
 11720  00626A  0E7D               	movlw	125
 11721  00626C  6F68               	movwf	___lldiv@divisor& (0+255),b
 11722  00626E  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 11723  006270  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 11724  006272  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 11725  006274  EC35  F030         	call	___lldiv	;wreg free
 11726  006278  C064  F071         	movff	?___lldiv,SwTimerSetTimeout@timeout
 11727  00627C  C065  F072         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 11728  006280  C066  F073         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 11729  006284  C067  F074         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 11730  006288  0102               	movlb	2	; () banked
 11731  00628A  51E8               	movf	(_loRa+232)& (0+255),w,b
 11732  00628C  EC44  F036         	call	_SwTimerSetTimeout
 11733                           
 11734                           ; BSR set to: 0
 11735                           ;lorawan.c: 1038: SwTimerStart(loRa.ackTimeoutTimerId);
 11736  006290  0102               	movlb	2	; () banked
 11737  006292  51E8               	movf	(_loRa+232)& (0+255),w,b
 11738  006294  EF35  F02E         	goto	_SwTimerStart
 11739  006298                     __end_of_UpdateRetransmissionAckTimeoutState:
 11740                           	opt stack 0
 11741                           tosu	equ	0xFFF
 11742                           tosh	equ	0xFFE
 11743                           tosl	equ	0xFFD
 11744                           pclath	equ	0xFFA
 11745                           tblptru	equ	0xFF8
 11746                           tblptrh	equ	0xFF7
 11747                           tblptrl	equ	0xFF6
 11748                           tablat	equ	0xFF5
 11749                           prodh	equ	0xFF4
 11750                           prodl	equ	0xFF3
 11751                           intcon	equ	0xFF2
 11752                           intcon2	equ	0xFF1
 11753                           intcon3	equ	0xFF0
 11754                           postinc0	equ	0xFEE
 11755                           wreg	equ	0xFE8
 11756                           postinc1	equ	0xFE6
 11757                           postdec1	equ	0xFE5
 11758                           plusw1	equ	0xFE3
 11759                           fsr1h	equ	0xFE2
 11760                           fsr1l	equ	0xFE1
 11761                           indf2	equ	0xFDF
 11762                           postinc2	equ	0xFDE
 11763                           postdec2	equ	0xFDD
 11764                           fsr2h	equ	0xFDA
 11765                           fsr2l	equ	0xFD9
 11766                           status	equ	0xFD8
 11767                           
 11768 ;; *************** function _UpdateDLSettings *****************
 11769 ;; Defined at:
 11770 ;;		line 888 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 11771 ;; Parameters:    Size  Location     Type
 11772 ;;  dlRx2Dr         1    wreg     unsigned char 
 11773 ;;  dlRx1DrOffse    1    4[BANK0 ] unsigned char 
 11774 ;; Auto vars:     Size  Location     Type
 11775 ;;  dlRx2Dr         1    5[BANK0 ] unsigned char 
 11776 ;; Return value:  Size  Location     Type
 11777 ;;                  1    wreg      void 
 11778 ;; Registers used:
 11779 ;;		wreg, status,2, status,0
 11780 ;; Tracked objects:
 11781 ;;		On entry : F/3
 11782 ;;		On exit  : F/0
 11783 ;;		Unchanged: 0/0
 11784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11785 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11786 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11788 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11789 ;;Total ram usage:        2 bytes
 11790 ;; Hardware stack levels used:    1
 11791 ;; Hardware stack levels required when called:    7
 11792 ;; This function calls:
 11793 ;;		Nothing
 11794 ;; This function is called by:
 11795 ;;		_LORAWAN_RxDone
 11796 ;; This function uses a non-reentrant model
 11797 ;;
 11798                           
 11799                           	psect	text58
 11800  007552                     __ptext58:
 11801                           	opt stack 0
 11802  007552                     _UpdateDLSettings:
 11803                           	opt stack 19
 11804                           
 11805                           ; BSR set to: 0
 11806                           ;incstack = 0
 11807                           ;UpdateDLSettings@dlRx2Dr stored from wreg
 11808  007552  0100               	movlb	0	; () banked
 11809  007554  6F65               	movwf	UpdateDLSettings@dlRx2Dr& (0+255),b
 11810                           
 11811                           ;lorawan_eu.c: 890: if (dlRx2Dr <= 7)
 11812  007556  0E08               	movlw	8
 11813  007558  6165               	cpfslt	UpdateDLSettings@dlRx2Dr& (0+255),b
 11814  00755A  D002               	goto	l13616
 11815                           
 11816                           ; BSR set to: 0
 11817                           ;lorawan_eu.c: 891: {
 11818                           ;lorawan_eu.c: 892: loRa.receiveWindow2Parameters.dataRate = dlRx2Dr;
 11819  00755C  C065  F21C         	movff	UpdateDLSettings@dlRx2Dr,_loRa+28
 11820  007560                     l13616:
 11821                           
 11822                           ; BSR set to: 0
 11823                           ;lorawan_eu.c: 893: }
 11824                           ;lorawan_eu.c: 895: if (dlRx1DrOffset <= 5)
 11825  007560  0E06               	movlw	6
 11826  007562  6164               	cpfslt	UpdateDLSettings@dlRx1DrOffset& (0+255),b
 11827  007564  0C06               	retlw	6
 11828                           
 11829                           ; BSR set to: 0
 11830                           ;lorawan_eu.c: 896: {
 11831                           ;lorawan_eu.c: 898: loRa.offset = dlRx1DrOffset;
 11832  007566  C064  F2EF         	movff	UpdateDLSettings@dlRx1DrOffset,_loRa+239
 11833                           
 11834                           ; BSR set to: 0
 11835  00756A  0C06               	retlw	6	;funcret
 11836  00756C                     __end_of_UpdateDLSettings:
 11837                           	opt stack 0
 11838                           tosu	equ	0xFFF
 11839                           tosh	equ	0xFFE
 11840                           tosl	equ	0xFFD
 11841                           pclath	equ	0xFFA
 11842                           tblptru	equ	0xFF8
 11843                           tblptrh	equ	0xFF7
 11844                           tblptrl	equ	0xFF6
 11845                           tablat	equ	0xFF5
 11846                           prodh	equ	0xFF4
 11847                           prodl	equ	0xFF3
 11848                           intcon	equ	0xFF2
 11849                           intcon2	equ	0xFF1
 11850                           intcon3	equ	0xFF0
 11851                           postinc0	equ	0xFEE
 11852                           wreg	equ	0xFE8
 11853                           postinc1	equ	0xFE6
 11854                           postdec1	equ	0xFE5
 11855                           plusw1	equ	0xFE3
 11856                           fsr1h	equ	0xFE2
 11857                           fsr1l	equ	0xFE1
 11858                           indf2	equ	0xFDF
 11859                           postinc2	equ	0xFDE
 11860                           postdec2	equ	0xFDD
 11861                           fsr2h	equ	0xFDA
 11862                           fsr2l	equ	0xFD9
 11863                           status	equ	0xFD8
 11864                           
 11865 ;; *************** function _UpdateCfList *****************
 11866 ;; Defined at:
 11867 ;;		line 824 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 11868 ;; Parameters:    Size  Location     Type
 11869 ;;  bufferLength    1    wreg     unsigned char 
 11870 ;;  joinAccept      2   16[BANK0 ] PTR struct .
 11871 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 11872 ;; Auto vars:     Size  Location     Type
 11873 ;;  bufferLength    1   20[BANK0 ] unsigned char 
 11874 ;;  frequency       4   21[BANK0 ] unsigned long 
 11875 ;;  i               1   26[BANK0 ] unsigned char 
 11876 ;;  channelIndex    1   25[BANK0 ] unsigned char 
 11877 ;; Return value:  Size  Location     Type
 11878 ;;                  1    wreg      void 
 11879 ;; Registers used:
 11880 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11881 ;; Tracked objects:
 11882 ;;		On entry : F/1
 11883 ;;		On exit  : D/0
 11884 ;;		Unchanged: 0/0
 11885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11886 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11887 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11888 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11889 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11890 ;;Total ram usage:       11 bytes
 11891 ;; Hardware stack levels used:    1
 11892 ;; Hardware stack levels required when called:    9
 11893 ;; This function calls:
 11894 ;;		_LORAWAN_SetChannelIdStatus
 11895 ;;		_ValidateFrequency
 11896 ;;		___lmul
 11897 ;;		_memcpy
 11898 ;; This function is called by:
 11899 ;;		_LORAWAN_RxDone
 11900 ;; This function uses a non-reentrant model
 11901 ;;
 11902                           
 11903                           	psect	text59
 11904  0031E0                     __ptext59:
 11905                           	opt stack 0
 11906  0031E0                     _UpdateCfList:
 11907                           	opt stack 17
 11908                           
 11909                           ; BSR set to: 0
 11910                           ;incstack = 0
 11911                           ;UpdateCfList@bufferLength stored from wreg
 11912  0031E0  0100               	movlb	0	; () banked
 11913  0031E2  6F74               	movwf	UpdateCfList@bufferLength& (0+255),b
 11914                           
 11915                           ;lorawan_eu.c: 826: uint8_t i;
 11916                           ;lorawan_eu.c: 827: uint32_t frequency;
 11917                           ;lorawan_eu.c: 828: uint8_t channelIndex;
 11918                           ;lorawan_eu.c: 830: if ( (bufferLength == 33) )
 11919  0031E4  0E21               	movlw	33
 11920  0031E6  1974               	xorwf	UpdateCfList@bufferLength& (0+255),w,b
 11921  0031E8  A4D8               	btfss	status,2,c
 11922  0031EA  0012               	return	
 11923                           
 11924                           ; BSR set to: 0
 11925                           ;lorawan_eu.c: 831: {
 11926                           ;lorawan_eu.c: 833: channelIndex = 3;
 11927  0031EC  0E03               	movlw	3
 11928  0031EE  6F79               	movwf	UpdateCfList@channelIndex& (0+255),b
 11929                           
 11930                           ; BSR set to: 0
 11931                           ;lorawan_eu.c: 835: for (i = 0; i < 5; i++ )
 11932  0031F0  6B7A               	clrf	UpdateCfList@i& (0+255),b
 11933  0031F2                     l1168:
 11934                           
 11935                           ; BSR set to: 0
 11936                           ;lorawan_eu.c: 836: {
 11937                           ;lorawan_eu.c: 837: frequency = 0;
 11938  0031F2  6B75               	clrf	UpdateCfList@frequency& (0+255),b
 11939  0031F4  6B76               	clrf	(UpdateCfList@frequency+1)& (0+255),b
 11940  0031F6  6B77               	clrf	(UpdateCfList@frequency+2)& (0+255),b
 11941  0031F8  6B78               	clrf	(UpdateCfList@frequency+3)& (0+255),b
 11942                           
 11943                           ; BSR set to: 0
 11944                           ;lorawan_eu.c: 838: memcpy (&frequency, joinAccept->members.cfList + 3*i, 3);
 11945  0031FA  0E75               	movlw	low UpdateCfList@frequency
 11946  0031FC  6F64               	movwf	memcpy@d1& (0+255),b
 11947  0031FE  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 11948  003200  517A               	movf	UpdateCfList@i& (0+255),w,b
 11949  003202  0D03               	mullw	3
 11950  003204  C070  F072         	movff	UpdateCfList@joinAccept,??_UpdateCfList
 11951  003208  C071  F073         	movff	UpdateCfList@joinAccept+1,??_UpdateCfList+1
 11952  00320C  50F3               	movf	prodl,w,c
 11953  00320E  2772               	addwf	??_UpdateCfList& (0+255),f,b
 11954  003210  50F4               	movf	prodh,w,c
 11955  003212  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 11956  003214  0E0D               	movlw	13
 11957  003216  2772               	addwf	??_UpdateCfList& (0+255),f,b
 11958  003218  0E00               	movlw	0
 11959  00321A  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 11960  00321C  5172               	movf	??_UpdateCfList& (0+255),w,b
 11961  00321E  6F66               	movwf	memcpy@s1& (0+255),b
 11962  003220  6B67               	clrf	(memcpy@s1+1)& (0+255),b
 11963  003222  6B69               	clrf	(memcpy@n+1)& (0+255),b
 11964  003224  0E03               	movlw	3
 11965  003226  6F68               	movwf	memcpy@n& (0+255),b
 11966  003228  ECCA  F033         	call	_memcpy	;wreg free
 11967                           
 11968                           ; BSR set to: 0
 11969                           ;lorawan_eu.c: 839: frequency *= 100;
 11970  00322C  C075  F064         	movff	UpdateCfList@frequency,___lmul@multiplier
 11971  003230  C076  F065         	movff	UpdateCfList@frequency+1,___lmul@multiplier+1
 11972  003234  C077  F066         	movff	UpdateCfList@frequency+2,___lmul@multiplier+2
 11973  003238  C078  F067         	movff	UpdateCfList@frequency+3,___lmul@multiplier+3
 11974  00323C  0E64               	movlw	100
 11975  00323E  6F68               	movwf	___lmul@multiplicand& (0+255),b
 11976  003240  6B69               	clrf	(___lmul@multiplicand+1)& (0+255),b
 11977  003242  6B6A               	clrf	(___lmul@multiplicand+2)& (0+255),b
 11978  003244  6B6B               	clrf	(___lmul@multiplicand+3)& (0+255),b
 11979  003246  EC79  F02E         	call	___lmul	;wreg free
 11980  00324A  C064  F075         	movff	?___lmul,UpdateCfList@frequency
 11981  00324E  C065  F076         	movff	?___lmul+1,UpdateCfList@frequency+1
 11982  003252  C066  F077         	movff	?___lmul+2,UpdateCfList@frequency+2
 11983  003256  C067  F078         	movff	?___lmul+3,UpdateCfList@frequency+3
 11984                           
 11985                           ; BSR set to: 0
 11986                           ;lorawan_eu.c: 840: if (frequency != 0)
 11987  00325A  5175               	movf	UpdateCfList@frequency& (0+255),w,b
 11988  00325C  1176               	iorwf	(UpdateCfList@frequency+1)& (0+255),w,b
 11989  00325E  1177               	iorwf	(UpdateCfList@frequency+2)& (0+255),w,b
 11990  003260  1178               	iorwf	(UpdateCfList@frequency+3)& (0+255),w,b
 11991  003262  E101 D094          	bz	l13606
 11992                           
 11993                           ; BSR set to: 0
 11994                           ;lorawan_eu.c: 841: {
 11995                           ;lorawan_eu.c: 842: if (ValidateFrequency (frequency) == OK)
 11996  003266  C075  F064         	movff	UpdateCfList@frequency,ValidateFrequency@frequencyNew
 11997  00326A  C076  F065         	movff	UpdateCfList@frequency+1,ValidateFrequency@frequencyNew+1
 11998  00326E  C077  F066         	movff	UpdateCfList@frequency+2,ValidateFrequency@frequencyNew+2
 11999  003272  C078  F067         	movff	UpdateCfList@frequency+3,ValidateFrequency@frequencyNew+3
 12000  003276  EC70  F033         	call	_ValidateFrequency	;wreg free
 12001  00327A  0900               	iorlw	0
 12002  00327C  E001 D08C          	bnz	l13608
 12003                           
 12004                           ; BSR set to: 0
 12005                           ;lorawan_eu.c: 843: {
 12006                           ;lorawan_eu.c: 844: Channels[i+channelIndex].frequency = frequency;
 12007  003280  517A               	movf	UpdateCfList@i& (0+255),w,b
 12008  003282  0D0E               	mullw	14
 12009  003284  0E00               	movlw	low _Channels
 12010  003286  6F72               	movwf	??_UpdateCfList& (0+255),b
 12011  003288  0E04               	movlw	high _Channels
 12012  00328A  6F73               	movwf	(??_UpdateCfList+1)& (0+255),b
 12013  00328C  50F3               	movf	prodl,w,c
 12014  00328E  2772               	addwf	??_UpdateCfList& (0+255),f,b
 12015  003290  50F4               	movf	prodh,w,c
 12016  003292  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12017  003294  5179               	movf	UpdateCfList@channelIndex& (0+255),w,b
 12018  003296  0D0E               	mullw	14
 12019  003298  50F3               	movf	prodl,w,c
 12020  00329A  2572               	addwf	??_UpdateCfList& (0+255),w,b
 12021  00329C  6ED9               	movwf	fsr2l,c
 12022  00329E  50F4               	movf	prodh,w,c
 12023  0032A0  2173               	addwfc	(??_UpdateCfList+1)& (0+255),w,b
 12024  0032A2  6EDA               	movwf	fsr2h,c
 12025  0032A4  C075  FFDE         	movff	UpdateCfList@frequency,postinc2
 12026  0032A8  C076  FFDE         	movff	UpdateCfList@frequency+1,postinc2
 12027  0032AC  C077  FFDE         	movff	UpdateCfList@frequency+2,postinc2
 12028  0032B0  C078  FFDE         	movff	UpdateCfList@frequency+3,postinc2
 12029                           
 12030                           ;lorawan_eu.c: 845: Channels[i+channelIndex].dataRange.max = 5;
 12031  0032B4  517A               	movf	UpdateCfList@i& (0+255),w,b
 12032  0032B6  0D0E               	mullw	14
 12033  0032B8  0E00               	movlw	low _Channels
 12034  0032BA  6F72               	movwf	??_UpdateCfList& (0+255),b
 12035  0032BC  0E04               	movlw	high _Channels
 12036  0032BE  6F73               	movwf	(??_UpdateCfList+1)& (0+255),b
 12037  0032C0  0E05               	movlw	5
 12038  0032C2  2772               	addwf	??_UpdateCfList& (0+255),f,b
 12039  0032C4  0E00               	movlw	0
 12040  0032C6  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12041  0032C8  50F3               	movf	prodl,w,c
 12042  0032CA  2772               	addwf	??_UpdateCfList& (0+255),f,b
 12043  0032CC  50F4               	movf	prodh,w,c
 12044  0032CE  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12045  0032D0  5179               	movf	UpdateCfList@channelIndex& (0+255),w,b
 12046  0032D2  0D0E               	mullw	14
 12047  0032D4  50F3               	movf	prodl,w,c
 12048  0032D6  2572               	addwf	??_UpdateCfList& (0+255),w,b
 12049  0032D8  6ED9               	movwf	fsr2l,c
 12050  0032DA  50F4               	movf	prodh,w,c
 12051  0032DC  2173               	addwfc	(??_UpdateCfList+1)& (0+255),w,b
 12052  0032DE  6EDA               	movwf	fsr2h,c
 12053  0032E0  50DF               	movf	223,w,c
 12054  0032E2  0B0F               	andlw	-241
 12055  0032E4  0950               	iorlw	80
 12056  0032E6  6EDF               	movwf	223,c
 12057                           
 12058                           ;lorawan_eu.c: 846: Channels[i+channelIndex].dataRange.min = 0;
 12059  0032E8  0100               	movlb	0	; () banked
 12060  0032EA  517A               	movf	UpdateCfList@i& (0+255),w,b
 12061  0032EC  0D0E               	mullw	14
 12062  0032EE  0E00               	movlw	low _Channels
 12063  0032F0  6F72               	movwf	??_UpdateCfList& (0+255),b
 12064  0032F2  0E04               	movlw	high _Channels
 12065  0032F4  6F73               	movwf	(??_UpdateCfList+1)& (0+255),b
 12066  0032F6  0E05               	movlw	5
 12067  0032F8  2772               	addwf	??_UpdateCfList& (0+255),f,b
 12068  0032FA  0E00               	movlw	0
 12069  0032FC  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12070  0032FE  50F3               	movf	prodl,w,c
 12071  003300  2772               	addwf	??_UpdateCfList& (0+255),f,b
 12072  003302  50F4               	movf	prodh,w,c
 12073  003304  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12074  003306  5179               	movf	UpdateCfList@channelIndex& (0+255),w,b
 12075  003308  0D0E               	mullw	14
 12076  00330A  50F3               	movf	prodl,w,c
 12077  00330C  2572               	addwf	??_UpdateCfList& (0+255),w,b
 12078  00330E  6ED9               	movwf	fsr2l,c
 12079  003310  50F4               	movf	prodh,w,c
 12080  003312  2173               	addwfc	(??_UpdateCfList+1)& (0+255),w,b
 12081  003314  6EDA               	movwf	fsr2h,c
 12082  003316  0EF0               	movlw	-16
 12083  003318  16DF               	andwf	223,f,c
 12084                           
 12085                           ;lorawan_eu.c: 847: Channels[i+channelIndex].dutyCycle = 999;
 12086  00331A  517A               	movf	UpdateCfList@i& (0+255),w,b
 12087  00331C  0D0E               	mullw	14
 12088  00331E  0E00               	movlw	low _Channels
 12089  003320  6F72               	movwf	??_UpdateCfList& (0+255),b
 12090  003322  0E04               	movlw	high _Channels
 12091  003324  6F73               	movwf	(??_UpdateCfList+1)& (0+255),b
 12092  003326  0E06               	movlw	6
 12093  003328  2772               	addwf	??_UpdateCfList& (0+255),f,b
 12094  00332A  0E00               	movlw	0
 12095  00332C  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12096  00332E  50F3               	movf	prodl,w,c
 12097  003330  2772               	addwf	??_UpdateCfList& (0+255),f,b
 12098  003332  50F4               	movf	prodh,w,c
 12099  003334  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12100  003336  5179               	movf	UpdateCfList@channelIndex& (0+255),w,b
 12101  003338  0D0E               	mullw	14
 12102  00333A  50F3               	movf	prodl,w,c
 12103  00333C  2572               	addwf	??_UpdateCfList& (0+255),w,b
 12104  00333E  6ED9               	movwf	fsr2l,c
 12105  003340  50F4               	movf	prodh,w,c
 12106  003342  2173               	addwfc	(??_UpdateCfList+1)& (0+255),w,b
 12107  003344  6EDA               	movwf	fsr2h,c
 12108  003346  0EE7               	movlw	231
 12109  003348  6EDE               	movwf	postinc2,c
 12110  00334A  0E03               	movlw	3
 12111  00334C  6EDD               	movwf	postdec2,c
 12112                           
 12113                           ;lorawan_eu.c: 848: Channels[i+channelIndex].parametersDefined = 0xFF;
 12114  00334E  517A               	movf	UpdateCfList@i& (0+255),w,b
 12115  003350  0D0E               	mullw	14
 12116  003352  0E00               	movlw	low _Channels
 12117  003354  6F72               	movwf	??_UpdateCfList& (0+255),b
 12118  003356  0E04               	movlw	high _Channels
 12119  003358  6F73               	movwf	(??_UpdateCfList+1)& (0+255),b
 12120  00335A  0E0D               	movlw	13
 12121  00335C  2772               	addwf	??_UpdateCfList& (0+255),f,b
 12122  00335E  0E00               	movlw	0
 12123  003360  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12124  003362  50F3               	movf	prodl,w,c
 12125  003364  2772               	addwf	??_UpdateCfList& (0+255),f,b
 12126  003366  50F4               	movf	prodh,w,c
 12127  003368  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12128  00336A  5179               	movf	UpdateCfList@channelIndex& (0+255),w,b
 12129  00336C  0D0E               	mullw	14
 12130  00336E  50F3               	movf	prodl,w,c
 12131  003370  2572               	addwf	??_UpdateCfList& (0+255),w,b
 12132  003372  6ED9               	movwf	fsr2l,c
 12133  003374  50F4               	movf	prodh,w,c
 12134  003376  2173               	addwfc	(??_UpdateCfList+1)& (0+255),w,b
 12135  003378  6EDA               	movwf	fsr2h,c
 12136  00337A  68DF               	setf	indf2,c
 12137                           
 12138                           ; BSR set to: 0
 12139                           ;lorawan_eu.c: 849: LORAWAN_SetChannelIdStatus(i+channelIndex, 1);
 12140  00337C  0E01               	movlw	1
 12141  00337E  6F68               	movwf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 12142  003380  517A               	movf	UpdateCfList@i& (0+255),w,b
 12143  003382  2579               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 12144  003384  EC75  F037         	call	_LORAWAN_SetChannelIdStatus
 12145                           
 12146                           ;lorawan_eu.c: 850: loRa.macStatus.channelsModified = 1;
 12147  003388  0102               	movlb	2	; () banked
 12148  00338A  8703               	bsf	(_loRa+3)& (0+255),3,b
 12149  00338C  D005               	goto	l13608
 12150  00338E                     l13606:
 12151                           
 12152                           ; BSR set to: 0
 12153                           ;lorawan_eu.c: 853: else
 12154                           ;lorawan_eu.c: 854: {
 12155                           ;lorawan_eu.c: 855: LORAWAN_SetChannelIdStatus(i+channelIndex, 0);
 12156  00338E  6B68               	clrf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 12157  003390  517A               	movf	UpdateCfList@i& (0+255),w,b
 12158  003392  2579               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 12159  003394  EC75  F037         	call	_LORAWAN_SetChannelIdStatus
 12160  003398                     l13608:
 12161  003398  0100               	movlb	0	; () banked
 12162  00339A  2B7A               	incf	UpdateCfList@i& (0+255),f,b
 12163                           
 12164                           ; BSR set to: 0
 12165  00339C  0E04               	movlw	4
 12166  00339E  657A               	cpfsgt	UpdateCfList@i& (0+255),b
 12167  0033A0  D728               	goto	l1168
 12168                           
 12169                           ; BSR set to: 0
 12170                           ;lorawan_eu.c: 856: }
 12171                           ;lorawan_eu.c: 857: }
 12172                           ;lorawan_eu.c: 859: loRa.macStatus.channelsModified = 1;
 12173  0033A2  0102               	movlb	2	; () banked
 12174  0033A4  8703               	bsf	(_loRa+3)& (0+255),3,b
 12175  0033A6  0C04               	retlw	4	;funcret
 12176  0033A8                     __end_of_UpdateCfList:
 12177                           	opt stack 0
 12178                           tosu	equ	0xFFF
 12179                           tosh	equ	0xFFE
 12180                           tosl	equ	0xFFD
 12181                           pclath	equ	0xFFA
 12182                           tblptru	equ	0xFF8
 12183                           tblptrh	equ	0xFF7
 12184                           tblptrl	equ	0xFF6
 12185                           tablat	equ	0xFF5
 12186                           prodh	equ	0xFF4
 12187                           prodl	equ	0xFF3
 12188                           intcon	equ	0xFF2
 12189                           intcon2	equ	0xFF1
 12190                           intcon3	equ	0xFF0
 12191                           postinc0	equ	0xFEE
 12192                           wreg	equ	0xFE8
 12193                           postinc1	equ	0xFE6
 12194                           postdec1	equ	0xFE5
 12195                           plusw1	equ	0xFE3
 12196                           fsr1h	equ	0xFE2
 12197                           fsr1l	equ	0xFE1
 12198                           indf2	equ	0xFDF
 12199                           postinc2	equ	0xFDE
 12200                           postdec2	equ	0xFDD
 12201                           fsr2h	equ	0xFDA
 12202                           fsr2l	equ	0xFD9
 12203                           status	equ	0xFD8
 12204                           
 12205 ;; *************** function _StartReTxTimer *****************
 12206 ;; Defined at:
 12207 ;;		line 902 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 12208 ;; Parameters:    Size  Location     Type
 12209 ;;		None
 12210 ;; Auto vars:     Size  Location     Type
 12211 ;;  minim           4   56[BANK0 ] unsigned long 
 12212 ;;  i               1   60[BANK0 ] unsigned char 
 12213 ;; Return value:  Size  Location     Type
 12214 ;;                  1    wreg      void 
 12215 ;; Registers used:
 12216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12217 ;; Tracked objects:
 12218 ;;		On entry : E/0
 12219 ;;		On exit  : F/0
 12220 ;;		Unchanged: 0/0
 12221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12223 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12224 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12225 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12226 ;;Total ram usage:        9 bytes
 12227 ;; Hardware stack levels used:    1
 12228 ;; Hardware stack levels required when called:   11
 12229 ;; This function calls:
 12230 ;;		_SwTimerSetTimeout
 12231 ;;		_SwTimerStart
 12232 ;;		___lldiv
 12233 ;; This function is called by:
 12234 ;;		_LORAWAN_RxDone
 12235 ;; This function uses a non-reentrant model
 12236 ;;
 12237                           
 12238                           	psect	text60
 12239  00441E                     __ptext60:
 12240                           	opt stack 0
 12241  00441E                     _StartReTxTimer:
 12242                           	opt stack 15
 12243                           
 12244                           ;lorawan_eu.c: 904: uint8_t i;
 12245                           ;lorawan_eu.c: 905: uint32_t minim = (4294967295UL);
 12246                           
 12247                           ;incstack = 0
 12248  00441E  0100               	movlb	0	; () banked
 12249  004420  6998               	setf	StartReTxTimer@minim& (0+255),b
 12250  004422  6999               	setf	(StartReTxTimer@minim+1)& (0+255),b
 12251  004424  699A               	setf	(StartReTxTimer@minim+2)& (0+255),b
 12252  004426  699B               	setf	(StartReTxTimer@minim+3)& (0+255),b
 12253                           
 12254                           ;lorawan_eu.c: 907: for (i = 0; i <= loRa.maxChannels; i++)
 12255  004428  6B9C               	clrf	StartReTxTimer@i& (0+255),b
 12256  00442A  D05B               	goto	l13636
 12257  00442C                     l13622:
 12258                           
 12259                           ; BSR set to: 2
 12260                           ;lorawan_eu.c: 908: {
 12261                           ;lorawan_eu.c: 909: if ( (Channels[i].status == 1) && (Channels[i].channelTimer != 0) &&
      +                           (Channels[i].channelTimer <= minim) && (loRa.currentDataRate >= Channels[i].dataRange.m
      +                          in) && (loRa.currentDataRate <= Channels[i].dataRange.max) )
 12262  00442C  0100               	movlb	0	; () banked
 12263  00442E  519C               	movf	StartReTxTimer@i& (0+255),w,b
 12264  004430  0D0E               	mullw	14
 12265  004432  0E04               	movlw	low (_Channels+4)
 12266  004434  24F3               	addwf	prodl,w,c
 12267  004436  6ED9               	movwf	fsr2l,c
 12268  004438  0E04               	movlw	high (_Channels+4)
 12269  00443A  20F4               	addwfc	prodh,w,c
 12270  00443C  6EDA               	movwf	fsr2h,c
 12271  00443E  04DE               	decf	postinc2,w,c
 12272  004440  E14E               	bnz	l13634
 12273                           
 12274                           ; BSR set to: 0
 12275  004442  519C               	movf	StartReTxTimer@i& (0+255),w,b
 12276  004444  0D0E               	mullw	14
 12277  004446  0E08               	movlw	low (_Channels+8)
 12278  004448  24F3               	addwf	prodl,w,c
 12279  00444A  6ED9               	movwf	fsr2l,c
 12280  00444C  0E04               	movlw	high (_Channels+8)
 12281  00444E  20F4               	addwfc	prodh,w,c
 12282  004450  6EDA               	movwf	fsr2h,c
 12283  004452  50DE               	movf	postinc2,w,c
 12284  004454  10DE               	iorwf	postinc2,w,c
 12285  004456  10DE               	iorwf	postinc2,w,c
 12286  004458  10DE               	iorwf	postinc2,w,c
 12287  00445A  E041               	bz	l13634
 12288                           
 12289                           ; BSR set to: 0
 12290  00445C  519C               	movf	StartReTxTimer@i& (0+255),w,b
 12291  00445E  0D0E               	mullw	14
 12292  004460  0E08               	movlw	low (_Channels+8)
 12293  004462  24F3               	addwf	prodl,w,c
 12294  004464  6ED9               	movwf	fsr2l,c
 12295  004466  0E04               	movlw	high (_Channels+8)
 12296  004468  20F4               	addwfc	prodh,w,c
 12297  00446A  6EDA               	movwf	fsr2h,c
 12298  00446C  50DE               	movf	postinc2,w,c
 12299  00446E  5D98               	subwf	StartReTxTimer@minim& (0+255),w,b
 12300  004470  50DE               	movf	postinc2,w,c
 12301  004472  5999               	subwfb	(StartReTxTimer@minim+1)& (0+255),w,b
 12302  004474  50DE               	movf	postinc2,w,c
 12303  004476  599A               	subwfb	(StartReTxTimer@minim+2)& (0+255),w,b
 12304  004478  50DE               	movf	postinc2,w,c
 12305  00447A  599B               	subwfb	(StartReTxTimer@minim+3)& (0+255),w,b
 12306  00447C  E330               	bnc	l13634
 12307                           
 12308                           ; BSR set to: 0
 12309  00447E  519C               	movf	StartReTxTimer@i& (0+255),w,b
 12310  004480  0D0E               	mullw	14
 12311  004482  0E05               	movlw	low (_Channels+5)
 12312  004484  24F3               	addwf	prodl,w,c
 12313  004486  6ED9               	movwf	fsr2l,c
 12314  004488  0E04               	movlw	high (_Channels+5)
 12315  00448A  20F4               	addwfc	prodh,w,c
 12316  00448C  6EDA               	movwf	fsr2h,c
 12317  00448E  50DF               	movf	223,w,c
 12318  004490  0B0F               	andlw	15
 12319  004492  6F94               	movwf	??_StartReTxTimer& (0+255),b
 12320  004494  5194               	movf	??_StartReTxTimer& (0+255),w,b
 12321  004496  0102               	movlb	2	; () banked
 12322  004498  5DDF               	subwf	(_loRa+223)& (0+255),w,b
 12323  00449A  E321               	bnc	l13634
 12324                           
 12325                           ; BSR set to: 2
 12326  00449C  0100               	movlb	0	; () banked
 12327  00449E  519C               	movf	StartReTxTimer@i& (0+255),w,b
 12328  0044A0  0D0E               	mullw	14
 12329  0044A2  0E05               	movlw	low (_Channels+5)
 12330  0044A4  24F3               	addwf	prodl,w,c
 12331  0044A6  6ED9               	movwf	fsr2l,c
 12332  0044A8  0E04               	movlw	high (_Channels+5)
 12333  0044AA  20F4               	addwfc	prodh,w,c
 12334  0044AC  6EDA               	movwf	fsr2h,c
 12335  0044AE  38DF               	swapf	223,w,c
 12336  0044B0  0B0F               	andlw	15
 12337  0044B2  6F94               	movwf	??_StartReTxTimer& (0+255),b
 12338  0044B4  0102               	movlb	2	; () banked
 12339  0044B6  51DF               	movf	(_loRa+223)& (0+255),w,b
 12340  0044B8  0100               	movlb	0	; () banked
 12341  0044BA  5D94               	subwf	??_StartReTxTimer& (0+255),w,b
 12342  0044BC  E310               	bnc	l13634
 12343                           
 12344                           ; BSR set to: 0
 12345                           ;lorawan_eu.c: 910: {
 12346                           ;lorawan_eu.c: 911: minim = Channels[i].channelTimer;
 12347  0044BE  519C               	movf	StartReTxTimer@i& (0+255),w,b
 12348  0044C0  0D0E               	mullw	14
 12349  0044C2  0E08               	movlw	low (_Channels+8)
 12350  0044C4  24F3               	addwf	prodl,w,c
 12351  0044C6  6ED9               	movwf	fsr2l,c
 12352  0044C8  0E04               	movlw	high (_Channels+8)
 12353  0044CA  20F4               	addwfc	prodh,w,c
 12354  0044CC  6EDA               	movwf	fsr2h,c
 12355  0044CE  CFDE F098          	movff	postinc2,StartReTxTimer@minim
 12356  0044D2  CFDE F099          	movff	postinc2,StartReTxTimer@minim+1
 12357  0044D6  CFDE F09A          	movff	postinc2,StartReTxTimer@minim+2
 12358  0044DA  CFDE F09B          	movff	postinc2,StartReTxTimer@minim+3
 12359  0044DE                     l13634:
 12360  0044DE  0100               	movlb	0	; () banked
 12361  0044E0  2B9C               	incf	StartReTxTimer@i& (0+255),f,b
 12362  0044E2                     l13636:
 12363                           
 12364                           ; BSR set to: 0
 12365  0044E2  519C               	movf	StartReTxTimer@i& (0+255),w,b
 12366  0044E4  0102               	movlb	2	; () banked
 12367  0044E6  5DED               	subwf	(_loRa+237)& (0+255),w,b
 12368  0044E8  E2A1               	bc	l13622
 12369                           
 12370                           ; BSR set to: 2
 12371                           ;lorawan_eu.c: 912: }
 12372                           ;lorawan_eu.c: 913: }
 12373                           ;lorawan_eu.c: 914: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 12374  0044EA  5102               	movf	(_loRa+2)& (0+255),w,b
 12375  0044EC  0BF0               	andlw	-16
 12376  0044EE  0906               	iorlw	6
 12377  0044F0  6F02               	movwf	(_loRa+2)& (0+255),b
 12378                           
 12379                           ; BSR set to: 2
 12380                           ;lorawan_eu.c: 915: SwTimerSetTimeout (loRa.automaticReplyTimerId, ( (((uint32_t)(minim)
      +                          ) << (12)) / 125UL ) );
 12381  0044F2  C098  F094         	movff	StartReTxTimer@minim,??_StartReTxTimer
 12382  0044F6  C099  F095         	movff	StartReTxTimer@minim+1,??_StartReTxTimer+1
 12383  0044FA  C09A  F096         	movff	StartReTxTimer@minim+2,??_StartReTxTimer+2
 12384  0044FE  C09B  F097         	movff	StartReTxTimer@minim+3,??_StartReTxTimer+3
 12385  004502  0E0C               	movlw	12
 12386  004504                     u15455:
 12387  004504  90D8               	bcf	status,0,c
 12388  004506  0100               	movlb	0	; () banked
 12389  004508  3794               	rlcf	??_StartReTxTimer& (0+255),f,b
 12390  00450A  3795               	rlcf	(??_StartReTxTimer+1)& (0+255),f,b
 12391  00450C  3796               	rlcf	(??_StartReTxTimer+2)& (0+255),f,b
 12392  00450E  3797               	rlcf	(??_StartReTxTimer+3)& (0+255),f,b
 12393  004510  2EE8               	decfsz	wreg,f,c
 12394  004512  D7F8               	goto	u15455
 12395  004514  C094  F064         	movff	??_StartReTxTimer,___lldiv@dividend
 12396  004518  C095  F065         	movff	??_StartReTxTimer+1,___lldiv@dividend+1
 12397  00451C  C096  F066         	movff	??_StartReTxTimer+2,___lldiv@dividend+2
 12398  004520  C097  F067         	movff	??_StartReTxTimer+3,___lldiv@dividend+3
 12399  004524  0E7D               	movlw	125
 12400  004526  6F68               	movwf	___lldiv@divisor& (0+255),b
 12401  004528  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 12402  00452A  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 12403  00452C  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 12404  00452E  EC35  F030         	call	___lldiv	;wreg free
 12405  004532  C064  F071         	movff	?___lldiv,SwTimerSetTimeout@timeout
 12406  004536  C065  F072         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 12407  00453A  C066  F073         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 12408  00453E  C067  F074         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 12409  004542  0102               	movlb	2	; () banked
 12410  004544  51E6               	movf	(_loRa+230)& (0+255),w,b
 12411  004546  EC44  F036         	call	_SwTimerSetTimeout
 12412                           
 12413                           ; BSR set to: 0
 12414                           ;lorawan_eu.c: 916: SwTimerStart (loRa.automaticReplyTimerId);
 12415  00454A  0102               	movlb	2	; () banked
 12416  00454C  51E6               	movf	(_loRa+230)& (0+255),w,b
 12417  00454E  EF35  F02E         	goto	_SwTimerStart
 12418  004552                     __end_of_StartReTxTimer:
 12419                           	opt stack 0
 12420                           tosu	equ	0xFFF
 12421                           tosh	equ	0xFFE
 12422                           tosl	equ	0xFFD
 12423                           pclath	equ	0xFFA
 12424                           tblptru	equ	0xFF8
 12425                           tblptrh	equ	0xFF7
 12426                           tblptrl	equ	0xFF6
 12427                           tablat	equ	0xFF5
 12428                           prodh	equ	0xFF4
 12429                           prodl	equ	0xFF3
 12430                           intcon	equ	0xFF2
 12431                           intcon2	equ	0xFF1
 12432                           intcon3	equ	0xFF0
 12433                           postinc0	equ	0xFEE
 12434                           wreg	equ	0xFE8
 12435                           postinc1	equ	0xFE6
 12436                           postdec1	equ	0xFE5
 12437                           plusw1	equ	0xFE3
 12438                           fsr1h	equ	0xFE2
 12439                           fsr1l	equ	0xFE1
 12440                           indf2	equ	0xFDF
 12441                           postinc2	equ	0xFDE
 12442                           postdec2	equ	0xFDD
 12443                           fsr2h	equ	0xFDA
 12444                           fsr2l	equ	0xFD9
 12445                           status	equ	0xFD8
 12446                           
 12447 ;; *************** function _SetReceptionNotOkState *****************
 12448 ;; Defined at:
 12449 ;;		line 1997 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 12450 ;; Parameters:    Size  Location     Type
 12451 ;;		None
 12452 ;; Auto vars:     Size  Location     Type
 12453 ;;		None
 12454 ;; Return value:  Size  Location     Type
 12455 ;;                  1    wreg      void 
 12456 ;; Registers used:
 12457 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12458 ;; Tracked objects:
 12459 ;;		On entry : E/2
 12460 ;;		On exit  : C/0
 12461 ;;		Unchanged: 0/0
 12462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12467 ;;Total ram usage:        0 bytes
 12468 ;; Hardware stack levels used:    1
 12469 ;; Hardware stack levels required when called:   14
 12470 ;; This function calls:
 12471 ;;		_LORAWAN_EnterContinuousReceive
 12472 ;;		_RxDataDone
 12473 ;; This function is called by:
 12474 ;;		_LORAWAN_RxDone
 12475 ;; This function uses a non-reentrant model
 12476 ;;
 12477                           
 12478                           	psect	text61
 12479  006298                     __ptext61:
 12480                           	opt stack 0
 12481  006298                     _SetReceptionNotOkState:
 12482                           	opt stack 12
 12483                           
 12484                           ;lorawan.c: 1999: if ( (loRa.macStatus.macState == RX2_OPEN) || ( (loRa.macStatus.macSta
      +                          te == RX1_OPEN) && (loRa.rx2DelayExpired) ) )
 12485                           
 12486                           ; BSR set to: 0
 12487                           ;incstack = 0
 12488  006298  0102               	movlb	2	; () banked
 12489  00629A  5102               	movf	(_loRa+2)& (0+255),w,b
 12490  00629C  0B0F               	andlw	15
 12491  00629E  0A05               	xorlw	5
 12492  0062A0  E006               	bz	l2256
 12493                           
 12494                           ; BSR set to: 2
 12495  0062A2  5102               	movf	(_loRa+2)& (0+255),w,b
 12496  0062A4  0B0F               	andlw	15
 12497  0062A6  0A03               	xorlw	3
 12498  0062A8  E122               	bnz	l13800
 12499                           
 12500                           ; BSR set to: 2
 12501  0062AA  51F1               	movf	(_loRa+241)& (0+255),w,b
 12502  0062AC  E020               	bz	l13800
 12503  0062AE                     l2256:
 12504                           
 12505                           ; BSR set to: 2
 12506                           ;lorawan.c: 2000: {
 12507                           ;lorawan.c: 2001: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 12508  0062AE  9100               	bcf	_loRa& (0+255),0,b
 12509                           
 12510                           ; BSR set to: 2
 12511                           ;lorawan.c: 2002: loRa.macStatus.macState = IDLE;
 12512  0062B0  0EF0               	movlw	-16
 12513  0062B2  1702               	andwf	(_loRa+2)& (0+255),f,b
 12514                           
 12515                           ;lorawan.c: 2004: if ((loRa.deviceClass == CLASS_A) && (rxPayload.RxAppData != (0)))
 12516  0062B4  5112               	movf	(_loRa+18)& (0+255),w,b
 12517  0062B6  E119               	bnz	l13798
 12518                           
 12519                           ; BSR set to: 2
 12520  0062B8  0101               	movlb	1	; () banked
 12521  0062BA  516E               	movf	_rxPayload& (0+255),w,b
 12522  0062BC  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 12523  0062BE  E015               	bz	l13798
 12524                           
 12525                           ; BSR set to: 1
 12526                           ;lorawan.c: 2005: {
 12527                           ;lorawan.c: 2006: loRa.lorawanMacStatus.synchronization = 0;
 12528  0062C0  0102               	movlb	2	; () banked
 12529  0062C2  9B00               	bcf	_loRa& (0+255),5,b
 12530                           
 12531                           ; BSR set to: 2
 12532                           ;lorawan.c: 2007: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 12533  0062C4  0E00               	movlw	0
 12534  0062C6  0100               	movlb	0	; () banked
 12535  0062C8  6F64               	movwf	RxDataDone@pData& (0+255),b
 12536  0062CA  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
 12537  0062CC  6F66               	movwf	RxDataDone@dataLength& (0+255),b
 12538  0062CE  6F67               	movwf	RxDataDone@status& (0+255),b
 12539  0062D0  D801               	call	u15778
 12540  0062D2  D00B               	goto	l13798
 12541  0062D4                     u15778:
 12542  0062D4  0005               	push	
 12543  0062D6  0101               	movlb	1	; () banked
 12544  0062D8  6EFA               	movwf	pclath,c
 12545  0062DA  516E               	movf	_rxPayload& (0+255),w,b
 12546  0062DC  6EFD               	movwf	tosl,c
 12547  0062DE  516F               	movf	(_rxPayload+1)& (0+255),w,b
 12548  0062E0  6EFE               	movwf	tosh,c
 12549  0062E2  50F8               	movf	tblptru,w,c
 12550  0062E4  6EFF               	movwf	tosu,c
 12551  0062E6  50FA               	movf	pclath,w,c
 12552  0062E8  0012               	return		;indir
 12553  0062EA                     l13798:
 12554                           
 12555                           ;lorawan.c: 2008: }
 12556                           ;lorawan.c: 2009: loRa.macStatus.rxDone = 0;
 12557  0062EA  0102               	movlb	2	; () banked
 12558  0062EC  9303               	bcf	(_loRa+3)& (0+255),1,b
 12559  0062EE                     l13800:
 12560                           
 12561                           ; BSR set to: 2
 12562                           ;lorawan.c: 2010: }
 12563                           ;lorawan.c: 2012: if (loRa.deviceClass == CLASS_C)
 12564  0062EE  0E02               	movlw	2
 12565  0062F0  1912               	xorwf	(_loRa+18)& (0+255),w,b
 12566  0062F2  A4D8               	btfss	status,2,c
 12567  0062F4  0012               	return	
 12568                           
 12569                           ; BSR set to: 2
 12570                           ;lorawan.c: 2013: {
 12571                           ;lorawan.c: 2014: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12572  0062F6  5102               	movf	(_loRa+2)& (0+255),w,b
 12573  0062F8  0BF0               	andlw	-16
 12574  0062FA  0909               	iorlw	9
 12575  0062FC  6F02               	movwf	(_loRa+2)& (0+255),b
 12576                           
 12577                           ; BSR set to: 2
 12578                           ;lorawan.c: 2015: LORAWAN_EnterContinuousReceive();
 12579  0062FE  EF81  F031         	goto	_LORAWAN_EnterContinuousReceive	;wreg free
 12580  006302                     __end_of_SetReceptionNotOkState:
 12581                           	opt stack 0
 12582                           tosu	equ	0xFFF
 12583                           tosh	equ	0xFFE
 12584                           tosl	equ	0xFFD
 12585                           pclath	equ	0xFFA
 12586                           tblptru	equ	0xFF8
 12587                           tblptrh	equ	0xFF7
 12588                           tblptrl	equ	0xFF6
 12589                           tablat	equ	0xFF5
 12590                           prodh	equ	0xFF4
 12591                           prodl	equ	0xFF3
 12592                           intcon	equ	0xFF2
 12593                           intcon2	equ	0xFF1
 12594                           intcon3	equ	0xFF0
 12595                           postinc0	equ	0xFEE
 12596                           wreg	equ	0xFE8
 12597                           postinc1	equ	0xFE6
 12598                           postdec1	equ	0xFE5
 12599                           plusw1	equ	0xFE3
 12600                           fsr1h	equ	0xFE2
 12601                           fsr1l	equ	0xFE1
 12602                           indf2	equ	0xFDF
 12603                           postinc2	equ	0xFDE
 12604                           postdec2	equ	0xFDD
 12605                           fsr2h	equ	0xFDA
 12606                           fsr2l	equ	0xFD9
 12607                           status	equ	0xFD8
 12608                           
 12609 ;; *************** function _SetJoinFailState *****************
 12610 ;; Defined at:
 12611 ;;		line 1104 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 12612 ;; Parameters:    Size  Location     Type
 12613 ;;		None
 12614 ;; Auto vars:     Size  Location     Type
 12615 ;;		None
 12616 ;; Return value:  Size  Location     Type
 12617 ;;                  1    wreg      void 
 12618 ;; Registers used:
 12619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
 12620 ;; Tracked objects:
 12621 ;;		On entry : F/2
 12622 ;;		On exit  : F/1
 12623 ;;		Unchanged: 0/0
 12624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12629 ;;Total ram usage:        0 bytes
 12630 ;; Hardware stack levels used:    1
 12631 ;; Hardware stack levels required when called:    8
 12632 ;; This function calls:
 12633 ;;		_RxJoinResponse
 12634 ;; This function is called by:
 12635 ;;		_LORAWAN_RxTimeout
 12636 ;;		_LORAWAN_RxDone
 12637 ;; This function uses a non-reentrant model
 12638 ;;
 12639                           
 12640                           	psect	text62
 12641  00716C                     __ptext62:
 12642                           	opt stack 0
 12643  00716C                     _SetJoinFailState:
 12644                           	opt stack 18
 12645                           
 12646                           ; BSR set to: 2
 12647                           ;lorawan.c: 1106: loRa.macStatus.networkJoined = 0;
 12648                           
 12649                           ;incstack = 0
 12650  00716C  9902               	bcf	(_loRa+2)& (0+255),4,b
 12651                           
 12652                           ;lorawan.c: 1107: loRa.lorawanMacStatus.joining = 0;
 12653  00716E  9500               	bcf	_loRa& (0+255),2,b
 12654                           
 12655                           ; BSR set to: 2
 12656                           ;lorawan.c: 1108: loRa.macStatus.macState = IDLE;
 12657  007170  0EF0               	movlw	-16
 12658  007172  1702               	andwf	(_loRa+2)& (0+255),f,b
 12659                           
 12660                           ; BSR set to: 2
 12661                           ;lorawan.c: 1109: if (rxPayload.RxJoinResponse != (0))
 12662  007174  0101               	movlb	1	; () banked
 12663  007176  5170               	movf	(_rxPayload+2)& (0+255),w,b
 12664  007178  1171               	iorwf	(_rxPayload+3)& (0+255),w,b
 12665  00717A  B4D8               	btfsc	status,2,c
 12666  00717C  0012               	return	
 12667                           
 12668                           ; BSR set to: 1
 12669                           ;lorawan.c: 1110: {
 12670                           ;lorawan.c: 1111: rxPayload.RxJoinResponse(0);
 12671  00717E  EE21  F070         	lfsr	2,_rxPayload+2
 12672  007182  0005               	push	
 12673  007184  6EFA               	movwf	pclath,c
 12674  007186  50DE               	movf	postinc2,w,c
 12675  007188  6EFD               	movwf	tosl,c
 12676  00718A  50DE               	movf	postinc2,w,c
 12677  00718C  6EFE               	movwf	tosh,c
 12678  00718E  50F8               	movf	tblptru,w,c
 12679  007190  6EFF               	movwf	tosu,c
 12680  007192  50FA               	movf	pclath,w,c
 12681  007194  0C00               	retlw	0	;indir
 12682  007196                     __end_of_SetJoinFailState:
 12683                           	opt stack 0
 12684                           tosu	equ	0xFFF
 12685                           tosh	equ	0xFFE
 12686                           tosl	equ	0xFFD
 12687                           pclath	equ	0xFFA
 12688                           tblptru	equ	0xFF8
 12689                           tblptrh	equ	0xFF7
 12690                           tblptrl	equ	0xFF6
 12691                           tablat	equ	0xFF5
 12692                           prodh	equ	0xFF4
 12693                           prodl	equ	0xFF3
 12694                           intcon	equ	0xFF2
 12695                           intcon2	equ	0xFF1
 12696                           intcon3	equ	0xFF0
 12697                           postinc0	equ	0xFEE
 12698                           wreg	equ	0xFE8
 12699                           postinc1	equ	0xFE6
 12700                           postdec1	equ	0xFE5
 12701                           plusw1	equ	0xFE3
 12702                           fsr1h	equ	0xFE2
 12703                           fsr1l	equ	0xFE1
 12704                           indf2	equ	0xFDF
 12705                           postinc2	equ	0xFDE
 12706                           postdec2	equ	0xFDD
 12707                           fsr2h	equ	0xFDA
 12708                           fsr2l	equ	0xFD9
 12709                           status	equ	0xFD8
 12710                           
 12711 ;; *************** function _RxJoinResponse *****************
 12712 ;; Defined at:
 12713 ;;		line 112 in file "main.c"
 12714 ;; Parameters:    Size  Location     Type
 12715 ;;  status          1    wreg     unsigned char 
 12716 ;; Auto vars:     Size  Location     Type
 12717 ;;  status          1    0[COMRAM] unsigned char 
 12718 ;; Return value:  Size  Location     Type
 12719 ;;                  1    wreg      void 
 12720 ;; Registers used:
 12721 ;;		wreg, status,2
 12722 ;; Tracked objects:
 12723 ;;		On entry : F/1
 12724 ;;		On exit  : F/1
 12725 ;;		Unchanged: 0/0
 12726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12731 ;;Total ram usage:        0 bytes
 12732 ;; Hardware stack levels used:    1
 12733 ;; Hardware stack levels required when called:    7
 12734 ;; This function calls:
 12735 ;;		Nothing
 12736 ;; This function is called by:
 12737 ;;		_main
 12738 ;;		_SetJoinFailState
 12739 ;;		_UpdateJoinSuccessState
 12740 ;; This function uses a non-reentrant model
 12741 ;;
 12742                           
 12743                           	psect	text63
 12744  0077C6                     __ptext63:
 12745                           	opt stack 0
 12746  0077C6                     _RxJoinResponse:
 12747                           	opt stack 20
 12748                           
 12749                           ; BSR set to: 1
 12750                           ;main.c: 114: JoinedServer = 1;
 12751                           
 12752                           ; BSR set to: 1
 12753                           ;incstack = 0
 12754  0077C6  0E01               	movlw	1
 12755  0077C8  6F72               	movwf	_JoinedServer& (0+255),b
 12756                           
 12757                           ; BSR set to: 1
 12758  0077CA  0C01               	retlw	1	;funcret
 12759  0077CC                     __end_of_RxJoinResponse:
 12760                           	opt stack 0
 12761                           tosu	equ	0xFFF
 12762                           tosh	equ	0xFFE
 12763                           tosl	equ	0xFFD
 12764                           pclath	equ	0xFFA
 12765                           tblptru	equ	0xFF8
 12766                           tblptrh	equ	0xFF7
 12767                           tblptrl	equ	0xFF6
 12768                           tablat	equ	0xFF5
 12769                           prodh	equ	0xFF4
 12770                           prodl	equ	0xFF3
 12771                           intcon	equ	0xFF2
 12772                           intcon2	equ	0xFF1
 12773                           intcon3	equ	0xFF0
 12774                           postinc0	equ	0xFEE
 12775                           wreg	equ	0xFE8
 12776                           postinc1	equ	0xFE6
 12777                           postdec1	equ	0xFE5
 12778                           plusw1	equ	0xFE3
 12779                           fsr1h	equ	0xFE2
 12780                           fsr1l	equ	0xFE1
 12781                           indf2	equ	0xFDF
 12782                           postinc2	equ	0xFDE
 12783                           postdec2	equ	0xFDD
 12784                           fsr2h	equ	0xFDA
 12785                           fsr2l	equ	0xFD9
 12786                           status	equ	0xFD8
 12787                           
 12788 ;; *************** function _MacExecuteCommands *****************
 12789 ;; Defined at:
 12790 ;;		line 1575 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 12791 ;; Parameters:    Size  Location     Type
 12792 ;;  buffer          2   26[BANK0 ] PTR unsigned char 
 12793 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 12794 ;;  fOptsLen        1   28[BANK0 ] unsigned char 
 12795 ;; Auto vars:     Size  Location     Type
 12796 ;;  ptr             2   32[BANK0 ] PTR unsigned char 
 12797 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 12798 ;;  done            1   31[BANK0 ] unsigned char 
 12799 ;; Return value:  Size  Location     Type
 12800 ;;                  2   26[BANK0 ] PTR unsigned char 
 12801 ;; Registers used:
 12802 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12803 ;; Tracked objects:
 12804 ;;		On entry : F/0
 12805 ;;		On exit  : F/0
 12806 ;;		Unchanged: 0/0
 12807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12808 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12809 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12810 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12811 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12812 ;;Total ram usage:        8 bytes
 12813 ;; Hardware stack levels used:    1
 12814 ;; Hardware stack levels required when called:   11
 12815 ;; This function calls:
 12816 ;;		_ExecuteDevStatus
 12817 ;;		_ExecuteDutyCycle
 12818 ;;		_ExecuteLinkAdr
 12819 ;;		_ExecuteLinkCheck
 12820 ;;		_ExecuteNewChannel
 12821 ;;		_ExecuteRxParamSetupReq
 12822 ;;		_ExecuteRxTimingSetup
 12823 ;; This function is called by:
 12824 ;;		_LORAWAN_RxDone
 12825 ;; This function uses a non-reentrant model
 12826 ;;
 12827                           
 12828                           	psect	text64
 12829  002E02                     __ptext64:
 12830                           	opt stack 0
 12831  002E02                     _MacExecuteCommands:
 12832                           	opt stack 15
 12833                           
 12834                           ; BSR set to: 0
 12835                           ;lorawan.c: 1577: bool done = 0;
 12836                           
 12837                           ; BSR set to: 1
 12838                           ;incstack = 0
 12839  002E02  6B7F               	clrf	MacExecuteCommands@done& (0+255),b
 12840                           
 12841                           ; BSR set to: 0
 12842                           ;lorawan.c: 1578: uint8_t *ptr;
 12843                           ;lorawan.c: 1579: ptr = buffer;
 12844  002E04  C07A  F080         	movff	MacExecuteCommands@buffer,MacExecuteCommands@ptr
 12845  002E08  C07B  F081         	movff	MacExecuteCommands@buffer+1,MacExecuteCommands@ptr+1
 12846                           
 12847                           ;lorawan.c: 1580: while ( (ptr < ( buffer + fOptsLen )) && (done == 0) )
 12848  002E0C  D0DE               	goto	l13862
 12849  002E0E                     l13826:
 12850                           
 12851                           ; BSR set to: 0
 12852                           ;lorawan.c: 1581: {
 12853                           ;lorawan.c: 1583: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 0;
 12854  002E0E  0102               	movlb	2	; () banked
 12855  002E10  51A7               	movf	(_loRa+167)& (0+255),w,b
 12856  002E12  0D02               	mullw	2
 12857  002E14  0EA9               	movlw	low (_loRa+169)
 12858  002E16  24F3               	addwf	prodl,w,c
 12859  002E18  6ED9               	movwf	fsr2l,c
 12860  002E1A  0E02               	movlw	high (_loRa+169)
 12861  002E1C  20F4               	addwfc	prodh,w,c
 12862  002E1E  6EDA               	movwf	fsr2h,c
 12863  002E20  90DF               	bcf	indf2,0,c
 12864                           
 12865                           ;lorawan.c: 1584: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 0;
 12866  002E22  51A7               	movf	(_loRa+167)& (0+255),w,b
 12867  002E24  0D02               	mullw	2
 12868  002E26  0EA9               	movlw	low (_loRa+169)
 12869  002E28  24F3               	addwf	prodl,w,c
 12870  002E2A  6ED9               	movwf	fsr2l,c
 12871  002E2C  0E02               	movlw	high (_loRa+169)
 12872  002E2E  20F4               	addwfc	prodh,w,c
 12873  002E30  6EDA               	movwf	fsr2h,c
 12874  002E32  92DF               	bcf	indf2,1,c
 12875                           
 12876                           ;lorawan.c: 1585: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 0;
 12877  002E34  51A7               	movf	(_loRa+167)& (0+255),w,b
 12878  002E36  0D02               	mullw	2
 12879  002E38  0EA9               	movlw	low (_loRa+169)
 12880  002E3A  24F3               	addwf	prodl,w,c
 12881  002E3C  6ED9               	movwf	fsr2l,c
 12882  002E3E  0E02               	movlw	high (_loRa+169)
 12883  002E40  20F4               	addwfc	prodh,w,c
 12884  002E42  6EDA               	movwf	fsr2h,c
 12885  002E44  94DF               	bcf	indf2,2,c
 12886                           
 12887                           ;lorawan.c: 1586: loRa.macCommands[loRa.crtMacCmdIndex].channelAck = 0;
 12888  002E46  51A7               	movf	(_loRa+167)& (0+255),w,b
 12889  002E48  0D02               	mullw	2
 12890  002E4A  0EA9               	movlw	low (_loRa+169)
 12891  002E4C  24F3               	addwf	prodl,w,c
 12892  002E4E  6ED9               	movwf	fsr2l,c
 12893  002E50  0E02               	movlw	high (_loRa+169)
 12894  002E52  20F4               	addwfc	prodh,w,c
 12895  002E54  6EDA               	movwf	fsr2h,c
 12896  002E56  96DF               	bcf	indf2,3,c
 12897                           
 12898                           ;lorawan.c: 1587: loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck = 0;
 12899  002E58  51A7               	movf	(_loRa+167)& (0+255),w,b
 12900  002E5A  0D02               	mullw	2
 12901  002E5C  0EA9               	movlw	low (_loRa+169)
 12902  002E5E  24F3               	addwf	prodl,w,c
 12903  002E60  6ED9               	movwf	fsr2l,c
 12904  002E62  0E02               	movlw	high (_loRa+169)
 12905  002E64  20F4               	addwfc	prodh,w,c
 12906  002E66  6EDA               	movwf	fsr2h,c
 12907  002E68  98DF               	bcf	indf2,4,c
 12908                           
 12909                           ;lorawan.c: 1588: loRa.macCommands[loRa.crtMacCmdIndex].rx1DROffestAck = 0;
 12910  002E6A  51A7               	movf	(_loRa+167)& (0+255),w,b
 12911  002E6C  0D02               	mullw	2
 12912  002E6E  0EA9               	movlw	low (_loRa+169)
 12913  002E70  24F3               	addwf	prodl,w,c
 12914  002E72  6ED9               	movwf	fsr2l,c
 12915  002E74  0E02               	movlw	high (_loRa+169)
 12916  002E76  20F4               	addwfc	prodh,w,c
 12917  002E78  6EDA               	movwf	fsr2h,c
 12918  002E7A  9ADF               	bcf	indf2,5,c
 12919                           
 12920                           ;lorawan.c: 1589: loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck = 0;
 12921  002E7C  51A7               	movf	(_loRa+167)& (0+255),w,b
 12922  002E7E  0D02               	mullw	2
 12923  002E80  0EA9               	movlw	low (_loRa+169)
 12924  002E82  24F3               	addwf	prodl,w,c
 12925  002E84  6ED9               	movwf	fsr2l,c
 12926  002E86  0E02               	movlw	high (_loRa+169)
 12927  002E88  20F4               	addwfc	prodh,w,c
 12928  002E8A  6EDA               	movwf	fsr2h,c
 12929  002E8C  9CDF               	bcf	indf2,6,c
 12930                           
 12931                           ;lorawan.c: 1590: loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck = 0;
 12932  002E8E  51A7               	movf	(_loRa+167)& (0+255),w,b
 12933  002E90  0D02               	mullw	2
 12934  002E92  0EA9               	movlw	low (_loRa+169)
 12935  002E94  24F3               	addwf	prodl,w,c
 12936  002E96  6ED9               	movwf	fsr2l,c
 12937  002E98  0E02               	movlw	high (_loRa+169)
 12938  002E9A  20F4               	addwfc	prodh,w,c
 12939  002E9C  6EDA               	movwf	fsr2h,c
 12940  002E9E  9EDF               	bcf	indf2,7,c
 12941                           
 12942                           ; BSR set to: 2
 12943                           ;lorawan.c: 1593: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = *ptr;
 12944  002EA0  C080  FFD9         	movff	MacExecuteCommands@ptr,fsr2l
 12945  002EA4  C081  FFDA         	movff	MacExecuteCommands@ptr+1,fsr2h
 12946  002EA8  51A7               	movf	(_loRa+167)& (0+255),w,b
 12947  002EAA  0D02               	mullw	2
 12948  002EAC  0EA8               	movlw	low (_loRa+168)
 12949  002EAE  24F3               	addwf	prodl,w,c
 12950  002EB0  6EE9               	movwf	fsr0l,c
 12951  002EB2  0E02               	movlw	high (_loRa+168)
 12952  002EB4  20F4               	addwfc	prodh,w,c
 12953  002EB6  6EEA               	movwf	fsr0h,c
 12954  002EB8  CFDF FFEF          	movff	indf2,indf0
 12955                           
 12956                           ;lorawan.c: 1595: switch (*ptr ++)
 12957  002EBC  D060               	goto	l13854
 12958  002EBE                     l13830:
 12959                           
 12960                           ; BSR set to: 0
 12961                           ;lorawan.c: 1598: {
 12962                           ;lorawan.c: 1599: ptr = ExecuteLinkCheck (ptr );
 12963  002EBE  C080  F064         	movff	MacExecuteCommands@ptr,ExecuteLinkCheck@ptr
 12964  002EC2  C081  F065         	movff	MacExecuteCommands@ptr+1,ExecuteLinkCheck@ptr+1
 12965  002EC6  EC15  F038         	call	_ExecuteLinkCheck
 12966  002ECA  C064  F080         	movff	?_ExecuteLinkCheck,MacExecuteCommands@ptr
 12967  002ECE  C065  F081         	movff	?_ExecuteLinkCheck+1,MacExecuteCommands@ptr+1
 12968  002ED2                     l13832:
 12969                           
 12970                           ; BSR set to: 0
 12971                           ;lorawan.c: 1601: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = 0xFF;
 12972  002ED2  0102               	movlb	2	; () banked
 12973  002ED4  51A7               	movf	(_loRa+167)& (0+255),w,b
 12974  002ED6  0D02               	mullw	2
 12975  002ED8  0EA8               	movlw	low (_loRa+168)
 12976  002EDA  24F3               	addwf	prodl,w,c
 12977  002EDC  6ED9               	movwf	fsr2l,c
 12978  002EDE  0E02               	movlw	high (_loRa+168)
 12979  002EE0  20F4               	addwfc	prodh,w,c
 12980  002EE2  6EDA               	movwf	fsr2h,c
 12981  002EE4  68DF               	setf	indf2,c
 12982                           
 12983                           ;lorawan.c: 1602: } break;
 12984  002EE6  D062               	goto	l13856
 12985  002EE8                     l13834:
 12986                           
 12987                           ; BSR set to: 0
 12988                           ;lorawan.c: 1605: {
 12989                           ;lorawan.c: 1606: ptr = ExecuteLinkAdr (ptr );
 12990  002EE8  C080  F071         	movff	MacExecuteCommands@ptr,ExecuteLinkAdr@ptr
 12991  002EEC  C081  F072         	movff	MacExecuteCommands@ptr+1,ExecuteLinkAdr@ptr+1
 12992  002EF0  ECB5  F01A         	call	_ExecuteLinkAdr	;wreg free
 12993  002EF4  C071  F080         	movff	?_ExecuteLinkAdr,MacExecuteCommands@ptr
 12994  002EF8  C072  F081         	movff	?_ExecuteLinkAdr+1,MacExecuteCommands@ptr+1
 12995                           
 12996                           ;lorawan.c: 1607: } break;
 12997  002EFC  D057               	goto	l13856
 12998  002EFE                     l13836:
 12999                           
 13000                           ; BSR set to: 0
 13001                           ;lorawan.c: 1610: {
 13002                           ;lorawan.c: 1611: ptr = ExecuteDutyCycle(ptr);
 13003  002EFE  C080  F064         	movff	MacExecuteCommands@ptr,ExecuteDutyCycle@ptr
 13004  002F02  C081  F065         	movff	MacExecuteCommands@ptr+1,ExecuteDutyCycle@ptr+1
 13005  002F06  EC70  F034         	call	_ExecuteDutyCycle	;wreg free
 13006  002F0A  C064  F080         	movff	?_ExecuteDutyCycle,MacExecuteCommands@ptr
 13007  002F0E  C065  F081         	movff	?_ExecuteDutyCycle+1,MacExecuteCommands@ptr+1
 13008                           
 13009                           ;lorawan.c: 1612: } break;
 13010  002F12  D04C               	goto	l13856
 13011  002F14                     l13838:
 13012                           
 13013                           ; BSR set to: 0
 13014                           ;lorawan.c: 1615: {
 13015                           ;lorawan.c: 1616: ptr = ExecuteRxParamSetupReq (ptr);
 13016  002F14  C080  F070         	movff	MacExecuteCommands@ptr,ExecuteRxParamSetupReq@ptr
 13017  002F18  C081  F071         	movff	MacExecuteCommands@ptr+1,ExecuteRxParamSetupReq@ptr+1
 13018  002F1C  EC6B  F021         	call	_ExecuteRxParamSetupReq	;wreg free
 13019  002F20  C070  F080         	movff	?_ExecuteRxParamSetupReq,MacExecuteCommands@ptr
 13020  002F24  C071  F081         	movff	?_ExecuteRxParamSetupReq+1,MacExecuteCommands@ptr+1
 13021                           
 13022                           ;lorawan.c: 1617: } break;
 13023  002F28  D041               	goto	l13856
 13024  002F2A                     l13840:
 13025                           
 13026                           ; BSR set to: 0
 13027                           ;lorawan.c: 1620: {
 13028                           ;lorawan.c: 1621: ptr = ExecuteDevStatus (ptr);
 13029  002F2A  C080  F064         	movff	MacExecuteCommands@ptr,ExecuteDevStatus@ptr
 13030  002F2E  C081  F065         	movff	MacExecuteCommands@ptr+1,ExecuteDevStatus@ptr+1
 13031  002F32  ECA3  F03B         	call	_ExecuteDevStatus	;wreg free
 13032  002F36  C064  F080         	movff	?_ExecuteDevStatus,MacExecuteCommands@ptr
 13033  002F3A  C065  F081         	movff	?_ExecuteDevStatus+1,MacExecuteCommands@ptr+1
 13034                           
 13035                           ;lorawan.c: 1622: } break;
 13036  002F3E  D036               	goto	l13856
 13037  002F40                     l13842:
 13038                           
 13039                           ; BSR set to: 0
 13040                           ;lorawan.c: 1625: {
 13041                           ;lorawan.c: 1626: ptr = ExecuteNewChannel (ptr);
 13042  002F40  C080  F070         	movff	MacExecuteCommands@ptr,ExecuteNewChannel@ptr
 13043  002F44  C081  F071         	movff	MacExecuteCommands@ptr+1,ExecuteNewChannel@ptr+1
 13044  002F48  ECD4  F019         	call	_ExecuteNewChannel	;wreg free
 13045  002F4C  C070  F080         	movff	?_ExecuteNewChannel,MacExecuteCommands@ptr
 13046  002F50  C071  F081         	movff	?_ExecuteNewChannel+1,MacExecuteCommands@ptr+1
 13047                           
 13048                           ;lorawan.c: 1628: } break;
 13049  002F54  D02B               	goto	l13856
 13050  002F56                     l13844:
 13051                           
 13052                           ; BSR set to: 0
 13053                           ;lorawan.c: 1631: {
 13054                           ;lorawan.c: 1632: ptr = ExecuteRxTimingSetup (ptr);
 13055  002F56  C080  F069         	movff	MacExecuteCommands@ptr,ExecuteRxTimingSetup@ptr
 13056  002F5A  C081  F06A         	movff	MacExecuteCommands@ptr+1,ExecuteRxTimingSetup@ptr+1
 13057  002F5E  EC43  F039         	call	_ExecuteRxTimingSetup	;wreg free
 13058  002F62  C069  F080         	movff	?_ExecuteRxTimingSetup,MacExecuteCommands@ptr
 13059  002F66  C06A  F081         	movff	?_ExecuteRxTimingSetup+1,MacExecuteCommands@ptr+1
 13060                           
 13061                           ;lorawan.c: 1633: } break;
 13062  002F6A  D020               	goto	l13856
 13063  002F6C                     l13846:
 13064                           
 13065                           ; BSR set to: 0
 13066                           ;lorawan.c: 1636: {
 13067                           ;lorawan.c: 1637: done = 1;
 13068  002F6C  0E01               	movlw	1
 13069  002F6E  6F7F               	movwf	MacExecuteCommands@done& (0+255),b
 13070                           
 13071                           ; BSR set to: 0
 13072                           ;lorawan.c: 1638: ptr = buffer + fOptsLen;
 13073  002F70  517C               	movf	MacExecuteCommands@fOptsLen& (0+255),w,b
 13074  002F72  257A               	addwf	MacExecuteCommands@buffer& (0+255),w,b
 13075  002F74  6F80               	movwf	MacExecuteCommands@ptr& (0+255),b
 13076  002F76  0E00               	movlw	0
 13077  002F78  217B               	addwfc	(MacExecuteCommands@buffer+1)& (0+255),w,b
 13078  002F7A  6F81               	movwf	(MacExecuteCommands@ptr+1)& (0+255),b
 13079  002F7C  D7AA               	goto	l13832
 13080  002F7E                     l13854:
 13081                           
 13082                           ; BSR set to: 2
 13083  002F7E  C080  FFD9         	movff	MacExecuteCommands@ptr,fsr2l
 13084  002F82  C081  FFDA         	movff	MacExecuteCommands@ptr+1,fsr2h
 13085  002F86  0100               	movlb	0	; () banked
 13086  002F88  4B80               	infsnz	MacExecuteCommands@ptr& (0+255),f,b
 13087  002F8A  2B81               	incf	(MacExecuteCommands@ptr+1)& (0+255),f,b
 13088  002F8C  50DF               	movf	indf2,w,c
 13089                           
 13090                           ; Switch size 1, requested type "speed"
 13091                           ; Number of cases is 7, Range of values is 2 to 8
 13092                           ; switch strategies available:
 13093                           ; Name         Instructions Cycles
 13094                           ; simple_byte           22    12 (average)
 13095                           ;	Chosen strategy is simple_byte
 13096  002F8E  0A02               	xorlw	2	; case 2
 13097  002F90  E096               	bz	l13830
 13098  002F92  0A01               	xorlw	1	; case 3
 13099  002F94  E0A9               	bz	l13834
 13100  002F96  0A07               	xorlw	7	; case 4
 13101  002F98  E0B2               	bz	l13836
 13102  002F9A  0A01               	xorlw	1	; case 5
 13103  002F9C  E0BB               	bz	l13838
 13104  002F9E  0A03               	xorlw	3	; case 6
 13105  002FA0  E0C4               	bz	l13840
 13106  002FA2  0A01               	xorlw	1	; case 7
 13107  002FA4  E0CD               	bz	l13842
 13108  002FA6  0A0F               	xorlw	15	; case 8
 13109  002FA8  E0D6               	bz	l13844
 13110  002FAA  D7E0               	goto	l13846
 13111  002FAC                     l13856:
 13112                           
 13113                           ;lorawan.c: 1643: if((loRa.macCommands[loRa.crtMacCmdIndex].receivedCid != 0xFF) &&
 13114                           ;lorawan.c: 1644: (loRa.crtMacCmdIndex < 16))
 13115  002FAC  0102               	movlb	2	; () banked
 13116  002FAE  51A7               	movf	(_loRa+167)& (0+255),w,b
 13117  002FB0  0D02               	mullw	2
 13118  002FB2  0EA8               	movlw	low (_loRa+168)
 13119  002FB4  24F3               	addwf	prodl,w,c
 13120  002FB6  6ED9               	movwf	fsr2l,c
 13121  002FB8  0E02               	movlw	high (_loRa+168)
 13122  002FBA  20F4               	addwfc	prodh,w,c
 13123  002FBC  6EDA               	movwf	fsr2h,c
 13124  002FBE  28DE               	incf	postinc2,w,c
 13125  002FC0  E004               	bz	l13862
 13126                           
 13127                           ; BSR set to: 2
 13128  002FC2  0E10               	movlw	16
 13129  002FC4  61A7               	cpfslt	(_loRa+167)& (0+255),b
 13130  002FC6  D001               	goto	l13862
 13131                           
 13132                           ; BSR set to: 2
 13133                           ;lorawan.c: 1645: {
 13134                           ;lorawan.c: 1646: loRa.crtMacCmdIndex ++;
 13135  002FC8  2BA7               	incf	(_loRa+167)& (0+255),f,b
 13136  002FCA                     l13862:
 13137  002FCA  0100               	movlb	0	; () banked
 13138  002FCC  517C               	movf	MacExecuteCommands@fOptsLen& (0+255),w,b
 13139  002FCE  257A               	addwf	MacExecuteCommands@buffer& (0+255),w,b
 13140  002FD0  6F7D               	movwf	??_MacExecuteCommands& (0+255),b
 13141  002FD2  0E00               	movlw	0
 13142  002FD4  217B               	addwfc	(MacExecuteCommands@buffer+1)& (0+255),w,b
 13143  002FD6  6F7E               	movwf	(??_MacExecuteCommands+1)& (0+255),b
 13144  002FD8  517D               	movf	??_MacExecuteCommands& (0+255),w,b
 13145  002FDA  5D80               	subwf	MacExecuteCommands@ptr& (0+255),w,b
 13146  002FDC  517E               	movf	(??_MacExecuteCommands+1)& (0+255),w,b
 13147  002FDE  5981               	subwfb	(MacExecuteCommands@ptr+1)& (0+255),w,b
 13148  002FE0  E203               	bc	l13866
 13149                           
 13150                           ; BSR set to: 0
 13151  002FE2  517F               	movf	MacExecuteCommands@done& (0+255),w,b
 13152  002FE4  E101 D713          	bz	l13826
 13153  002FE8                     l13866:
 13154                           
 13155                           ; BSR set to: 0
 13156                           ;lorawan.c: 1647: }
 13157                           ;lorawan.c: 1648: }
 13158                           ;lorawan.c: 1649: return ptr;
 13159  002FE8  C080  F07A         	movff	MacExecuteCommands@ptr,?_MacExecuteCommands
 13160  002FEC  C081  F07B         	movff	MacExecuteCommands@ptr+1,?_MacExecuteCommands+1
 13161                           
 13162                           ; BSR set to: 0
 13163  002FF0  0012               	return		;funcret
 13164  002FF2                     __end_of_MacExecuteCommands:
 13165                           	opt stack 0
 13166                           tosu	equ	0xFFF
 13167                           tosh	equ	0xFFE
 13168                           tosl	equ	0xFFD
 13169                           pclath	equ	0xFFA
 13170                           tblptru	equ	0xFF8
 13171                           tblptrh	equ	0xFF7
 13172                           tblptrl	equ	0xFF6
 13173                           tablat	equ	0xFF5
 13174                           prodh	equ	0xFF4
 13175                           prodl	equ	0xFF3
 13176                           intcon	equ	0xFF2
 13177                           intcon2	equ	0xFF1
 13178                           intcon3	equ	0xFF0
 13179                           indf0	equ	0xFEF
 13180                           postinc0	equ	0xFEE
 13181                           fsr0h	equ	0xFEA
 13182                           fsr0l	equ	0xFE9
 13183                           wreg	equ	0xFE8
 13184                           postinc1	equ	0xFE6
 13185                           postdec1	equ	0xFE5
 13186                           plusw1	equ	0xFE3
 13187                           fsr1h	equ	0xFE2
 13188                           fsr1l	equ	0xFE1
 13189                           indf2	equ	0xFDF
 13190                           postinc2	equ	0xFDE
 13191                           postdec2	equ	0xFDD
 13192                           fsr2h	equ	0xFDA
 13193                           fsr2l	equ	0xFD9
 13194                           status	equ	0xFD8
 13195                           
 13196 ;; *************** function _ExecuteRxTimingSetup *****************
 13197 ;; Defined at:
 13198 ;;		line 1659 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13199 ;; Parameters:    Size  Location     Type
 13200 ;;  ptr             2    9[BANK0 ] PTR unsigned char 
 13201 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 13202 ;; Auto vars:     Size  Location     Type
 13203 ;;  delay           1   11[BANK0 ] unsigned char 
 13204 ;; Return value:  Size  Location     Type
 13205 ;;                  2    9[BANK0 ] PTR unsigned char 
 13206 ;; Registers used:
 13207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13208 ;; Tracked objects:
 13209 ;;		On entry : F/0
 13210 ;;		On exit  : F/2
 13211 ;;		Unchanged: 0/0
 13212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13213 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13214 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13216 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13217 ;;Total ram usage:        3 bytes
 13218 ;; Hardware stack levels used:    1
 13219 ;; Hardware stack levels required when called:    8
 13220 ;; This function calls:
 13221 ;;		_UpdateReceiveDelays
 13222 ;; This function is called by:
 13223 ;;		_MacExecuteCommands
 13224 ;; This function uses a non-reentrant model
 13225 ;;
 13226                           
 13227                           	psect	text65
 13228  007286                     __ptext65:
 13229                           	opt stack 0
 13230  007286                     _ExecuteRxTimingSetup:
 13231                           	opt stack 17
 13232                           
 13233                           ; BSR set to: 0
 13234                           ;lorawan.c: 1661: uint8_t delay;
 13235                           ;lorawan.c: 1663: delay = (*ptr) & 0x0F;
 13236                           
 13237                           ; BSR set to: 0
 13238                           ;incstack = 0
 13239  007286  C069  FFD9         	movff	ExecuteRxTimingSetup@ptr,fsr2l
 13240  00728A  C06A  FFDA         	movff	ExecuteRxTimingSetup@ptr+1,fsr2h
 13241  00728E  50DF               	movf	indf2,w,c
 13242  007290  0B0F               	andlw	15
 13243  007292  6F6B               	movwf	ExecuteRxTimingSetup@delay& (0+255),b
 13244                           
 13245                           ; BSR set to: 0
 13246                           ;lorawan.c: 1664: ptr++;
 13247  007294  4B69               	infsnz	ExecuteRxTimingSetup@ptr& (0+255),f,b
 13248  007296  2B6A               	incf	(ExecuteRxTimingSetup@ptr+1)& (0+255),f,b
 13249                           
 13250                           ; BSR set to: 0
 13251                           ;lorawan.c: 1666: UpdateReceiveDelays (delay);
 13252  007298  516B               	movf	ExecuteRxTimingSetup@delay& (0+255),w,b
 13253  00729A  EC0B  F035         	call	_UpdateReceiveDelays
 13254                           
 13255                           ; BSR set to: 2
 13256                           ;lorawan.c: 1667: loRa.macStatus.rxTimingSetup = 1;
 13257  00729E  8104               	bsf	(_loRa+4)& (0+255),0,b
 13258                           
 13259                           ; BSR set to: 2
 13260                           ;lorawan.c: 1669: return ptr;
 13261  0072A0  C069  F069         	movff	ExecuteRxTimingSetup@ptr,?_ExecuteRxTimingSetup
 13262  0072A4  C06A  F06A         	movff	ExecuteRxTimingSetup@ptr+1,?_ExecuteRxTimingSetup+1
 13263                           
 13264                           ; BSR set to: 2
 13265  0072A8  0012               	return		;funcret
 13266  0072AA                     __end_of_ExecuteRxTimingSetup:
 13267                           	opt stack 0
 13268                           tosu	equ	0xFFF
 13269                           tosh	equ	0xFFE
 13270                           tosl	equ	0xFFD
 13271                           pclath	equ	0xFFA
 13272                           tblptru	equ	0xFF8
 13273                           tblptrh	equ	0xFF7
 13274                           tblptrl	equ	0xFF6
 13275                           tablat	equ	0xFF5
 13276                           prodh	equ	0xFF4
 13277                           prodl	equ	0xFF3
 13278                           intcon	equ	0xFF2
 13279                           intcon2	equ	0xFF1
 13280                           intcon3	equ	0xFF0
 13281                           indf0	equ	0xFEF
 13282                           postinc0	equ	0xFEE
 13283                           fsr0h	equ	0xFEA
 13284                           fsr0l	equ	0xFE9
 13285                           wreg	equ	0xFE8
 13286                           postinc1	equ	0xFE6
 13287                           postdec1	equ	0xFE5
 13288                           plusw1	equ	0xFE3
 13289                           fsr1h	equ	0xFE2
 13290                           fsr1l	equ	0xFE1
 13291                           indf2	equ	0xFDF
 13292                           postinc2	equ	0xFDE
 13293                           postdec2	equ	0xFDD
 13294                           fsr2h	equ	0xFDA
 13295                           fsr2l	equ	0xFD9
 13296                           status	equ	0xFD8
 13297                           
 13298 ;; *************** function _UpdateReceiveDelays *****************
 13299 ;; Defined at:
 13300 ;;		line 2026 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13301 ;; Parameters:    Size  Location     Type
 13302 ;;  delay           1    wreg     unsigned char 
 13303 ;; Auto vars:     Size  Location     Type
 13304 ;;  delay           1    8[BANK0 ] unsigned char 
 13305 ;; Return value:  Size  Location     Type
 13306 ;;                  1    wreg      void 
 13307 ;; Registers used:
 13308 ;;		wreg, status,2, status,0, prodl, prodh
 13309 ;; Tracked objects:
 13310 ;;		On entry : C/3
 13311 ;;		On exit  : F/2
 13312 ;;		Unchanged: 0/0
 13313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13315 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13316 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13317 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13318 ;;Total ram usage:        5 bytes
 13319 ;; Hardware stack levels used:    1
 13320 ;; Hardware stack levels required when called:    7
 13321 ;; This function calls:
 13322 ;;		Nothing
 13323 ;; This function is called by:
 13324 ;;		_LORAWAN_RxDone
 13325 ;;		_ExecuteRxTimingSetup
 13326 ;; This function uses a non-reentrant model
 13327 ;;
 13328                           
 13329                           	psect	text66
 13330  006A16                     __ptext66:
 13331                           	opt stack 0
 13332  006A16                     _UpdateReceiveDelays:
 13333                           	opt stack 19
 13334                           
 13335                           ; BSR set to: 2
 13336                           ;incstack = 0
 13337                           ;UpdateReceiveDelays@delay stored from wreg
 13338  006A16  0100               	movlb	0	; () banked
 13339  006A18  6F68               	movwf	UpdateReceiveDelays@delay& (0+255),b
 13340                           
 13341                           ;lorawan.c: 2028: loRa.protocolParameters.receiveDelay1 = 1000 * delay ;
 13342  006A1A  5168               	movf	UpdateReceiveDelays@delay& (0+255),w,b
 13343  006A1C  6F64               	movwf	??_UpdateReceiveDelays& (0+255),b
 13344  006A1E  6B65               	clrf	(??_UpdateReceiveDelays+1)& (0+255),b
 13345  006A20  0EE8               	movlw	232
 13346  006A22  0364               	mulwf	??_UpdateReceiveDelays& (0+255),b
 13347  006A24  CFF3 F066          	movff	prodl,??_UpdateReceiveDelays+2
 13348  006A28  CFF4 F067          	movff	prodh,??_UpdateReceiveDelays+3
 13349  006A2C  0365               	mulwf	(??_UpdateReceiveDelays+1)& (0+255),b
 13350  006A2E  50F3               	movf	prodl,w,c
 13351  006A30  2767               	addwf	(??_UpdateReceiveDelays+3)& (0+255),f,b
 13352  006A32  0E03               	movlw	3
 13353  006A34  0364               	mulwf	??_UpdateReceiveDelays& (0+255),b
 13354  006A36  50F3               	movf	prodl,w,c
 13355  006A38  2767               	addwf	(??_UpdateReceiveDelays+3)& (0+255),f,b
 13356  006A3A  C066  F294         	movff	??_UpdateReceiveDelays+2,_loRa+148
 13357  006A3E  C067  F295         	movff	??_UpdateReceiveDelays+3,_loRa+149
 13358                           
 13359                           ; BSR set to: 0
 13360                           ;lorawan.c: 2029: if (delay == 0)
 13361  006A42  5168               	movf	UpdateReceiveDelays@delay& (0+255),w,b
 13362  006A44  E105               	bnz	l12898
 13363                           
 13364                           ; BSR set to: 0
 13365                           ;lorawan.c: 2030: {
 13366                           ;lorawan.c: 2031: loRa.protocolParameters.receiveDelay1 = 1000;
 13367  006A46  0E03               	movlw	3
 13368  006A48  0102               	movlb	2	; () banked
 13369  006A4A  6F95               	movwf	(_loRa+149)& (0+255),b
 13370  006A4C  0EE8               	movlw	232
 13371  006A4E  6F94               	movwf	(_loRa+148)& (0+255),b
 13372  006A50                     l12898:
 13373                           
 13374                           ;lorawan.c: 2032: }
 13375                           ;lorawan.c: 2034: loRa.protocolParameters.receiveDelay2 = loRa.protocolParameters.receiv
      +                          eDelay1 + 1000;
 13376  006A50  0EE8               	movlw	232
 13377  006A52  0102               	movlb	2	; () banked
 13378  006A54  2594               	addwf	(_loRa+148)& (0+255),w,b
 13379  006A56  6F96               	movwf	(_loRa+150)& (0+255),b
 13380  006A58  0E03               	movlw	3
 13381  006A5A  2195               	addwfc	(_loRa+149)& (0+255),w,b
 13382  006A5C  6F97               	movwf	(_loRa+151)& (0+255),b
 13383                           
 13384                           ; BSR set to: 2
 13385  006A5E  0012               	return		;funcret
 13386  006A60                     __end_of_UpdateReceiveDelays:
 13387                           	opt stack 0
 13388                           tosu	equ	0xFFF
 13389                           tosh	equ	0xFFE
 13390                           tosl	equ	0xFFD
 13391                           pclath	equ	0xFFA
 13392                           tblptru	equ	0xFF8
 13393                           tblptrh	equ	0xFF7
 13394                           tblptrl	equ	0xFF6
 13395                           tablat	equ	0xFF5
 13396                           prodh	equ	0xFF4
 13397                           prodl	equ	0xFF3
 13398                           intcon	equ	0xFF2
 13399                           intcon2	equ	0xFF1
 13400                           intcon3	equ	0xFF0
 13401                           indf0	equ	0xFEF
 13402                           postinc0	equ	0xFEE
 13403                           fsr0h	equ	0xFEA
 13404                           fsr0l	equ	0xFE9
 13405                           wreg	equ	0xFE8
 13406                           postinc1	equ	0xFE6
 13407                           postdec1	equ	0xFE5
 13408                           plusw1	equ	0xFE3
 13409                           fsr1h	equ	0xFE2
 13410                           fsr1l	equ	0xFE1
 13411                           indf2	equ	0xFDF
 13412                           postinc2	equ	0xFDE
 13413                           postdec2	equ	0xFDD
 13414                           fsr2h	equ	0xFDA
 13415                           fsr2l	equ	0xFD9
 13416                           status	equ	0xFD8
 13417                           
 13418 ;; *************** function _ExecuteRxParamSetupReq *****************
 13419 ;; Defined at:
 13420 ;;		line 740 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 13421 ;; Parameters:    Size  Location     Type
 13422 ;;  ptr             2   16[BANK0 ] PTR unsigned char 
 13423 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 13424 ;; Auto vars:     Size  Location     Type
 13425 ;;  frequency       4   18[BANK0 ] unsigned long 
 13426 ;;  dlSettings      1   22[BANK0 ] struct .
 13427 ;; Return value:  Size  Location     Type
 13428 ;;                  2   16[BANK0 ] PTR unsigned char 
 13429 ;; Registers used:
 13430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13431 ;; Tracked objects:
 13432 ;;		On entry : F/0
 13433 ;;		On exit  : F/2
 13434 ;;		Unchanged: 0/0
 13435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13436 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13437 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13439 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13440 ;;Total ram usage:        7 bytes
 13441 ;; Hardware stack levels used:    1
 13442 ;; Hardware stack levels required when called:    8
 13443 ;; This function calls:
 13444 ;;		_UpdateReceiveWindow2Parameters
 13445 ;;		_ValidateDataRate
 13446 ;;		_ValidateFrequency
 13447 ;;		_ValidateRxOffset
 13448 ;;		___lmul
 13449 ;; This function is called by:
 13450 ;;		_MacExecuteCommands
 13451 ;; This function uses a non-reentrant model
 13452 ;;
 13453                           
 13454                           	psect	text67
 13455  0042D6                     __ptext67:
 13456                           	opt stack 0
 13457  0042D6                     _ExecuteRxParamSetupReq:
 13458                           	opt stack 17
 13459                           
 13460                           ; BSR set to: 0
 13461                           ;lorawan_eu.c: 747: dlSettings.value = *(ptr++);
 13462                           
 13463                           ; BSR set to: 0
 13464                           
 13465                           ; BSR set to: 2
 13466                           ;incstack = 0
 13467  0042D6  C070  FFD9         	movff	ExecuteRxParamSetupReq@ptr,fsr2l
 13468  0042DA  C071  FFDA         	movff	ExecuteRxParamSetupReq@ptr+1,fsr2h
 13469  0042DE  50DF               	movf	indf2,w,c
 13470  0042E0  6F76               	movwf	ExecuteRxParamSetupReq@dlSettings& (0+255),b
 13471                           
 13472                           ; BSR set to: 0
 13473  0042E2  4B70               	infsnz	ExecuteRxParamSetupReq@ptr& (0+255),f,b
 13474  0042E4  2B71               	incf	(ExecuteRxParamSetupReq@ptr+1)& (0+255),f,b
 13475                           
 13476                           ; BSR set to: 0
 13477                           ;lorawan_eu.c: 749: frequency = (*((uint32_t*)ptr)) & 0x00FFFFFF;
 13478  0042E6  C070  FFD9         	movff	ExecuteRxParamSetupReq@ptr,fsr2l
 13479  0042EA  C071  FFDA         	movff	ExecuteRxParamSetupReq@ptr+1,fsr2h
 13480  0042EE  0EFF               	movlw	255
 13481  0042F0  14DE               	andwf	postinc2,w,c
 13482  0042F2  6F72               	movwf	ExecuteRxParamSetupReq@frequency& (0+255),b
 13483  0042F4  0EFF               	movlw	255
 13484  0042F6  14DE               	andwf	postinc2,w,c
 13485  0042F8  6F73               	movwf	(ExecuteRxParamSetupReq@frequency+1)& (0+255),b
 13486  0042FA  0EFF               	movlw	255
 13487  0042FC  14DE               	andwf	postinc2,w,c
 13488  0042FE  6F74               	movwf	(ExecuteRxParamSetupReq@frequency+2)& (0+255),b
 13489  004300  0E00               	movlw	0
 13490  004302  14DE               	andwf	postinc2,w,c
 13491  004304  6F75               	movwf	(ExecuteRxParamSetupReq@frequency+3)& (0+255),b
 13492                           
 13493                           ; BSR set to: 0
 13494                           ;lorawan_eu.c: 750: frequency = frequency * 100;
 13495  004306  C072  F064         	movff	ExecuteRxParamSetupReq@frequency,___lmul@multiplier
 13496  00430A  C073  F065         	movff	ExecuteRxParamSetupReq@frequency+1,___lmul@multiplier+1
 13497  00430E  C074  F066         	movff	ExecuteRxParamSetupReq@frequency+2,___lmul@multiplier+2
 13498  004312  C075  F067         	movff	ExecuteRxParamSetupReq@frequency+3,___lmul@multiplier+3
 13499  004316  0E64               	movlw	100
 13500  004318  6F68               	movwf	___lmul@multiplicand& (0+255),b
 13501  00431A  6B69               	clrf	(___lmul@multiplicand+1)& (0+255),b
 13502  00431C  6B6A               	clrf	(___lmul@multiplicand+2)& (0+255),b
 13503  00431E  6B6B               	clrf	(___lmul@multiplicand+3)& (0+255),b
 13504  004320  EC79  F02E         	call	___lmul	;wreg free
 13505  004324  C064  F072         	movff	?___lmul,ExecuteRxParamSetupReq@frequency
 13506  004328  C065  F073         	movff	?___lmul+1,ExecuteRxParamSetupReq@frequency+1
 13507  00432C  C066  F074         	movff	?___lmul+2,ExecuteRxParamSetupReq@frequency+2
 13508  004330  C067  F075         	movff	?___lmul+3,ExecuteRxParamSetupReq@frequency+3
 13509                           
 13510                           ; BSR set to: 0
 13511                           ;lorawan_eu.c: 751: ptr = ptr + 3;
 13512  004334  0E03               	movlw	3
 13513  004336  2770               	addwf	ExecuteRxParamSetupReq@ptr& (0+255),f,b
 13514  004338  0E00               	movlw	0
 13515  00433A  2371               	addwfc	(ExecuteRxParamSetupReq@ptr+1)& (0+255),f,b
 13516                           
 13517                           ; BSR set to: 0
 13518                           ;lorawan_eu.c: 753: if (ValidateFrequency (frequency) == OK)
 13519  00433C  C072  F064         	movff	ExecuteRxParamSetupReq@frequency,ValidateFrequency@frequencyNew
 13520  004340  C073  F065         	movff	ExecuteRxParamSetupReq@frequency+1,ValidateFrequency@frequencyNew+1
 13521  004344  C074  F066         	movff	ExecuteRxParamSetupReq@frequency+2,ValidateFrequency@frequencyNew+2
 13522  004348  C075  F067         	movff	ExecuteRxParamSetupReq@frequency+3,ValidateFrequency@frequencyNew+3
 13523  00434C  EC70  F033         	call	_ValidateFrequency	;wreg free
 13524  004350  0900               	iorlw	0
 13525  004352  E10A               	bnz	l13332
 13526                           
 13527                           ; BSR set to: 0
 13528                           ;lorawan_eu.c: 754: {
 13529                           ;lorawan_eu.c: 755: loRa.macCommands[loRa.crtMacCmdIndex].channelAck = 1;
 13530  004354  0102               	movlb	2	; () banked
 13531  004356  51A7               	movf	(_loRa+167)& (0+255),w,b
 13532  004358  0D02               	mullw	2
 13533  00435A  0EA9               	movlw	low (_loRa+169)
 13534  00435C  24F3               	addwf	prodl,w,c
 13535  00435E  6ED9               	movwf	fsr2l,c
 13536  004360  0E02               	movlw	high (_loRa+169)
 13537  004362  20F4               	addwfc	prodh,w,c
 13538  004364  6EDA               	movwf	fsr2h,c
 13539  004366  86DF               	bsf	indf2,3,c
 13540  004368                     l13332:
 13541                           
 13542                           ;lorawan_eu.c: 756: }
 13543                           ;lorawan_eu.c: 758: if (ValidateDataRate (dlSettings.bits.rx2DataRate) == OK)
 13544  004368  0100               	movlb	0	; () banked
 13545  00436A  5176               	movf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 13546  00436C  0B0F               	andlw	15
 13547  00436E  EC1F  F03B         	call	_ValidateDataRate
 13548  004372  0900               	iorlw	0
 13549  004374  E10A               	bnz	l13336
 13550                           
 13551                           ; BSR set to: 0
 13552                           ;lorawan_eu.c: 759: {
 13553                           ;lorawan_eu.c: 760: loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck = 1;
 13554  004376  0102               	movlb	2	; () banked
 13555  004378  51A7               	movf	(_loRa+167)& (0+255),w,b
 13556  00437A  0D02               	mullw	2
 13557  00437C  0EA9               	movlw	low (_loRa+169)
 13558  00437E  24F3               	addwf	prodl,w,c
 13559  004380  6ED9               	movwf	fsr2l,c
 13560  004382  0E02               	movlw	high (_loRa+169)
 13561  004384  20F4               	addwfc	prodh,w,c
 13562  004386  6EDA               	movwf	fsr2h,c
 13563  004388  88DF               	bsf	indf2,4,c
 13564  00438A                     l13336:
 13565                           
 13566                           ;lorawan_eu.c: 761: }
 13567                           ;lorawan_eu.c: 763: if (ValidateRxOffset (dlSettings.bits.rx1DROffset) == OK)
 13568  00438A  0100               	movlb	0	; () banked
 13569  00438C  3976               	swapf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 13570  00438E  0B07               	andlw	7
 13571  004390  EC15  F03B         	call	_ValidateRxOffset
 13572  004394  0900               	iorlw	0
 13573  004396  E10A               	bnz	l1144
 13574                           
 13575                           ; BSR set to: 0
 13576                           ;lorawan_eu.c: 764: {
 13577                           ;lorawan_eu.c: 765: loRa.macCommands[loRa.crtMacCmdIndex].rx1DROffestAck = 1;
 13578  004398  0102               	movlb	2	; () banked
 13579  00439A  51A7               	movf	(_loRa+167)& (0+255),w,b
 13580  00439C  0D02               	mullw	2
 13581  00439E  0EA9               	movlw	low (_loRa+169)
 13582  0043A0  24F3               	addwf	prodl,w,c
 13583  0043A2  6ED9               	movwf	fsr2l,c
 13584  0043A4  0E02               	movlw	high (_loRa+169)
 13585  0043A6  20F4               	addwfc	prodh,w,c
 13586  0043A8  6EDA               	movwf	fsr2h,c
 13587  0043AA  8ADF               	bsf	indf2,5,c
 13588  0043AC                     l1144:
 13589                           
 13590                           ;lorawan_eu.c: 766: }
 13591                           ;lorawan_eu.c: 768: if ( (loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck
      +                           == 1) && (loRa.macCommands[loRa.crtMacCmdIndex].channelAck == 1) && (loRa.macCommands[l
      +                          oRa.crtMacCmdIndex].rx1DROffestAck == 1))
 13592  0043AC  0102               	movlb	2	; () banked
 13593  0043AE  51A7               	movf	(_loRa+167)& (0+255),w,b
 13594  0043B0  0D02               	mullw	2
 13595  0043B2  0EA9               	movlw	low (_loRa+169)
 13596  0043B4  24F3               	addwf	prodl,w,c
 13597  0043B6  6ED9               	movwf	fsr2l,c
 13598  0043B8  0E02               	movlw	high (_loRa+169)
 13599  0043BA  20F4               	addwfc	prodh,w,c
 13600  0043BC  6EDA               	movwf	fsr2h,c
 13601  0043BE  A8DF               	btfss	indf2,4,c
 13602  0043C0  D029               	goto	l13350
 13603                           
 13604                           ; BSR set to: 2
 13605  0043C2  51A7               	movf	(_loRa+167)& (0+255),w,b
 13606  0043C4  0D02               	mullw	2
 13607  0043C6  0EA9               	movlw	low (_loRa+169)
 13608  0043C8  24F3               	addwf	prodl,w,c
 13609  0043CA  6ED9               	movwf	fsr2l,c
 13610  0043CC  0E02               	movlw	high (_loRa+169)
 13611  0043CE  20F4               	addwfc	prodh,w,c
 13612  0043D0  6EDA               	movwf	fsr2h,c
 13613  0043D2  A6DF               	btfss	indf2,3,c
 13614  0043D4  D01F               	goto	l13350
 13615                           
 13616                           ; BSR set to: 2
 13617  0043D6  51A7               	movf	(_loRa+167)& (0+255),w,b
 13618  0043D8  0D02               	mullw	2
 13619  0043DA  0EA9               	movlw	low (_loRa+169)
 13620  0043DC  24F3               	addwf	prodl,w,c
 13621  0043DE  6ED9               	movwf	fsr2l,c
 13622  0043E0  0E02               	movlw	high (_loRa+169)
 13623  0043E2  20F4               	addwfc	prodh,w,c
 13624  0043E4  6EDA               	movwf	fsr2h,c
 13625  0043E6  AADF               	btfss	indf2,5,c
 13626  0043E8  D015               	goto	l13350
 13627                           
 13628                           ; BSR set to: 2
 13629                           ;lorawan_eu.c: 769: {
 13630                           ;lorawan_eu.c: 770: loRa.offset = dlSettings.bits.rx1DROffset;
 13631  0043EA  0100               	movlb	0	; () banked
 13632  0043EC  3976               	swapf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 13633  0043EE  0B07               	andlw	7
 13634  0043F0  0102               	movlb	2	; () banked
 13635  0043F2  6FEF               	movwf	(_loRa+239)& (0+255),b
 13636                           
 13637                           ; BSR set to: 2
 13638                           ;lorawan_eu.c: 771: UpdateReceiveWindow2Parameters (frequency, dlSettings.bits.rx2DataRa
      +                          te);
 13639  0043F4  C072  F064         	movff	ExecuteRxParamSetupReq@frequency,UpdateReceiveWindow2Parameters@frequency
 13640  0043F8  C073  F065         	movff	ExecuteRxParamSetupReq@frequency+1,UpdateReceiveWindow2Parameters@frequency+1
 13641  0043FC  C074  F066         	movff	ExecuteRxParamSetupReq@frequency+2,UpdateReceiveWindow2Parameters@frequency+2
 13642  004400  C075  F067         	movff	ExecuteRxParamSetupReq@frequency+3,UpdateReceiveWindow2Parameters@frequency+3
 13643  004404  0100               	movlb	0	; () banked
 13644  004406  5176               	movf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 13645  004408  0B0F               	andlw	15
 13646  00440A  6F68               	movwf	UpdateReceiveWindow2Parameters@dataRate& (0+255),b
 13647  00440C  ECFF  F03A         	call	_UpdateReceiveWindow2Parameters	;wreg free
 13648                           
 13649                           ; BSR set to: 0
 13650                           ;lorawan_eu.c: 772: loRa.macStatus.secondReceiveWindowModified = 1;
 13651  004410  0102               	movlb	2	; () banked
 13652  004412  8F03               	bsf	(_loRa+3)& (0+255),7,b
 13653  004414                     l13350:
 13654                           
 13655                           ; BSR set to: 2
 13656                           ;lorawan_eu.c: 773: }
 13657                           ;lorawan_eu.c: 775: return ptr;
 13658  004414  C070  F070         	movff	ExecuteRxParamSetupReq@ptr,?_ExecuteRxParamSetupReq
 13659  004418  C071  F071         	movff	ExecuteRxParamSetupReq@ptr+1,?_ExecuteRxParamSetupReq+1
 13660                           
 13661                           ; BSR set to: 2
 13662  00441C  0012               	return		;funcret
 13663  00441E                     __end_of_ExecuteRxParamSetupReq:
 13664                           	opt stack 0
 13665                           tosu	equ	0xFFF
 13666                           tosh	equ	0xFFE
 13667                           tosl	equ	0xFFD
 13668                           pclath	equ	0xFFA
 13669                           tblptru	equ	0xFF8
 13670                           tblptrh	equ	0xFF7
 13671                           tblptrl	equ	0xFF6
 13672                           tablat	equ	0xFF5
 13673                           prodh	equ	0xFF4
 13674                           prodl	equ	0xFF3
 13675                           intcon	equ	0xFF2
 13676                           intcon2	equ	0xFF1
 13677                           intcon3	equ	0xFF0
 13678                           indf0	equ	0xFEF
 13679                           postinc0	equ	0xFEE
 13680                           fsr0h	equ	0xFEA
 13681                           fsr0l	equ	0xFE9
 13682                           wreg	equ	0xFE8
 13683                           postinc1	equ	0xFE6
 13684                           postdec1	equ	0xFE5
 13685                           plusw1	equ	0xFE3
 13686                           fsr1h	equ	0xFE2
 13687                           fsr1l	equ	0xFE1
 13688                           indf2	equ	0xFDF
 13689                           postinc2	equ	0xFDE
 13690                           postdec2	equ	0xFDD
 13691                           fsr2h	equ	0xFDA
 13692                           fsr2l	equ	0xFD9
 13693                           status	equ	0xFD8
 13694                           
 13695 ;; *************** function _ValidateRxOffset *****************
 13696 ;; Defined at:
 13697 ;;		line 1076 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 13698 ;; Parameters:    Size  Location     Type
 13699 ;;  rxOffset        1    wreg     unsigned char 
 13700 ;; Auto vars:     Size  Location     Type
 13701 ;;  rxOffset        1    4[BANK0 ] unsigned char 
 13702 ;;  result          1    5[BANK0 ] enum E18963
 13703 ;; Return value:  Size  Location     Type
 13704 ;;                  1    wreg      enum E18963
 13705 ;; Registers used:
 13706 ;;		wreg, status,2, status,0
 13707 ;; Tracked objects:
 13708 ;;		On entry : F/0
 13709 ;;		On exit  : F/0
 13710 ;;		Unchanged: 0/0
 13711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13713 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13715 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13716 ;;Total ram usage:        2 bytes
 13717 ;; Hardware stack levels used:    1
 13718 ;; Hardware stack levels required when called:    7
 13719 ;; This function calls:
 13720 ;;		Nothing
 13721 ;; This function is called by:
 13722 ;;		_ExecuteRxParamSetupReq
 13723 ;; This function uses a non-reentrant model
 13724 ;;
 13725                           
 13726                           	psect	text68
 13727  00762A                     __ptext68:
 13728                           	opt stack 0
 13729  00762A                     _ValidateRxOffset:
 13730                           	opt stack 17
 13731                           
 13732                           ; BSR set to: 2
 13733                           ;incstack = 0
 13734                           ;ValidateRxOffset@rxOffset stored from wreg
 13735  00762A  6F64               	movwf	ValidateRxOffset@rxOffset& (0+255),b
 13736                           
 13737                           ;lorawan_eu.c: 1078: LorawanError_t result = OK;
 13738  00762C  0100               	movlb	0	; () banked
 13739  00762E  6B65               	clrf	ValidateRxOffset@result& (0+255),b
 13740                           
 13741                           ; BSR set to: 0
 13742                           ;lorawan_eu.c: 1080: if (rxOffset > 5)
 13743  007630  0E05               	movlw	5
 13744  007632  6564               	cpfsgt	ValidateRxOffset@rxOffset& (0+255),b
 13745  007634  D002               	goto	l1240
 13746                           
 13747                           ; BSR set to: 0
 13748                           ;lorawan_eu.c: 1081: {
 13749                           ;lorawan_eu.c: 1082: result = INVALID_PARAMETER;
 13750  007636  0E03               	movlw	3
 13751  007638  6F65               	movwf	ValidateRxOffset@result& (0+255),b
 13752  00763A                     l1240:
 13753                           
 13754                           ; BSR set to: 0
 13755                           ;lorawan_eu.c: 1083: }
 13756                           ;lorawan_eu.c: 1085: return result;
 13757  00763A  5165               	movf	ValidateRxOffset@result& (0+255),w,b
 13758                           
 13759                           ; BSR set to: 0
 13760  00763C  0012               	return		;funcret
 13761  00763E                     __end_of_ValidateRxOffset:
 13762                           	opt stack 0
 13763                           tosu	equ	0xFFF
 13764                           tosh	equ	0xFFE
 13765                           tosl	equ	0xFFD
 13766                           pclath	equ	0xFFA
 13767                           tblptru	equ	0xFF8
 13768                           tblptrh	equ	0xFF7
 13769                           tblptrl	equ	0xFF6
 13770                           tablat	equ	0xFF5
 13771                           prodh	equ	0xFF4
 13772                           prodl	equ	0xFF3
 13773                           intcon	equ	0xFF2
 13774                           intcon2	equ	0xFF1
 13775                           intcon3	equ	0xFF0
 13776                           indf0	equ	0xFEF
 13777                           postinc0	equ	0xFEE
 13778                           fsr0h	equ	0xFEA
 13779                           fsr0l	equ	0xFE9
 13780                           wreg	equ	0xFE8
 13781                           postinc1	equ	0xFE6
 13782                           postdec1	equ	0xFE5
 13783                           plusw1	equ	0xFE3
 13784                           fsr1h	equ	0xFE2
 13785                           fsr1l	equ	0xFE1
 13786                           indf2	equ	0xFDF
 13787                           postinc2	equ	0xFDE
 13788                           postdec2	equ	0xFDD
 13789                           fsr2h	equ	0xFDA
 13790                           fsr2l	equ	0xFD9
 13791                           status	equ	0xFD8
 13792                           
 13793 ;; *************** function _UpdateReceiveWindow2Parameters *****************
 13794 ;; Defined at:
 13795 ;;		line 1084 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13796 ;; Parameters:    Size  Location     Type
 13797 ;;  frequency       4    4[BANK0 ] unsigned long 
 13798 ;;  dataRate        1    8[BANK0 ] unsigned char 
 13799 ;; Auto vars:     Size  Location     Type
 13800 ;;		None
 13801 ;; Return value:  Size  Location     Type
 13802 ;;                  1    wreg      void 
 13803 ;; Registers used:
 13804 ;;		None
 13805 ;; Tracked objects:
 13806 ;;		On entry : F/0
 13807 ;;		On exit  : F/0
 13808 ;;		Unchanged: F/0
 13809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13810 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13813 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13814 ;;Total ram usage:        5 bytes
 13815 ;; Hardware stack levels used:    1
 13816 ;; Hardware stack levels required when called:    7
 13817 ;; This function calls:
 13818 ;;		Nothing
 13819 ;; This function is called by:
 13820 ;;		_ExecuteRxParamSetupReq
 13821 ;; This function uses a non-reentrant model
 13822 ;;
 13823                           
 13824                           	psect	text69
 13825  0075FE                     __ptext69:
 13826                           	opt stack 0
 13827  0075FE                     _UpdateReceiveWindow2Parameters:
 13828                           	opt stack 17
 13829                           
 13830                           ; BSR set to: 0
 13831                           ;lorawan.c: 1086: loRa.receiveWindow2Parameters.dataRate = dataRate;
 13832                           
 13833                           ; BSR set to: 0
 13834                           ;incstack = 0
 13835  0075FE  C068  F21C         	movff	UpdateReceiveWindow2Parameters@dataRate,_loRa+28
 13836                           
 13837                           ;lorawan.c: 1087: loRa.receiveWindow2Parameters.frequency = frequency;
 13838  007602  C064  F218         	movff	UpdateReceiveWindow2Parameters@frequency,_loRa+24
 13839  007606  C065  F219         	movff	UpdateReceiveWindow2Parameters@frequency+1,_loRa+25
 13840  00760A  C066  F21A         	movff	UpdateReceiveWindow2Parameters@frequency+2,_loRa+26
 13841  00760E  C067  F21B         	movff	UpdateReceiveWindow2Parameters@frequency+3,_loRa+27
 13842                           
 13843                           ; BSR set to: 0
 13844  007612  0012               	return		;funcret
 13845  007614                     __end_of_UpdateReceiveWindow2Parameters:
 13846                           	opt stack 0
 13847                           tosu	equ	0xFFF
 13848                           tosh	equ	0xFFE
 13849                           tosl	equ	0xFFD
 13850                           pclath	equ	0xFFA
 13851                           tblptru	equ	0xFF8
 13852                           tblptrh	equ	0xFF7
 13853                           tblptrl	equ	0xFF6
 13854                           tablat	equ	0xFF5
 13855                           prodh	equ	0xFF4
 13856                           prodl	equ	0xFF3
 13857                           intcon	equ	0xFF2
 13858                           intcon2	equ	0xFF1
 13859                           intcon3	equ	0xFF0
 13860                           indf0	equ	0xFEF
 13861                           postinc0	equ	0xFEE
 13862                           fsr0h	equ	0xFEA
 13863                           fsr0l	equ	0xFE9
 13864                           wreg	equ	0xFE8
 13865                           postinc1	equ	0xFE6
 13866                           postdec1	equ	0xFE5
 13867                           plusw1	equ	0xFE3
 13868                           fsr1h	equ	0xFE2
 13869                           fsr1l	equ	0xFE1
 13870                           indf2	equ	0xFDF
 13871                           postinc2	equ	0xFDE
 13872                           postdec2	equ	0xFDD
 13873                           fsr2h	equ	0xFDA
 13874                           fsr2l	equ	0xFD9
 13875                           status	equ	0xFD8
 13876                           
 13877 ;; *************** function _ExecuteNewChannel *****************
 13878 ;; Defined at:
 13879 ;;		line 677 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 13880 ;; Parameters:    Size  Location     Type
 13881 ;;  ptr             2   16[BANK0 ] PTR unsigned char 
 13882 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 13883 ;; Auto vars:     Size  Location     Type
 13884 ;;  frequency       4   19[BANK0 ] unsigned long 
 13885 ;;  channelIndex    1   23[BANK0 ] unsigned char 
 13886 ;;  drRange         1   18[BANK0 ] struct .
 13887 ;; Return value:  Size  Location     Type
 13888 ;;                  2   16[BANK0 ] PTR unsigned char 
 13889 ;; Registers used:
 13890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13891 ;; Tracked objects:
 13892 ;;		On entry : F/0
 13893 ;;		On exit  : F/2
 13894 ;;		Unchanged: 0/0
 13895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13896 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13897 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13899 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13900 ;;Total ram usage:        8 bytes
 13901 ;; Hardware stack levels used:    1
 13902 ;; Hardware stack levels required when called:    9
 13903 ;; This function calls:
 13904 ;;		_LORAWAN_SetChannelIdStatus
 13905 ;;		_UpdateChannelIdStatus
 13906 ;;		_UpdateDataRange
 13907 ;;		_UpdateDutyCycle
 13908 ;;		_UpdateFrequency
 13909 ;;		_ValidateChannelId
 13910 ;;		_ValidateDataRange
 13911 ;;		_ValidateFrequency
 13912 ;;		___lmul
 13913 ;; This function is called by:
 13914 ;;		_MacExecuteCommands
 13915 ;; This function uses a non-reentrant model
 13916 ;;
 13917                           
 13918                           	psect	text70
 13919  0033A8                     __ptext70:
 13920                           	opt stack 0
 13921  0033A8                     _ExecuteNewChannel:
 13922                           	opt stack 16
 13923                           
 13924                           ; BSR set to: 0
 13925                           ;lorawan_eu.c: 683: channelIndex = *(ptr++);
 13926                           
 13927                           ; BSR set to: 0
 13928                           
 13929                           ; BSR set to: 0
 13930                           ;incstack = 0
 13931  0033A8  C070  FFD9         	movff	ExecuteNewChannel@ptr,fsr2l
 13932  0033AC  C071  FFDA         	movff	ExecuteNewChannel@ptr+1,fsr2h
 13933  0033B0  50DF               	movf	indf2,w,c
 13934  0033B2  6F77               	movwf	ExecuteNewChannel@channelIndex& (0+255),b
 13935                           
 13936                           ; BSR set to: 0
 13937  0033B4  4B70               	infsnz	ExecuteNewChannel@ptr& (0+255),f,b
 13938  0033B6  2B71               	incf	(ExecuteNewChannel@ptr+1)& (0+255),f,b
 13939                           
 13940                           ; BSR set to: 0
 13941                           ;lorawan_eu.c: 685: frequency = (*((uint32_t*)ptr)) & 0x00FFFFFF;
 13942  0033B8  C070  FFD9         	movff	ExecuteNewChannel@ptr,fsr2l
 13943  0033BC  C071  FFDA         	movff	ExecuteNewChannel@ptr+1,fsr2h
 13944  0033C0  0EFF               	movlw	255
 13945  0033C2  14DE               	andwf	postinc2,w,c
 13946  0033C4  6F73               	movwf	ExecuteNewChannel@frequency& (0+255),b
 13947  0033C6  0EFF               	movlw	255
 13948  0033C8  14DE               	andwf	postinc2,w,c
 13949  0033CA  6F74               	movwf	(ExecuteNewChannel@frequency+1)& (0+255),b
 13950  0033CC  0EFF               	movlw	255
 13951  0033CE  14DE               	andwf	postinc2,w,c
 13952  0033D0  6F75               	movwf	(ExecuteNewChannel@frequency+2)& (0+255),b
 13953  0033D2  0E00               	movlw	0
 13954  0033D4  14DE               	andwf	postinc2,w,c
 13955  0033D6  6F76               	movwf	(ExecuteNewChannel@frequency+3)& (0+255),b
 13956                           
 13957                           ; BSR set to: 0
 13958                           ;lorawan_eu.c: 686: frequency = frequency * 100;
 13959  0033D8  C073  F064         	movff	ExecuteNewChannel@frequency,___lmul@multiplier
 13960  0033DC  C074  F065         	movff	ExecuteNewChannel@frequency+1,___lmul@multiplier+1
 13961  0033E0  C075  F066         	movff	ExecuteNewChannel@frequency+2,___lmul@multiplier+2
 13962  0033E4  C076  F067         	movff	ExecuteNewChannel@frequency+3,___lmul@multiplier+3
 13963  0033E8  0E64               	movlw	100
 13964  0033EA  6F68               	movwf	___lmul@multiplicand& (0+255),b
 13965  0033EC  6B69               	clrf	(___lmul@multiplicand+1)& (0+255),b
 13966  0033EE  6B6A               	clrf	(___lmul@multiplicand+2)& (0+255),b
 13967  0033F0  6B6B               	clrf	(___lmul@multiplicand+3)& (0+255),b
 13968  0033F2  EC79  F02E         	call	___lmul	;wreg free
 13969  0033F6  C064  F073         	movff	?___lmul,ExecuteNewChannel@frequency
 13970  0033FA  C065  F074         	movff	?___lmul+1,ExecuteNewChannel@frequency+1
 13971  0033FE  C066  F075         	movff	?___lmul+2,ExecuteNewChannel@frequency+2
 13972  003402  C067  F076         	movff	?___lmul+3,ExecuteNewChannel@frequency+3
 13973                           
 13974                           ; BSR set to: 0
 13975                           ;lorawan_eu.c: 687: ptr = ptr + 3;
 13976  003406  0E03               	movlw	3
 13977  003408  2770               	addwf	ExecuteNewChannel@ptr& (0+255),f,b
 13978  00340A  0E00               	movlw	0
 13979  00340C  2371               	addwfc	(ExecuteNewChannel@ptr+1)& (0+255),f,b
 13980                           
 13981                           ; BSR set to: 0
 13982                           ;lorawan_eu.c: 689: drRange.value = *(ptr++);
 13983  00340E  C070  FFD9         	movff	ExecuteNewChannel@ptr,fsr2l
 13984  003412  C071  FFDA         	movff	ExecuteNewChannel@ptr+1,fsr2h
 13985  003416  50DF               	movf	indf2,w,c
 13986  003418  6F72               	movwf	ExecuteNewChannel@drRange& (0+255),b
 13987                           
 13988                           ; BSR set to: 0
 13989  00341A  4B70               	infsnz	ExecuteNewChannel@ptr& (0+255),f,b
 13990  00341C  2B71               	incf	(ExecuteNewChannel@ptr+1)& (0+255),f,b
 13991                           
 13992                           ; BSR set to: 0
 13993                           ;lorawan_eu.c: 691: if (ValidateChannelId (channelIndex, 0) == OK)
 13994  00341E  6B64               	clrf	ValidateChannelId@allowedForDefaultChannels& (0+255),b
 13995  003420  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 13996  003422  ECF9  F039         	call	_ValidateChannelId
 13997  003426  0900               	iorlw	0
 13998  003428  E12B               	bnz	l1127
 13999                           
 14000                           ; BSR set to: 0
 14001                           ;lorawan_eu.c: 692: {
 14002                           ;lorawan_eu.c: 693: if ( (ValidateFrequency (frequency) == OK) || (frequency == 0) )
 14003  00342A  C073  F064         	movff	ExecuteNewChannel@frequency,ValidateFrequency@frequencyNew
 14004  00342E  C074  F065         	movff	ExecuteNewChannel@frequency+1,ValidateFrequency@frequencyNew+1
 14005  003432  C075  F066         	movff	ExecuteNewChannel@frequency+2,ValidateFrequency@frequencyNew+2
 14006  003436  C076  F067         	movff	ExecuteNewChannel@frequency+3,ValidateFrequency@frequencyNew+3
 14007  00343A  EC70  F033         	call	_ValidateFrequency	;wreg free
 14008  00343E  0900               	iorlw	0
 14009  003440  E005               	bz	l13288
 14010                           
 14011                           ; BSR set to: 0
 14012  003442  5173               	movf	ExecuteNewChannel@frequency& (0+255),w,b
 14013  003444  1174               	iorwf	(ExecuteNewChannel@frequency+1)& (0+255),w,b
 14014  003446  1175               	iorwf	(ExecuteNewChannel@frequency+2)& (0+255),w,b
 14015  003448  1176               	iorwf	(ExecuteNewChannel@frequency+3)& (0+255),w,b
 14016  00344A  E10A               	bnz	l13290
 14017  00344C                     l13288:
 14018                           
 14019                           ; BSR set to: 0
 14020                           ;lorawan_eu.c: 694: {
 14021                           ;lorawan_eu.c: 695: loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck = 1;
 14022  00344C  0102               	movlb	2	; () banked
 14023  00344E  51A7               	movf	(_loRa+167)& (0+255),w,b
 14024  003450  0D02               	mullw	2
 14025  003452  0EA9               	movlw	low (_loRa+169)
 14026  003454  24F3               	addwf	prodl,w,c
 14027  003456  6ED9               	movwf	fsr2l,c
 14028  003458  0E02               	movlw	high (_loRa+169)
 14029  00345A  20F4               	addwfc	prodh,w,c
 14030  00345C  6EDA               	movwf	fsr2h,c
 14031  00345E  8EDF               	bsf	indf2,7,c
 14032  003460                     l13290:
 14033                           
 14034                           ;lorawan_eu.c: 696: }
 14035                           ;lorawan_eu.c: 698: if (ValidateDataRange (drRange.value) == OK)
 14036  003460  0100               	movlb	0	; () banked
 14037  003462  5172               	movf	ExecuteNewChannel@drRange& (0+255),w,b
 14038  003464  ECC8  F037         	call	_ValidateDataRange
 14039  003468  0900               	iorlw	0
 14040  00346A  E10A               	bnz	l1127
 14041                           
 14042                           ; BSR set to: 0
 14043                           ;lorawan_eu.c: 699: {
 14044                           ;lorawan_eu.c: 700: loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck = 1;
 14045  00346C  0102               	movlb	2	; () banked
 14046  00346E  51A7               	movf	(_loRa+167)& (0+255),w,b
 14047  003470  0D02               	mullw	2
 14048  003472  0EA9               	movlw	low (_loRa+169)
 14049  003474  24F3               	addwf	prodl,w,c
 14050  003476  6ED9               	movwf	fsr2l,c
 14051  003478  0E02               	movlw	high (_loRa+169)
 14052  00347A  20F4               	addwfc	prodh,w,c
 14053  00347C  6EDA               	movwf	fsr2h,c
 14054  00347E  8CDF               	bsf	indf2,6,c
 14055  003480                     l1127:
 14056                           
 14057                           ;lorawan_eu.c: 701: }
 14058                           ;lorawan_eu.c: 702: }
 14059                           ;lorawan_eu.c: 704: if ( (loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck == 1
      +                          ) && (loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck == 1) )
 14060  003480  0102               	movlb	2	; () banked
 14061  003482  51A7               	movf	(_loRa+167)& (0+255),w,b
 14062  003484  0D02               	mullw	2
 14063  003486  0EA9               	movlw	low (_loRa+169)
 14064  003488  24F3               	addwf	prodl,w,c
 14065  00348A  6ED9               	movwf	fsr2l,c
 14066  00348C  0E02               	movlw	high (_loRa+169)
 14067  00348E  20F4               	addwfc	prodh,w,c
 14068  003490  6EDA               	movwf	fsr2h,c
 14069  003492  AEDF               	btfss	indf2,7,c
 14070  003494  D065               	goto	l13312
 14071                           
 14072                           ; BSR set to: 2
 14073  003496  51A7               	movf	(_loRa+167)& (0+255),w,b
 14074  003498  0D02               	mullw	2
 14075  00349A  0EA9               	movlw	low (_loRa+169)
 14076  00349C  24F3               	addwf	prodl,w,c
 14077  00349E  6ED9               	movwf	fsr2l,c
 14078  0034A0  0E02               	movlw	high (_loRa+169)
 14079  0034A2  20F4               	addwfc	prodh,w,c
 14080  0034A4  6EDA               	movwf	fsr2h,c
 14081  0034A6  ACDF               	btfss	indf2,6,c
 14082  0034A8  D05B               	goto	l13312
 14083                           
 14084                           ; BSR set to: 2
 14085                           ;lorawan_eu.c: 705: {
 14086                           ;lorawan_eu.c: 706: if (loRa.lastUsedChannelIndex < 16)
 14087  0034AA  0E10               	movlw	16
 14088  0034AC  61DA               	cpfslt	(_loRa+218)& (0+255),b
 14089  0034AE  D029               	goto	l13304
 14090                           
 14091                           ; BSR set to: 2
 14092                           ;lorawan_eu.c: 707: {
 14093                           ;lorawan_eu.c: 708: if (frequency != 0)
 14094  0034B0  0100               	movlb	0	; () banked
 14095  0034B2  5173               	movf	ExecuteNewChannel@frequency& (0+255),w,b
 14096  0034B4  1174               	iorwf	(ExecuteNewChannel@frequency+1)& (0+255),w,b
 14097  0034B6  1175               	iorwf	(ExecuteNewChannel@frequency+2)& (0+255),w,b
 14098  0034B8  1176               	iorwf	(ExecuteNewChannel@frequency+3)& (0+255),w,b
 14099  0034BA  E01E               	bz	l13302
 14100                           
 14101                           ; BSR set to: 0
 14102                           ;lorawan_eu.c: 709: {
 14103                           ;lorawan_eu.c: 710: UpdateFrequency (channelIndex, frequency);
 14104  0034BC  C073  F064         	movff	ExecuteNewChannel@frequency,UpdateFrequency@frequencyNew
 14105  0034C0  C074  F065         	movff	ExecuteNewChannel@frequency+1,UpdateFrequency@frequencyNew+1
 14106  0034C4  C075  F066         	movff	ExecuteNewChannel@frequency+2,UpdateFrequency@frequencyNew+2
 14107  0034C8  C076  F067         	movff	ExecuteNewChannel@frequency+3,UpdateFrequency@frequencyNew+3
 14108  0034CC  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14109  0034CE  EC3C  F037         	call	_UpdateFrequency
 14110                           
 14111                           ;lorawan_eu.c: 711: UpdateDataRange (channelIndex, drRange.value);
 14112  0034D2  C072  F064         	movff	ExecuteNewChannel@drRange,UpdateDataRange@dataRangeNew
 14113  0034D6  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14114  0034D8  EC5A  F025         	call	_UpdateDataRange
 14115                           
 14116                           ;lorawan_eu.c: 712: UpdateDutyCycle (channelIndex, 302);
 14117  0034DC  0E01               	movlw	1
 14118  0034DE  0100               	movlb	0	; () banked
 14119  0034E0  6F65               	movwf	(UpdateDutyCycle@dutyCycleNew+1)& (0+255),b
 14120  0034E2  0E2E               	movlw	46
 14121  0034E4  6F64               	movwf	UpdateDutyCycle@dutyCycleNew& (0+255),b
 14122  0034E6  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14123  0034E8  ECFC  F037         	call	_UpdateDutyCycle
 14124                           
 14125                           ;lorawan_eu.c: 713: UpdateChannelIdStatus (channelIndex, 1);
 14126  0034EC  0E01               	movlw	1
 14127  0034EE  6F64               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 14128  0034F0  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14129  0034F2  ECD8  F023         	call	_UpdateChannelIdStatus
 14130                           
 14131                           ;lorawan_eu.c: 714: }
 14132  0034F6  D032               	goto	l13310
 14133  0034F8                     l13302:
 14134                           
 14135                           ; BSR set to: 0
 14136                           ;lorawan_eu.c: 715: else
 14137                           ;lorawan_eu.c: 716: {
 14138                           ;lorawan_eu.c: 717: LORAWAN_SetChannelIdStatus (channelIndex, 0);
 14139  0034F8  6B68               	clrf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 14140  0034FA  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14141  0034FC  EC75  F037         	call	_LORAWAN_SetChannelIdStatus
 14142  003500  D02D               	goto	l13310
 14143  003502                     l13304:
 14144                           
 14145                           ; BSR set to: 2
 14146                           ;lorawan_eu.c: 720: else
 14147                           ;lorawan_eu.c: 721: {
 14148                           ;lorawan_eu.c: 722: if (frequency != 0)
 14149  003502  0100               	movlb	0	; () banked
 14150  003504  5173               	movf	ExecuteNewChannel@frequency& (0+255),w,b
 14151  003506  1174               	iorwf	(ExecuteNewChannel@frequency+1)& (0+255),w,b
 14152  003508  1175               	iorwf	(ExecuteNewChannel@frequency+2)& (0+255),w,b
 14153  00350A  1176               	iorwf	(ExecuteNewChannel@frequency+3)& (0+255),w,b
 14154  00350C  E022               	bz	l13308
 14155                           
 14156                           ; BSR set to: 0
 14157                           ;lorawan_eu.c: 723: {
 14158                           ;lorawan_eu.c: 724: UpdateFrequency (channelIndex + 16, frequency);
 14159  00350E  C073  F064         	movff	ExecuteNewChannel@frequency,UpdateFrequency@frequencyNew
 14160  003512  C074  F065         	movff	ExecuteNewChannel@frequency+1,UpdateFrequency@frequencyNew+1
 14161  003516  C075  F066         	movff	ExecuteNewChannel@frequency+2,UpdateFrequency@frequencyNew+2
 14162  00351A  C076  F067         	movff	ExecuteNewChannel@frequency+3,UpdateFrequency@frequencyNew+3
 14163  00351E  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14164  003520  0F10               	addlw	16
 14165  003522  EC3C  F037         	call	_UpdateFrequency
 14166                           
 14167                           ;lorawan_eu.c: 725: UpdateDataRange (channelIndex + 16, drRange.value);
 14168  003526  C072  F064         	movff	ExecuteNewChannel@drRange,UpdateDataRange@dataRangeNew
 14169  00352A  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14170  00352C  0F10               	addlw	16
 14171  00352E  EC5A  F025         	call	_UpdateDataRange
 14172                           
 14173                           ;lorawan_eu.c: 726: UpdateDutyCycle (channelIndex + 16, 302);
 14174  003532  0E01               	movlw	1
 14175  003534  0100               	movlb	0	; () banked
 14176  003536  6F65               	movwf	(UpdateDutyCycle@dutyCycleNew+1)& (0+255),b
 14177  003538  0E2E               	movlw	46
 14178  00353A  6F64               	movwf	UpdateDutyCycle@dutyCycleNew& (0+255),b
 14179  00353C  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14180  00353E  0F10               	addlw	16
 14181  003540  ECFC  F037         	call	_UpdateDutyCycle
 14182                           
 14183                           ;lorawan_eu.c: 727: UpdateChannelIdStatus (channelIndex + 16, 1);
 14184  003544  0E01               	movlw	1
 14185  003546  6F64               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 14186  003548  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14187  00354A  0F10               	addlw	16
 14188  00354C  ECD8  F023         	call	_UpdateChannelIdStatus
 14189                           
 14190                           ;lorawan_eu.c: 728: }
 14191  003550  D005               	goto	l13310
 14192  003552                     l13308:
 14193                           
 14194                           ; BSR set to: 0
 14195                           ;lorawan_eu.c: 729: else
 14196                           ;lorawan_eu.c: 730: {
 14197                           ;lorawan_eu.c: 731: LORAWAN_SetChannelIdStatus (channelIndex + 16, 0);
 14198  003552  6B68               	clrf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 14199  003554  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14200  003556  0F10               	addlw	16
 14201  003558  EC75  F037         	call	_LORAWAN_SetChannelIdStatus
 14202  00355C                     l13310:
 14203                           
 14204                           ;lorawan_eu.c: 732: }
 14205                           ;lorawan_eu.c: 733: }
 14206                           ;lorawan_eu.c: 735: loRa.macStatus.channelsModified = 1;
 14207  00355C  0102               	movlb	2	; () banked
 14208  00355E  8703               	bsf	(_loRa+3)& (0+255),3,b
 14209  003560                     l13312:
 14210                           
 14211                           ; BSR set to: 2
 14212                           ;lorawan_eu.c: 736: }
 14213                           ;lorawan_eu.c: 737: return ptr;
 14214  003560  C070  F070         	movff	ExecuteNewChannel@ptr,?_ExecuteNewChannel
 14215  003564  C071  F071         	movff	ExecuteNewChannel@ptr+1,?_ExecuteNewChannel+1
 14216                           
 14217                           ; BSR set to: 2
 14218  003568  0012               	return		;funcret
 14219  00356A                     __end_of_ExecuteNewChannel:
 14220                           	opt stack 0
 14221                           tosu	equ	0xFFF
 14222                           tosh	equ	0xFFE
 14223                           tosl	equ	0xFFD
 14224                           pclath	equ	0xFFA
 14225                           tblptru	equ	0xFF8
 14226                           tblptrh	equ	0xFF7
 14227                           tblptrl	equ	0xFF6
 14228                           tablat	equ	0xFF5
 14229                           prodh	equ	0xFF4
 14230                           prodl	equ	0xFF3
 14231                           intcon	equ	0xFF2
 14232                           intcon2	equ	0xFF1
 14233                           intcon3	equ	0xFF0
 14234                           indf0	equ	0xFEF
 14235                           postinc0	equ	0xFEE
 14236                           fsr0h	equ	0xFEA
 14237                           fsr0l	equ	0xFE9
 14238                           wreg	equ	0xFE8
 14239                           postinc1	equ	0xFE6
 14240                           postdec1	equ	0xFE5
 14241                           plusw1	equ	0xFE3
 14242                           fsr1h	equ	0xFE2
 14243                           fsr1l	equ	0xFE1
 14244                           indf2	equ	0xFDF
 14245                           postinc2	equ	0xFDE
 14246                           postdec2	equ	0xFDD
 14247                           fsr2h	equ	0xFDA
 14248                           fsr2l	equ	0xFD9
 14249                           status	equ	0xFD8
 14250                           
 14251 ;; *************** function _ValidateFrequency *****************
 14252 ;; Defined at:
 14253 ;;		line 1088 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14254 ;; Parameters:    Size  Location     Type
 14255 ;;  frequencyNew    4    4[BANK0 ] unsigned long 
 14256 ;; Auto vars:     Size  Location     Type
 14257 ;;  result          1    8[BANK0 ] enum E18963
 14258 ;; Return value:  Size  Location     Type
 14259 ;;                  1    wreg      enum E18963
 14260 ;; Registers used:
 14261 ;;		wreg, status,2, status,0
 14262 ;; Tracked objects:
 14263 ;;		On entry : F/0
 14264 ;;		On exit  : F/0
 14265 ;;		Unchanged: 0/0
 14266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14267 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14270 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14271 ;;Total ram usage:        5 bytes
 14272 ;; Hardware stack levels used:    1
 14273 ;; Hardware stack levels required when called:    7
 14274 ;; This function calls:
 14275 ;;		Nothing
 14276 ;; This function is called by:
 14277 ;;		_ExecuteNewChannel
 14278 ;;		_ExecuteRxParamSetupReq
 14279 ;;		_UpdateCfList
 14280 ;; This function uses a non-reentrant model
 14281 ;;
 14282                           
 14283                           	psect	text71
 14284  0066E0                     __ptext71:
 14285                           	opt stack 0
 14286  0066E0                     _ValidateFrequency:
 14287                           	opt stack 18
 14288                           
 14289                           ; BSR set to: 0
 14290                           ;lorawan_eu.c: 1090: LorawanError_t result = OK;
 14291                           
 14292                           ; BSR set to: 2
 14293                           ;incstack = 0
 14294  0066E0  6B68               	clrf	ValidateFrequency@result& (0+255),b
 14295                           
 14296                           ; BSR set to: 0
 14297                           ;lorawan_eu.c: 1092: if(ISM_EU868 == loRa.ismBand)
 14298  0066E2  0102               	movlb	2	; () banked
 14299  0066E4  51A4               	movf	(_loRa+164)& (0+255),w,b
 14300  0066E6  E116               	bnz	l12558
 14301                           
 14302                           ; BSR set to: 2
 14303                           ;lorawan_eu.c: 1093: {
 14304                           ;lorawan_eu.c: 1094: if ( (frequencyNew > 870000000) || (frequencyNew < 863000000) )
 14305  0066E8  0E81               	movlw	129
 14306  0066EA  0100               	movlb	0	; () banked
 14307  0066EC  5D64               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 14308  0066EE  0E25               	movlw	37
 14309  0066F0  5965               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 14310  0066F2  0EDB               	movlw	219
 14311  0066F4  5966               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 14312  0066F6  0E33               	movlw	51
 14313  0066F8  5967               	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 14314  0066FA  E209               	bc	l12556
 14315                           
 14316                           ; BSR set to: 0
 14317  0066FC  0EC0               	movlw	192
 14318  0066FE  5D64               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 14319  006700  0E55               	movlw	85
 14320  006702  5965               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 14321  006704  0E70               	movlw	112
 14322  006706  5966               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 14323  006708  0E33               	movlw	51
 14324  00670A  5967               	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 14325  00670C  E215               	bc	l1248
 14326  00670E                     l12556:
 14327                           
 14328                           ; BSR set to: 0
 14329                           ;lorawan_eu.c: 1095: {
 14330                           ;lorawan_eu.c: 1096: result = INVALID_PARAMETER ;
 14331  00670E  0E03               	movlw	3
 14332  006710  6F68               	movwf	ValidateFrequency@result& (0+255),b
 14333  006712  D012               	goto	l1248
 14334  006714                     l12558:
 14335                           
 14336                           ; BSR set to: 2
 14337                           ;lorawan_eu.c: 1099: else
 14338                           ;lorawan_eu.c: 1100: {
 14339                           ;lorawan_eu.c: 1101: if ( (frequencyNew > 434790000) || (frequencyNew < 433050000) )
 14340  006714  0E71               	movlw	113
 14341  006716  0100               	movlb	0	; () banked
 14342  006718  5D64               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 14343  00671A  0E5E               	movlw	94
 14344  00671C  5965               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 14345  00671E  0EEA               	movlw	234
 14346  006720  5966               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 14347  006722  0E19               	movlw	25
 14348  006724  5967               	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 14349  006726  E2F3               	bc	l12556
 14350                           
 14351                           ; BSR set to: 0
 14352  006728  0E90               	movlw	144
 14353  00672A  5D64               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 14354  00672C  0ED1               	movlw	209
 14355  00672E  5965               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 14356  006730  0ECF               	movlw	207
 14357  006732  5966               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 14358  006734  0E19               	movlw	25
 14359  006736  D7E9               	goto	L7
 14360  006738                     l1248:
 14361                           
 14362                           ; BSR set to: 0
 14363                           ;lorawan_eu.c: 1104: }
 14364                           ;lorawan_eu.c: 1105: }
 14365                           ;lorawan_eu.c: 1107: return result;
 14366  006738  5168               	movf	ValidateFrequency@result& (0+255),w,b
 14367                           
 14368                           ; BSR set to: 0
 14369  00673A  0012               	return		;funcret
 14370  00673C                     __end_of_ValidateFrequency:
 14371                           	opt stack 0
 14372                           tosu	equ	0xFFF
 14373                           tosh	equ	0xFFE
 14374                           tosl	equ	0xFFD
 14375                           pclath	equ	0xFFA
 14376                           tblptru	equ	0xFF8
 14377                           tblptrh	equ	0xFF7
 14378                           tblptrl	equ	0xFF6
 14379                           tablat	equ	0xFF5
 14380                           prodh	equ	0xFF4
 14381                           prodl	equ	0xFF3
 14382                           intcon	equ	0xFF2
 14383                           intcon2	equ	0xFF1
 14384                           intcon3	equ	0xFF0
 14385                           indf0	equ	0xFEF
 14386                           postinc0	equ	0xFEE
 14387                           fsr0h	equ	0xFEA
 14388                           fsr0l	equ	0xFE9
 14389                           wreg	equ	0xFE8
 14390                           postinc1	equ	0xFE6
 14391                           postdec1	equ	0xFE5
 14392                           plusw1	equ	0xFE3
 14393                           fsr1h	equ	0xFE2
 14394                           fsr1l	equ	0xFE1
 14395                           indf2	equ	0xFDF
 14396                           postinc2	equ	0xFDE
 14397                           postdec2	equ	0xFDD
 14398                           fsr2h	equ	0xFDA
 14399                           fsr2l	equ	0xFD9
 14400                           status	equ	0xFD8
 14401                           
 14402 ;; *************** function _ValidateDataRange *****************
 14403 ;; Defined at:
 14404 ;;		line 1110 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14405 ;; Parameters:    Size  Location     Type
 14406 ;;  dataRangeNew    1    wreg     unsigned char 
 14407 ;; Auto vars:     Size  Location     Type
 14408 ;;  dataRangeNew    1    7[BANK0 ] unsigned char 
 14409 ;;  dataRateMin     1    9[BANK0 ] unsigned char 
 14410 ;;  dataRateMax     1    8[BANK0 ] unsigned char 
 14411 ;;  result          1    6[BANK0 ] enum E18963
 14412 ;; Return value:  Size  Location     Type
 14413 ;;                  1    wreg      enum E18963
 14414 ;; Registers used:
 14415 ;;		wreg, status,2, status,0, cstack
 14416 ;; Tracked objects:
 14417 ;;		On entry : F/0
 14418 ;;		On exit  : F/0
 14419 ;;		Unchanged: 0/0
 14420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14422 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14424 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14425 ;;Total ram usage:        4 bytes
 14426 ;; Hardware stack levels used:    1
 14427 ;; Hardware stack levels required when called:    8
 14428 ;; This function calls:
 14429 ;;		_ValidateDataRate
 14430 ;; This function is called by:
 14431 ;;		_ExecuteNewChannel
 14432 ;; This function uses a non-reentrant model
 14433 ;;
 14434                           
 14435                           	psect	text72
 14436  006F90                     __ptext72:
 14437                           	opt stack 0
 14438  006F90                     _ValidateDataRange:
 14439                           	opt stack 16
 14440                           
 14441                           ; BSR set to: 0
 14442                           ;incstack = 0
 14443                           ;ValidateDataRange@dataRangeNew stored from wreg
 14444  006F90  6F67               	movwf	ValidateDataRange@dataRangeNew& (0+255),b
 14445                           
 14446                           ;lorawan_eu.c: 1112: LorawanError_t result = OK;
 14447  006F92  0100               	movlb	0	; () banked
 14448  006F94  6B66               	clrf	ValidateDataRange@result& (0+255),b
 14449                           
 14450                           ; BSR set to: 0
 14451                           ;lorawan_eu.c: 1113: uint8_t dataRateMax, dataRateMin;
 14452                           ;lorawan_eu.c: 1115: dataRateMin = dataRangeNew & 0x0F;
 14453  006F96  5167               	movf	ValidateDataRange@dataRangeNew& (0+255),w,b
 14454  006F98  0B0F               	andlw	15
 14455  006F9A  6F69               	movwf	ValidateDataRange@dataRateMin& (0+255),b
 14456                           
 14457                           ;lorawan_eu.c: 1116: dataRateMax = (dataRangeNew & 0xF0) >> (4);
 14458  006F9C  3967               	swapf	ValidateDataRange@dataRangeNew& (0+255),w,b
 14459  006F9E  0B0F               	andlw	15
 14460  006FA0  6F68               	movwf	ValidateDataRange@dataRateMax& (0+255),b
 14461                           
 14462                           ; BSR set to: 0
 14463                           ;lorawan_eu.c: 1118: if ( (ValidateDataRate (dataRateMax) != OK) || (ValidateDataRate (d
      +                          ataRateMin) != OK ) || (dataRateMax < dataRateMin) )
 14464  006FA2  5168               	movf	ValidateDataRange@dataRateMax& (0+255),w,b
 14465  006FA4  EC1F  F03B         	call	_ValidateDataRate
 14466  006FA8  0900               	iorlw	0
 14467  006FAA  E108               	bnz	l12578
 14468                           
 14469                           ; BSR set to: 0
 14470  006FAC  5169               	movf	ValidateDataRange@dataRateMin& (0+255),w,b
 14471  006FAE  EC1F  F03B         	call	_ValidateDataRate
 14472  006FB2  0900               	iorlw	0
 14473  006FB4  E103               	bnz	l12578
 14474                           
 14475                           ; BSR set to: 0
 14476  006FB6  5169               	movf	ValidateDataRange@dataRateMin& (0+255),w,b
 14477  006FB8  5D68               	subwf	ValidateDataRange@dataRateMax& (0+255),w,b
 14478  006FBA  E202               	bc	l1255
 14479  006FBC                     l12578:
 14480                           
 14481                           ; BSR set to: 0
 14482                           ;lorawan_eu.c: 1119: {
 14483                           ;lorawan_eu.c: 1120: result = INVALID_PARAMETER;
 14484  006FBC  0E03               	movlw	3
 14485  006FBE  6F66               	movwf	ValidateDataRange@result& (0+255),b
 14486  006FC0                     l1255:
 14487                           
 14488                           ; BSR set to: 0
 14489                           ;lorawan_eu.c: 1121: }
 14490                           ;lorawan_eu.c: 1122: return result;
 14491  006FC0  5166               	movf	ValidateDataRange@result& (0+255),w,b
 14492                           
 14493                           ; BSR set to: 0
 14494  006FC2  0012               	return		;funcret
 14495  006FC4                     __end_of_ValidateDataRange:
 14496                           	opt stack 0
 14497                           tosu	equ	0xFFF
 14498                           tosh	equ	0xFFE
 14499                           tosl	equ	0xFFD
 14500                           pclath	equ	0xFFA
 14501                           tblptru	equ	0xFF8
 14502                           tblptrh	equ	0xFF7
 14503                           tblptrl	equ	0xFF6
 14504                           tablat	equ	0xFF5
 14505                           prodh	equ	0xFF4
 14506                           prodl	equ	0xFF3
 14507                           intcon	equ	0xFF2
 14508                           intcon2	equ	0xFF1
 14509                           intcon3	equ	0xFF0
 14510                           indf0	equ	0xFEF
 14511                           postinc0	equ	0xFEE
 14512                           fsr0h	equ	0xFEA
 14513                           fsr0l	equ	0xFE9
 14514                           wreg	equ	0xFE8
 14515                           postinc1	equ	0xFE6
 14516                           postdec1	equ	0xFE5
 14517                           plusw1	equ	0xFE3
 14518                           fsr1h	equ	0xFE2
 14519                           fsr1l	equ	0xFE1
 14520                           indf2	equ	0xFDF
 14521                           postinc2	equ	0xFDE
 14522                           postdec2	equ	0xFDD
 14523                           fsr2h	equ	0xFDA
 14524                           fsr2l	equ	0xFD9
 14525                           status	equ	0xFD8
 14526                           
 14527 ;; *************** function _UpdateFrequency *****************
 14528 ;; Defined at:
 14529 ;;		line 1154 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14530 ;; Parameters:    Size  Location     Type
 14531 ;;  channelId       1    wreg     unsigned char 
 14532 ;;  frequencyNew    4    4[BANK0 ] unsigned long 
 14533 ;; Auto vars:     Size  Location     Type
 14534 ;;  channelId       1    8[BANK0 ] unsigned char 
 14535 ;; Return value:  Size  Location     Type
 14536 ;;                  1    wreg      void 
 14537 ;; Registers used:
 14538 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14539 ;; Tracked objects:
 14540 ;;		On entry : F/0
 14541 ;;		On exit  : F/0
 14542 ;;		Unchanged: 0/0
 14543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14544 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14547 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14548 ;;Total ram usage:        5 bytes
 14549 ;; Hardware stack levels used:    1
 14550 ;; Hardware stack levels required when called:    7
 14551 ;; This function calls:
 14552 ;;		Nothing
 14553 ;; This function is called by:
 14554 ;;		_ExecuteNewChannel
 14555 ;; This function uses a non-reentrant model
 14556 ;;
 14557                           
 14558                           	psect	text73
 14559  006E78                     __ptext73:
 14560                           	opt stack 0
 14561  006E78                     _UpdateFrequency:
 14562                           	opt stack 17
 14563                           
 14564                           ; BSR set to: 0
 14565                           ;incstack = 0
 14566                           ;UpdateFrequency@channelId stored from wreg
 14567  006E78  6F68               	movwf	UpdateFrequency@channelId& (0+255),b
 14568                           
 14569                           ;lorawan_eu.c: 1156: Channels[channelId].frequency = frequencyNew;
 14570  006E7A  0100               	movlb	0	; () banked
 14571  006E7C  5168               	movf	UpdateFrequency@channelId& (0+255),w,b
 14572  006E7E  0D0E               	mullw	14
 14573  006E80  0E00               	movlw	low _Channels
 14574  006E82  24F3               	addwf	prodl,w,c
 14575  006E84  6ED9               	movwf	fsr2l,c
 14576  006E86  0E04               	movlw	high _Channels
 14577  006E88  20F4               	addwfc	prodh,w,c
 14578  006E8A  6EDA               	movwf	fsr2h,c
 14579  006E8C  C064  FFDE         	movff	UpdateFrequency@frequencyNew,postinc2
 14580  006E90  C065  FFDE         	movff	UpdateFrequency@frequencyNew+1,postinc2
 14581  006E94  C066  FFDE         	movff	UpdateFrequency@frequencyNew+2,postinc2
 14582  006E98  C067  FFDE         	movff	UpdateFrequency@frequencyNew+3,postinc2
 14583                           
 14584                           ;lorawan_eu.c: 1157: Channels[channelId].parametersDefined |= 0X01;
 14585  006E9C  5168               	movf	UpdateFrequency@channelId& (0+255),w,b
 14586  006E9E  0D0E               	mullw	14
 14587  006EA0  0E0D               	movlw	low (_Channels+13)
 14588  006EA2  24F3               	addwf	prodl,w,c
 14589  006EA4  6ED9               	movwf	fsr2l,c
 14590  006EA6  0E04               	movlw	high (_Channels+13)
 14591  006EA8  20F4               	addwfc	prodh,w,c
 14592  006EAA  6EDA               	movwf	fsr2h,c
 14593  006EAC  0E00               	movlw	0
 14594  006EAE  80DB               	bsf	plusw2,0,c
 14595                           
 14596                           ; BSR set to: 0
 14597  006EB0  0C00               	retlw	0	;funcret
 14598  006EB2                     __end_of_UpdateFrequency:
 14599                           	opt stack 0
 14600                           tosu	equ	0xFFF
 14601                           tosh	equ	0xFFE
 14602                           tosl	equ	0xFFD
 14603                           pclath	equ	0xFFA
 14604                           tblptru	equ	0xFF8
 14605                           tblptrh	equ	0xFF7
 14606                           tblptrl	equ	0xFF6
 14607                           tablat	equ	0xFF5
 14608                           prodh	equ	0xFF4
 14609                           prodl	equ	0xFF3
 14610                           intcon	equ	0xFF2
 14611                           intcon2	equ	0xFF1
 14612                           intcon3	equ	0xFF0
 14613                           indf0	equ	0xFEF
 14614                           postinc0	equ	0xFEE
 14615                           fsr0h	equ	0xFEA
 14616                           fsr0l	equ	0xFE9
 14617                           wreg	equ	0xFE8
 14618                           postinc1	equ	0xFE6
 14619                           postdec1	equ	0xFE5
 14620                           plusw1	equ	0xFE3
 14621                           fsr1h	equ	0xFE2
 14622                           fsr1l	equ	0xFE1
 14623                           indf2	equ	0xFDF
 14624                           postinc2	equ	0xFDE
 14625                           postdec2	equ	0xFDD
 14626                           plusw2	equ	0xFDB
 14627                           fsr2h	equ	0xFDA
 14628                           fsr2l	equ	0xFD9
 14629                           status	equ	0xFD8
 14630                           
 14631 ;; *************** function _UpdateDutyCycle *****************
 14632 ;; Defined at:
 14633 ;;		line 1160 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14634 ;; Parameters:    Size  Location     Type
 14635 ;;  channelId       1    wreg     unsigned char 
 14636 ;;  dutyCycleNew    2    4[BANK0 ] unsigned int 
 14637 ;; Auto vars:     Size  Location     Type
 14638 ;;  channelId       1    6[BANK0 ] unsigned char 
 14639 ;; Return value:  Size  Location     Type
 14640 ;;                  1    wreg      void 
 14641 ;; Registers used:
 14642 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14643 ;; Tracked objects:
 14644 ;;		On entry : F/0
 14645 ;;		On exit  : F/0
 14646 ;;		Unchanged: 0/0
 14647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14648 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14649 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14651 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14652 ;;Total ram usage:        3 bytes
 14653 ;; Hardware stack levels used:    1
 14654 ;; Hardware stack levels required when called:    7
 14655 ;; This function calls:
 14656 ;;		Nothing
 14657 ;; This function is called by:
 14658 ;;		_ExecuteNewChannel
 14659 ;; This function uses a non-reentrant model
 14660 ;;
 14661                           
 14662                           	psect	text74
 14663  006FF8                     __ptext74:
 14664                           	opt stack 0
 14665  006FF8                     _UpdateDutyCycle:
 14666                           	opt stack 17
 14667                           
 14668                           ; BSR set to: 0
 14669                           ;incstack = 0
 14670                           ;UpdateDutyCycle@channelId stored from wreg
 14671  006FF8  6F66               	movwf	UpdateDutyCycle@channelId& (0+255),b
 14672                           
 14673                           ;lorawan_eu.c: 1162: Channels[channelId].dutyCycle = dutyCycleNew;
 14674  006FFA  0100               	movlb	0	; () banked
 14675  006FFC  5166               	movf	UpdateDutyCycle@channelId& (0+255),w,b
 14676  006FFE  0D0E               	mullw	14
 14677  007000  0E06               	movlw	low (_Channels+6)
 14678  007002  24F3               	addwf	prodl,w,c
 14679  007004  6ED9               	movwf	fsr2l,c
 14680  007006  0E04               	movlw	high (_Channels+6)
 14681  007008  20F4               	addwfc	prodh,w,c
 14682  00700A  6EDA               	movwf	fsr2h,c
 14683  00700C  C064  FFDE         	movff	UpdateDutyCycle@dutyCycleNew,postinc2
 14684  007010  C065  FFDD         	movff	UpdateDutyCycle@dutyCycleNew+1,postdec2
 14685                           
 14686                           ;lorawan_eu.c: 1163: Channels[channelId].parametersDefined |= 0x04;
 14687  007014  5166               	movf	UpdateDutyCycle@channelId& (0+255),w,b
 14688  007016  0D0E               	mullw	14
 14689  007018  0E0D               	movlw	low (_Channels+13)
 14690  00701A  24F3               	addwf	prodl,w,c
 14691  00701C  6ED9               	movwf	fsr2l,c
 14692  00701E  0E04               	movlw	high (_Channels+13)
 14693  007020  20F4               	addwfc	prodh,w,c
 14694  007022  6EDA               	movwf	fsr2h,c
 14695  007024  0E00               	movlw	0
 14696  007026  84DB               	bsf	plusw2,2,c
 14697                           
 14698                           ; BSR set to: 0
 14699  007028  0C00               	retlw	0	;funcret
 14700  00702A                     __end_of_UpdateDutyCycle:
 14701                           	opt stack 0
 14702                           tosu	equ	0xFFF
 14703                           tosh	equ	0xFFE
 14704                           tosl	equ	0xFFD
 14705                           pclath	equ	0xFFA
 14706                           tblptru	equ	0xFF8
 14707                           tblptrh	equ	0xFF7
 14708                           tblptrl	equ	0xFF6
 14709                           tablat	equ	0xFF5
 14710                           prodh	equ	0xFF4
 14711                           prodl	equ	0xFF3
 14712                           intcon	equ	0xFF2
 14713                           intcon2	equ	0xFF1
 14714                           intcon3	equ	0xFF0
 14715                           indf0	equ	0xFEF
 14716                           postinc0	equ	0xFEE
 14717                           fsr0h	equ	0xFEA
 14718                           fsr0l	equ	0xFE9
 14719                           wreg	equ	0xFE8
 14720                           postinc1	equ	0xFE6
 14721                           postdec1	equ	0xFE5
 14722                           plusw1	equ	0xFE3
 14723                           fsr1h	equ	0xFE2
 14724                           fsr1l	equ	0xFE1
 14725                           indf2	equ	0xFDF
 14726                           postinc2	equ	0xFDE
 14727                           postdec2	equ	0xFDD
 14728                           plusw2	equ	0xFDB
 14729                           fsr2h	equ	0xFDA
 14730                           fsr2l	equ	0xFD9
 14731                           status	equ	0xFD8
 14732                           
 14733 ;; *************** function _UpdateDataRange *****************
 14734 ;; Defined at:
 14735 ;;		line 1009 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14736 ;; Parameters:    Size  Location     Type
 14737 ;;  channelId       1    wreg     unsigned char 
 14738 ;;  dataRangeNew    1    4[BANK0 ] unsigned char 
 14739 ;; Auto vars:     Size  Location     Type
 14740 ;;  channelId       1    6[BANK0 ] unsigned char 
 14741 ;;  i               1    7[BANK0 ] unsigned char 
 14742 ;; Return value:  Size  Location     Type
 14743 ;;                  1    wreg      void 
 14744 ;; Registers used:
 14745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14746 ;; Tracked objects:
 14747 ;;		On entry : F/0
 14748 ;;		On exit  : F/2
 14749 ;;		Unchanged: 0/0
 14750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14751 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14752 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14753 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14754 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14755 ;;Total ram usage:        4 bytes
 14756 ;; Hardware stack levels used:    1
 14757 ;; Hardware stack levels required when called:    7
 14758 ;; This function calls:
 14759 ;;		Nothing
 14760 ;; This function is called by:
 14761 ;;		_ExecuteNewChannel
 14762 ;; This function uses a non-reentrant model
 14763 ;;
 14764                           
 14765                           	psect	text75
 14766  004AB4                     __ptext75:
 14767                           	opt stack 0
 14768  004AB4                     _UpdateDataRange:
 14769                           	opt stack 17
 14770                           
 14771                           ; BSR set to: 0
 14772                           ;incstack = 0
 14773                           ;UpdateDataRange@channelId stored from wreg
 14774  004AB4  6F66               	movwf	UpdateDataRange@channelId& (0+255),b
 14775                           
 14776                           ;lorawan_eu.c: 1011: uint8_t i;
 14777                           ;lorawan_eu.c: 1014: loRa.minDataRate = 7;
 14778  004AB6  0E07               	movlw	7
 14779  004AB8  0102               	movlb	2	; () banked
 14780  004ABA  6FEB               	movwf	(_loRa+235)& (0+255),b
 14781                           
 14782                           ; BSR set to: 2
 14783                           ;lorawan_eu.c: 1015: loRa.maxDataRate = 0;
 14784  004ABC  6BEC               	clrf	(_loRa+236)& (0+255),b
 14785                           
 14786                           ; BSR set to: 2
 14787                           ;lorawan_eu.c: 1017: Channels[channelId].dataRange.value = dataRangeNew;
 14788  004ABE  0100               	movlb	0	; () banked
 14789  004AC0  5166               	movf	UpdateDataRange@channelId& (0+255),w,b
 14790  004AC2  0D0E               	mullw	14
 14791  004AC4  0E05               	movlw	low (_Channels+5)
 14792  004AC6  24F3               	addwf	prodl,w,c
 14793  004AC8  6ED9               	movwf	fsr2l,c
 14794  004ACA  0E04               	movlw	high (_Channels+5)
 14795  004ACC  20F4               	addwfc	prodh,w,c
 14796  004ACE  6EDA               	movwf	fsr2h,c
 14797  004AD0  C064  FFDF         	movff	UpdateDataRange@dataRangeNew,indf2
 14798                           
 14799                           ; BSR set to: 0
 14800                           ;lorawan_eu.c: 1018: Channels[channelId].parametersDefined |= 0X02;
 14801  004AD4  5166               	movf	UpdateDataRange@channelId& (0+255),w,b
 14802  004AD6  0D0E               	mullw	14
 14803  004AD8  0E0D               	movlw	low (_Channels+13)
 14804  004ADA  24F3               	addwf	prodl,w,c
 14805  004ADC  6ED9               	movwf	fsr2l,c
 14806  004ADE  0E04               	movlw	high (_Channels+13)
 14807  004AE0  20F4               	addwfc	prodh,w,c
 14808  004AE2  6EDA               	movwf	fsr2h,c
 14809  004AE4  0E00               	movlw	0
 14810  004AE6  82DB               	bsf	plusw2,1,c
 14811                           
 14812                           ; BSR set to: 0
 14813                           ;lorawan_eu.c: 1019: for (i=0; i < loRa.maxChannels; i++)
 14814  004AE8  6B67               	clrf	UpdateDataRange@i& (0+255),b
 14815  004AEA  D04E               	goto	l12604
 14816  004AEC                     l12592:
 14817                           
 14818                           ; BSR set to: 0
 14819                           ;lorawan_eu.c: 1020: {
 14820                           ;lorawan_eu.c: 1021: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i]
      +                          .status == 1) )
 14821  004AEC  5167               	movf	UpdateDataRange@i& (0+255),w,b
 14822  004AEE  0D0E               	mullw	14
 14823  004AF0  0E05               	movlw	low (_Channels+5)
 14824  004AF2  24F3               	addwf	prodl,w,c
 14825  004AF4  6ED9               	movwf	fsr2l,c
 14826  004AF6  0E04               	movlw	high (_Channels+5)
 14827  004AF8  20F4               	addwfc	prodh,w,c
 14828  004AFA  6EDA               	movwf	fsr2h,c
 14829  004AFC  50DF               	movf	223,w,c
 14830  004AFE  0B0F               	andlw	15
 14831  004B00  0100               	movlb	0	; () banked
 14832  004B02  6F65               	movwf	??_UpdateDataRange& (0+255),b
 14833  004B04  0102               	movlb	2	; () banked
 14834  004B06  51EB               	movf	(_loRa+235)& (0+255),w,b
 14835  004B08  0100               	movlb	0	; () banked
 14836  004B0A  5D65               	subwf	??_UpdateDataRange& (0+255),w,b
 14837  004B0C  E216               	bc	l1221
 14838                           
 14839                           ; BSR set to: 0
 14840  004B0E  5167               	movf	UpdateDataRange@i& (0+255),w,b
 14841  004B10  0D0E               	mullw	14
 14842  004B12  0E04               	movlw	low (_Channels+4)
 14843  004B14  24F3               	addwf	prodl,w,c
 14844  004B16  6ED9               	movwf	fsr2l,c
 14845  004B18  0E04               	movlw	high (_Channels+4)
 14846  004B1A  20F4               	addwfc	prodh,w,c
 14847  004B1C  6EDA               	movwf	fsr2h,c
 14848  004B1E  04DE               	decf	postinc2,w,c
 14849  004B20  E10C               	bnz	l1221
 14850                           
 14851                           ; BSR set to: 0
 14852                           ;lorawan_eu.c: 1022: {
 14853                           ;lorawan_eu.c: 1023: loRa.minDataRate = Channels[i].dataRange.min;
 14854  004B22  5167               	movf	UpdateDataRange@i& (0+255),w,b
 14855  004B24  0D0E               	mullw	14
 14856  004B26  0E05               	movlw	low (_Channels+5)
 14857  004B28  24F3               	addwf	prodl,w,c
 14858  004B2A  6ED9               	movwf	fsr2l,c
 14859  004B2C  0E04               	movlw	high (_Channels+5)
 14860  004B2E  20F4               	addwfc	prodh,w,c
 14861  004B30  6EDA               	movwf	fsr2h,c
 14862  004B32  50DF               	movf	223,w,c
 14863  004B34  0B0F               	andlw	15
 14864  004B36  0102               	movlb	2	; () banked
 14865  004B38  6FEB               	movwf	(_loRa+235)& (0+255),b
 14866  004B3A                     l1221:
 14867                           
 14868                           ;lorawan_eu.c: 1024: }
 14869                           ;lorawan_eu.c: 1025: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i]
      +                          .status == 1) )
 14870  004B3A  0100               	movlb	0	; () banked
 14871  004B3C  5167               	movf	UpdateDataRange@i& (0+255),w,b
 14872  004B3E  0D0E               	mullw	14
 14873  004B40  0E05               	movlw	low (_Channels+5)
 14874  004B42  24F3               	addwf	prodl,w,c
 14875  004B44  6ED9               	movwf	fsr2l,c
 14876  004B46  0E04               	movlw	high (_Channels+5)
 14877  004B48  20F4               	addwfc	prodh,w,c
 14878  004B4A  6EDA               	movwf	fsr2h,c
 14879  004B4C  38DF               	swapf	223,w,c
 14880  004B4E  0B0F               	andlw	15
 14881  004B50  0102               	movlb	2	; () banked
 14882  004B52  61EC               	cpfslt	(_loRa+236)& (0+255),b
 14883  004B54  D017               	goto	l12602
 14884                           
 14885                           ; BSR set to: 2
 14886  004B56  0100               	movlb	0	; () banked
 14887  004B58  5167               	movf	UpdateDataRange@i& (0+255),w,b
 14888  004B5A  0D0E               	mullw	14
 14889  004B5C  0E04               	movlw	low (_Channels+4)
 14890  004B5E  24F3               	addwf	prodl,w,c
 14891  004B60  6ED9               	movwf	fsr2l,c
 14892  004B62  0E04               	movlw	high (_Channels+4)
 14893  004B64  20F4               	addwfc	prodh,w,c
 14894  004B66  6EDA               	movwf	fsr2h,c
 14895  004B68  04DE               	decf	postinc2,w,c
 14896  004B6A  E10C               	bnz	l12602
 14897                           
 14898                           ; BSR set to: 0
 14899                           ;lorawan_eu.c: 1026: {
 14900                           ;lorawan_eu.c: 1027: loRa.maxDataRate = Channels[i].dataRange.max;
 14901  004B6C  5167               	movf	UpdateDataRange@i& (0+255),w,b
 14902  004B6E  0D0E               	mullw	14
 14903  004B70  0E05               	movlw	low (_Channels+5)
 14904  004B72  24F3               	addwf	prodl,w,c
 14905  004B74  6ED9               	movwf	fsr2l,c
 14906  004B76  0E04               	movlw	high (_Channels+5)
 14907  004B78  20F4               	addwfc	prodh,w,c
 14908  004B7A  6EDA               	movwf	fsr2h,c
 14909  004B7C  38DF               	swapf	223,w,c
 14910  004B7E  0B0F               	andlw	15
 14911  004B80  0102               	movlb	2	; () banked
 14912  004B82  6FEC               	movwf	(_loRa+236)& (0+255),b
 14913  004B84                     l12602:
 14914  004B84  0100               	movlb	0	; () banked
 14915  004B86  2B67               	incf	UpdateDataRange@i& (0+255),f,b
 14916  004B88                     l12604:
 14917                           
 14918                           ; BSR set to: 0
 14919  004B88  0102               	movlb	2	; () banked
 14920  004B8A  51ED               	movf	(_loRa+237)& (0+255),w,b
 14921  004B8C  0100               	movlb	0	; () banked
 14922  004B8E  5D67               	subwf	UpdateDataRange@i& (0+255),w,b
 14923  004B90  E3AD               	bnc	l12592
 14924                           
 14925                           ; BSR set to: 0
 14926                           ;lorawan_eu.c: 1028: }
 14927                           ;lorawan_eu.c: 1029: }
 14928                           ;lorawan_eu.c: 1031: if (loRa.currentDataRate > loRa.maxDataRate)
 14929  004B92  0102               	movlb	2	; () banked
 14930  004B94  51DF               	movf	(_loRa+223)& (0+255),w,b
 14931  004B96  5DEC               	subwf	(_loRa+236)& (0+255),w,b
 14932  004B98  E202               	bc	l12610
 14933                           
 14934                           ; BSR set to: 2
 14935                           ;lorawan_eu.c: 1032: {
 14936                           ;lorawan_eu.c: 1033: loRa.currentDataRate = loRa.maxDataRate;
 14937  004B9A  C2EC  F2DF         	movff	_loRa+236,_loRa+223
 14938  004B9E                     l12610:
 14939                           
 14940                           ; BSR set to: 2
 14941                           ;lorawan_eu.c: 1034: }
 14942                           ;lorawan_eu.c: 1036: if (loRa.currentDataRate < loRa.minDataRate)
 14943  004B9E  51EB               	movf	(_loRa+235)& (0+255),w,b
 14944  004BA0  5DDF               	subwf	(_loRa+223)& (0+255),w,b
 14945  004BA2  A0D8               	btfss	status,0,c
 14946                           
 14947                           ; BSR set to: 2
 14948                           ;lorawan_eu.c: 1037: {
 14949                           ;lorawan_eu.c: 1038: loRa.currentDataRate = loRa.minDataRate;
 14950  004BA4  C2EB  F2DF         	movff	_loRa+235,_loRa+223
 14951                           
 14952                           ; BSR set to: 2
 14953  004BA8  0012               	return		;funcret
 14954  004BAA                     __end_of_UpdateDataRange:
 14955                           	opt stack 0
 14956                           tosu	equ	0xFFF
 14957                           tosh	equ	0xFFE
 14958                           tosl	equ	0xFFD
 14959                           pclath	equ	0xFFA
 14960                           tblptru	equ	0xFF8
 14961                           tblptrh	equ	0xFF7
 14962                           tblptrl	equ	0xFF6
 14963                           tablat	equ	0xFF5
 14964                           prodh	equ	0xFF4
 14965                           prodl	equ	0xFF3
 14966                           intcon	equ	0xFF2
 14967                           intcon2	equ	0xFF1
 14968                           intcon3	equ	0xFF0
 14969                           indf0	equ	0xFEF
 14970                           postinc0	equ	0xFEE
 14971                           fsr0h	equ	0xFEA
 14972                           fsr0l	equ	0xFE9
 14973                           wreg	equ	0xFE8
 14974                           postinc1	equ	0xFE6
 14975                           postdec1	equ	0xFE5
 14976                           plusw1	equ	0xFE3
 14977                           fsr1h	equ	0xFE2
 14978                           fsr1l	equ	0xFE1
 14979                           indf2	equ	0xFDF
 14980                           postinc2	equ	0xFDE
 14981                           postdec2	equ	0xFDD
 14982                           plusw2	equ	0xFDB
 14983                           fsr2h	equ	0xFDA
 14984                           fsr2l	equ	0xFD9
 14985                           status	equ	0xFD8
 14986                           
 14987 ;; *************** function _LORAWAN_SetChannelIdStatus *****************
 14988 ;; Defined at:
 14989 ;;		line 282 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14990 ;; Parameters:    Size  Location     Type
 14991 ;;  channelId       1    wreg     unsigned char 
 14992 ;;  statusNew       1    8[BANK0 ] unsigned char 
 14993 ;; Auto vars:     Size  Location     Type
 14994 ;;  channelId       1   10[BANK0 ] unsigned char 
 14995 ;;  result          1    0        enum E18963
 14996 ;; Return value:  Size  Location     Type
 14997 ;;                  1    wreg      enum E18963
 14998 ;; Registers used:
 14999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15000 ;; Tracked objects:
 15001 ;;		On entry : F/0
 15002 ;;		On exit  : D/0
 15003 ;;		Unchanged: 0/0
 15004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15005 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15006 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15008 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15009 ;;Total ram usage:        3 bytes
 15010 ;; Hardware stack levels used:    1
 15011 ;; Hardware stack levels required when called:    8
 15012 ;; This function calls:
 15013 ;;		_UpdateChannelIdStatus
 15014 ;;		_ValidateChannelId
 15015 ;; This function is called by:
 15016 ;;		_ExecuteNewChannel
 15017 ;;		_UpdateCfList
 15018 ;; This function uses a non-reentrant model
 15019 ;;
 15020                           
 15021                           	psect	text76
 15022  006EEA                     __ptext76:
 15023                           	opt stack 0
 15024  006EEA                     _LORAWAN_SetChannelIdStatus:
 15025                           	opt stack 17
 15026                           
 15027                           ; BSR set to: 2
 15028                           ;incstack = 0
 15029                           ;LORAWAN_SetChannelIdStatus@channelId stored from wreg
 15030  006EEA  6F6A               	movwf	LORAWAN_SetChannelIdStatus@channelId& (0+255),b
 15031                           
 15032                           ;lorawan_eu.c: 287: if (ValidateChannelId (channelId, 1) != OK)
 15033  006EEC  0E01               	movlw	1
 15034  006EEE  0100               	movlb	0	; () banked
 15035  006EF0  6F64               	movwf	ValidateChannelId@allowedForDefaultChannels& (0+255),b
 15036  006EF2  516A               	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 15037  006EF4  ECF9  F039         	call	_ValidateChannelId
 15038  006EF8  0900               	iorlw	0
 15039  006EFA  E001               	bz	l12620
 15040                           
 15041                           ; BSR set to: 0
 15042                           ;lorawan_eu.c: 290: }
 15043  006EFC  0012               	return	
 15044  006EFE                     l12620:
 15045                           
 15046                           ; BSR set to: 0
 15047                           ;lorawan_eu.c: 292: else
 15048                           ;lorawan_eu.c: 293: {
 15049                           ;lorawan_eu.c: 294: if ( (Channels[channelId].parametersDefined & (0X01 | 0X02 | 0x04) )
      +                           == (0X01 | 0X02 | 0x04) )
 15050  006EFE  516A               	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 15051  006F00  0D0E               	mullw	14
 15052  006F02  0E0D               	movlw	low (_Channels+13)
 15053  006F04  24F3               	addwf	prodl,w,c
 15054  006F06  6ED9               	movwf	fsr2l,c
 15055  006F08  0E04               	movlw	high (_Channels+13)
 15056  006F0A  20F4               	addwfc	prodh,w,c
 15057  006F0C  6EDA               	movwf	fsr2h,c
 15058  006F0E  50DF               	movf	indf2,w,c
 15059  006F10  0B07               	andlw	7
 15060  006F12  0A07               	xorlw	7
 15061  006F14  A4D8               	btfss	status,2,c
 15062  006F16  0012               	return	
 15063                           
 15064                           ; BSR set to: 0
 15065                           ;lorawan_eu.c: 295: {
 15066                           ;lorawan_eu.c: 296: UpdateChannelIdStatus (channelId, statusNew);
 15067  006F18  C068  F064         	movff	LORAWAN_SetChannelIdStatus@statusNew,UpdateChannelIdStatus@statusNew
 15068  006F1C  516A               	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 15069  006F1E  EFD8  F023         	goto	_UpdateChannelIdStatus
 15070  006F22                     __end_of_LORAWAN_SetChannelIdStatus:
 15071                           	opt stack 0
 15072                           tosu	equ	0xFFF
 15073                           tosh	equ	0xFFE
 15074                           tosl	equ	0xFFD
 15075                           pclath	equ	0xFFA
 15076                           tblptru	equ	0xFF8
 15077                           tblptrh	equ	0xFF7
 15078                           tblptrl	equ	0xFF6
 15079                           tablat	equ	0xFF5
 15080                           prodh	equ	0xFF4
 15081                           prodl	equ	0xFF3
 15082                           intcon	equ	0xFF2
 15083                           intcon2	equ	0xFF1
 15084                           intcon3	equ	0xFF0
 15085                           indf0	equ	0xFEF
 15086                           postinc0	equ	0xFEE
 15087                           fsr0h	equ	0xFEA
 15088                           fsr0l	equ	0xFE9
 15089                           wreg	equ	0xFE8
 15090                           postinc1	equ	0xFE6
 15091                           postdec1	equ	0xFE5
 15092                           plusw1	equ	0xFE3
 15093                           fsr1h	equ	0xFE2
 15094                           fsr1l	equ	0xFE1
 15095                           indf2	equ	0xFDF
 15096                           postinc2	equ	0xFDE
 15097                           postdec2	equ	0xFDD
 15098                           plusw2	equ	0xFDB
 15099                           fsr2h	equ	0xFDA
 15100                           fsr2l	equ	0xFD9
 15101                           status	equ	0xFD8
 15102                           
 15103 ;; *************** function _ValidateChannelId *****************
 15104 ;; Defined at:
 15105 ;;		line 1125 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15106 ;; Parameters:    Size  Location     Type
 15107 ;;  channelId       1    wreg     unsigned char 
 15108 ;;  allowedForDe    1    4[BANK0 ] unsigned char 
 15109 ;; Auto vars:     Size  Location     Type
 15110 ;;  channelId       1    6[BANK0 ] unsigned char 
 15111 ;;  result          1    5[BANK0 ] enum E18963
 15112 ;; Return value:  Size  Location     Type
 15113 ;;                  1    wreg      enum E18963
 15114 ;; Registers used:
 15115 ;;		wreg, status,2, status,0
 15116 ;; Tracked objects:
 15117 ;;		On entry : F/0
 15118 ;;		On exit  : F/0
 15119 ;;		Unchanged: 0/0
 15120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15121 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15122 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15124 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15125 ;;Total ram usage:        3 bytes
 15126 ;; Hardware stack levels used:    1
 15127 ;; Hardware stack levels required when called:    7
 15128 ;; This function calls:
 15129 ;;		Nothing
 15130 ;; This function is called by:
 15131 ;;		_LORAWAN_SetChannelIdStatus
 15132 ;;		_ExecuteNewChannel
 15133 ;; This function uses a non-reentrant model
 15134 ;;
 15135                           
 15136                           	psect	text77
 15137  0073F2                     __ptext77:
 15138                           	opt stack 0
 15139  0073F2                     _ValidateChannelId:
 15140                           	opt stack 17
 15141                           
 15142                           ;incstack = 0
 15143                           ;ValidateChannelId@channelId stored from wreg
 15144  0073F2  6F66               	movwf	ValidateChannelId@channelId& (0+255),b
 15145                           
 15146                           ;lorawan_eu.c: 1127: LorawanError_t result = OK;
 15147  0073F4  0100               	movlb	0	; () banked
 15148  0073F6  6B65               	clrf	ValidateChannelId@result& (0+255),b
 15149                           
 15150                           ; BSR set to: 0
 15151                           ;lorawan_eu.c: 1129: if ( (channelId >= 16) || ( (allowedForDefaultChannels == 0) && (ch
      +                          annelId < 3) ) )
 15152  0073F8  0E10               	movlw	16
 15153  0073FA  6166               	cpfslt	ValidateChannelId@channelId& (0+255),b
 15154  0073FC  D005               	goto	l12358
 15155                           
 15156                           ; BSR set to: 0
 15157  0073FE  5164               	movf	ValidateChannelId@allowedForDefaultChannels& (0+255),w,b
 15158  007400  E105               	bnz	l1261
 15159                           
 15160                           ; BSR set to: 0
 15161  007402  0E03               	movlw	3
 15162  007404  6166               	cpfslt	ValidateChannelId@channelId& (0+255),b
 15163  007406  D002               	goto	l1261
 15164  007408                     l12358:
 15165                           
 15166                           ; BSR set to: 0
 15167                           ;lorawan_eu.c: 1130: {
 15168                           ;lorawan_eu.c: 1131: result = INVALID_PARAMETER ;
 15169  007408  0E03               	movlw	3
 15170  00740A  6F65               	movwf	ValidateChannelId@result& (0+255),b
 15171  00740C                     l1261:
 15172                           
 15173                           ; BSR set to: 0
 15174                           ;lorawan_eu.c: 1132: }
 15175                           ;lorawan_eu.c: 1134: return result;
 15176  00740C  5165               	movf	ValidateChannelId@result& (0+255),w,b
 15177                           
 15178                           ; BSR set to: 0
 15179  00740E  0012               	return		;funcret
 15180  007410                     __end_of_ValidateChannelId:
 15181                           	opt stack 0
 15182                           tosu	equ	0xFFF
 15183                           tosh	equ	0xFFE
 15184                           tosl	equ	0xFFD
 15185                           pclath	equ	0xFFA
 15186                           tblptru	equ	0xFF8
 15187                           tblptrh	equ	0xFF7
 15188                           tblptrl	equ	0xFF6
 15189                           tablat	equ	0xFF5
 15190                           prodh	equ	0xFF4
 15191                           prodl	equ	0xFF3
 15192                           intcon	equ	0xFF2
 15193                           intcon2	equ	0xFF1
 15194                           intcon3	equ	0xFF0
 15195                           indf0	equ	0xFEF
 15196                           postinc0	equ	0xFEE
 15197                           fsr0h	equ	0xFEA
 15198                           fsr0l	equ	0xFE9
 15199                           wreg	equ	0xFE8
 15200                           postinc1	equ	0xFE6
 15201                           postdec1	equ	0xFE5
 15202                           plusw1	equ	0xFE3
 15203                           fsr1h	equ	0xFE2
 15204                           fsr1l	equ	0xFE1
 15205                           indf2	equ	0xFDF
 15206                           postinc2	equ	0xFDE
 15207                           postdec2	equ	0xFDD
 15208                           plusw2	equ	0xFDB
 15209                           fsr2h	equ	0xFDA
 15210                           fsr2l	equ	0xFD9
 15211                           status	equ	0xFD8
 15212                           
 15213 ;; *************** function _ExecuteLinkCheck *****************
 15214 ;; Defined at:
 15215 ;;		line 1652 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 15216 ;; Parameters:    Size  Location     Type
 15217 ;;  ptr             2    4[BANK0 ] PTR unsigned char 
 15218 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 15219 ;; Auto vars:     Size  Location     Type
 15220 ;;		None
 15221 ;; Return value:  Size  Location     Type
 15222 ;;                  2    4[BANK0 ] PTR unsigned char 
 15223 ;; Registers used:
 15224 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15225 ;; Tracked objects:
 15226 ;;		On entry : F/0
 15227 ;;		On exit  : F/0
 15228 ;;		Unchanged: 0/0
 15229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15230 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15233 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15234 ;;Total ram usage:        2 bytes
 15235 ;; Hardware stack levels used:    1
 15236 ;; Hardware stack levels required when called:    7
 15237 ;; This function calls:
 15238 ;;		Nothing
 15239 ;; This function is called by:
 15240 ;;		_MacExecuteCommands
 15241 ;; This function uses a non-reentrant model
 15242 ;;
 15243                           
 15244                           	psect	text78
 15245  00702A                     __ptext78:
 15246                           	opt stack 0
 15247  00702A                     _ExecuteLinkCheck:
 15248                           	opt stack 18
 15249                           
 15250                           ; BSR set to: 0
 15251                           ;lorawan.c: 1654: loRa.linkCheckMargin = *(ptr++);
 15252                           
 15253                           ; BSR set to: 0
 15254                           ;incstack = 0
 15255  00702A  C064  FFD9         	movff	ExecuteLinkCheck@ptr,fsr2l
 15256  00702E  C065  FFDA         	movff	ExecuteLinkCheck@ptr+1,fsr2h
 15257  007032  50DF               	movf	indf2,w,c
 15258  007034  0102               	movlb	2	; () banked
 15259  007036  6FDD               	movwf	(_loRa+221)& (0+255),b
 15260                           
 15261                           ; BSR set to: 2
 15262  007038  0100               	movlb	0	; () banked
 15263  00703A  4B64               	infsnz	ExecuteLinkCheck@ptr& (0+255),f,b
 15264  00703C  2B65               	incf	(ExecuteLinkCheck@ptr+1)& (0+255),f,b
 15265                           
 15266                           ; BSR set to: 0
 15267                           ;lorawan.c: 1655: loRa.linkCheckGwCnt = *(ptr++);
 15268  00703E  C064  FFD9         	movff	ExecuteLinkCheck@ptr,fsr2l
 15269  007042  C065  FFDA         	movff	ExecuteLinkCheck@ptr+1,fsr2h
 15270  007046  50DF               	movf	indf2,w,c
 15271  007048  0102               	movlb	2	; () banked
 15272  00704A  6FDE               	movwf	(_loRa+222)& (0+255),b
 15273  00704C  0100               	movlb	0	; () banked
 15274  00704E  4B64               	infsnz	ExecuteLinkCheck@ptr& (0+255),f,b
 15275  007050  2B65               	incf	(ExecuteLinkCheck@ptr+1)& (0+255),f,b
 15276                           
 15277                           ; BSR set to: 0
 15278                           ;lorawan.c: 1656: return ptr;
 15279  007052  C064  F064         	movff	ExecuteLinkCheck@ptr,?_ExecuteLinkCheck
 15280  007056  C065  F065         	movff	ExecuteLinkCheck@ptr+1,?_ExecuteLinkCheck+1
 15281                           
 15282                           ; BSR set to: 0
 15283  00705A  0012               	return		;funcret
 15284  00705C                     __end_of_ExecuteLinkCheck:
 15285                           	opt stack 0
 15286                           tosu	equ	0xFFF
 15287                           tosh	equ	0xFFE
 15288                           tosl	equ	0xFFD
 15289                           pclath	equ	0xFFA
 15290                           tblptru	equ	0xFF8
 15291                           tblptrh	equ	0xFF7
 15292                           tblptrl	equ	0xFF6
 15293                           tablat	equ	0xFF5
 15294                           prodh	equ	0xFF4
 15295                           prodl	equ	0xFF3
 15296                           intcon	equ	0xFF2
 15297                           intcon2	equ	0xFF1
 15298                           intcon3	equ	0xFF0
 15299                           indf0	equ	0xFEF
 15300                           postinc0	equ	0xFEE
 15301                           fsr0h	equ	0xFEA
 15302                           fsr0l	equ	0xFE9
 15303                           wreg	equ	0xFE8
 15304                           postinc1	equ	0xFE6
 15305                           postdec1	equ	0xFE5
 15306                           plusw1	equ	0xFE3
 15307                           fsr1h	equ	0xFE2
 15308                           fsr1l	equ	0xFE1
 15309                           indf2	equ	0xFDF
 15310                           postinc2	equ	0xFDE
 15311                           postdec2	equ	0xFDD
 15312                           plusw2	equ	0xFDB
 15313                           fsr2h	equ	0xFDA
 15314                           fsr2l	equ	0xFD9
 15315                           status	equ	0xFD8
 15316                           
 15317 ;; *************** function _ExecuteLinkAdr *****************
 15318 ;; Defined at:
 15319 ;;		line 613 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15320 ;; Parameters:    Size  Location     Type
 15321 ;;  ptr             2   17[BANK0 ] PTR unsigned char 
 15322 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 15323 ;; Auto vars:     Size  Location     Type
 15324 ;;  redundancy      2   23[BANK0 ] PTR struct .
 15325 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 15326 ;;  channelMask     2   20[BANK0 ] unsigned int 
 15327 ;;  dataRate        1   25[BANK0 ] unsigned char 
 15328 ;;  txPower         1   22[BANK0 ] unsigned char 
 15329 ;; Return value:  Size  Location     Type
 15330 ;;                  2   17[BANK0 ] PTR unsigned char 
 15331 ;; Registers used:
 15332 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15333 ;; Tracked objects:
 15334 ;;		On entry : F/0
 15335 ;;		On exit  : F/2
 15336 ;;		Unchanged: 0/0
 15337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15338 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15339 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15340 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15341 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15342 ;;Total ram usage:        9 bytes
 15343 ;; Hardware stack levels used:    1
 15344 ;; Hardware stack levels required when called:   10
 15345 ;; This function calls:
 15346 ;;		_EnableChannels
 15347 ;;		_UpdateCurrentDataRate
 15348 ;;		_UpdateTxPower
 15349 ;;		_ValidateChannelMask
 15350 ;;		_ValidateChannelMaskCntl
 15351 ;;		_ValidateDataRate
 15352 ;;		_ValidateTxPower
 15353 ;; This function is called by:
 15354 ;;		_MacExecuteCommands
 15355 ;; This function uses a non-reentrant model
 15356 ;;
 15357                           
 15358                           	psect	text79
 15359  00356A                     __ptext79:
 15360                           	opt stack 0
 15361  00356A                     _ExecuteLinkAdr:
 15362                           	opt stack 15
 15363                           
 15364                           ; BSR set to: 0
 15365                           ;lorawan_eu.c: 615: uint8_t txPower, dataRate;
 15366                           ;lorawan_eu.c: 616: uint16_t channelMask;
 15367                           ;lorawan_eu.c: 618: txPower = *(ptr) & 0x0F;
 15368                           
 15369                           ; BSR set to: 0
 15370                           ;incstack = 0
 15371  00356A  C071  FFD9         	movff	ExecuteLinkAdr@ptr,fsr2l
 15372  00356E  C072  FFDA         	movff	ExecuteLinkAdr@ptr+1,fsr2h
 15373  003572  50DF               	movf	indf2,w,c
 15374  003574  0B0F               	andlw	15
 15375  003576  6F76               	movwf	ExecuteLinkAdr@txPower& (0+255),b
 15376                           
 15377                           ;lorawan_eu.c: 619: dataRate = ( *(ptr) & 0xF0 ) >> (4);
 15378  003578  C071  FFD9         	movff	ExecuteLinkAdr@ptr,fsr2l
 15379  00357C  C072  FFDA         	movff	ExecuteLinkAdr@ptr+1,fsr2h
 15380  003580  50DF               	movf	indf2,w,c
 15381  003582  6F73               	movwf	??_ExecuteLinkAdr& (0+255),b
 15382  003584  3973               	swapf	??_ExecuteLinkAdr& (0+255),w,b
 15383  003586  0B0F               	andlw	15
 15384  003588  6F79               	movwf	ExecuteLinkAdr@dataRate& (0+255),b
 15385                           
 15386                           ; BSR set to: 0
 15387                           ;lorawan_eu.c: 620: ptr++;
 15388  00358A  4B71               	infsnz	ExecuteLinkAdr@ptr& (0+255),f,b
 15389  00358C  2B72               	incf	(ExecuteLinkAdr@ptr+1)& (0+255),f,b
 15390                           
 15391                           ; BSR set to: 0
 15392                           ;lorawan_eu.c: 621: channelMask = (*((uint16_t*)ptr));
 15393  00358E  C071  FFD9         	movff	ExecuteLinkAdr@ptr,fsr2l
 15394  003592  C072  FFDA         	movff	ExecuteLinkAdr@ptr+1,fsr2h
 15395  003596  CFDE F074          	movff	postinc2,ExecuteLinkAdr@channelMask
 15396  00359A  CFDD F075          	movff	postdec2,ExecuteLinkAdr@channelMask+1
 15397                           
 15398                           ; BSR set to: 0
 15399                           ;lorawan_eu.c: 622: ptr = ptr + sizeof (channelMask);
 15400  00359E  0E02               	movlw	2
 15401  0035A0  2771               	addwf	ExecuteLinkAdr@ptr& (0+255),f,b
 15402  0035A2  0E00               	movlw	0
 15403  0035A4  2372               	addwfc	(ExecuteLinkAdr@ptr+1)& (0+255),f,b
 15404                           
 15405                           ; BSR set to: 0
 15406                           ;lorawan_eu.c: 623: Redundancy_t *redundancy;
 15407                           ;lorawan_eu.c: 624: redundancy = (Redundancy_t*)(ptr++);
 15408  0035A6  C071  F077         	movff	ExecuteLinkAdr@ptr,ExecuteLinkAdr@redundancy
 15409  0035AA  C072  F078         	movff	ExecuteLinkAdr@ptr+1,ExecuteLinkAdr@redundancy+1
 15410                           
 15411                           ; BSR set to: 0
 15412  0035AE  4B71               	infsnz	ExecuteLinkAdr@ptr& (0+255),f,b
 15413  0035B0  2B72               	incf	(ExecuteLinkAdr@ptr+1)& (0+255),f,b
 15414                           
 15415                           ; BSR set to: 0
 15416                           ;lorawan_eu.c: 626: if (1 == loRa.macStatus.adr)
 15417  0035B2  0102               	movlb	2	; () banked
 15418  0035B4  AD02               	btfss	(_loRa+2)& (0+255),6,b
 15419  0035B6  D092               	goto	l13256
 15420                           
 15421                           ; BSR set to: 2
 15422                           ;lorawan_eu.c: 627: {
 15423                           ;lorawan_eu.c: 628: if ( (ValidateChannelMaskCntl(redundancy->chMaskCntl) == OK) && (Val
      +                          idateChannelMask(channelMask) == OK) )
 15424  0035B8  C077  FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 15425  0035BC  C078  FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 15426  0035C0  0100               	movlb	0	; () banked
 15427  0035C2  38DF               	swapf	223,w,c
 15428  0035C4  0B07               	andlw	7
 15429  0035C6  ECF3  F03A         	call	_ValidateChannelMaskCntl
 15430  0035CA  0900               	iorlw	0
 15431  0035CC  E112               	bnz	l13224
 15432                           
 15433                           ; BSR set to: 0
 15434  0035CE  C074  F064         	movff	ExecuteLinkAdr@channelMask,ValidateChannelMask@channelMask
 15435  0035D2  C075  F065         	movff	ExecuteLinkAdr@channelMask+1,ValidateChannelMask@channelMask+1
 15436  0035D6  EC91  F037         	call	_ValidateChannelMask	;wreg free
 15437  0035DA  0900               	iorlw	0
 15438  0035DC  E10A               	bnz	l13224
 15439                           
 15440                           ; BSR set to: 0
 15441                           ;lorawan_eu.c: 629: {
 15442                           ;lorawan_eu.c: 630: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 1;
 15443  0035DE  0102               	movlb	2	; () banked
 15444  0035E0  51A7               	movf	(_loRa+167)& (0+255),w,b
 15445  0035E2  0D02               	mullw	2
 15446  0035E4  0EA9               	movlw	low (_loRa+169)
 15447  0035E6  24F3               	addwf	prodl,w,c
 15448  0035E8  6ED9               	movwf	fsr2l,c
 15449  0035EA  0E02               	movlw	high (_loRa+169)
 15450  0035EC  20F4               	addwfc	prodh,w,c
 15451  0035EE  6EDA               	movwf	fsr2h,c
 15452  0035F0  80DF               	bsf	indf2,0,c
 15453  0035F2                     l13224:
 15454                           
 15455                           ;lorawan_eu.c: 631: }
 15456                           ;lorawan_eu.c: 633: if ( (ValidateDataRate (dataRate) == OK) && (dataRate >= loRa.minDat
      +                          aRate) && (dataRate <= loRa.maxDataRate) )
 15457  0035F2  0100               	movlb	0	; () banked
 15458  0035F4  5179               	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 15459  0035F6  EC1F  F03B         	call	_ValidateDataRate
 15460  0035FA  0900               	iorlw	0
 15461  0035FC  E112               	bnz	l13232
 15462                           
 15463                           ; BSR set to: 0
 15464  0035FE  0102               	movlb	2	; () banked
 15465  003600  51EB               	movf	(_loRa+235)& (0+255),w,b
 15466  003602  0100               	movlb	0	; () banked
 15467  003604  5D79               	subwf	ExecuteLinkAdr@dataRate& (0+255),w,b
 15468  003606  E30D               	bnc	l13232
 15469                           
 15470                           ; BSR set to: 0
 15471  003608  5179               	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 15472  00360A  0102               	movlb	2	; () banked
 15473  00360C  5DEC               	subwf	(_loRa+236)& (0+255),w,b
 15474  00360E  E309               	bnc	l13232
 15475                           
 15476                           ; BSR set to: 2
 15477                           ;lorawan_eu.c: 634: {
 15478                           ;lorawan_eu.c: 635: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 1;
 15479  003610  51A7               	movf	(_loRa+167)& (0+255),w,b
 15480  003612  0D02               	mullw	2
 15481  003614  0EA9               	movlw	low (_loRa+169)
 15482  003616  24F3               	addwf	prodl,w,c
 15483  003618  6ED9               	movwf	fsr2l,c
 15484  00361A  0E02               	movlw	high (_loRa+169)
 15485  00361C  20F4               	addwfc	prodh,w,c
 15486  00361E  6EDA               	movwf	fsr2h,c
 15487  003620  82DF               	bsf	indf2,1,c
 15488  003622                     l13232:
 15489                           
 15490                           ;lorawan_eu.c: 636: }
 15491                           ;lorawan_eu.c: 638: if (ValidateTxPower (txPower) == OK)
 15492  003622  0100               	movlb	0	; () banked
 15493  003624  5176               	movf	ExecuteLinkAdr@txPower& (0+255),w,b
 15494  003626  EC78  F039         	call	_ValidateTxPower
 15495  00362A  0900               	iorlw	0
 15496  00362C  E10A               	bnz	l1116
 15497                           
 15498                           ; BSR set to: 0
 15499                           ;lorawan_eu.c: 639: {
 15500                           ;lorawan_eu.c: 640: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 1;
 15501  00362E  0102               	movlb	2	; () banked
 15502  003630  51A7               	movf	(_loRa+167)& (0+255),w,b
 15503  003632  0D02               	mullw	2
 15504  003634  0EA9               	movlw	low (_loRa+169)
 15505  003636  24F3               	addwf	prodl,w,c
 15506  003638  6ED9               	movwf	fsr2l,c
 15507  00363A  0E02               	movlw	high (_loRa+169)
 15508  00363C  20F4               	addwfc	prodh,w,c
 15509  00363E  6EDA               	movwf	fsr2h,c
 15510  003640  84DF               	bsf	indf2,2,c
 15511  003642                     l1116:
 15512                           
 15513                           ;lorawan_eu.c: 641: }
 15514                           ;lorawan_eu.c: 643: if ( (loRa.macCommands[loRa.crtMacCmdIndex].powerAck == 1) && (loRa.
      +                          macCommands[loRa.crtMacCmdIndex].dataRateAck == 1) && (loRa.macCommands[loRa.crtMacCmdIn
      +                          dex].channelMaskAck == 1) )
 15515  003642  0102               	movlb	2	; () banked
 15516  003644  51A7               	movf	(_loRa+167)& (0+255),w,b
 15517  003646  0D02               	mullw	2
 15518  003648  0EA9               	movlw	low (_loRa+169)
 15519  00364A  24F3               	addwf	prodl,w,c
 15520  00364C  6ED9               	movwf	fsr2l,c
 15521  00364E  0E02               	movlw	high (_loRa+169)
 15522  003650  20F4               	addwfc	prodh,w,c
 15523  003652  6EDA               	movwf	fsr2h,c
 15524  003654  A4DF               	btfss	indf2,2,c
 15525  003656  D05D               	goto	l13258
 15526                           
 15527                           ; BSR set to: 2
 15528  003658  51A7               	movf	(_loRa+167)& (0+255),w,b
 15529  00365A  0D02               	mullw	2
 15530  00365C  0EA9               	movlw	low (_loRa+169)
 15531  00365E  24F3               	addwf	prodl,w,c
 15532  003660  6ED9               	movwf	fsr2l,c
 15533  003662  0E02               	movlw	high (_loRa+169)
 15534  003664  20F4               	addwfc	prodh,w,c
 15535  003666  6EDA               	movwf	fsr2h,c
 15536  003668  A2DF               	btfss	indf2,1,c
 15537  00366A  D053               	goto	l13258
 15538                           
 15539                           ; BSR set to: 2
 15540  00366C  51A7               	movf	(_loRa+167)& (0+255),w,b
 15541  00366E  0D02               	mullw	2
 15542  003670  0EA9               	movlw	low (_loRa+169)
 15543  003672  24F3               	addwf	prodl,w,c
 15544  003674  6ED9               	movwf	fsr2l,c
 15545  003676  0E02               	movlw	high (_loRa+169)
 15546  003678  20F4               	addwfc	prodh,w,c
 15547  00367A  6EDA               	movwf	fsr2h,c
 15548  00367C  A0DF               	btfss	indf2,0,c
 15549  00367E  D049               	goto	l13258
 15550                           
 15551                           ; BSR set to: 2
 15552                           ;lorawan_eu.c: 644: {
 15553                           ;lorawan_eu.c: 645: EnableChannels (channelMask, redundancy->chMaskCntl);
 15554  003680  C074  F06E         	movff	ExecuteLinkAdr@channelMask,EnableChannels@channelMask
 15555  003684  C075  F06F         	movff	ExecuteLinkAdr@channelMask+1,EnableChannels@channelMask+1
 15556  003688  C077  FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 15557  00368C  C078  FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 15558  003690  0100               	movlb	0	; () banked
 15559  003692  38DF               	swapf	223,w,c
 15560  003694  0B07               	andlw	7
 15561  003696  6F70               	movwf	EnableChannels@channelMaskCntl& (0+255),b
 15562  003698  EC0A  F03B         	call	_EnableChannels	;wreg free
 15563                           
 15564                           ; BSR set to: 0
 15565                           ;lorawan_eu.c: 647: UpdateTxPower (txPower);
 15566  00369C  5176               	movf	ExecuteLinkAdr@txPower& (0+255),w,b
 15567  00369E  ECC5  F03B         	call	_UpdateTxPower
 15568                           
 15569                           ;lorawan_eu.c: 648: loRa.macStatus.txPowerModified = 1;
 15570  0036A2  0102               	movlb	2	; () banked
 15571  0036A4  8903               	bsf	(_loRa+3)& (0+255),4,b
 15572                           
 15573                           ; BSR set to: 2
 15574                           ;lorawan_eu.c: 649: UpdateCurrentDataRate (dataRate);
 15575  0036A6  0100               	movlb	0	; () banked
 15576  0036A8  5179               	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 15577  0036AA  ECC9  F03B         	call	_UpdateCurrentDataRate
 15578                           
 15579                           ;lorawan_eu.c: 651: if (redundancy->nbRep == 0)
 15580  0036AE  C077  FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 15581  0036B2  C078  FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 15582  0036B6  0100               	movlb	0	; () banked
 15583  0036B8  50DF               	movf	223,w,c
 15584  0036BA  0B0F               	andlw	15
 15585  0036BC  E103               	bnz	l13252
 15586                           
 15587                           ; BSR set to: 0
 15588                           ;lorawan_eu.c: 652: {
 15589                           ;lorawan_eu.c: 653: loRa.maxRepetitionsUnconfirmedUplink = 0;
 15590  0036BE  0102               	movlb	2	; () banked
 15591  0036C0  6BD6               	clrf	(_loRa+214)& (0+255),b
 15592                           
 15593                           ;lorawan_eu.c: 654: }
 15594  0036C2  D00A               	goto	l13254
 15595  0036C4                     l13252:
 15596                           
 15597                           ; BSR set to: 0
 15598                           ;lorawan_eu.c: 655: else
 15599                           ;lorawan_eu.c: 656: {
 15600                           ;lorawan_eu.c: 657: loRa.maxRepetitionsUnconfirmedUplink = redundancy->nbRep - 1;
 15601  0036C4  C077  FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 15602  0036C8  C078  FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 15603  0036CC  50DF               	movf	223,w,c
 15604  0036CE  0B0F               	andlw	15
 15605  0036D0  6F73               	movwf	??_ExecuteLinkAdr& (0+255),b
 15606  0036D2  0573               	decf	??_ExecuteLinkAdr& (0+255),w,b
 15607  0036D4  0102               	movlb	2	; () banked
 15608  0036D6  6FD6               	movwf	(_loRa+214)& (0+255),b
 15609  0036D8                     l13254:
 15610                           
 15611                           ; BSR set to: 2
 15612                           ;lorawan_eu.c: 658: }
 15613                           ;lorawan_eu.c: 659: loRa.macStatus.nbRepModified = 1;
 15614  0036D8  8B03               	bsf	(_loRa+3)& (0+255),5,b
 15615  0036DA  D01B               	goto	l13258
 15616  0036DC                     l13256:
 15617                           
 15618                           ; BSR set to: 2
 15619                           ;lorawan_eu.c: 662: else
 15620                           ;lorawan_eu.c: 663: {
 15621                           ;lorawan_eu.c: 664: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 0;
 15622  0036DC  51A7               	movf	(_loRa+167)& (0+255),w,b
 15623  0036DE  0D02               	mullw	2
 15624  0036E0  0EA9               	movlw	low (_loRa+169)
 15625  0036E2  24F3               	addwf	prodl,w,c
 15626  0036E4  6ED9               	movwf	fsr2l,c
 15627  0036E6  0E02               	movlw	high (_loRa+169)
 15628  0036E8  20F4               	addwfc	prodh,w,c
 15629  0036EA  6EDA               	movwf	fsr2h,c
 15630  0036EC  90DF               	bcf	indf2,0,c
 15631                           
 15632                           ;lorawan_eu.c: 665: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 0;
 15633  0036EE  51A7               	movf	(_loRa+167)& (0+255),w,b
 15634  0036F0  0D02               	mullw	2
 15635  0036F2  0EA9               	movlw	low (_loRa+169)
 15636  0036F4  24F3               	addwf	prodl,w,c
 15637  0036F6  6ED9               	movwf	fsr2l,c
 15638  0036F8  0E02               	movlw	high (_loRa+169)
 15639  0036FA  20F4               	addwfc	prodh,w,c
 15640  0036FC  6EDA               	movwf	fsr2h,c
 15641  0036FE  92DF               	bcf	indf2,1,c
 15642                           
 15643                           ;lorawan_eu.c: 666: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 0;
 15644  003700  51A7               	movf	(_loRa+167)& (0+255),w,b
 15645  003702  0D02               	mullw	2
 15646  003704  0EA9               	movlw	low (_loRa+169)
 15647  003706  24F3               	addwf	prodl,w,c
 15648  003708  6ED9               	movwf	fsr2l,c
 15649  00370A  0E02               	movlw	high (_loRa+169)
 15650  00370C  20F4               	addwfc	prodh,w,c
 15651  00370E  6EDA               	movwf	fsr2h,c
 15652  003710  94DF               	bcf	indf2,2,c
 15653  003712                     l13258:
 15654                           
 15655                           ; BSR set to: 2
 15656                           ;lorawan_eu.c: 667: }
 15657                           ;lorawan_eu.c: 669: return ptr;
 15658  003712  C071  F071         	movff	ExecuteLinkAdr@ptr,?_ExecuteLinkAdr
 15659  003716  C072  F072         	movff	ExecuteLinkAdr@ptr+1,?_ExecuteLinkAdr+1
 15660                           
 15661                           ; BSR set to: 2
 15662  00371A  0012               	return		;funcret
 15663  00371C                     __end_of_ExecuteLinkAdr:
 15664                           	opt stack 0
 15665                           tosu	equ	0xFFF
 15666                           tosh	equ	0xFFE
 15667                           tosl	equ	0xFFD
 15668                           pclath	equ	0xFFA
 15669                           tblptru	equ	0xFF8
 15670                           tblptrh	equ	0xFF7
 15671                           tblptrl	equ	0xFF6
 15672                           tablat	equ	0xFF5
 15673                           prodh	equ	0xFF4
 15674                           prodl	equ	0xFF3
 15675                           intcon	equ	0xFF2
 15676                           intcon2	equ	0xFF1
 15677                           intcon3	equ	0xFF0
 15678                           indf0	equ	0xFEF
 15679                           postinc0	equ	0xFEE
 15680                           fsr0h	equ	0xFEA
 15681                           fsr0l	equ	0xFE9
 15682                           wreg	equ	0xFE8
 15683                           postinc1	equ	0xFE6
 15684                           postdec1	equ	0xFE5
 15685                           plusw1	equ	0xFE3
 15686                           fsr1h	equ	0xFE2
 15687                           fsr1l	equ	0xFE1
 15688                           indf2	equ	0xFDF
 15689                           postinc2	equ	0xFDE
 15690                           postdec2	equ	0xFDD
 15691                           plusw2	equ	0xFDB
 15692                           fsr2h	equ	0xFDA
 15693                           fsr2l	equ	0xFD9
 15694                           status	equ	0xFD8
 15695                           
 15696 ;; *************** function _ValidateTxPower *****************
 15697 ;; Defined at:
 15698 ;;		line 582 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15699 ;; Parameters:    Size  Location     Type
 15700 ;;  txPowerNew      1    wreg     unsigned char 
 15701 ;; Auto vars:     Size  Location     Type
 15702 ;;  txPowerNew      1    5[BANK0 ] unsigned char 
 15703 ;;  result          1    4[BANK0 ] enum E18963
 15704 ;; Return value:  Size  Location     Type
 15705 ;;                  1    wreg      enum E18963
 15706 ;; Registers used:
 15707 ;;		wreg, status,2, status,0
 15708 ;; Tracked objects:
 15709 ;;		On entry : F/0
 15710 ;;		On exit  : F/0
 15711 ;;		Unchanged: 0/0
 15712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15714 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15716 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15717 ;;Total ram usage:        2 bytes
 15718 ;; Hardware stack levels used:    1
 15719 ;; Hardware stack levels required when called:    7
 15720 ;; This function calls:
 15721 ;;		Nothing
 15722 ;; This function is called by:
 15723 ;;		_ExecuteLinkAdr
 15724 ;; This function uses a non-reentrant model
 15725 ;;
 15726                           
 15727                           	psect	text80
 15728  0072F0                     __ptext80:
 15729                           	opt stack 0
 15730  0072F0                     _ValidateTxPower:
 15731                           	opt stack 17
 15732                           
 15733                           ; BSR set to: 2
 15734                           ;incstack = 0
 15735                           ;ValidateTxPower@txPowerNew stored from wreg
 15736  0072F0  6F65               	movwf	ValidateTxPower@txPowerNew& (0+255),b
 15737                           
 15738                           ;lorawan_eu.c: 584: LorawanError_t result = OK;
 15739  0072F2  0100               	movlb	0	; () banked
 15740  0072F4  6B64               	clrf	ValidateTxPower@result& (0+255),b
 15741                           
 15742                           ; BSR set to: 0
 15743                           ;lorawan_eu.c: 586: if (((ISM_EU868 == loRa.ismBand) && (0 == txPowerNew)) || (txPowerNe
      +                          w > 5))
 15744  0072F6  0102               	movlb	2	; () banked
 15745  0072F8  51A4               	movf	(_loRa+164)& (0+255),w,b
 15746  0072FA  E103               	bnz	l12646
 15747                           
 15748                           ; BSR set to: 2
 15749  0072FC  0100               	movlb	0	; () banked
 15750  0072FE  5165               	movf	ValidateTxPower@txPowerNew& (0+255),w,b
 15751  007300  E004               	bz	l12648
 15752  007302                     l12646:
 15753  007302  0E05               	movlw	5
 15754  007304  0100               	movlb	0	; () banked
 15755  007306  6565               	cpfsgt	ValidateTxPower@txPowerNew& (0+255),b
 15756  007308  D002               	goto	l1100
 15757  00730A                     l12648:
 15758                           
 15759                           ; BSR set to: 0
 15760                           ;lorawan_eu.c: 587: {
 15761                           ;lorawan_eu.c: 588: result = INVALID_PARAMETER;
 15762  00730A  0E03               	movlw	3
 15763  00730C  6F64               	movwf	ValidateTxPower@result& (0+255),b
 15764  00730E                     l1100:
 15765                           
 15766                           ; BSR set to: 0
 15767                           ;lorawan_eu.c: 589: }
 15768                           ;lorawan_eu.c: 591: return result;
 15769  00730E  5164               	movf	ValidateTxPower@result& (0+255),w,b
 15770                           
 15771                           ; BSR set to: 0
 15772  007310  0012               	return		;funcret
 15773  007312                     __end_of_ValidateTxPower:
 15774                           	opt stack 0
 15775                           tosu	equ	0xFFF
 15776                           tosh	equ	0xFFE
 15777                           tosl	equ	0xFFD
 15778                           pclath	equ	0xFFA
 15779                           tblptru	equ	0xFF8
 15780                           tblptrh	equ	0xFF7
 15781                           tblptrl	equ	0xFF6
 15782                           tablat	equ	0xFF5
 15783                           prodh	equ	0xFF4
 15784                           prodl	equ	0xFF3
 15785                           intcon	equ	0xFF2
 15786                           intcon2	equ	0xFF1
 15787                           intcon3	equ	0xFF0
 15788                           indf0	equ	0xFEF
 15789                           postinc0	equ	0xFEE
 15790                           fsr0h	equ	0xFEA
 15791                           fsr0l	equ	0xFE9
 15792                           wreg	equ	0xFE8
 15793                           postinc1	equ	0xFE6
 15794                           postdec1	equ	0xFE5
 15795                           plusw1	equ	0xFE3
 15796                           fsr1h	equ	0xFE2
 15797                           fsr1l	equ	0xFE1
 15798                           indf2	equ	0xFDF
 15799                           postinc2	equ	0xFDE
 15800                           postdec2	equ	0xFDD
 15801                           plusw2	equ	0xFDB
 15802                           fsr2h	equ	0xFDA
 15803                           fsr2l	equ	0xFD9
 15804                           status	equ	0xFD8
 15805                           
 15806 ;; *************** function _ValidateDataRate *****************
 15807 ;; Defined at:
 15808 ;;		line 570 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15809 ;; Parameters:    Size  Location     Type
 15810 ;;  dataRate        1    wreg     unsigned char 
 15811 ;; Auto vars:     Size  Location     Type
 15812 ;;  dataRate        1    4[BANK0 ] unsigned char 
 15813 ;;  result          1    5[BANK0 ] enum E18963
 15814 ;; Return value:  Size  Location     Type
 15815 ;;                  1    wreg      enum E18963
 15816 ;; Registers used:
 15817 ;;		wreg, status,2, status,0
 15818 ;; Tracked objects:
 15819 ;;		On entry : F/0
 15820 ;;		On exit  : F/0
 15821 ;;		Unchanged: 0/0
 15822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15824 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15826 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15827 ;;Total ram usage:        2 bytes
 15828 ;; Hardware stack levels used:    1
 15829 ;; Hardware stack levels required when called:    7
 15830 ;; This function calls:
 15831 ;;		Nothing
 15832 ;; This function is called by:
 15833 ;;		_ExecuteLinkAdr
 15834 ;;		_ExecuteRxParamSetupReq
 15835 ;;		_ValidateDataRange
 15836 ;; This function uses a non-reentrant model
 15837 ;;
 15838                           
 15839                           	psect	text81
 15840  00763E                     __ptext81:
 15841                           	opt stack 0
 15842  00763E                     _ValidateDataRate:
 15843                           	opt stack 17
 15844                           
 15845                           ; BSR set to: 0
 15846                           ;incstack = 0
 15847                           ;ValidateDataRate@dataRate stored from wreg
 15848  00763E  6F64               	movwf	ValidateDataRate@dataRate& (0+255),b
 15849                           
 15850                           ;lorawan_eu.c: 572: LorawanError_t result = OK;
 15851  007640  0100               	movlb	0	; () banked
 15852  007642  6B65               	clrf	ValidateDataRate@result& (0+255),b
 15853                           
 15854                           ; BSR set to: 0
 15855                           ;lorawan_eu.c: 574: if ( dataRate > 7 )
 15856  007644  0E07               	movlw	7
 15857  007646  6564               	cpfsgt	ValidateDataRate@dataRate& (0+255),b
 15858  007648  D002               	goto	l1096
 15859                           
 15860                           ; BSR set to: 0
 15861                           ;lorawan_eu.c: 575: {
 15862                           ;lorawan_eu.c: 576: result = INVALID_PARAMETER;
 15863  00764A  0E03               	movlw	3
 15864  00764C  6F65               	movwf	ValidateDataRate@result& (0+255),b
 15865  00764E                     l1096:
 15866                           
 15867                           ; BSR set to: 0
 15868                           ;lorawan_eu.c: 577: }
 15869                           ;lorawan_eu.c: 579: return result;
 15870  00764E  5165               	movf	ValidateDataRate@result& (0+255),w,b
 15871                           
 15872                           ; BSR set to: 0
 15873  007650  0012               	return		;funcret
 15874  007652                     __end_of_ValidateDataRate:
 15875                           	opt stack 0
 15876                           tosu	equ	0xFFF
 15877                           tosh	equ	0xFFE
 15878                           tosl	equ	0xFFD
 15879                           pclath	equ	0xFFA
 15880                           tblptru	equ	0xFF8
 15881                           tblptrh	equ	0xFF7
 15882                           tblptrl	equ	0xFF6
 15883                           tablat	equ	0xFF5
 15884                           prodh	equ	0xFF4
 15885                           prodl	equ	0xFF3
 15886                           intcon	equ	0xFF2
 15887                           intcon2	equ	0xFF1
 15888                           intcon3	equ	0xFF0
 15889                           indf0	equ	0xFEF
 15890                           postinc0	equ	0xFEE
 15891                           fsr0h	equ	0xFEA
 15892                           fsr0l	equ	0xFE9
 15893                           wreg	equ	0xFE8
 15894                           postinc1	equ	0xFE6
 15895                           postdec1	equ	0xFE5
 15896                           plusw1	equ	0xFE3
 15897                           fsr1h	equ	0xFE2
 15898                           fsr1l	equ	0xFE1
 15899                           indf2	equ	0xFDF
 15900                           postinc2	equ	0xFDE
 15901                           postdec2	equ	0xFDD
 15902                           plusw2	equ	0xFDB
 15903                           fsr2h	equ	0xFDA
 15904                           fsr2l	equ	0xFD9
 15905                           status	equ	0xFD8
 15906                           
 15907 ;; *************** function _ValidateChannelMaskCntl *****************
 15908 ;; Defined at:
 15909 ;;		line 1137 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15910 ;; Parameters:    Size  Location     Type
 15911 ;;  channelMaskC    1    wreg     unsigned char 
 15912 ;; Auto vars:     Size  Location     Type
 15913 ;;  channelMaskC    1    5[BANK0 ] unsigned char 
 15914 ;;  result          1    4[BANK0 ] enum E18963
 15915 ;; Return value:  Size  Location     Type
 15916 ;;                  1    wreg      enum E18963
 15917 ;; Registers used:
 15918 ;;		wreg, status,2, status,0
 15919 ;; Tracked objects:
 15920 ;;		On entry : F/0
 15921 ;;		On exit  : F/0
 15922 ;;		Unchanged: 0/0
 15923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15925 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15927 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15928 ;;Total ram usage:        2 bytes
 15929 ;; Hardware stack levels used:    1
 15930 ;; Hardware stack levels required when called:    7
 15931 ;; This function calls:
 15932 ;;		Nothing
 15933 ;; This function is called by:
 15934 ;;		_ExecuteLinkAdr
 15935 ;; This function uses a non-reentrant model
 15936 ;;
 15937                           
 15938                           	psect	text82
 15939  0075E6                     __ptext82:
 15940                           	opt stack 0
 15941  0075E6                     _ValidateChannelMaskCntl:
 15942                           	opt stack 17
 15943                           
 15944                           ; BSR set to: 0
 15945                           ;incstack = 0
 15946                           ;ValidateChannelMaskCntl@channelMaskCntl stored from wreg
 15947  0075E6  6F65               	movwf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),b
 15948                           
 15949                           ;lorawan_eu.c: 1139: LorawanError_t result = OK;
 15950  0075E8  0100               	movlb	0	; () banked
 15951  0075EA  6B64               	clrf	ValidateChannelMaskCntl@result& (0+255),b
 15952                           
 15953                           ; BSR set to: 0
 15954                           ;lorawan_eu.c: 1141: if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
 15955  0075EC  5165               	movf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),w,b
 15956  0075EE  E005               	bz	l1267
 15957                           
 15958                           ; BSR set to: 0
 15959  0075F0  0E06               	movlw	6
 15960  0075F2  1965               	xorwf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),w,b
 15961  0075F4  E002               	bz	l1267
 15962                           
 15963                           ; BSR set to: 0
 15964                           ;lorawan_eu.c: 1142: {
 15965                           ;lorawan_eu.c: 1143: result = INVALID_PARAMETER;
 15966  0075F6  0E03               	movlw	3
 15967  0075F8  6F64               	movwf	ValidateChannelMaskCntl@result& (0+255),b
 15968  0075FA                     l1267:
 15969                           
 15970                           ; BSR set to: 0
 15971                           ;lorawan_eu.c: 1144: }
 15972                           ;lorawan_eu.c: 1146: return result;
 15973  0075FA  5164               	movf	ValidateChannelMaskCntl@result& (0+255),w,b
 15974                           
 15975                           ; BSR set to: 0
 15976  0075FC  0012               	return		;funcret
 15977  0075FE                     __end_of_ValidateChannelMaskCntl:
 15978                           	opt stack 0
 15979                           tosu	equ	0xFFF
 15980                           tosh	equ	0xFFE
 15981                           tosl	equ	0xFFD
 15982                           pclath	equ	0xFFA
 15983                           tblptru	equ	0xFF8
 15984                           tblptrh	equ	0xFF7
 15985                           tblptrl	equ	0xFF6
 15986                           tablat	equ	0xFF5
 15987                           prodh	equ	0xFF4
 15988                           prodl	equ	0xFF3
 15989                           intcon	equ	0xFF2
 15990                           intcon2	equ	0xFF1
 15991                           intcon3	equ	0xFF0
 15992                           indf0	equ	0xFEF
 15993                           postinc0	equ	0xFEE
 15994                           fsr0h	equ	0xFEA
 15995                           fsr0l	equ	0xFE9
 15996                           wreg	equ	0xFE8
 15997                           postinc1	equ	0xFE6
 15998                           postdec1	equ	0xFE5
 15999                           plusw1	equ	0xFE3
 16000                           fsr1h	equ	0xFE2
 16001                           fsr1l	equ	0xFE1
 16002                           indf2	equ	0xFDF
 16003                           postinc2	equ	0xFDE
 16004                           postdec2	equ	0xFDD
 16005                           plusw2	equ	0xFDB
 16006                           fsr2h	equ	0xFDA
 16007                           fsr2l	equ	0xFD9
 16008                           status	equ	0xFD8
 16009                           
 16010 ;; *************** function _ValidateChannelMask *****************
 16011 ;; Defined at:
 16012 ;;		line 1166 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16013 ;; Parameters:    Size  Location     Type
 16014 ;;  channelMask     2    4[BANK0 ] unsigned int 
 16015 ;; Auto vars:     Size  Location     Type
 16016 ;;  i               1    6[BANK0 ] unsigned char 
 16017 ;; Return value:  Size  Location     Type
 16018 ;;                  1    wreg      enum E18963
 16019 ;; Registers used:
 16020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16021 ;; Tracked objects:
 16022 ;;		On entry : F/0
 16023 ;;		On exit  : F/0
 16024 ;;		Unchanged: 0/0
 16025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16026 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16027 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16029 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16030 ;;Total ram usage:        3 bytes
 16031 ;; Hardware stack levels used:    1
 16032 ;; Hardware stack levels required when called:    7
 16033 ;; This function calls:
 16034 ;;		Nothing
 16035 ;; This function is called by:
 16036 ;;		_ExecuteLinkAdr
 16037 ;; This function uses a non-reentrant model
 16038 ;;
 16039                           
 16040                           	psect	text83
 16041  006F22                     __ptext83:
 16042                           	opt stack 0
 16043  006F22                     _ValidateChannelMask:
 16044                           	opt stack 17
 16045                           
 16046                           ; BSR set to: 0
 16047                           ;lorawan_eu.c: 1170: if(channelMask != 0x0000U)
 16048                           
 16049                           ; BSR set to: 0
 16050                           
 16051                           ; BSR set to: 0
 16052                           ;incstack = 0
 16053  006F22  5164               	movf	ValidateChannelMask@channelMask& (0+255),w,b
 16054  006F24  1165               	iorwf	(ValidateChannelMask@channelMask+1)& (0+255),w,b
 16055  006F26  B4D8               	btfsc	status,2,c
 16056  006F28  0C03               	retlw	3
 16057                           
 16058                           ; BSR set to: 0
 16059                           ;lorawan_eu.c: 1171: {
 16060                           ;lorawan_eu.c: 1172: for (i = 0; i < 16; i++)
 16061  006F2A  6B66               	clrf	ValidateChannelMask@i& (0+255),b
 16062  006F2C                     l1281:
 16063                           
 16064                           ; BSR set to: 0
 16065                           ;lorawan_eu.c: 1173: {
 16066                           ;lorawan_eu.c: 1174: if ( ( (channelMask & (1 << (0))) == (1 << (0))) && ( (Channels[i].
      +                          parametersDefined & (0X01 | 0X02 | 0x04) ) != (0X01 | 0X02 | 0x04) ) )
 16067  006F2C  A164               	btfss	ValidateChannelMask@channelMask& (0+255),0,b
 16068  006F2E  D00D               	goto	l12680
 16069                           
 16070                           ; BSR set to: 0
 16071  006F30  5166               	movf	ValidateChannelMask@i& (0+255),w,b
 16072  006F32  0D0E               	mullw	14
 16073  006F34  0E0D               	movlw	low (_Channels+13)
 16074  006F36  24F3               	addwf	prodl,w,c
 16075  006F38  6ED9               	movwf	fsr2l,c
 16076  006F3A  0E04               	movlw	high (_Channels+13)
 16077  006F3C  20F4               	addwfc	prodh,w,c
 16078  006F3E  6EDA               	movwf	fsr2h,c
 16079  006F40  50DF               	movf	indf2,w,c
 16080  006F42  0B07               	andlw	7
 16081  006F44  0A07               	xorlw	7
 16082  006F46  E001               	bz	l12680
 16083                           
 16084                           ; BSR set to: 0
 16085                           ;lorawan_eu.c: 1175: {
 16086                           ;lorawan_eu.c: 1176: return INVALID_PARAMETER;
 16087  006F48  0C03               	retlw	3
 16088  006F4A                     l12680:
 16089                           
 16090                           ; BSR set to: 0
 16091                           ;lorawan_eu.c: 1178: else
 16092                           ;lorawan_eu.c: 1179: {
 16093                           ;lorawan_eu.c: 1180: channelMask = channelMask >> (1);
 16094  006F4A  90D8               	bcf	status,0,c
 16095  006F4C  3365               	rrcf	(ValidateChannelMask@channelMask+1)& (0+255),f,b
 16096  006F4E  3364               	rrcf	ValidateChannelMask@channelMask& (0+255),f,b
 16097                           
 16098                           ; BSR set to: 0
 16099  006F50  2B66               	incf	ValidateChannelMask@i& (0+255),f,b
 16100                           
 16101                           ; BSR set to: 0
 16102  006F52  0E0F               	movlw	15
 16103  006F54  6566               	cpfsgt	ValidateChannelMask@i& (0+255),b
 16104  006F56  D7EA               	goto	l1281
 16105  006F58  0C00               	retlw	0
 16106  006F5A                     __end_of_ValidateChannelMask:
 16107                           	opt stack 0
 16108                           tosu	equ	0xFFF
 16109                           tosh	equ	0xFFE
 16110                           tosl	equ	0xFFD
 16111                           pclath	equ	0xFFA
 16112                           tblptru	equ	0xFF8
 16113                           tblptrh	equ	0xFF7
 16114                           tblptrl	equ	0xFF6
 16115                           tablat	equ	0xFF5
 16116                           prodh	equ	0xFF4
 16117                           prodl	equ	0xFF3
 16118                           intcon	equ	0xFF2
 16119                           intcon2	equ	0xFF1
 16120                           intcon3	equ	0xFF0
 16121                           indf0	equ	0xFEF
 16122                           postinc0	equ	0xFEE
 16123                           fsr0h	equ	0xFEA
 16124                           fsr0l	equ	0xFE9
 16125                           wreg	equ	0xFE8
 16126                           postinc1	equ	0xFE6
 16127                           postdec1	equ	0xFE5
 16128                           plusw1	equ	0xFE3
 16129                           fsr1h	equ	0xFE2
 16130                           fsr1l	equ	0xFE1
 16131                           indf2	equ	0xFDF
 16132                           postinc2	equ	0xFDE
 16133                           postdec2	equ	0xFDD
 16134                           plusw2	equ	0xFDB
 16135                           fsr2h	equ	0xFDA
 16136                           fsr2l	equ	0xFD9
 16137                           status	equ	0xFD8
 16138                           
 16139 ;; *************** function _UpdateTxPower *****************
 16140 ;; Defined at:
 16141 ;;		line 1029 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 16142 ;; Parameters:    Size  Location     Type
 16143 ;;  txPowerNew      1    wreg     unsigned char 
 16144 ;; Auto vars:     Size  Location     Type
 16145 ;;  txPowerNew      1    4[BANK0 ] unsigned char 
 16146 ;; Return value:  Size  Location     Type
 16147 ;;                  1    wreg      void 
 16148 ;; Registers used:
 16149 ;;		wreg
 16150 ;; Tracked objects:
 16151 ;;		On entry : F/0
 16152 ;;		On exit  : 0/0
 16153 ;;		Unchanged: 0/0
 16154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16156 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16158 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16159 ;;Total ram usage:        1 bytes
 16160 ;; Hardware stack levels used:    1
 16161 ;; Hardware stack levels required when called:    7
 16162 ;; This function calls:
 16163 ;;		Nothing
 16164 ;; This function is called by:
 16165 ;;		_ExecuteLinkAdr
 16166 ;; This function uses a non-reentrant model
 16167 ;;
 16168                           
 16169                           	psect	text84
 16170  00778A                     __ptext84:
 16171                           	opt stack 0
 16172  00778A                     _UpdateTxPower:
 16173                           	opt stack 17
 16174                           
 16175                           ; BSR set to: 0
 16176                           ;incstack = 0
 16177                           ;UpdateTxPower@txPowerNew stored from wreg
 16178  00778A  6F64               	movwf	UpdateTxPower@txPowerNew& (0+255),b
 16179                           
 16180                           ;lorawan.c: 1031: loRa.txPower = txPowerNew;
 16181  00778C  C064  F2E1         	movff	UpdateTxPower@txPowerNew,_loRa+225
 16182  007790  0012               	return		;funcret
 16183  007792                     __end_of_UpdateTxPower:
 16184                           	opt stack 0
 16185                           tosu	equ	0xFFF
 16186                           tosh	equ	0xFFE
 16187                           tosl	equ	0xFFD
 16188                           pclath	equ	0xFFA
 16189                           tblptru	equ	0xFF8
 16190                           tblptrh	equ	0xFF7
 16191                           tblptrl	equ	0xFF6
 16192                           tablat	equ	0xFF5
 16193                           prodh	equ	0xFF4
 16194                           prodl	equ	0xFF3
 16195                           intcon	equ	0xFF2
 16196                           intcon2	equ	0xFF1
 16197                           intcon3	equ	0xFF0
 16198                           indf0	equ	0xFEF
 16199                           postinc0	equ	0xFEE
 16200                           fsr0h	equ	0xFEA
 16201                           fsr0l	equ	0xFE9
 16202                           wreg	equ	0xFE8
 16203                           postinc1	equ	0xFE6
 16204                           postdec1	equ	0xFE5
 16205                           plusw1	equ	0xFE3
 16206                           fsr1h	equ	0xFE2
 16207                           fsr1l	equ	0xFE1
 16208                           indf2	equ	0xFDF
 16209                           postinc2	equ	0xFDE
 16210                           postdec2	equ	0xFDD
 16211                           plusw2	equ	0xFDB
 16212                           fsr2h	equ	0xFDA
 16213                           fsr2l	equ	0xFD9
 16214                           status	equ	0xFD8
 16215                           
 16216 ;; *************** function _UpdateCurrentDataRate *****************
 16217 ;; Defined at:
 16218 ;;		line 1024 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 16219 ;; Parameters:    Size  Location     Type
 16220 ;;  valueNew        1    wreg     unsigned char 
 16221 ;; Auto vars:     Size  Location     Type
 16222 ;;  valueNew        1    4[BANK0 ] unsigned char 
 16223 ;; Return value:  Size  Location     Type
 16224 ;;                  1    wreg      void 
 16225 ;; Registers used:
 16226 ;;		wreg
 16227 ;; Tracked objects:
 16228 ;;		On entry : F/0
 16229 ;;		On exit  : 0/0
 16230 ;;		Unchanged: 0/0
 16231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16233 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16235 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16236 ;;Total ram usage:        1 bytes
 16237 ;; Hardware stack levels used:    1
 16238 ;; Hardware stack levels required when called:    7
 16239 ;; This function calls:
 16240 ;;		Nothing
 16241 ;; This function is called by:
 16242 ;;		_ExecuteLinkAdr
 16243 ;; This function uses a non-reentrant model
 16244 ;;
 16245                           
 16246                           	psect	text85
 16247  007792                     __ptext85:
 16248                           	opt stack 0
 16249  007792                     _UpdateCurrentDataRate:
 16250                           	opt stack 17
 16251                           
 16252                           ;incstack = 0
 16253                           ;UpdateCurrentDataRate@valueNew stored from wreg
 16254  007792  6F64               	movwf	UpdateCurrentDataRate@valueNew& (0+255),b
 16255                           
 16256                           ;lorawan.c: 1026: loRa.currentDataRate = valueNew;
 16257  007794  C064  F2DF         	movff	UpdateCurrentDataRate@valueNew,_loRa+223
 16258  007798  0012               	return		;funcret
 16259  00779A                     __end_of_UpdateCurrentDataRate:
 16260                           	opt stack 0
 16261                           tosu	equ	0xFFF
 16262                           tosh	equ	0xFFE
 16263                           tosl	equ	0xFFD
 16264                           pclath	equ	0xFFA
 16265                           tblptru	equ	0xFF8
 16266                           tblptrh	equ	0xFF7
 16267                           tblptrl	equ	0xFF6
 16268                           tablat	equ	0xFF5
 16269                           prodh	equ	0xFF4
 16270                           prodl	equ	0xFF3
 16271                           intcon	equ	0xFF2
 16272                           intcon2	equ	0xFF1
 16273                           intcon3	equ	0xFF0
 16274                           indf0	equ	0xFEF
 16275                           postinc0	equ	0xFEE
 16276                           fsr0h	equ	0xFEA
 16277                           fsr0l	equ	0xFE9
 16278                           wreg	equ	0xFE8
 16279                           postinc1	equ	0xFE6
 16280                           postdec1	equ	0xFE5
 16281                           plusw1	equ	0xFE3
 16282                           fsr1h	equ	0xFE2
 16283                           fsr1l	equ	0xFE1
 16284                           indf2	equ	0xFDF
 16285                           postinc2	equ	0xFDE
 16286                           postdec2	equ	0xFDD
 16287                           plusw2	equ	0xFDB
 16288                           fsr2h	equ	0xFDA
 16289                           fsr2l	equ	0xFD9
 16290                           status	equ	0xFD8
 16291                           
 16292 ;; *************** function _EnableChannels *****************
 16293 ;; Defined at:
 16294 ;;		line 1149 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16295 ;; Parameters:    Size  Location     Type
 16296 ;;  channelMask     2   14[BANK0 ] unsigned int 
 16297 ;;  channelMaskC    1   16[BANK0 ] unsigned char 
 16298 ;; Auto vars:     Size  Location     Type
 16299 ;;		None
 16300 ;; Return value:  Size  Location     Type
 16301 ;;                  1    wreg      void 
 16302 ;; Registers used:
 16303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16304 ;; Tracked objects:
 16305 ;;		On entry : F/0
 16306 ;;		On exit  : F/0
 16307 ;;		Unchanged: 0/0
 16308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16309 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16312 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16313 ;;Total ram usage:        3 bytes
 16314 ;; Hardware stack levels used:    1
 16315 ;; Hardware stack levels required when called:    9
 16316 ;; This function calls:
 16317 ;;		_EnableChannels1
 16318 ;; This function is called by:
 16319 ;;		_ExecuteLinkAdr
 16320 ;; This function uses a non-reentrant model
 16321 ;;
 16322                           
 16323                           	psect	text86
 16324  007614                     __ptext86:
 16325                           	opt stack 0
 16326  007614                     _EnableChannels:
 16327                           	opt stack 15
 16328                           
 16329                           ; BSR set to: 0
 16330                           ;lorawan_eu.c: 1151: EnableChannels1 (channelMask, channelMaskCntl, 0, 16);
 16331                           
 16332                           ;incstack = 0
 16333  007614  C06E  F068         	movff	EnableChannels@channelMask,EnableChannels1@channelMask
 16334  007618  C06F  F069         	movff	EnableChannels@channelMask+1,EnableChannels1@channelMask+1
 16335  00761C  C070  F06A         	movff	EnableChannels@channelMaskCntl,EnableChannels1@channelMaskCntl
 16336  007620  6B6B               	clrf	EnableChannels1@channelIndexMin& (0+255),b
 16337  007622  0E10               	movlw	16
 16338  007624  6F6C               	movwf	EnableChannels1@channelIndexMax& (0+255),b
 16339  007626  EF9E  F033         	goto	_EnableChannels1	;wreg free
 16340  00762A                     __end_of_EnableChannels:
 16341                           	opt stack 0
 16342                           tosu	equ	0xFFF
 16343                           tosh	equ	0xFFE
 16344                           tosl	equ	0xFFD
 16345                           pclath	equ	0xFFA
 16346                           tblptru	equ	0xFF8
 16347                           tblptrh	equ	0xFF7
 16348                           tblptrl	equ	0xFF6
 16349                           tablat	equ	0xFF5
 16350                           prodh	equ	0xFF4
 16351                           prodl	equ	0xFF3
 16352                           intcon	equ	0xFF2
 16353                           intcon2	equ	0xFF1
 16354                           intcon3	equ	0xFF0
 16355                           indf0	equ	0xFEF
 16356                           postinc0	equ	0xFEE
 16357                           fsr0h	equ	0xFEA
 16358                           fsr0l	equ	0xFE9
 16359                           wreg	equ	0xFE8
 16360                           postinc1	equ	0xFE6
 16361                           postdec1	equ	0xFE5
 16362                           plusw1	equ	0xFE3
 16363                           fsr1h	equ	0xFE2
 16364                           fsr1l	equ	0xFE1
 16365                           indf2	equ	0xFDF
 16366                           postinc2	equ	0xFDE
 16367                           postdec2	equ	0xFDD
 16368                           plusw2	equ	0xFDB
 16369                           fsr2h	equ	0xFDA
 16370                           fsr2l	equ	0xFD9
 16371                           status	equ	0xFD8
 16372                           
 16373 ;; *************** function _EnableChannels1 *****************
 16374 ;; Defined at:
 16375 ;;		line 1193 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16376 ;; Parameters:    Size  Location     Type
 16377 ;;  channelMask     2    8[BANK0 ] unsigned int 
 16378 ;;  channelMaskC    1   10[BANK0 ] unsigned char 
 16379 ;;  channelIndex    1   11[BANK0 ] unsigned char 
 16380 ;;  channelIndex    1   12[BANK0 ] unsigned char 
 16381 ;; Auto vars:     Size  Location     Type
 16382 ;;  i               1   13[BANK0 ] unsigned char 
 16383 ;; Return value:  Size  Location     Type
 16384 ;;                  1    wreg      void 
 16385 ;; Registers used:
 16386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16387 ;; Tracked objects:
 16388 ;;		On entry : F/0
 16389 ;;		On exit  : F/0
 16390 ;;		Unchanged: 0/0
 16391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16392 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16393 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16395 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16396 ;;Total ram usage:        6 bytes
 16397 ;; Hardware stack levels used:    1
 16398 ;; Hardware stack levels required when called:    8
 16399 ;; This function calls:
 16400 ;;		_UpdateChannelIdStatus
 16401 ;; This function is called by:
 16402 ;;		_EnableChannels
 16403 ;; This function uses a non-reentrant model
 16404 ;;
 16405                           
 16406                           	psect	text87
 16407  00673C                     __ptext87:
 16408                           	opt stack 0
 16409  00673C                     _EnableChannels1:
 16410                           	opt stack 15
 16411                           
 16412                           ; BSR set to: 0
 16413                           ;lorawan_eu.c: 1195: uint8_t i;
 16414                           ;lorawan_eu.c: 1197: if (channelMaskCntl == 6)
 16415                           
 16416                           ; BSR set to: 0
 16417                           ;incstack = 0
 16418  00673C  0E06               	movlw	6
 16419  00673E  196A               	xorwf	EnableChannels1@channelMaskCntl& (0+255),w,b
 16420  006740  E10E               	bnz	l12390
 16421                           
 16422                           ; BSR set to: 0
 16423                           ;lorawan_eu.c: 1198: {
 16424                           ;lorawan_eu.c: 1199: for ( i = channelIndexMin; i < channelIndexMax; i++ )
 16425  006742  C06B  F06D         	movff	EnableChannels1@channelIndexMin,EnableChannels1@i
 16426  006746  D007               	goto	l12388
 16427  006748                     l12384:
 16428                           
 16429                           ; BSR set to: 0
 16430                           ;lorawan_eu.c: 1200: {
 16431                           ;lorawan_eu.c: 1201: UpdateChannelIdStatus (i, 1);
 16432  006748  0E01               	movlw	1
 16433  00674A  6F64               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 16434  00674C  516D               	movf	EnableChannels1@i& (0+255),w,b
 16435  00674E  ECD8  F023         	call	_UpdateChannelIdStatus
 16436                           
 16437                           ; BSR set to: 2
 16438  006752  0100               	movlb	0	; () banked
 16439  006754  2B6D               	incf	EnableChannels1@i& (0+255),f,b
 16440  006756                     l12388:
 16441                           
 16442                           ; BSR set to: 0
 16443  006756  516C               	movf	EnableChannels1@channelIndexMax& (0+255),w,b
 16444  006758  5D6D               	subwf	EnableChannels1@i& (0+255),w,b
 16445  00675A  E3F6               	bnc	l12384
 16446  00675C  0012               	return	
 16447  00675E                     l12390:
 16448                           
 16449                           ; BSR set to: 0
 16450                           ;lorawan_eu.c: 1204: else if (channelMaskCntl == 0)
 16451  00675E  516A               	movf	EnableChannels1@channelMaskCntl& (0+255),w,b
 16452  006760  A4D8               	btfss	status,2,c
 16453  006762  0012               	return	
 16454                           
 16455                           ; BSR set to: 0
 16456                           ;lorawan_eu.c: 1205: {
 16457                           ;lorawan_eu.c: 1206: for ( i = channelIndexMin; i < channelIndexMax; i++ )
 16458  006764  C06B  F06D         	movff	EnableChannels1@channelIndexMin,EnableChannels1@i
 16459  006768  D011               	goto	l12402
 16460  00676A                     l1296:
 16461                           
 16462                           ; BSR set to: 0
 16463                           ;lorawan_eu.c: 1207: {
 16464                           ;lorawan_eu.c: 1208: if ( channelMask & (1 << (0)) == (1 << (0)))
 16465  00676A  A168               	btfss	EnableChannels1@channelMask& (0+255),0,b
 16466  00676C  D006               	goto	l12396
 16467                           
 16468                           ; BSR set to: 0
 16469                           ;lorawan_eu.c: 1209: {
 16470                           ;lorawan_eu.c: 1210: UpdateChannelIdStatus (i, 1);
 16471  00676E  0E01               	movlw	1
 16472  006770  6F64               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 16473  006772  516D               	movf	EnableChannels1@i& (0+255),w,b
 16474  006774  ECD8  F023         	call	_UpdateChannelIdStatus
 16475                           
 16476                           ;lorawan_eu.c: 1211: }
 16477  006778  D004               	goto	l12398
 16478  00677A                     l12396:
 16479                           
 16480                           ; BSR set to: 0
 16481                           ;lorawan_eu.c: 1212: else
 16482                           ;lorawan_eu.c: 1213: {
 16483                           ;lorawan_eu.c: 1214: UpdateChannelIdStatus (i, 0);
 16484  00677A  6B64               	clrf	UpdateChannelIdStatus@statusNew& (0+255),b
 16485  00677C  516D               	movf	EnableChannels1@i& (0+255),w,b
 16486  00677E  ECD8  F023         	call	_UpdateChannelIdStatus
 16487  006782                     l12398:
 16488                           
 16489                           ; BSR set to: 2
 16490                           ;lorawan_eu.c: 1215: }
 16491                           ;lorawan_eu.c: 1216: channelMask = channelMask >> (1);
 16492  006782  0100               	movlb	0	; () banked
 16493  006784  90D8               	bcf	status,0,c
 16494  006786  3369               	rrcf	(EnableChannels1@channelMask+1)& (0+255),f,b
 16495  006788  3368               	rrcf	EnableChannels1@channelMask& (0+255),f,b
 16496                           
 16497                           ; BSR set to: 0
 16498  00678A  2B6D               	incf	EnableChannels1@i& (0+255),f,b
 16499  00678C                     l12402:
 16500                           
 16501                           ; BSR set to: 0
 16502  00678C  516C               	movf	EnableChannels1@channelIndexMax& (0+255),w,b
 16503  00678E  5D6D               	subwf	EnableChannels1@i& (0+255),w,b
 16504  006790  E3EC               	bnc	l1296
 16505                           
 16506                           ; BSR set to: 0
 16507  006792  0012               	return		;funcret
 16508  006794                     __end_of_EnableChannels1:
 16509                           	opt stack 0
 16510                           tosu	equ	0xFFF
 16511                           tosh	equ	0xFFE
 16512                           tosl	equ	0xFFD
 16513                           pclath	equ	0xFFA
 16514                           tblptru	equ	0xFF8
 16515                           tblptrh	equ	0xFF7
 16516                           tblptrl	equ	0xFF6
 16517                           tablat	equ	0xFF5
 16518                           prodh	equ	0xFF4
 16519                           prodl	equ	0xFF3
 16520                           intcon	equ	0xFF2
 16521                           intcon2	equ	0xFF1
 16522                           intcon3	equ	0xFF0
 16523                           indf0	equ	0xFEF
 16524                           postinc0	equ	0xFEE
 16525                           fsr0h	equ	0xFEA
 16526                           fsr0l	equ	0xFE9
 16527                           wreg	equ	0xFE8
 16528                           postinc1	equ	0xFE6
 16529                           postdec1	equ	0xFE5
 16530                           plusw1	equ	0xFE3
 16531                           fsr1h	equ	0xFE2
 16532                           fsr1l	equ	0xFE1
 16533                           indf2	equ	0xFDF
 16534                           postinc2	equ	0xFDE
 16535                           postdec2	equ	0xFDD
 16536                           plusw2	equ	0xFDB
 16537                           fsr2h	equ	0xFDA
 16538                           fsr2l	equ	0xFD9
 16539                           status	equ	0xFD8
 16540                           
 16541 ;; *************** function _UpdateChannelIdStatus *****************
 16542 ;; Defined at:
 16543 ;;		line 1042 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16544 ;; Parameters:    Size  Location     Type
 16545 ;;  channelId       1    wreg     unsigned char 
 16546 ;;  statusNew       1    4[BANK0 ] unsigned char 
 16547 ;; Auto vars:     Size  Location     Type
 16548 ;;  channelId       1    6[BANK0 ] unsigned char 
 16549 ;;  i               1    7[BANK0 ] unsigned char 
 16550 ;; Return value:  Size  Location     Type
 16551 ;;                  1    wreg      void 
 16552 ;; Registers used:
 16553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16554 ;; Tracked objects:
 16555 ;;		On entry : F/0
 16556 ;;		On exit  : F/2
 16557 ;;		Unchanged: 0/0
 16558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16559 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16560 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16561 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16562 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16563 ;;Total ram usage:        4 bytes
 16564 ;; Hardware stack levels used:    1
 16565 ;; Hardware stack levels required when called:    7
 16566 ;; This function calls:
 16567 ;;		Nothing
 16568 ;; This function is called by:
 16569 ;;		_LORAWAN_SetChannelIdStatus
 16570 ;;		_ExecuteNewChannel
 16571 ;;		_EnableChannels1
 16572 ;; This function uses a non-reentrant model
 16573 ;;
 16574                           
 16575                           	psect	text88
 16576  0047B0                     __ptext88:
 16577                           	opt stack 0
 16578  0047B0                     _UpdateChannelIdStatus:
 16579                           	opt stack 17
 16580                           
 16581                           ; BSR set to: 0
 16582                           ;incstack = 0
 16583                           ;UpdateChannelIdStatus@channelId stored from wreg
 16584  0047B0  6F66               	movwf	UpdateChannelIdStatus@channelId& (0+255),b
 16585                           
 16586                           ;lorawan_eu.c: 1044: uint8_t i;
 16587                           ;lorawan_eu.c: 1046: Channels[channelId].status = statusNew;
 16588  0047B2  0100               	movlb	0	; () banked
 16589  0047B4  5166               	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 16590  0047B6  0D0E               	mullw	14
 16591  0047B8  0E04               	movlw	low (_Channels+4)
 16592  0047BA  24F3               	addwf	prodl,w,c
 16593  0047BC  6ED9               	movwf	fsr2l,c
 16594  0047BE  0E04               	movlw	high (_Channels+4)
 16595  0047C0  20F4               	addwfc	prodh,w,c
 16596  0047C2  6EDA               	movwf	fsr2h,c
 16597  0047C4  C064  FFDF         	movff	UpdateChannelIdStatus@statusNew,indf2
 16598                           
 16599                           ;lorawan_eu.c: 1047: if(Channels[channelId].status == 0)
 16600  0047C8  5166               	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 16601  0047CA  0D0E               	mullw	14
 16602  0047CC  0E04               	movlw	low (_Channels+4)
 16603  0047CE  24F3               	addwf	prodl,w,c
 16604  0047D0  6ED9               	movwf	fsr2l,c
 16605  0047D2  0E04               	movlw	high (_Channels+4)
 16606  0047D4  20F4               	addwfc	prodh,w,c
 16607  0047D6  6EDA               	movwf	fsr2h,c
 16608  0047D8  50DF               	movf	indf2,w,c
 16609  0047DA  E10C               	bnz	l12100
 16610                           
 16611                           ; BSR set to: 0
 16612                           ;lorawan_eu.c: 1048: {
 16613                           ;lorawan_eu.c: 1050: Channels[channelId].channelTimer = 0;
 16614  0047DC  5166               	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 16615  0047DE  0D0E               	mullw	14
 16616  0047E0  0E08               	movlw	low (_Channels+8)
 16617  0047E2  24F3               	addwf	prodl,w,c
 16618  0047E4  6ED9               	movwf	fsr2l,c
 16619  0047E6  0E04               	movlw	high (_Channels+8)
 16620  0047E8  20F4               	addwfc	prodh,w,c
 16621  0047EA  6EDA               	movwf	fsr2h,c
 16622  0047EC  6ADE               	clrf	postinc2,c
 16623  0047EE  6ADE               	clrf	postinc2,c
 16624  0047F0  6ADE               	clrf	postinc2,c
 16625  0047F2  6ADD               	clrf	postdec2,c
 16626  0047F4                     l12100:
 16627                           
 16628                           ; BSR set to: 0
 16629                           ;lorawan_eu.c: 1051: }
 16630                           ;lorawan_eu.c: 1053: for (i = 0; i < loRa.maxChannels; i++)
 16631  0047F4  6B67               	clrf	UpdateChannelIdStatus@i& (0+255),b
 16632  0047F6  D04E               	goto	l12114
 16633  0047F8                     l12102:
 16634                           
 16635                           ; BSR set to: 0
 16636                           ;lorawan_eu.c: 1054: {
 16637                           ;lorawan_eu.c: 1055: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i]
      +                          .status == 1) )
 16638  0047F8  5167               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 16639  0047FA  0D0E               	mullw	14
 16640  0047FC  0E05               	movlw	low (_Channels+5)
 16641  0047FE  24F3               	addwf	prodl,w,c
 16642  004800  6ED9               	movwf	fsr2l,c
 16643  004802  0E04               	movlw	high (_Channels+5)
 16644  004804  20F4               	addwfc	prodh,w,c
 16645  004806  6EDA               	movwf	fsr2h,c
 16646  004808  50DF               	movf	223,w,c
 16647  00480A  0B0F               	andlw	15
 16648  00480C  0100               	movlb	0	; () banked
 16649  00480E  6F65               	movwf	??_UpdateChannelIdStatus& (0+255),b
 16650  004810  0102               	movlb	2	; () banked
 16651  004812  51EB               	movf	(_loRa+235)& (0+255),w,b
 16652  004814  0100               	movlb	0	; () banked
 16653  004816  5D65               	subwf	??_UpdateChannelIdStatus& (0+255),w,b
 16654  004818  E216               	bc	l1232
 16655                           
 16656                           ; BSR set to: 0
 16657  00481A  5167               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 16658  00481C  0D0E               	mullw	14
 16659  00481E  0E04               	movlw	low (_Channels+4)
 16660  004820  24F3               	addwf	prodl,w,c
 16661  004822  6ED9               	movwf	fsr2l,c
 16662  004824  0E04               	movlw	high (_Channels+4)
 16663  004826  20F4               	addwfc	prodh,w,c
 16664  004828  6EDA               	movwf	fsr2h,c
 16665  00482A  04DE               	decf	postinc2,w,c
 16666  00482C  E10C               	bnz	l1232
 16667                           
 16668                           ; BSR set to: 0
 16669                           ;lorawan_eu.c: 1056: {
 16670                           ;lorawan_eu.c: 1057: loRa.minDataRate = Channels[i].dataRange.min;
 16671  00482E  5167               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 16672  004830  0D0E               	mullw	14
 16673  004832  0E05               	movlw	low (_Channels+5)
 16674  004834  24F3               	addwf	prodl,w,c
 16675  004836  6ED9               	movwf	fsr2l,c
 16676  004838  0E04               	movlw	high (_Channels+5)
 16677  00483A  20F4               	addwfc	prodh,w,c
 16678  00483C  6EDA               	movwf	fsr2h,c
 16679  00483E  50DF               	movf	223,w,c
 16680  004840  0B0F               	andlw	15
 16681  004842  0102               	movlb	2	; () banked
 16682  004844  6FEB               	movwf	(_loRa+235)& (0+255),b
 16683  004846                     l1232:
 16684                           
 16685                           ;lorawan_eu.c: 1058: }
 16686                           ;lorawan_eu.c: 1059: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i]
      +                          .status == 1) )
 16687  004846  0100               	movlb	0	; () banked
 16688  004848  5167               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 16689  00484A  0D0E               	mullw	14
 16690  00484C  0E05               	movlw	low (_Channels+5)
 16691  00484E  24F3               	addwf	prodl,w,c
 16692  004850  6ED9               	movwf	fsr2l,c
 16693  004852  0E04               	movlw	high (_Channels+5)
 16694  004854  20F4               	addwfc	prodh,w,c
 16695  004856  6EDA               	movwf	fsr2h,c
 16696  004858  38DF               	swapf	223,w,c
 16697  00485A  0B0F               	andlw	15
 16698  00485C  0102               	movlb	2	; () banked
 16699  00485E  61EC               	cpfslt	(_loRa+236)& (0+255),b
 16700  004860  D017               	goto	l12112
 16701                           
 16702                           ; BSR set to: 2
 16703  004862  0100               	movlb	0	; () banked
 16704  004864  5167               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 16705  004866  0D0E               	mullw	14
 16706  004868  0E04               	movlw	low (_Channels+4)
 16707  00486A  24F3               	addwf	prodl,w,c
 16708  00486C  6ED9               	movwf	fsr2l,c
 16709  00486E  0E04               	movlw	high (_Channels+4)
 16710  004870  20F4               	addwfc	prodh,w,c
 16711  004872  6EDA               	movwf	fsr2h,c
 16712  004874  04DE               	decf	postinc2,w,c
 16713  004876  E10C               	bnz	l12112
 16714                           
 16715                           ; BSR set to: 0
 16716                           ;lorawan_eu.c: 1060: {
 16717                           ;lorawan_eu.c: 1061: loRa.maxDataRate = Channels[i].dataRange.max;
 16718  004878  5167               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 16719  00487A  0D0E               	mullw	14
 16720  00487C  0E05               	movlw	low (_Channels+5)
 16721  00487E  24F3               	addwf	prodl,w,c
 16722  004880  6ED9               	movwf	fsr2l,c
 16723  004882  0E04               	movlw	high (_Channels+5)
 16724  004884  20F4               	addwfc	prodh,w,c
 16725  004886  6EDA               	movwf	fsr2h,c
 16726  004888  38DF               	swapf	223,w,c
 16727  00488A  0B0F               	andlw	15
 16728  00488C  0102               	movlb	2	; () banked
 16729  00488E  6FEC               	movwf	(_loRa+236)& (0+255),b
 16730  004890                     l12112:
 16731  004890  0100               	movlb	0	; () banked
 16732  004892  2B67               	incf	UpdateChannelIdStatus@i& (0+255),f,b
 16733  004894                     l12114:
 16734                           
 16735                           ; BSR set to: 0
 16736  004894  0102               	movlb	2	; () banked
 16737  004896  51ED               	movf	(_loRa+237)& (0+255),w,b
 16738  004898  0100               	movlb	0	; () banked
 16739  00489A  5D67               	subwf	UpdateChannelIdStatus@i& (0+255),w,b
 16740  00489C  E3AD               	bnc	l12102
 16741                           
 16742                           ; BSR set to: 0
 16743                           ;lorawan_eu.c: 1062: }
 16744                           ;lorawan_eu.c: 1063: }
 16745                           ;lorawan_eu.c: 1065: if (loRa.currentDataRate > loRa.maxDataRate)
 16746  00489E  0102               	movlb	2	; () banked
 16747  0048A0  51DF               	movf	(_loRa+223)& (0+255),w,b
 16748  0048A2  5DEC               	subwf	(_loRa+236)& (0+255),w,b
 16749  0048A4  E202               	bc	l12120
 16750                           
 16751                           ; BSR set to: 2
 16752                           ;lorawan_eu.c: 1066: {
 16753                           ;lorawan_eu.c: 1067: loRa.currentDataRate = loRa.maxDataRate;
 16754  0048A6  C2EC  F2DF         	movff	_loRa+236,_loRa+223
 16755  0048AA                     l12120:
 16756                           
 16757                           ; BSR set to: 2
 16758                           ;lorawan_eu.c: 1068: }
 16759                           ;lorawan_eu.c: 1070: if (loRa.currentDataRate < loRa.minDataRate)
 16760  0048AA  51EB               	movf	(_loRa+235)& (0+255),w,b
 16761  0048AC  5DDF               	subwf	(_loRa+223)& (0+255),w,b
 16762  0048AE  A0D8               	btfss	status,0,c
 16763                           
 16764                           ; BSR set to: 2
 16765                           ;lorawan_eu.c: 1071: {
 16766                           ;lorawan_eu.c: 1072: loRa.currentDataRate = loRa.minDataRate;
 16767  0048B0  C2EB  F2DF         	movff	_loRa+235,_loRa+223
 16768                           
 16769                           ; BSR set to: 2
 16770  0048B4  0012               	return		;funcret
 16771  0048B6                     __end_of_UpdateChannelIdStatus:
 16772                           	opt stack 0
 16773                           tosu	equ	0xFFF
 16774                           tosh	equ	0xFFE
 16775                           tosl	equ	0xFFD
 16776                           pclath	equ	0xFFA
 16777                           tblptru	equ	0xFF8
 16778                           tblptrh	equ	0xFF7
 16779                           tblptrl	equ	0xFF6
 16780                           tablat	equ	0xFF5
 16781                           prodh	equ	0xFF4
 16782                           prodl	equ	0xFF3
 16783                           intcon	equ	0xFF2
 16784                           intcon2	equ	0xFF1
 16785                           intcon3	equ	0xFF0
 16786                           indf0	equ	0xFEF
 16787                           postinc0	equ	0xFEE
 16788                           fsr0h	equ	0xFEA
 16789                           fsr0l	equ	0xFE9
 16790                           wreg	equ	0xFE8
 16791                           postinc1	equ	0xFE6
 16792                           postdec1	equ	0xFE5
 16793                           plusw1	equ	0xFE3
 16794                           fsr1h	equ	0xFE2
 16795                           fsr1l	equ	0xFE1
 16796                           indf2	equ	0xFDF
 16797                           postinc2	equ	0xFDE
 16798                           postdec2	equ	0xFDD
 16799                           plusw2	equ	0xFDB
 16800                           fsr2h	equ	0xFDA
 16801                           fsr2l	equ	0xFD9
 16802                           status	equ	0xFD8
 16803                           
 16804 ;; *************** function _ExecuteDutyCycle *****************
 16805 ;; Defined at:
 16806 ;;		line 594 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16807 ;; Parameters:    Size  Location     Type
 16808 ;;  ptr             2    4[BANK0 ] PTR unsigned char 
 16809 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 16810 ;; Auto vars:     Size  Location     Type
 16811 ;;  maxDCycle       1    9[BANK0 ] unsigned char 
 16812 ;; Return value:  Size  Location     Type
 16813 ;;                  2    4[BANK0 ] PTR unsigned char 
 16814 ;; Registers used:
 16815 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16816 ;; Tracked objects:
 16817 ;;		On entry : F/0
 16818 ;;		On exit  : D/0
 16819 ;;		Unchanged: 0/0
 16820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16821 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16822 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16823 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16824 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16825 ;;Total ram usage:        6 bytes
 16826 ;; Hardware stack levels used:    1
 16827 ;; Hardware stack levels required when called:    7
 16828 ;; This function calls:
 16829 ;;		Nothing
 16830 ;; This function is called by:
 16831 ;;		_MacExecuteCommands
 16832 ;; This function uses a non-reentrant model
 16833 ;;
 16834                           
 16835                           	psect	text89
 16836  0068E0                     __ptext89:
 16837                           	opt stack 0
 16838  0068E0                     _ExecuteDutyCycle:
 16839                           	opt stack 18
 16840                           
 16841                           ; BSR set to: 0
 16842                           ;lorawan_eu.c: 596: uint8_t maxDCycle;
 16843                           ;lorawan_eu.c: 598: maxDCycle = *(ptr++);
 16844                           
 16845                           ; BSR set to: 2
 16846                           ;incstack = 0
 16847  0068E0  C064  FFD9         	movff	ExecuteDutyCycle@ptr,fsr2l
 16848  0068E4  C065  FFDA         	movff	ExecuteDutyCycle@ptr+1,fsr2h
 16849  0068E8  50DF               	movf	indf2,w,c
 16850  0068EA  6F69               	movwf	ExecuteDutyCycle@maxDCycle& (0+255),b
 16851                           
 16852                           ; BSR set to: 0
 16853  0068EC  4B64               	infsnz	ExecuteDutyCycle@ptr& (0+255),f,b
 16854  0068EE  2B65               	incf	(ExecuteDutyCycle@ptr+1)& (0+255),f,b
 16855                           
 16856                           ; BSR set to: 0
 16857                           ;lorawan_eu.c: 599: if (maxDCycle < 15)
 16858  0068F0  0E0F               	movlw	15
 16859  0068F2  6169               	cpfslt	ExecuteDutyCycle@maxDCycle& (0+255),b
 16860  0068F4  D012               	goto	l1108
 16861                           
 16862                           ; BSR set to: 0
 16863                           ;lorawan_eu.c: 600: {
 16864                           ;lorawan_eu.c: 601: loRa.prescaler = 1 << maxDCycle;
 16865  0068F6  C069  F066         	movff	ExecuteDutyCycle@maxDCycle,??_ExecuteDutyCycle
 16866  0068FA  0E01               	movlw	1
 16867  0068FC  6F67               	movwf	(??_ExecuteDutyCycle+1)& (0+255),b
 16868  0068FE  6B68               	clrf	(??_ExecuteDutyCycle+2)& (0+255),b
 16869  006900  2B66               	incf	??_ExecuteDutyCycle& (0+255),f,b
 16870  006902  D003               	goto	u14794
 16871  006904                     u14795:
 16872  006904  90D8               	bcf	status,0,c
 16873  006906  3767               	rlcf	(??_ExecuteDutyCycle+1)& (0+255),f,b
 16874  006908  3768               	rlcf	(??_ExecuteDutyCycle+2)& (0+255),f,b
 16875  00690A                     u14794:
 16876  00690A  2F66               	decfsz	??_ExecuteDutyCycle& (0+255),f,b
 16877  00690C  D7FB               	goto	u14795
 16878  00690E  C067  F2DB         	movff	??_ExecuteDutyCycle+1,_loRa+219
 16879  006912  C068  F2DC         	movff	??_ExecuteDutyCycle+2,_loRa+220
 16880                           
 16881                           ;lorawan_eu.c: 602: loRa.macStatus.prescalerModified = 1;
 16882  006916  0102               	movlb	2	; () banked
 16883  006918  8D03               	bsf	(_loRa+3)& (0+255),6,b
 16884  00691A                     l1108:
 16885                           
 16886                           ;lorawan_eu.c: 603: }
 16887                           ;lorawan_eu.c: 605: if (maxDCycle == 255)
 16888  00691A  0100               	movlb	0	; () banked
 16889  00691C  2969               	incf	ExecuteDutyCycle@maxDCycle& (0+255),w,b
 16890  00691E  E102               	bnz	l13200
 16891                           
 16892                           ; BSR set to: 0
 16893                           ;lorawan_eu.c: 606: {
 16894                           ;lorawan_eu.c: 607: loRa.macStatus.silentImmediately = 1;
 16895  006920  0102               	movlb	2	; () banked
 16896  006922  8F02               	bsf	(_loRa+2)& (0+255),7,b
 16897  006924                     l13200:
 16898                           
 16899                           ;lorawan_eu.c: 608: }
 16900                           ;lorawan_eu.c: 610: return ptr;
 16901  006924  C064  F064         	movff	ExecuteDutyCycle@ptr,?_ExecuteDutyCycle
 16902  006928  C065  F065         	movff	ExecuteDutyCycle@ptr+1,?_ExecuteDutyCycle+1
 16903  00692C  0012               	return		;funcret
 16904  00692E                     __end_of_ExecuteDutyCycle:
 16905                           	opt stack 0
 16906                           tosu	equ	0xFFF
 16907                           tosh	equ	0xFFE
 16908                           tosl	equ	0xFFD
 16909                           pclath	equ	0xFFA
 16910                           tblptru	equ	0xFF8
 16911                           tblptrh	equ	0xFF7
 16912                           tblptrl	equ	0xFF6
 16913                           tablat	equ	0xFF5
 16914                           prodh	equ	0xFF4
 16915                           prodl	equ	0xFF3
 16916                           intcon	equ	0xFF2
 16917                           intcon2	equ	0xFF1
 16918                           intcon3	equ	0xFF0
 16919                           indf0	equ	0xFEF
 16920                           postinc0	equ	0xFEE
 16921                           fsr0h	equ	0xFEA
 16922                           fsr0l	equ	0xFE9
 16923                           wreg	equ	0xFE8
 16924                           postinc1	equ	0xFE6
 16925                           postdec1	equ	0xFE5
 16926                           plusw1	equ	0xFE3
 16927                           fsr1h	equ	0xFE2
 16928                           fsr1l	equ	0xFE1
 16929                           indf2	equ	0xFDF
 16930                           postinc2	equ	0xFDE
 16931                           postdec2	equ	0xFDD
 16932                           plusw2	equ	0xFDB
 16933                           fsr2h	equ	0xFDA
 16934                           fsr2l	equ	0xFD9
 16935                           status	equ	0xFD8
 16936                           
 16937 ;; *************** function _ExecuteDevStatus *****************
 16938 ;; Defined at:
 16939 ;;		line 672 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16940 ;; Parameters:    Size  Location     Type
 16941 ;;  ptr             2    4[BANK0 ] PTR unsigned char 
 16942 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 16943 ;; Auto vars:     Size  Location     Type
 16944 ;;		None
 16945 ;; Return value:  Size  Location     Type
 16946 ;;                  2    4[BANK0 ] PTR unsigned char 
 16947 ;; Registers used:
 16948 ;;		wreg, status,2, status,0
 16949 ;; Tracked objects:
 16950 ;;		On entry : F/0
 16951 ;;		On exit  : F/0
 16952 ;;		Unchanged: F/0
 16953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16954 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16957 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16958 ;;Total ram usage:        2 bytes
 16959 ;; Hardware stack levels used:    1
 16960 ;; Hardware stack levels required when called:    7
 16961 ;; This function calls:
 16962 ;;		Nothing
 16963 ;; This function is called by:
 16964 ;;		_MacExecuteCommands
 16965 ;; This function uses a non-reentrant model
 16966 ;;
 16967                           
 16968                           	psect	text90
 16969  007746                     __ptext90:
 16970                           	opt stack 0
 16971  007746                     _ExecuteDevStatus:
 16972                           	opt stack 18
 16973                           
 16974                           ; BSR set to: 0
 16975                           ;lorawan_eu.c: 674: return ptr;
 16976                           
 16977                           ;incstack = 0
 16978  007746  C064  F064         	movff	ExecuteDevStatus@ptr,?_ExecuteDevStatus
 16979  00774A  C065  F065         	movff	ExecuteDevStatus@ptr+1,?_ExecuteDevStatus+1
 16980                           
 16981                           ; BSR set to: 0
 16982  00774E  0012               	return		;funcret
 16983  007750                     __end_of_ExecuteDevStatus:
 16984                           	opt stack 0
 16985                           tosu	equ	0xFFF
 16986                           tosh	equ	0xFFE
 16987                           tosl	equ	0xFFD
 16988                           pclath	equ	0xFFA
 16989                           tblptru	equ	0xFF8
 16990                           tblptrh	equ	0xFF7
 16991                           tblptrl	equ	0xFF6
 16992                           tablat	equ	0xFF5
 16993                           prodh	equ	0xFF4
 16994                           prodl	equ	0xFF3
 16995                           intcon	equ	0xFF2
 16996                           intcon2	equ	0xFF1
 16997                           intcon3	equ	0xFF0
 16998                           indf0	equ	0xFEF
 16999                           postinc0	equ	0xFEE
 17000                           fsr0h	equ	0xFEA
 17001                           fsr0l	equ	0xFE9
 17002                           wreg	equ	0xFE8
 17003                           postinc1	equ	0xFE6
 17004                           postdec1	equ	0xFE5
 17005                           plusw1	equ	0xFE3
 17006                           fsr1h	equ	0xFE2
 17007                           fsr1l	equ	0xFE1
 17008                           indf2	equ	0xFDF
 17009                           postinc2	equ	0xFDE
 17010                           postdec2	equ	0xFDD
 17011                           plusw2	equ	0xFDB
 17012                           fsr2h	equ	0xFDA
 17013                           fsr2l	equ	0xFD9
 17014                           status	equ	0xFD8
 17015                           
 17016 ;; *************** function _LORAWAN_Send *****************
 17017 ;; Defined at:
 17018 ;;		line 185 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 17019 ;; Parameters:    Size  Location     Type
 17020 ;;  confirmed       1    wreg     enum E18931
 17021 ;;  port            1  129[BANK0 ] unsigned char 
 17022 ;;  buffer          2  130[BANK0 ] PTR void 
 17023 ;;		 -> payload(2), NULL(0), 
 17024 ;;  bufferLength    1  132[BANK0 ] unsigned char 
 17025 ;; Auto vars:     Size  Location     Type
 17026 ;;  confirmed       1  135[BANK0 ] enum E18931
 17027 ;;  result          1  134[BANK0 ] enum E18904
 17028 ;; Return value:  Size  Location     Type
 17029 ;;                  1    wreg      enum E18904
 17030 ;; Registers used:
 17031 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17032 ;; Tracked objects:
 17033 ;;		On entry : F/0
 17034 ;;		On exit  : D/0
 17035 ;;		Unchanged: 0/0
 17036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17037 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17038 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17039 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17040 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17041 ;;Total ram usage:        7 bytes
 17042 ;; Hardware stack levels used:    1
 17043 ;; Hardware stack levels required when called:   13
 17044 ;; This function calls:
 17045 ;;		_AssemblePacket
 17046 ;;		_LORAWAN_GetMaxPayloadSize
 17047 ;;		_RADIO_ReceiveStop
 17048 ;;		_RADIO_Transmit
 17049 ;;		_SelectChannelForTransmission
 17050 ;; This function is called by:
 17051 ;;		_AutomaticReplyCallback
 17052 ;;		_LORAWAN_RxDone
 17053 ;;		_sendPacket
 17054 ;; This function uses a non-reentrant model
 17055 ;;
 17056                           
 17057                           	psect	text91
 17058  00545C                     __ptext91:
 17059                           	opt stack 0
 17060  00545C                     _LORAWAN_Send:
 17061                           	opt stack 16
 17062                           
 17063                           ; BSR set to: 0
 17064                           ;incstack = 0
 17065                           ;LORAWAN_Send@confirmed stored from wreg
 17066  00545C  6FE7               	movwf	LORAWAN_Send@confirmed& (0+255),b
 17067                           
 17068                           ;lorawan.c: 187: LorawanError_t result;
 17069                           ;lorawan.c: 189: if (loRa.macStatus.macPause == 1)
 17070  00545E  0102               	movlb	2	; () banked
 17071  005460  A103               	btfss	(_loRa+3)& (0+255),0,b
 17072                           
 17073                           ; BSR set to: 2
 17074                           ;lorawan.c: 192: }
 17075                           ;lorawan.c: 194: if (loRa.macStatus.silentImmediately == 1)
 17076  005462  BF02               	btfsc	(_loRa+2)& (0+255),7,b
 17077  005464  0012               	return	
 17078                           
 17079                           ; BSR set to: 2
 17080                           ;lorawan.c: 197: }
 17081                           ;lorawan.c: 199: if (loRa.macStatus.networkJoined == 0)
 17082  005466  A902               	btfss	(_loRa+2)& (0+255),4,b
 17083  005468  0012               	return	
 17084                           
 17085                           ; BSR set to: 2
 17086                           ;lorawan.c: 202: }
 17087                           ;lorawan.c: 204: if ( (port < 1) && (bufferLength != 0) )
 17088  00546A  0100               	movlb	0	; () banked
 17089  00546C  51E1               	movf	LORAWAN_Send@port& (0+255),w,b
 17090  00546E  E103               	bnz	l13658
 17091                           
 17092                           ; BSR set to: 0
 17093  005470  51E4               	movf	LORAWAN_Send@bufferLength& (0+255),w,b
 17094  005472  E001               	bz	l13658
 17095  005474  0012               	return	
 17096  005476                     l13658:
 17097                           
 17098                           ; BSR set to: 0
 17099                           ;lorawan.c: 207: }
 17100                           ;lorawan.c: 210: if (bufferLength > LORAWAN_GetMaxPayloadSize ())
 17101  005476  EC65  F036         	call	_LORAWAN_GetMaxPayloadSize	;wreg free
 17102  00547A  6FE5               	movwf	??_LORAWAN_Send& (0+255),b
 17103  00547C  51E4               	movf	LORAWAN_Send@bufferLength& (0+255),w,b
 17104  00547E  5DE5               	subwf	??_LORAWAN_Send& (0+255),w,b
 17105  005480  E201               	bc	l13662
 17106  005482  0012               	return	
 17107  005484                     l13662:
 17108                           
 17109                           ; BSR set to: 0
 17110                           ;lorawan.c: 213: }
 17111                           ;lorawan.c: 215: if (loRa.fCntUp.value == (4294967295UL))
 17112  005484  0102               	movlb	2	; () banked
 17113  005486  2906               	incf	(_loRa+6)& (0+255),w,b
 17114  005488  E108               	bnz	l13666
 17115  00548A  2907               	incf	(_loRa+7)& (0+255),w,b
 17116  00548C  E106               	bnz	l13666
 17117  00548E  2908               	incf	(_loRa+8)& (0+255),w,b
 17118  005490  E104               	bnz	l13666
 17119  005492  2909               	incf	(_loRa+9)& (0+255),w,b
 17120  005494  E102               	bnz	l13666
 17121                           
 17122                           ; BSR set to: 2
 17123                           ;lorawan.c: 216: {
 17124                           ;lorawan.c: 218: loRa.macStatus.rejoinNeeded = 1;
 17125  005496  8304               	bsf	(_loRa+4)& (0+255),1,b
 17126                           
 17127                           ;lorawan.c: 219: return FRAME_COUNTER_ERROR_REJOIN_NEEDED;
 17128                           ;	Return value of _LORAWAN_Send is never used
 17129  005498  0012               	return	
 17130  00549A                     l13666:
 17131                           
 17132                           ; BSR set to: 2
 17133                           ;lorawan.c: 220: }
 17134                           ;lorawan.c: 222: if ((loRa.macStatus.macState != IDLE) && (CLASS_A == loRa.deviceClass))
 17135  00549A  5102               	movf	(_loRa+2)& (0+255),w,b
 17136  00549C  0B0F               	andlw	15
 17137  00549E  E003               	bz	l13672
 17138                           
 17139                           ; BSR set to: 2
 17140  0054A0  5112               	movf	(_loRa+18)& (0+255),w,b
 17141  0054A2  E101               	bnz	l13672
 17142  0054A4  0012               	return	
 17143  0054A6                     l13672:
 17144                           
 17145                           ; BSR set to: 2
 17146                           ;lorawan.c: 225: }
 17147                           ;lorawan.c: 227: result = SelectChannelForTransmission (1);
 17148  0054A6  0E01               	movlw	1
 17149  0054A8  ECE2  F032         	call	_SelectChannelForTransmission
 17150  0054AC  6FE6               	movwf	LORAWAN_Send@result& (0+255),b
 17151                           
 17152                           ; BSR set to: 0
 17153                           ;lorawan.c: 228: if (result != OK)
 17154  0054AE  51E6               	movf	LORAWAN_Send@result& (0+255),w,b
 17155  0054B0  E001               	bz	l13680
 17156  0054B2  0012               	return	
 17157  0054B4                     l13680:
 17158                           
 17159                           ; BSR set to: 0
 17160                           ;lorawan.c: 232: else
 17161                           ;lorawan.c: 233: {
 17162                           ;lorawan.c: 234: if (CLASS_C == loRa.deviceClass)
 17163  0054B4  0E02               	movlw	2
 17164  0054B6  0102               	movlb	2	; () banked
 17165  0054B8  1912               	xorwf	(_loRa+18)& (0+255),w,b
 17166  0054BA  E102               	bnz	l13684
 17167                           
 17168                           ; BSR set to: 2
 17169                           ;lorawan.c: 235: {
 17170                           ;lorawan.c: 236: RADIO_ReceiveStop();
 17171  0054BC  EC08  F03A         	call	_RADIO_ReceiveStop	;wreg free
 17172  0054C0                     l13684:
 17173                           
 17174                           ;lorawan.c: 237: }
 17175                           ;lorawan.c: 239: AssemblePacket (confirmed, port, buffer, bufferLength);
 17176  0054C0  C0E1  F166         	movff	LORAWAN_Send@port,AssemblePacket@port
 17177  0054C4  C0E2  F167         	movff	LORAWAN_Send@buffer,AssemblePacket@buffer
 17178  0054C8  C0E3  F168         	movff	LORAWAN_Send@buffer+1,AssemblePacket@buffer+1
 17179  0054CC  C0E4  F169         	movff	LORAWAN_Send@bufferLength,AssemblePacket@bufferLength
 17180  0054D0  0101               	movlb	1	; () banked
 17181  0054D2  6B6A               	clrf	(AssemblePacket@bufferLength+1)& (0+255),b
 17182  0054D4  0100               	movlb	0	; () banked
 17183  0054D6  51E7               	movf	LORAWAN_Send@confirmed& (0+255),w,b
 17184  0054D8  ECA3  F00D         	call	_AssemblePacket
 17185                           
 17186                           ; BSR set to: 2
 17187                           ;lorawan.c: 241: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
 17188  0054DC  0EF0               	movlw	low (_macBuffer+16)
 17189  0054DE  0100               	movlb	0	; () banked
 17190  0054E0  6F94               	movwf	RADIO_Transmit@buffer& (0+255),b
 17191  0054E2  0E04               	movlw	high (_macBuffer+16)
 17192  0054E4  6F95               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
 17193  0054E6  C2D4  F096         	movff	_loRa+212,RADIO_Transmit@bufferLen
 17194  0054EA  ECF9  F017         	call	_RADIO_Transmit	;wreg free
 17195  0054EE  5194               	movf	?_RADIO_Transmit& (0+255),w,b
 17196  0054F0  1195               	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 17197  0054F2  A4D8               	btfss	status,2,c
 17198  0054F4  0012               	return	
 17199                           
 17200                           ; BSR set to: 0
 17201                           ;lorawan.c: 242: {
 17202                           ;lorawan.c: 243: loRa.fCntUp.value ++;
 17203  0054F6  0102               	movlb	2	; () banked
 17204  0054F8  2B06               	incf	(_loRa+6)& (0+255),f,b
 17205  0054FA  0E00               	movlw	0
 17206  0054FC  2307               	addwfc	(_loRa+7)& (0+255),f,b
 17207  0054FE  2308               	addwfc	(_loRa+8)& (0+255),f,b
 17208  005500  2309               	addwfc	(_loRa+9)& (0+255),f,b
 17209                           
 17210                           ;lorawan.c: 245: if (CNF == confirmed)
 17211  005502  0100               	movlb	0	; () banked
 17212  005504  05E7               	decf	LORAWAN_Send@confirmed& (0+255),w,b
 17213  005506  E102               	bnz	l1695
 17214                           
 17215                           ; BSR set to: 0
 17216                           ;lorawan.c: 246: {
 17217                           ;lorawan.c: 247: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 1;
 17218  005508  0102               	movlb	2	; () banked
 17219  00550A  8100               	bsf	_loRa& (0+255),0,b
 17220  00550C                     l1695:
 17221                           
 17222                           ;lorawan.c: 248: }
 17223                           ;lorawan.c: 249: loRa.lorawanMacStatus.synchronization = 1;
 17224  00550C  0102               	movlb	2	; () banked
 17225  00550E  8B00               	bsf	_loRa& (0+255),5,b
 17226                           
 17227                           ; BSR set to: 2
 17228                           ;lorawan.c: 250: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
 17229  005510  5102               	movf	(_loRa+2)& (0+255),w,b
 17230  005512  0BF0               	andlw	-16
 17231  005514  0901               	iorlw	1
 17232  005516  6F02               	movwf	(_loRa+2)& (0+255),b
 17233                           
 17234                           ;lorawan.c: 251: }
 17235  005518  0012               	return		;funcret
 17236  00551A                     __end_of_LORAWAN_Send:
 17237                           	opt stack 0
 17238                           tosu	equ	0xFFF
 17239                           tosh	equ	0xFFE
 17240                           tosl	equ	0xFFD
 17241                           pclath	equ	0xFFA
 17242                           tblptru	equ	0xFF8
 17243                           tblptrh	equ	0xFF7
 17244                           tblptrl	equ	0xFF6
 17245                           tablat	equ	0xFF5
 17246                           prodh	equ	0xFF4
 17247                           prodl	equ	0xFF3
 17248                           intcon	equ	0xFF2
 17249                           intcon2	equ	0xFF1
 17250                           intcon3	equ	0xFF0
 17251                           indf0	equ	0xFEF
 17252                           postinc0	equ	0xFEE
 17253                           fsr0h	equ	0xFEA
 17254                           fsr0l	equ	0xFE9
 17255                           wreg	equ	0xFE8
 17256                           postinc1	equ	0xFE6
 17257                           postdec1	equ	0xFE5
 17258                           plusw1	equ	0xFE3
 17259                           fsr1h	equ	0xFE2
 17260                           fsr1l	equ	0xFE1
 17261                           indf2	equ	0xFDF
 17262                           postinc2	equ	0xFDE
 17263                           postdec2	equ	0xFDD
 17264                           plusw2	equ	0xFDB
 17265                           fsr2h	equ	0xFDA
 17266                           fsr2l	equ	0xFD9
 17267                           status	equ	0xFD8
 17268                           
 17269 ;; *************** function _LORAWAN_GetMaxPayloadSize *****************
 17270 ;; Defined at:
 17271 ;;		line 1556 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 17272 ;; Parameters:    Size  Location     Type
 17273 ;;		None
 17274 ;; Auto vars:     Size  Location     Type
 17275 ;;  result          1   14[BANK0 ] unsigned char 
 17276 ;;  macCommandsL    1   13[BANK0 ] unsigned char 
 17277 ;; Return value:  Size  Location     Type
 17278 ;;                  1    wreg      unsigned char 
 17279 ;; Registers used:
 17280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17281 ;; Tracked objects:
 17282 ;;		On entry : D/2
 17283 ;;		On exit  : F/0
 17284 ;;		Unchanged: 0/0
 17285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17287 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17288 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17289 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17290 ;;Total ram usage:        3 bytes
 17291 ;; Hardware stack levels used:    1
 17292 ;; Hardware stack levels required when called:    8
 17293 ;; This function calls:
 17294 ;;		_CountfOptsLength
 17295 ;; This function is called by:
 17296 ;;		_LORAWAN_Send
 17297 ;;		_AckRetransmissionCallback
 17298 ;; This function uses a non-reentrant model
 17299 ;;
 17300                           
 17301                           	psect	text92
 17302  006CCA                     __ptext92:
 17303                           	opt stack 0
 17304  006CCA                     _LORAWAN_GetMaxPayloadSize:
 17305                           	opt stack 20
 17306                           
 17307                           ;lorawan.c: 1559: uint8_t macCommandsLength;
 17308                           ;lorawan.c: 1561: macCommandsLength = CountfOptsLength();
 17309                           
 17310                           ;incstack = 0
 17311  006CCA  EC51  F02C         	call	_CountfOptsLength	;wreg free
 17312  006CCE  6F6D               	movwf	LORAWAN_GetMaxPayloadSize@macCommandsLength& (0+255),b
 17313                           
 17314                           ; BSR set to: 0
 17315                           ;lorawan.c: 1563: if (loRa.crtMacCmdIndex == 0)
 17316  006CD0  0102               	movlb	2	; () banked
 17317  006CD2  51A7               	movf	(_loRa+167)& (0+255),w,b
 17318  006CD4  E10A               	bnz	l13362
 17319                           
 17320                           ; BSR set to: 2
 17321                           ;lorawan.c: 1564: {
 17322                           ;lorawan.c: 1565: result = maxPayloadSize[loRa.currentDataRate];
 17323  006CD6  0E6D               	movlw	low _maxPayloadSize
 17324  006CD8  25DF               	addwf	(_loRa+223)& (0+255),w,b
 17325  006CDA  6EF6               	movwf	tblptrl,c
 17326  006CDC  6AF7               	clrf	tblptrh,c
 17327  006CDE  0E7F               	movlw	high _maxPayloadSize
 17328  006CE0  22F7               	addwfc	tblptrh,f,c
 17329  006CE2                     	if	0	;There are less than 3 active tblptr bytes
 17330  006CE2                     	endif
 17331  006CE2  0008               	tblrd		*
 17332  006CE4  CFF5 F06E          	movff	tablat,LORAWAN_GetMaxPayloadSize@result
 17333                           
 17334                           ;lorawan.c: 1566: }
 17335  006CE8  D00D               	goto	l13364
 17336  006CEA                     l13362:
 17337                           
 17338                           ; BSR set to: 2
 17339                           ;lorawan.c: 1567: else
 17340                           ;lorawan.c: 1568: {
 17341                           ;lorawan.c: 1569: result = maxPayloadSize[loRa.currentDataRate] - macCommandsLength ;
 17342  006CEA  0E6D               	movlw	low _maxPayloadSize
 17343  006CEC  25DF               	addwf	(_loRa+223)& (0+255),w,b
 17344  006CEE  6EF6               	movwf	tblptrl,c
 17345  006CF0  6AF7               	clrf	tblptrh,c
 17346  006CF2  0E7F               	movlw	high _maxPayloadSize
 17347  006CF4  22F7               	addwfc	tblptrh,f,c
 17348  006CF6                     	if	0	;There are less than 3 active tblptr bytes
 17349  006CF6                     	endif
 17350  006CF6  0008               	tblrd		*
 17351  006CF8  CFF5 F06C          	movff	tablat,??_LORAWAN_GetMaxPayloadSize
 17352  006CFC  0100               	movlb	0	; () banked
 17353  006CFE  516D               	movf	LORAWAN_GetMaxPayloadSize@macCommandsLength& (0+255),w,b
 17354  006D00  5D6C               	subwf	??_LORAWAN_GetMaxPayloadSize& (0+255),w,b
 17355  006D02  6F6E               	movwf	LORAWAN_GetMaxPayloadSize@result& (0+255),b
 17356  006D04                     l13364:
 17357                           
 17358                           ;lorawan.c: 1570: }
 17359                           ;lorawan.c: 1572: return result;
 17360  006D04  0100               	movlb	0	; () banked
 17361  006D06  516E               	movf	LORAWAN_GetMaxPayloadSize@result& (0+255),w,b
 17362                           
 17363                           ; BSR set to: 0
 17364  006D08  0012               	return		;funcret
 17365  006D0A                     __end_of_LORAWAN_GetMaxPayloadSize:
 17366                           	opt stack 0
 17367                           tosu	equ	0xFFF
 17368                           tosh	equ	0xFFE
 17369                           tosl	equ	0xFFD
 17370                           pclath	equ	0xFFA
 17371                           tblptru	equ	0xFF8
 17372                           tblptrh	equ	0xFF7
 17373                           tblptrl	equ	0xFF6
 17374                           tablat	equ	0xFF5
 17375                           prodh	equ	0xFF4
 17376                           prodl	equ	0xFF3
 17377                           intcon	equ	0xFF2
 17378                           intcon2	equ	0xFF1
 17379                           intcon3	equ	0xFF0
 17380                           indf0	equ	0xFEF
 17381                           postinc0	equ	0xFEE
 17382                           fsr0h	equ	0xFEA
 17383                           fsr0l	equ	0xFE9
 17384                           wreg	equ	0xFE8
 17385                           postinc1	equ	0xFE6
 17386                           postdec1	equ	0xFE5
 17387                           plusw1	equ	0xFE3
 17388                           fsr1h	equ	0xFE2
 17389                           fsr1l	equ	0xFE1
 17390                           indf2	equ	0xFDF
 17391                           postinc2	equ	0xFDE
 17392                           postdec2	equ	0xFDD
 17393                           plusw2	equ	0xFDB
 17394                           fsr2h	equ	0xFDA
 17395                           fsr2l	equ	0xFD9
 17396                           status	equ	0xFD8
 17397                           
 17398 ;; *************** function _AssemblePacket *****************
 17399 ;; Defined at:
 17400 ;;		line 1672 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 17401 ;; Parameters:    Size  Location     Type
 17402 ;;  confirmed       1    wreg     unsigned char 
 17403 ;;  port            1  102[BANK1 ] unsigned char 
 17404 ;;  buffer          2  103[BANK1 ] PTR unsigned char 
 17405 ;;		 -> payload(2), NULL(0), 
 17406 ;;  bufferLength    2  105[BANK1 ] unsigned int 
 17407 ;; Auto vars:     Size  Location     Type
 17408 ;;  confirmed       1  124[BANK0 ] unsigned char 
 17409 ;;  bufferIndex     1  128[BANK0 ] unsigned char 
 17410 ;;  macCmdIdx       1  127[BANK0 ] unsigned char 
 17411 ;;  fCtrl           1  126[BANK0 ] struct .
 17412 ;;  mhdr            1  125[BANK0 ] struct .
 17413 ;; Return value:  Size  Location     Type
 17414 ;;                  1    wreg      void 
 17415 ;; Registers used:
 17416 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17417 ;; Tracked objects:
 17418 ;;		On entry : F/0
 17419 ;;		On exit  : F/2
 17420 ;;		Unchanged: 0/0
 17421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17422 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17423 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17424 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17425 ;;      Totals:         0       7       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17426 ;;Total ram usage:       12 bytes
 17427 ;; Hardware stack levels used:    1
 17428 ;; Hardware stack levels required when called:   12
 17429 ;; This function calls:
 17430 ;;		_AESCmac
 17431 ;;		_AssembleEncryptionBlock
 17432 ;;		_CountfOptsLength
 17433 ;;		_EncryptFRMPayload
 17434 ;;		_FindSmallestDataRate
 17435 ;;		_IncludeMacCommandsResponse
 17436 ;;		_memcpy
 17437 ;;		_memset
 17438 ;; This function is called by:
 17439 ;;		_LORAWAN_Send
 17440 ;; This function uses a non-reentrant model
 17441 ;;
 17442                           
 17443                           	psect	text93
 17444  001B46                     __ptext93:
 17445                           	opt stack 0
 17446  001B46                     _AssemblePacket:
 17447                           	opt stack 16
 17448                           
 17449                           ; BSR set to: 0
 17450                           ;incstack = 0
 17451                           ;AssemblePacket@confirmed stored from wreg
 17452  001B46  6FDC               	movwf	AssemblePacket@confirmed& (0+255),b
 17453                           
 17454                           ;lorawan.c: 1674: Mhdr_t mhdr;
 17455                           ;lorawan.c: 1675: uint8_t bufferIndex = 16;
 17456  001B48  0E10               	movlw	16
 17457  001B4A  0100               	movlb	0	; () banked
 17458  001B4C  6FE0               	movwf	AssemblePacket@bufferIndex& (0+255),b
 17459                           
 17460                           ; BSR set to: 0
 17461                           ;lorawan.c: 1676: FCtrl_t fCtrl;
 17462                           ;lorawan.c: 1677: uint8_t macCmdIdx = 0;
 17463  001B4E  6BDF               	clrf	AssemblePacket@macCmdIdx& (0+255),b
 17464                           
 17465                           ; BSR set to: 0
 17466                           ;lorawan.c: 1679: memset (&mhdr, 0, sizeof (mhdr) );
 17467  001B50  0EDD               	movlw	low AssemblePacket@mhdr
 17468  001B52  6F64               	movwf	memset@p1& (0+255),b
 17469  001B54  6B65               	clrf	(memset@p1+1)& (0+255),b
 17470  001B56  6B67               	clrf	(memset@c+1)& (0+255),b
 17471  001B58  6B66               	clrf	memset@c& (0+255),b
 17472  001B5A  6B69               	clrf	(memset@n+1)& (0+255),b
 17473  001B5C  0E01               	movlw	1
 17474  001B5E  6F68               	movwf	memset@n& (0+255),b
 17475  001B60  ECE0  F038         	call	_memset	;wreg free
 17476                           
 17477                           ; BSR set to: 0
 17478                           ;lorawan.c: 1680: memset (&macBuffer[0], 0, sizeof (macBuffer) );
 17479  001B64  0EE0               	movlw	low _macBuffer
 17480  001B66  6F64               	movwf	memset@p1& (0+255),b
 17481  001B68  0E04               	movlw	high _macBuffer
 17482  001B6A  6F65               	movwf	(memset@p1+1)& (0+255),b
 17483  001B6C  6B67               	clrf	(memset@c+1)& (0+255),b
 17484  001B6E  6B66               	clrf	memset@c& (0+255),b
 17485  001B70  0E01               	movlw	1
 17486  001B72  6F69               	movwf	(memset@n+1)& (0+255),b
 17487  001B74  0E0F               	movlw	15
 17488  001B76  6F68               	movwf	memset@n& (0+255),b
 17489  001B78  ECE0  F038         	call	_memset	;wreg free
 17490                           
 17491                           ; BSR set to: 0
 17492                           ;lorawan.c: 1681: memset (aesBuffer, 0, sizeof (aesBuffer) );
 17493  001B7C  0EAB               	movlw	low _aesBuffer
 17494  001B7E  6F64               	movwf	memset@p1& (0+255),b
 17495  001B80  0E01               	movlw	high _aesBuffer
 17496  001B82  6F65               	movwf	(memset@p1+1)& (0+255),b
 17497  001B84  6B67               	clrf	(memset@c+1)& (0+255),b
 17498  001B86  6B66               	clrf	memset@c& (0+255),b
 17499  001B88  6B69               	clrf	(memset@n+1)& (0+255),b
 17500  001B8A  0E10               	movlw	16
 17501  001B8C  6F68               	movwf	memset@n& (0+255),b
 17502  001B8E  ECE0  F038         	call	_memset	;wreg free
 17503                           
 17504                           ; BSR set to: 0
 17505                           ;lorawan.c: 1683: if (confirmed == 1)
 17506  001B92  05DC               	decf	AssemblePacket@confirmed& (0+255),w,b
 17507  001B94  E107               	bnz	l13384
 17508                           
 17509                           ; BSR set to: 0
 17510                           ;lorawan.c: 1684: {
 17511                           ;lorawan.c: 1685: mhdr.bits.mType = FRAME_TYPE_DATA_CONFIRMED_UP;
 17512  001B96  51DD               	movf	AssemblePacket@mhdr& (0+255),w,b
 17513  001B98  0B1F               	andlw	-225
 17514  001B9A  0980               	iorlw	128
 17515  001B9C  6FDD               	movwf	AssemblePacket@mhdr& (0+255),b
 17516                           
 17517                           ; BSR set to: 0
 17518                           ;lorawan.c: 1686: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 1;
 17519  001B9E  0102               	movlb	2	; () banked
 17520  001BA0  8100               	bsf	_loRa& (0+255),0,b
 17521                           
 17522                           ;lorawan.c: 1687: }
 17523  001BA2  D004               	goto	l2180
 17524  001BA4                     l13384:
 17525                           
 17526                           ; BSR set to: 0
 17527                           ;lorawan.c: 1688: else
 17528                           ;lorawan.c: 1689: {
 17529                           ;lorawan.c: 1690: mhdr.bits.mType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 17530  001BA4  51DD               	movf	AssemblePacket@mhdr& (0+255),w,b
 17531  001BA6  0B1F               	andlw	-225
 17532  001BA8  0940               	iorlw	64
 17533  001BAA  6FDD               	movwf	AssemblePacket@mhdr& (0+255),b
 17534  001BAC                     l2180:
 17535                           
 17536                           ;lorawan.c: 1691: }
 17537                           ;lorawan.c: 1692: mhdr.bits.major = 0;
 17538  001BAC  0EFC               	movlw	-4
 17539  001BAE  0100               	movlb	0	; () banked
 17540  001BB0  17DD               	andwf	AssemblePacket@mhdr& (0+255),f,b
 17541                           
 17542                           ;lorawan.c: 1693: mhdr.bits.rfu = 0;
 17543  001BB2  0EE3               	movlw	-29
 17544  001BB4  17DD               	andwf	AssemblePacket@mhdr& (0+255),f,b
 17545                           
 17546                           ; BSR set to: 0
 17547                           ;lorawan.c: 1694: macBuffer[bufferIndex++] = mhdr.value;
 17548  001BB6  0EE0               	movlw	low _macBuffer
 17549  001BB8  25E0               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 17550  001BBA  6ED9               	movwf	fsr2l,c
 17551  001BBC  6ADA               	clrf	fsr2h,c
 17552  001BBE  0E04               	movlw	high _macBuffer
 17553  001BC0  22DA               	addwfc	fsr2h,f,c
 17554  001BC2  C0DD  FFDF         	movff	AssemblePacket@mhdr,indf2
 17555                           
 17556                           ; BSR set to: 0
 17557  001BC6  2BE0               	incf	AssemblePacket@bufferIndex& (0+255),f,b
 17558                           
 17559                           ; BSR set to: 0
 17560                           ;lorawan.c: 1696: memcpy (&macBuffer[bufferIndex], loRa.activationParameters.deviceAddre
      +                          ss.buffer, sizeof (loRa.activationParameters.deviceAddress.buffer) );
 17561  001BC8  0EE0               	movlw	low _macBuffer
 17562  001BCA  25E0               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 17563  001BCC  6F64               	movwf	memcpy@d1& (0+255),b
 17564  001BCE  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 17565  001BD0  0E04               	movlw	high _macBuffer
 17566  001BD2  2365               	addwfc	(memcpy@d1+1)& (0+255),f,b
 17567  001BD4  0E1E               	movlw	low (_loRa+30)
 17568  001BD6  6F66               	movwf	memcpy@s1& (0+255),b
 17569  001BD8  0E02               	movlw	high (_loRa+30)
 17570  001BDA  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 17571  001BDC  6B69               	clrf	(memcpy@n+1)& (0+255),b
 17572  001BDE  0E04               	movlw	4
 17573  001BE0  6F68               	movwf	memcpy@n& (0+255),b
 17574  001BE2  ECCA  F033         	call	_memcpy	;wreg free
 17575                           
 17576                           ; BSR set to: 0
 17577                           ;lorawan.c: 1697: bufferIndex = bufferIndex + sizeof(loRa.activationParameters.deviceAdd
      +                          ress.buffer);
 17578  001BE6  0E04               	movlw	4
 17579  001BE8  27E0               	addwf	AssemblePacket@bufferIndex& (0+255),f,b
 17580                           
 17581                           ; BSR set to: 0
 17582                           ;lorawan.c: 1699: fCtrl.value = 0;
 17583  001BEA  6BDE               	clrf	AssemblePacket@fCtrl& (0+255),b
 17584                           
 17585                           ; BSR set to: 0
 17586                           ;lorawan.c: 1701: if (loRa.macStatus.adr == 1)
 17587  001BEC  0102               	movlb	2	; () banked
 17588  001BEE  AD02               	btfss	(_loRa+2)& (0+255),6,b
 17589  001BF0  D030               	goto	l2181
 17590                           
 17591                           ; BSR set to: 2
 17592                           ;lorawan.c: 1702: {
 17593                           ;lorawan.c: 1703: fCtrl.adr = 1;
 17594  001BF2  0100               	movlb	0	; () banked
 17595  001BF4  8FDE               	bsf	AssemblePacket@fCtrl& (0+255),7,b
 17596                           
 17597                           ; BSR set to: 0
 17598                           ;lorawan.c: 1704: if(loRa.currentDataRate > loRa.minDataRate)
 17599  001BF6  0102               	movlb	2	; () banked
 17600  001BF8  51DF               	movf	(_loRa+223)& (0+255),w,b
 17601  001BFA  5DEB               	subwf	(_loRa+235)& (0+255),w,b
 17602  001BFC  E229               	bc	l2182
 17603                           
 17604                           ; BSR set to: 2
 17605                           ;lorawan.c: 1705: {
 17606                           ;lorawan.c: 1706: fCtrl.adrAckReq = 1;
 17607  001BFE  0100               	movlb	0	; () banked
 17608  001C00  8DDE               	bsf	AssemblePacket@fCtrl& (0+255),6,b
 17609                           
 17610                           ;lorawan.c: 1707: loRa.lorawanMacStatus.adrAckRequest = 1;
 17611  001C02  0102               	movlb	2	; () banked
 17612  001C04  8900               	bsf	_loRa& (0+255),4,b
 17613                           
 17614                           ; BSR set to: 2
 17615                           ;lorawan.c: 1708: loRa.adrAckCnt ++;
 17616  001C06  4BD0               	infsnz	(_loRa+208)& (0+255),f,b
 17617  001C08  2BD1               	incf	(_loRa+209)& (0+255),f,b
 17618                           
 17619                           ; BSR set to: 2
 17620                           ;lorawan.c: 1710: if ( loRa.adrAckCnt == loRa.protocolParameters.adrAckLimit )
 17621  001C0A  51A2               	movf	(_loRa+162)& (0+255),w,b
 17622  001C0C  19D0               	xorwf	(_loRa+208)& (0+255),w,b
 17623  001C0E  11D1               	iorwf	(_loRa+209)& (0+255),w,b
 17624  001C10  E102               	bnz	l13410
 17625                           
 17626                           ; BSR set to: 2
 17627                           ;lorawan.c: 1711: {
 17628                           ;lorawan.c: 1712: loRa.counterAdrAckDelay = 0;
 17629  001C12  6BEE               	clrf	(_loRa+238)& (0+255),b
 17630  001C14  D01A               	goto	L9
 17631  001C16                     l13410:
 17632                           
 17633                           ; BSR set to: 2
 17634                           ;lorawan.c: 1716: else
 17635                           ;lorawan.c: 1717: {
 17636                           ;lorawan.c: 1718: if (loRa.adrAckCnt > loRa.protocolParameters.adrAckLimit)
 17637  001C16  51A2               	movf	(_loRa+162)& (0+255),w,b
 17638  001C18  0100               	movlb	0	; () banked
 17639  001C1A  6FDA               	movwf	??_AssemblePacket& (0+255),b
 17640  001C1C  6BDB               	clrf	(??_AssemblePacket+1)& (0+255),b
 17641  001C1E  0102               	movlb	2	; () banked
 17642  001C20  51D0               	movf	(_loRa+208)& (0+255),w,b
 17643  001C22  0100               	movlb	0	; () banked
 17644  001C24  5DDA               	subwf	??_AssemblePacket& (0+255),w,b
 17645  001C26  0102               	movlb	2	; () banked
 17646  001C28  51D1               	movf	(_loRa+209)& (0+255),w,b
 17647  001C2A  0100               	movlb	0	; () banked
 17648  001C2C  59DB               	subwfb	(??_AssemblePacket+1)& (0+255),w,b
 17649  001C2E  E20E               	bc	l2185
 17650                           
 17651                           ; BSR set to: 0
 17652                           ;lorawan.c: 1719: {
 17653                           ;lorawan.c: 1721: loRa.counterAdrAckDelay ++ ;
 17654  001C30  0102               	movlb	2	; () banked
 17655  001C32  2BEE               	incf	(_loRa+238)& (0+255),f,b
 17656                           
 17657                           ; BSR set to: 2
 17658                           ;lorawan.c: 1724: if (loRa.counterAdrAckDelay > loRa.protocolParameters.adrAckDelay)
 17659  001C34  51EE               	movf	(_loRa+238)& (0+255),w,b
 17660  001C36  5DA3               	subwf	(_loRa+163)& (0+255),w,b
 17661  001C38  E20C               	bc	l2181
 17662                           
 17663                           ; BSR set to: 2
 17664                           ;lorawan.c: 1725: {
 17665                           ;lorawan.c: 1726: loRa.counterAdrAckDelay = 0;
 17666  001C3A  6BEE               	clrf	(_loRa+238)& (0+255),b
 17667                           
 17668                           ; BSR set to: 2
 17669                           ;lorawan.c: 1728: if(0 == FindSmallestDataRate())
 17670  001C3C  EC00  F02D         	call	_FindSmallestDataRate	;wreg free
 17671  001C40  0900               	iorlw	0
 17672  001C42  E107               	bnz	l2181
 17673                           
 17674                           ; BSR set to: 0
 17675                           ;lorawan.c: 1729: {
 17676                           ;lorawan.c: 1731: loRa.adrAckCnt = 0;
 17677  001C44  0102               	movlb	2	; () banked
 17678  001C46  6BD0               	clrf	(_loRa+208)& (0+255),b
 17679  001C48  6BD1               	clrf	(_loRa+209)& (0+255),b
 17680  001C4A                     L9:
 17681                           
 17682                           ;lorawan.c: 1732: fCtrl.adrAckReq = 0;
 17683  001C4A  0100               	movlb	0	; () banked
 17684  001C4C                     l2185:
 17685                           
 17686                           ; BSR set to: 0
 17687                           ;lorawan.c: 1737: else
 17688                           ;lorawan.c: 1738: {
 17689                           ;lorawan.c: 1739: fCtrl.adrAckReq = 0;
 17690  001C4C  9DDE               	bcf	AssemblePacket@fCtrl& (0+255),6,b
 17691                           
 17692                           ;lorawan.c: 1740: loRa.lorawanMacStatus.adrAckRequest = 0;
 17693  001C4E  0102               	movlb	2	; () banked
 17694  001C50                     l2182:
 17695                           
 17696                           ; BSR set to: 2
 17697                           ;lorawan.c: 1744: else
 17698                           ;lorawan.c: 1745: {
 17699                           ;lorawan.c: 1746: loRa.lorawanMacStatus.adrAckRequest = 0;
 17700  001C50  9900               	bcf	_loRa& (0+255),4,b
 17701  001C52                     l2181:
 17702                           
 17703                           ;lorawan.c: 1747: }
 17704                           ;lorawan.c: 1748: }
 17705                           ;lorawan.c: 1750: if (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1)
 17706  001C52  0102               	movlb	2	; () banked
 17707  001C54  A300               	btfss	_loRa& (0+255),1,b
 17708  001C56  D004               	goto	l2190
 17709                           
 17710                           ; BSR set to: 2
 17711                           ;lorawan.c: 1751: {
 17712                           ;lorawan.c: 1752: fCtrl.ack = 1;
 17713  001C58  0100               	movlb	0	; () banked
 17714  001C5A  8BDE               	bsf	AssemblePacket@fCtrl& (0+255),5,b
 17715                           
 17716                           ;lorawan.c: 1753: loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage = 0;
 17717  001C5C  0102               	movlb	2	; () banked
 17718  001C5E  9300               	bcf	_loRa& (0+255),1,b
 17719  001C60                     l2190:
 17720                           
 17721                           ; BSR set to: 2
 17722                           ;lorawan.c: 1754: }
 17723                           ;lorawan.c: 1756: fCtrl.fPending = 0;
 17724  001C60  0100               	movlb	0	; () banked
 17725  001C62  99DE               	bcf	AssemblePacket@fCtrl& (0+255),4,b
 17726                           
 17727                           ; BSR set to: 0
 17728                           ;lorawan.c: 1758: if ( (loRa.crtMacCmdIndex == 0) || (bufferLength == 0) )
 17729  001C64  0102               	movlb	2	; () banked
 17730  001C66  51A7               	movf	(_loRa+167)& (0+255),w,b
 17731  001C68  E004               	bz	l13428
 17732                           
 17733                           ; BSR set to: 2
 17734  001C6A  0101               	movlb	1	; () banked
 17735  001C6C  5169               	movf	AssemblePacket@bufferLength& (0+255),w,b
 17736  001C6E  116A               	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 17737  001C70  E104               	bnz	l13430
 17738  001C72                     l13428:
 17739                           
 17740                           ;lorawan.c: 1759: {
 17741                           ;lorawan.c: 1760: fCtrl.fOptsLen = 0;
 17742  001C72  0EF0               	movlw	-16
 17743  001C74  0100               	movlb	0	; () banked
 17744  001C76  17DE               	andwf	AssemblePacket@fCtrl& (0+255),f,b
 17745                           
 17746                           ;lorawan.c: 1761: }
 17747  001C78  D007               	goto	l13432
 17748  001C7A                     l13430:
 17749                           
 17750                           ; BSR set to: 1
 17751                           ;lorawan.c: 1763: else
 17752                           ;lorawan.c: 1764: {
 17753                           ;lorawan.c: 1765: fCtrl.fOptsLen = CountfOptsLength();
 17754  001C7A  EC51  F02C         	call	_CountfOptsLength	;wreg free
 17755  001C7E  6FDA               	movwf	??_AssemblePacket& (0+255),b
 17756  001C80  19DE               	xorwf	AssemblePacket@fCtrl& (0+255),w,b
 17757  001C82  0BF0               	andlw	-16
 17758  001C84  19DA               	xorwf	??_AssemblePacket& (0+255),w,b
 17759  001C86  6FDE               	movwf	AssemblePacket@fCtrl& (0+255),b
 17760  001C88                     l13432:
 17761                           
 17762                           ; BSR set to: 0
 17763                           ;lorawan.c: 1766: }
 17764                           ;lorawan.c: 1767: macBuffer[bufferIndex++] = fCtrl.value;
 17765  001C88  0EE0               	movlw	low _macBuffer
 17766  001C8A  25E0               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 17767  001C8C  6ED9               	movwf	fsr2l,c
 17768  001C8E  6ADA               	clrf	fsr2h,c
 17769  001C90  0E04               	movlw	high _macBuffer
 17770  001C92  22DA               	addwfc	fsr2h,f,c
 17771  001C94  C0DE  FFDF         	movff	AssemblePacket@fCtrl,indf2
 17772                           
 17773                           ; BSR set to: 0
 17774  001C98  2BE0               	incf	AssemblePacket@bufferIndex& (0+255),f,b
 17775                           
 17776                           ; BSR set to: 0
 17777                           ;lorawan.c: 1769: memcpy (&macBuffer[bufferIndex], &loRa.fCntUp.members.valueLow, sizeof
      +                           (loRa.fCntUp.members.valueLow) );
 17778  001C9A  0EE0               	movlw	low _macBuffer
 17779  001C9C  25E0               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 17780  001C9E  6F64               	movwf	memcpy@d1& (0+255),b
 17781  001CA0  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 17782  001CA2  0E04               	movlw	high _macBuffer
 17783  001CA4  2365               	addwfc	(memcpy@d1+1)& (0+255),f,b
 17784  001CA6  0E06               	movlw	low (_loRa+6)
 17785  001CA8  6F66               	movwf	memcpy@s1& (0+255),b
 17786  001CAA  0E02               	movlw	high (_loRa+6)
 17787  001CAC  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 17788  001CAE  6B69               	clrf	(memcpy@n+1)& (0+255),b
 17789  001CB0  0E02               	movlw	2
 17790  001CB2  6F68               	movwf	memcpy@n& (0+255),b
 17791  001CB4  ECCA  F033         	call	_memcpy	;wreg free
 17792                           
 17793                           ; BSR set to: 0
 17794                           ;lorawan.c: 1771: bufferIndex = bufferIndex + sizeof(loRa.fCntUp.members.valueLow);
 17795  001CB8  0E02               	movlw	2
 17796  001CBA  27E0               	addwf	AssemblePacket@bufferIndex& (0+255),f,b
 17797                           
 17798                           ; BSR set to: 0
 17799                           ;lorawan.c: 1773: if ( (loRa.crtMacCmdIndex != 0) && (bufferLength != 0) )
 17800  001CBC  0102               	movlb	2	; () banked
 17801  001CBE  51A7               	movf	(_loRa+167)& (0+255),w,b
 17802  001CC0  E00F               	bz	l13446
 17803                           
 17804                           ; BSR set to: 2
 17805  001CC2  0101               	movlb	1	; () banked
 17806  001CC4  5169               	movf	AssemblePacket@bufferLength& (0+255),w,b
 17807  001CC6  116A               	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 17808  001CC8  E00B               	bz	l13446
 17809                           
 17810                           ; BSR set to: 1
 17811                           ;lorawan.c: 1774: {
 17812                           ;lorawan.c: 1775: IncludeMacCommandsResponse (macBuffer, &bufferIndex, 1);
 17813  001CCA  0EE0               	movlw	low _macBuffer
 17814  001CCC  0100               	movlb	0	; () banked
 17815  001CCE  6F64               	movwf	IncludeMacCommandsResponse@macBuffer& (0+255),b
 17816  001CD0  0E04               	movlw	high _macBuffer
 17817  001CD2  6F65               	movwf	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),b
 17818  001CD4  0EE0               	movlw	low AssemblePacket@bufferIndex
 17819  001CD6  6F66               	movwf	IncludeMacCommandsResponse@pBufferIndex& (0+255),b
 17820  001CD8  0E01               	movlw	1
 17821  001CDA  6F67               	movwf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),b
 17822  001CDC  EC22  F00F         	call	_IncludeMacCommandsResponse	;wreg free
 17823  001CE0                     l13446:
 17824                           
 17825                           ;lorawan.c: 1776: }
 17826                           ;lorawan.c: 1778: macBuffer[bufferIndex++] = port;
 17827  001CE0  0EE0               	movlw	low _macBuffer
 17828  001CE2  0100               	movlb	0	; () banked
 17829  001CE4  25E0               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 17830  001CE6  6ED9               	movwf	fsr2l,c
 17831  001CE8  6ADA               	clrf	fsr2h,c
 17832  001CEA  0E04               	movlw	high _macBuffer
 17833  001CEC  22DA               	addwfc	fsr2h,f,c
 17834  001CEE  C166  FFDF         	movff	AssemblePacket@port,indf2
 17835                           
 17836                           ; BSR set to: 0
 17837  001CF2  2BE0               	incf	AssemblePacket@bufferIndex& (0+255),f,b
 17838                           
 17839                           ; BSR set to: 0
 17840                           ;lorawan.c: 1780: if (bufferLength != 0)
 17841  001CF4  0101               	movlb	1	; () banked
 17842  001CF6  5169               	movf	AssemblePacket@bufferLength& (0+255),w,b
 17843  001CF8  116A               	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 17844  001CFA  E031               	bz	l13458
 17845                           
 17846                           ; BSR set to: 1
 17847                           ;lorawan.c: 1781: {
 17848                           ;lorawan.c: 1782: memcpy (&macBuffer[bufferIndex], buffer, bufferLength);
 17849  001CFC  0EE0               	movlw	low _macBuffer
 17850  001CFE  0100               	movlb	0	; () banked
 17851  001D00  25E0               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 17852  001D02  6F64               	movwf	memcpy@d1& (0+255),b
 17853  001D04  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 17854  001D06  0E04               	movlw	high _macBuffer
 17855  001D08  2365               	addwfc	(memcpy@d1+1)& (0+255),f,b
 17856  001D0A  C167  F066         	movff	AssemblePacket@buffer,memcpy@s1
 17857  001D0E  C168  F067         	movff	AssemblePacket@buffer+1,memcpy@s1+1
 17858  001D12  C169  F068         	movff	AssemblePacket@bufferLength,memcpy@n
 17859  001D16  C16A  F069         	movff	AssemblePacket@bufferLength+1,memcpy@n+1
 17860  001D1A  ECCA  F033         	call	_memcpy	;wreg free
 17861                           
 17862                           ; BSR set to: 0
 17863                           ;lorawan.c: 1783: EncryptFRMPayload (buffer, bufferLength, 0, loRa.fCntUp.value, loRa.ac
      +                          tivationParameters.applicationSessionKey, bufferIndex, macBuffer, 0);
 17864  001D1E  C167  F0A4         	movff	AssemblePacket@buffer,EncryptFRMPayload@buffer
 17865  001D22  C168  F0A5         	movff	AssemblePacket@buffer+1,EncryptFRMPayload@buffer+1
 17866  001D26  C169  F0A6         	movff	AssemblePacket@bufferLength,EncryptFRMPayload@bufferLength
 17867  001D2A  6BA7               	clrf	EncryptFRMPayload@dir& (0+255),b
 17868  001D2C  C206  F0A8         	movff	_loRa+6,EncryptFRMPayload@frameCounter
 17869  001D30  C207  F0A9         	movff	_loRa+7,EncryptFRMPayload@frameCounter+1
 17870  001D34  C208  F0AA         	movff	_loRa+8,EncryptFRMPayload@frameCounter+2
 17871  001D38  C209  F0AB         	movff	_loRa+9,EncryptFRMPayload@frameCounter+3
 17872  001D3C  0E32               	movlw	low (_loRa+50)
 17873  001D3E  6FAC               	movwf	EncryptFRMPayload@key& (0+255),b
 17874  001D40  0E02               	movlw	high (_loRa+50)
 17875  001D42  6FAD               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 17876  001D44  C0E0  F0AE         	movff	AssemblePacket@bufferIndex,EncryptFRMPayload@macBufferIndex
 17877  001D48  0EE0               	movlw	low _macBuffer
 17878  001D4A  6FAF               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 17879  001D4C  0E04               	movlw	high _macBuffer
 17880  001D4E  6FB0               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 17881  001D50  6BB1               	clrf	EncryptFRMPayload@multicastStatus& (0+255),b
 17882  001D52  ECC1  F020         	call	_EncryptFRMPayload	;wreg free
 17883                           
 17884                           ; BSR set to: 0
 17885                           ;lorawan.c: 1784: bufferIndex = bufferIndex + bufferLength;
 17886  001D56  0101               	movlb	1	; () banked
 17887  001D58  5169               	movf	AssemblePacket@bufferLength& (0+255),w,b
 17888  001D5A  0100               	movlb	0	; () banked
 17889  001D5C  D02A               	goto	L8
 17890  001D5E                     l13458:
 17891                           
 17892                           ; BSR set to: 1
 17893                           ;lorawan.c: 1786: else if ( (loRa.crtMacCmdIndex > 0) )
 17894  001D5E  0102               	movlb	2	; () banked
 17895  001D60  51A7               	movf	(_loRa+167)& (0+255),w,b
 17896  001D62  E028               	bz	l13464
 17897                           
 17898                           ; BSR set to: 2
 17899                           ;lorawan.c: 1787: {
 17900                           ;lorawan.c: 1790: IncludeMacCommandsResponse (radioBuffer, &macCmdIdx, 0 );
 17901  001D64  0EEF               	movlw	low _radioBuffer
 17902  001D66  0100               	movlb	0	; () banked
 17903  001D68  6F64               	movwf	IncludeMacCommandsResponse@macBuffer& (0+255),b
 17904  001D6A  0E05               	movlw	high _radioBuffer
 17905  001D6C  6F65               	movwf	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),b
 17906  001D6E  0EDF               	movlw	low AssemblePacket@macCmdIdx
 17907  001D70  6F66               	movwf	IncludeMacCommandsResponse@pBufferIndex& (0+255),b
 17908  001D72  6B67               	clrf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),b
 17909  001D74  EC22  F00F         	call	_IncludeMacCommandsResponse	;wreg free
 17910                           
 17911                           ;lorawan.c: 1791: EncryptFRMPayload (radioBuffer, macCmdIdx, 0, loRa.fCntUp.value, loRa.
      +                          activationParameters.networkSessionKey, bufferIndex, macBuffer, 0);
 17912  001D78  0EEF               	movlw	low _radioBuffer
 17913  001D7A  6FA4               	movwf	EncryptFRMPayload@buffer& (0+255),b
 17914  001D7C  0E05               	movlw	high _radioBuffer
 17915  001D7E  6FA5               	movwf	(EncryptFRMPayload@buffer+1)& (0+255),b
 17916  001D80  C0DF  F0A6         	movff	AssemblePacket@macCmdIdx,EncryptFRMPayload@bufferLength
 17917  001D84  6BA7               	clrf	EncryptFRMPayload@dir& (0+255),b
 17918  001D86  C206  F0A8         	movff	_loRa+6,EncryptFRMPayload@frameCounter
 17919  001D8A  C207  F0A9         	movff	_loRa+7,EncryptFRMPayload@frameCounter+1
 17920  001D8E  C208  F0AA         	movff	_loRa+8,EncryptFRMPayload@frameCounter+2
 17921  001D92  C209  F0AB         	movff	_loRa+9,EncryptFRMPayload@frameCounter+3
 17922  001D96  0E22               	movlw	low (_loRa+34)
 17923  001D98  6FAC               	movwf	EncryptFRMPayload@key& (0+255),b
 17924  001D9A  0E02               	movlw	high (_loRa+34)
 17925  001D9C  6FAD               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 17926  001D9E  C0E0  F0AE         	movff	AssemblePacket@bufferIndex,EncryptFRMPayload@macBufferIndex
 17927  001DA2  0EE0               	movlw	low _macBuffer
 17928  001DA4  6FAF               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 17929  001DA6  0E04               	movlw	high _macBuffer
 17930  001DA8  6FB0               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 17931  001DAA  6BB1               	clrf	EncryptFRMPayload@multicastStatus& (0+255),b
 17932  001DAC  ECC1  F020         	call	_EncryptFRMPayload	;wreg free
 17933                           
 17934                           ; BSR set to: 0
 17935                           ;lorawan.c: 1792: bufferIndex = bufferIndex + macCmdIdx;
 17936  001DB0  51DF               	movf	AssemblePacket@macCmdIdx& (0+255),w,b
 17937  001DB2                     L8:
 17938  001DB2  27E0               	addwf	AssemblePacket@bufferIndex& (0+255),f,b
 17939  001DB4                     l13464:
 17940                           
 17941                           ;lorawan.c: 1793: }
 17942                           ;lorawan.c: 1795: AssembleEncryptionBlock (0, loRa.fCntUp.value, bufferIndex - 16, 0x49,
      +                           0);
 17943  001DB4  C206  F06E         	movff	_loRa+6,AssembleEncryptionBlock@frameCounter
 17944  001DB8  C207  F06F         	movff	_loRa+7,AssembleEncryptionBlock@frameCounter+1
 17945  001DBC  C208  F070         	movff	_loRa+8,AssembleEncryptionBlock@frameCounter+2
 17946  001DC0  C209  F071         	movff	_loRa+9,AssembleEncryptionBlock@frameCounter+3
 17947  001DC4  0100               	movlb	0	; () banked
 17948  001DC6  51E0               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 17949  001DC8  0FF0               	addlw	240
 17950  001DCA  6F72               	movwf	AssembleEncryptionBlock@blockId& (0+255),b
 17951  001DCC  0E49               	movlw	73
 17952  001DCE  6F73               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 17953  001DD0  0E00               	movlw	0
 17954  001DD2  6B74               	clrf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 17955  001DD4  ECA0  F02B         	call	_AssembleEncryptionBlock
 17956                           
 17957                           ; BSR set to: 0
 17958                           ;lorawan.c: 1796: memcpy (&macBuffer[0], aesBuffer, sizeof (aesBuffer));
 17959  001DD8  0EE0               	movlw	low _macBuffer
 17960  001DDA  6F64               	movwf	memcpy@d1& (0+255),b
 17961  001DDC  0E04               	movlw	high _macBuffer
 17962  001DDE  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 17963  001DE0  0EAB               	movlw	low _aesBuffer
 17964  001DE2  6F66               	movwf	memcpy@s1& (0+255),b
 17965  001DE4  0E01               	movlw	high _aesBuffer
 17966  001DE6  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 17967  001DE8  6B69               	clrf	(memcpy@n+1)& (0+255),b
 17968  001DEA  0E10               	movlw	16
 17969  001DEC  6F68               	movwf	memcpy@n& (0+255),b
 17970  001DEE  ECCA  F033         	call	_memcpy	;wreg free
 17971                           
 17972                           ; BSR set to: 0
 17973                           ;lorawan.c: 1798: AESCmac (loRa.activationParameters.networkSessionKey, aesBuffer, macBu
      +                          ffer, bufferIndex );
 17974  001DF2  0E22               	movlw	low (_loRa+34)
 17975  001DF4  6FCC               	movwf	AESCmac@key& (0+255),b
 17976  001DF6  0E02               	movlw	high (_loRa+34)
 17977  001DF8  6FCD               	movwf	(AESCmac@key+1)& (0+255),b
 17978  001DFA  0EAB               	movlw	low _aesBuffer
 17979  001DFC  6FCE               	movwf	AESCmac@output& (0+255),b
 17980  001DFE  0E01               	movlw	high _aesBuffer
 17981  001E00  6FCF               	movwf	(AESCmac@output+1)& (0+255),b
 17982  001E02  0EE0               	movlw	low _macBuffer
 17983  001E04  6FD0               	movwf	AESCmac@input& (0+255),b
 17984  001E06  0E04               	movlw	high _macBuffer
 17985  001E08  6FD1               	movwf	(AESCmac@input+1)& (0+255),b
 17986  001E0A  C0E0  F0D2         	movff	AssemblePacket@bufferIndex,AESCmac@size
 17987  001E0E  EC15  F00C         	call	_AESCmac	;wreg free
 17988                           
 17989                           ; BSR set to: 0
 17990                           ;lorawan.c: 1800: memcpy (&macBuffer[bufferIndex], aesBuffer, 4);
 17991  001E12  0EE0               	movlw	low _macBuffer
 17992  001E14  25E0               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 17993  001E16  6F64               	movwf	memcpy@d1& (0+255),b
 17994  001E18  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 17995  001E1A  0E04               	movlw	high _macBuffer
 17996  001E1C  2365               	addwfc	(memcpy@d1+1)& (0+255),f,b
 17997  001E1E  0EAB               	movlw	low _aesBuffer
 17998  001E20  6F66               	movwf	memcpy@s1& (0+255),b
 17999  001E22  0E01               	movlw	high _aesBuffer
 18000  001E24  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 18001  001E26  6B69               	clrf	(memcpy@n+1)& (0+255),b
 18002  001E28  0E04               	movlw	4
 18003  001E2A  6F68               	movwf	memcpy@n& (0+255),b
 18004  001E2C  ECCA  F033         	call	_memcpy	;wreg free
 18005                           
 18006                           ; BSR set to: 0
 18007                           ;lorawan.c: 1801: bufferIndex = bufferIndex + 4;
 18008  001E30  0E04               	movlw	4
 18009  001E32  27E0               	addwf	AssemblePacket@bufferIndex& (0+255),f,b
 18010                           
 18011                           ; BSR set to: 0
 18012                           ;lorawan.c: 1803: loRa.lastPacketLength = bufferIndex - 16;
 18013  001E34  0EF0               	movlw	240
 18014  001E36  25E0               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 18015  001E38  0102               	movlb	2	; () banked
 18016  001E3A  6FD4               	movwf	(_loRa+212)& (0+255),b
 18017  001E3C  6BD5               	clrf	(_loRa+213)& (0+255),b
 18018  001E3E  0EFF               	movlw	255
 18019  001E40  23D5               	addwfc	(_loRa+213)& (0+255),f,b
 18020                           
 18021                           ; BSR set to: 2
 18022  001E42  0CFF               	retlw	255	;funcret
 18023  001E44                     __end_of_AssemblePacket:
 18024                           	opt stack 0
 18025                           tosu	equ	0xFFF
 18026                           tosh	equ	0xFFE
 18027                           tosl	equ	0xFFD
 18028                           pclath	equ	0xFFA
 18029                           tblptru	equ	0xFF8
 18030                           tblptrh	equ	0xFF7
 18031                           tblptrl	equ	0xFF6
 18032                           tablat	equ	0xFF5
 18033                           prodh	equ	0xFF4
 18034                           prodl	equ	0xFF3
 18035                           intcon	equ	0xFF2
 18036                           intcon2	equ	0xFF1
 18037                           intcon3	equ	0xFF0
 18038                           indf0	equ	0xFEF
 18039                           postinc0	equ	0xFEE
 18040                           fsr0h	equ	0xFEA
 18041                           fsr0l	equ	0xFE9
 18042                           wreg	equ	0xFE8
 18043                           postinc1	equ	0xFE6
 18044                           postdec1	equ	0xFE5
 18045                           plusw1	equ	0xFE3
 18046                           fsr1h	equ	0xFE2
 18047                           fsr1l	equ	0xFE1
 18048                           indf2	equ	0xFDF
 18049                           postinc2	equ	0xFDE
 18050                           postdec2	equ	0xFDD
 18051                           plusw2	equ	0xFDB
 18052                           fsr2h	equ	0xFDA
 18053                           fsr2l	equ	0xFD9
 18054                           status	equ	0xFD8
 18055                           
 18056 ;; *************** function _IncludeMacCommandsResponse *****************
 18057 ;; Defined at:
 18058 ;;		line 1845 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 18059 ;; Parameters:    Size  Location     Type
 18060 ;;  macBuffer       2    4[BANK0 ] PTR unsigned char 
 18061 ;;		 -> macBuffer(271), radioBuffer(271), 
 18062 ;;  pBufferIndex    1    6[BANK0 ] PTR unsigned char 
 18063 ;;		 -> AssemblePacket@macCmdIdx(1), AssemblePacket@bufferIndex(1), 
 18064 ;;  bIncludeInFo    1    7[BANK0 ] unsigned char 
 18065 ;; Auto vars:     Size  Location     Type
 18066 ;;  bufferIndex     1   15[BANK0 ] unsigned char 
 18067 ;;  i               1   14[BANK0 ] unsigned char 
 18068 ;; Return value:  Size  Location     Type
 18069 ;;                  1    wreg      void 
 18070 ;; Registers used:
 18071 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18072 ;; Tracked objects:
 18073 ;;		On entry : F/0
 18074 ;;		On exit  : F/0
 18075 ;;		Unchanged: 0/0
 18076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18077 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18078 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18079 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18080 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18081 ;;Total ram usage:       12 bytes
 18082 ;; Hardware stack levels used:    1
 18083 ;; Hardware stack levels required when called:    8
 18084 ;; This function calls:
 18085 ;;		_RADIO_GetPacketSnr
 18086 ;; This function is called by:
 18087 ;;		_AssemblePacket
 18088 ;; This function uses a non-reentrant model
 18089 ;;
 18090                           
 18091                           	psect	text94
 18092  001E44                     __ptext94:
 18093                           	opt stack 0
 18094  001E44                     _IncludeMacCommandsResponse:
 18095                           	opt stack 19
 18096                           
 18097                           ; BSR set to: 0
 18098                           ;lorawan.c: 1848: uint8_t bufferIndex = *pBufferIndex;
 18099                           
 18100                           ; BSR set to: 0
 18101                           
 18102                           ; BSR set to: 2
 18103                           ;incstack = 0
 18104  001E44  5166               	movf	IncludeMacCommandsResponse@pBufferIndex& (0+255),w,b
 18105  001E46  6ED9               	movwf	fsr2l,c
 18106  001E48  6ADA               	clrf	fsr2h,c
 18107  001E4A  50DF               	movf	indf2,w,c
 18108  001E4C  6F6F               	movwf	IncludeMacCommandsResponse@bufferIndex& (0+255),b
 18109                           
 18110                           ; BSR set to: 0
 18111                           ;lorawan.c: 1850: for(i = 0; i < loRa.crtMacCmdIndex ; i++)
 18112  001E4E  6B6E               	clrf	IncludeMacCommandsResponse@i& (0+255),b
 18113  001E50  D166               	goto	l13058
 18114  001E52                     l12962:
 18115                           
 18116                           ; BSR set to: 0
 18117                           ;lorawan.c: 1851: {
 18118                           ;lorawan.c: 1852: if((bIncludeInFopts) && (loRa.macCommands[i].receivedCid != 0xFF))
 18119  001E52  5167               	movf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),w,b
 18120  001E54  E101 D148          	bz	l13054
 18121                           
 18122                           ; BSR set to: 0
 18123  001E58  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18124  001E5A  0D02               	mullw	2
 18125  001E5C  0EA8               	movlw	low (_loRa+168)
 18126  001E5E  24F3               	addwf	prodl,w,c
 18127  001E60  6ED9               	movwf	fsr2l,c
 18128  001E62  0E02               	movlw	high (_loRa+168)
 18129  001E64  20F4               	addwfc	prodh,w,c
 18130  001E66  6EDA               	movwf	fsr2h,c
 18131  001E68  28DE               	incf	postinc2,w,c
 18132  001E6A  E101 D13D          	bz	l13054
 18133                           
 18134                           ; BSR set to: 0
 18135                           ;lorawan.c: 1853: {
 18136                           ;lorawan.c: 1854: if((bufferIndex - (*pBufferIndex) + macEndDevCmdReplyLen[loRa.macComma
      +                          nds[i].receivedCid - 2]) > 0x0F)
 18137  001E6E  0EFE               	movlw	254
 18138  001E70  6F68               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 18139  001E72  6969               	setf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 18140  001E74  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18141  001E76  0D02               	mullw	2
 18142  001E78  0EA8               	movlw	low (_loRa+168)
 18143  001E7A  24F3               	addwf	prodl,w,c
 18144  001E7C  6ED9               	movwf	fsr2l,c
 18145  001E7E  0E02               	movlw	high (_loRa+168)
 18146  001E80  20F4               	addwfc	prodh,w,c
 18147  001E82  6EDA               	movwf	fsr2h,c
 18148  001E84  50DF               	movf	indf2,w,c
 18149  001E86  6F6A               	movwf	(??_IncludeMacCommandsResponse+2)& (0+255),b
 18150  001E88  6B6B               	clrf	(??_IncludeMacCommandsResponse+3)& (0+255),b
 18151  001E8A  5168               	movf	??_IncludeMacCommandsResponse& (0+255),w,b
 18152  001E8C  276A               	addwf	(??_IncludeMacCommandsResponse+2)& (0+255),f,b
 18153  001E8E  5169               	movf	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 18154  001E90  236B               	addwfc	(??_IncludeMacCommandsResponse+3)& (0+255),f,b
 18155  001E92  0E94               	movlw	low _macEndDevCmdReplyLen
 18156  001E94  256A               	addwf	(??_IncludeMacCommandsResponse+2)& (0+255),w,b
 18157  001E96  6EF6               	movwf	tblptrl,c
 18158  001E98  0E7F               	movlw	high _macEndDevCmdReplyLen
 18159  001E9A  216B               	addwfc	(??_IncludeMacCommandsResponse+3)& (0+255),w,b
 18160  001E9C  6EF7               	movwf	tblptrh,c
 18161  001E9E                     	if	0	;There are less than 3 active tblptr bytes
 18162  001E9E                     	endif
 18163  001E9E  0008               	tblrd		*
 18164  001EA0  50F5               	movf	tablat,w,c
 18165  001EA2  C06F  F06C         	movff	IncludeMacCommandsResponse@bufferIndex,??_IncludeMacCommandsResponse+4
 18166  001EA6  6B6D               	clrf	(??_IncludeMacCommandsResponse+5)& (0+255),b
 18167  001EA8  276C               	addwf	(??_IncludeMacCommandsResponse+4)& (0+255),f,b
 18168  001EAA  0E00               	movlw	0
 18169  001EAC  236D               	addwfc	(??_IncludeMacCommandsResponse+5)& (0+255),f,b
 18170  001EAE  5166               	movf	IncludeMacCommandsResponse@pBufferIndex& (0+255),w,b
 18171  001EB0  6ED9               	movwf	fsr2l,c
 18172  001EB2  6ADA               	clrf	fsr2h,c
 18173  001EB4  50DF               	movf	indf2,w,c
 18174  001EB6  5F6C               	subwf	(??_IncludeMacCommandsResponse+4)& (0+255),f,b
 18175  001EB8  0E00               	movlw	0
 18176  001EBA  5B6D               	subwfb	(??_IncludeMacCommandsResponse+5)& (0+255),f,b
 18177  001EBC  BF6D               	btfsc	(??_IncludeMacCommandsResponse+5)& (0+255),7,b
 18178  001EBE  D114               	goto	l13054
 18179  001EC0  516D               	movf	(??_IncludeMacCommandsResponse+5)& (0+255),w,b
 18180  001EC2  E105               	bnz	u14510
 18181  001EC4  0E10               	movlw	16
 18182  001EC6  5D6C               	subwf	(??_IncludeMacCommandsResponse+4)& (0+255),w,b
 18183  001EC8  E301 D12F          	bc	l13060
 18184  001ECC  D10D               	goto	l13054
 18185  001ECE                     u14510:
 18186  001ECE  D12D               	goto	l13060
 18187  001ED0                     l12970:
 18188                           
 18189                           ; BSR set to: 0
 18190                           ;lorawan.c: 1862: {
 18191                           ;lorawan.c: 1863: macBuffer[bufferIndex++] = LINK_ADR_CID;
 18192  001ED0  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18193  001ED2  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18194  001ED4  6ED9               	movwf	fsr2l,c
 18195  001ED6  0E00               	movlw	0
 18196  001ED8  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18197  001EDA  6EDA               	movwf	fsr2h,c
 18198  001EDC  0E03               	movlw	3
 18199  001EDE  6EDF               	movwf	indf2,c
 18200                           
 18201                           ; BSR set to: 0
 18202  001EE0  2B6F               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18203                           
 18204                           ; BSR set to: 0
 18205                           ;lorawan.c: 1864: macBuffer[bufferIndex] = 0x00;
 18206  001EE2  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18207  001EE4  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18208  001EE6  6ED9               	movwf	fsr2l,c
 18209  001EE8  0E00               	movlw	0
 18210  001EEA  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18211  001EEC  6EDA               	movwf	fsr2h,c
 18212  001EEE  6ADF               	clrf	indf2,c
 18213                           
 18214                           ; BSR set to: 0
 18215                           ;lorawan.c: 1865: if (loRa.macCommands[i].channelMaskAck == 1)
 18216  001EF0  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18217  001EF2  0D02               	mullw	2
 18218  001EF4  0EA9               	movlw	low (_loRa+169)
 18219  001EF6  24F3               	addwf	prodl,w,c
 18220  001EF8  6ED9               	movwf	fsr2l,c
 18221  001EFA  0E02               	movlw	high (_loRa+169)
 18222  001EFC  20F4               	addwfc	prodh,w,c
 18223  001EFE  6EDA               	movwf	fsr2h,c
 18224  001F00  A0DF               	btfss	indf2,0,c
 18225  001F02  D009               	goto	l12980
 18226                           
 18227                           ; BSR set to: 2
 18228                           ;lorawan.c: 1866: {
 18229                           ;lorawan.c: 1867: macBuffer[bufferIndex] |= 0x01;
 18230  001F04  0100               	movlb	0	; () banked
 18231  001F06  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18232  001F08  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18233  001F0A  6ED9               	movwf	fsr2l,c
 18234  001F0C  0E00               	movlw	0
 18235  001F0E  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18236  001F10  6EDA               	movwf	fsr2h,c
 18237  001F12  0E00               	movlw	0
 18238  001F14  80DB               	bsf	plusw2,0,c
 18239  001F16                     l12980:
 18240                           
 18241                           ;lorawan.c: 1868: }
 18242                           ;lorawan.c: 1870: if (loRa.macCommands[i].dataRateAck == 1)
 18243  001F16  0100               	movlb	0	; () banked
 18244  001F18  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18245  001F1A  0D02               	mullw	2
 18246  001F1C  0EA9               	movlw	low (_loRa+169)
 18247  001F1E  24F3               	addwf	prodl,w,c
 18248  001F20  6ED9               	movwf	fsr2l,c
 18249  001F22  0E02               	movlw	high (_loRa+169)
 18250  001F24  20F4               	addwfc	prodh,w,c
 18251  001F26  6EDA               	movwf	fsr2h,c
 18252  001F28  A2DF               	btfss	indf2,1,c
 18253  001F2A  D008               	goto	l12984
 18254                           
 18255                           ; BSR set to: 2
 18256                           ;lorawan.c: 1871: {
 18257                           ;lorawan.c: 1872: macBuffer[bufferIndex] |= 0x02;
 18258  001F2C  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18259  001F2E  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18260  001F30  6ED9               	movwf	fsr2l,c
 18261  001F32  0E00               	movlw	0
 18262  001F34  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18263  001F36  6EDA               	movwf	fsr2h,c
 18264  001F38  0E00               	movlw	0
 18265  001F3A  82DB               	bsf	plusw2,1,c
 18266  001F3C                     l12984:
 18267                           
 18268                           ;lorawan.c: 1873: }
 18269                           ;lorawan.c: 1875: if (loRa.macCommands[i].powerAck == 1)
 18270  001F3C  0100               	movlb	0	; () banked
 18271  001F3E  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18272  001F40  0D02               	mullw	2
 18273  001F42  0EA9               	movlw	low (_loRa+169)
 18274  001F44  24F3               	addwf	prodl,w,c
 18275  001F46  6ED9               	movwf	fsr2l,c
 18276  001F48  0E02               	movlw	high (_loRa+169)
 18277  001F4A  20F4               	addwfc	prodh,w,c
 18278  001F4C  6EDA               	movwf	fsr2h,c
 18279  001F4E  A4DF               	btfss	indf2,2,c
 18280  001F50  D009               	goto	l12988
 18281  001F52                     l12986:
 18282                           
 18283                           ; BSR set to: 2
 18284                           ;lorawan.c: 1876: {
 18285                           ;lorawan.c: 1877: macBuffer[bufferIndex] |= 0x04;
 18286  001F52  0100               	movlb	0	; () banked
 18287  001F54  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18288  001F56  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18289  001F58  6ED9               	movwf	fsr2l,c
 18290  001F5A  0E00               	movlw	0
 18291  001F5C  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18292  001F5E  6EDA               	movwf	fsr2h,c
 18293  001F60  0E00               	movlw	0
 18294  001F62  84DB               	bsf	plusw2,2,c
 18295  001F64                     l12988:
 18296                           
 18297                           ;lorawan.c: 1878: }
 18298                           ;lorawan.c: 1879: bufferIndex ++;
 18299  001F64  0100               	movlb	0	; () banked
 18300  001F66  2B6F               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18301                           
 18302                           ;lorawan.c: 1880: }
 18303                           ;lorawan.c: 1881: break;
 18304  001F68  D0D9               	goto	l13056
 18305  001F6A                     l12990:
 18306                           
 18307                           ; BSR set to: 0
 18308                           ;lorawan.c: 1884: {
 18309                           ;lorawan.c: 1885: macBuffer[bufferIndex++] = RX2_SETUP_CID;
 18310  001F6A  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18311  001F6C  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18312  001F6E  6ED9               	movwf	fsr2l,c
 18313  001F70  0E00               	movlw	0
 18314  001F72  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18315  001F74  6EDA               	movwf	fsr2h,c
 18316  001F76  0E05               	movlw	5
 18317  001F78  6EDF               	movwf	indf2,c
 18318                           
 18319                           ; BSR set to: 0
 18320  001F7A  2B6F               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18321                           
 18322                           ; BSR set to: 0
 18323                           ;lorawan.c: 1886: macBuffer[bufferIndex] = 0x00;
 18324  001F7C  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18325  001F7E  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18326  001F80  6ED9               	movwf	fsr2l,c
 18327  001F82  0E00               	movlw	0
 18328  001F84  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18329  001F86  6EDA               	movwf	fsr2h,c
 18330  001F88  6ADF               	clrf	indf2,c
 18331                           
 18332                           ; BSR set to: 0
 18333                           ;lorawan.c: 1887: if (loRa.macCommands[i].channelAck == 1)
 18334  001F8A  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18335  001F8C  0D02               	mullw	2
 18336  001F8E  0EA9               	movlw	low (_loRa+169)
 18337  001F90  24F3               	addwf	prodl,w,c
 18338  001F92  6ED9               	movwf	fsr2l,c
 18339  001F94  0E02               	movlw	high (_loRa+169)
 18340  001F96  20F4               	addwfc	prodh,w,c
 18341  001F98  6EDA               	movwf	fsr2h,c
 18342  001F9A  A6DF               	btfss	indf2,3,c
 18343  001F9C  D009               	goto	l13000
 18344                           
 18345                           ; BSR set to: 2
 18346                           ;lorawan.c: 1888: {
 18347                           ;lorawan.c: 1889: macBuffer[bufferIndex] |= 0x01;
 18348  001F9E  0100               	movlb	0	; () banked
 18349  001FA0  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18350  001FA2  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18351  001FA4  6ED9               	movwf	fsr2l,c
 18352  001FA6  0E00               	movlw	0
 18353  001FA8  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18354  001FAA  6EDA               	movwf	fsr2h,c
 18355  001FAC  0E00               	movlw	0
 18356  001FAE  80DB               	bsf	plusw2,0,c
 18357  001FB0                     l13000:
 18358                           
 18359                           ;lorawan.c: 1890: }
 18360                           ;lorawan.c: 1892: if (loRa.macCommands[i].dataRateReceiveWindowAck == 1)
 18361  001FB0  0100               	movlb	0	; () banked
 18362  001FB2  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18363  001FB4  0D02               	mullw	2
 18364  001FB6  0EA9               	movlw	low (_loRa+169)
 18365  001FB8  24F3               	addwf	prodl,w,c
 18366  001FBA  6ED9               	movwf	fsr2l,c
 18367  001FBC  0E02               	movlw	high (_loRa+169)
 18368  001FBE  20F4               	addwfc	prodh,w,c
 18369  001FC0  6EDA               	movwf	fsr2h,c
 18370  001FC2  A8DF               	btfss	indf2,4,c
 18371  001FC4  D008               	goto	l13004
 18372                           
 18373                           ; BSR set to: 2
 18374                           ;lorawan.c: 1893: {
 18375                           ;lorawan.c: 1894: macBuffer[bufferIndex] |= 0x02;
 18376  001FC6  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18377  001FC8  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18378  001FCA  6ED9               	movwf	fsr2l,c
 18379  001FCC  0E00               	movlw	0
 18380  001FCE  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18381  001FD0  6EDA               	movwf	fsr2h,c
 18382  001FD2  0E00               	movlw	0
 18383  001FD4  82DB               	bsf	plusw2,1,c
 18384  001FD6                     l13004:
 18385                           
 18386                           ;lorawan.c: 1895: }
 18387                           ;lorawan.c: 1897: if (loRa.macCommands[i].rx1DROffestAck == 1)
 18388  001FD6  0100               	movlb	0	; () banked
 18389  001FD8  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18390  001FDA  0D02               	mullw	2
 18391  001FDC  0EA9               	movlw	low (_loRa+169)
 18392  001FDE  24F3               	addwf	prodl,w,c
 18393  001FE0  6ED9               	movwf	fsr2l,c
 18394  001FE2  0E02               	movlw	high (_loRa+169)
 18395  001FE4  20F4               	addwfc	prodh,w,c
 18396  001FE6  6EDA               	movwf	fsr2h,c
 18397  001FE8  AADF               	btfss	indf2,5,c
 18398  001FEA  D7BC               	goto	l12988
 18399  001FEC  D7B2               	goto	l12986
 18400  001FEE                     l13010:
 18401                           
 18402                           ; BSR set to: 0
 18403                           ;lorawan.c: 1907: {
 18404                           ;lorawan.c: 1908: macBuffer[bufferIndex++] = DEV_STATUS_CID;
 18405  001FEE  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18406  001FF0  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18407  001FF2  6ED9               	movwf	fsr2l,c
 18408  001FF4  0E00               	movlw	0
 18409  001FF6  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18410  001FF8  6EDA               	movwf	fsr2h,c
 18411  001FFA  0E06               	movlw	6
 18412  001FFC  6EDF               	movwf	indf2,c
 18413                           
 18414                           ; BSR set to: 0
 18415  001FFE  2B6F               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18416                           
 18417                           ; BSR set to: 0
 18418                           ;lorawan.c: 1909: macBuffer[bufferIndex++] = loRa.batteryLevel;
 18419  002000  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18420  002002  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18421  002004  6ED9               	movwf	fsr2l,c
 18422  002006  0E00               	movlw	0
 18423  002008  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18424  00200A  6EDA               	movwf	fsr2h,c
 18425  00200C  C2E0  FFDF         	movff	_loRa+224,indf2
 18426  002010  2B6F               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18427                           
 18428                           ; BSR set to: 0
 18429                           ;lorawan.c: 1910: if ((RADIO_GetPacketSnr() < -32) || (RADIO_GetPacketSnr() > 31))
 18430  002012  ECE6  F03B         	call	_RADIO_GetPacketSnr	;wreg free
 18431  002016  0A80               	xorlw	128
 18432  002018  0FA0               	addlw	160
 18433  00201A  E305               	bnc	l13020
 18434                           
 18435                           ; BSR set to: 1
 18436  00201C  ECE6  F03B         	call	_RADIO_GetPacketSnr	;wreg free
 18437  002020  0A80               	xorlw	128
 18438  002022  0F60               	addlw	-160
 18439  002024  E309               	bnc	l13024
 18440  002026                     l13020:
 18441                           
 18442                           ; BSR set to: 1
 18443                           ;lorawan.c: 1911: {
 18444                           ;lorawan.c: 1912: macBuffer[bufferIndex++] = 0x20;
 18445  002026  0100               	movlb	0	; () banked
 18446  002028  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18447  00202A  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18448  00202C  6ED9               	movwf	fsr2l,c
 18449  00202E  0E00               	movlw	0
 18450  002030  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18451  002032  6EDA               	movwf	fsr2h,c
 18452  002034  0E20               	movlw	32
 18453  002036  D00A               	goto	L10
 18454  002038                     l13024:
 18455                           
 18456                           ; BSR set to: 1
 18457                           ;lorawan.c: 1914: else
 18458                           ;lorawan.c: 1915: {
 18459                           ;lorawan.c: 1916: macBuffer[bufferIndex++] = ((uint8_t)RADIO_GetPacketSnr() & 0x3F);
 18460  002038  0100               	movlb	0	; () banked
 18461  00203A  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18462  00203C  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18463  00203E  6ED9               	movwf	fsr2l,c
 18464  002040  0E00               	movlw	0
 18465  002042  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18466  002044  6EDA               	movwf	fsr2h,c
 18467  002046  ECE6  F03B         	call	_RADIO_GetPacketSnr	;wreg free
 18468  00204A  0B3F               	andlw	63
 18469  00204C                     L10:
 18470  00204C  6EDF               	movwf	indf2,c
 18471  00204E  D78A               	goto	l12988
 18472  002050                     l13028:
 18473                           
 18474                           ; BSR set to: 0
 18475                           ;lorawan.c: 1922: {
 18476                           ;lorawan.c: 1923: macBuffer[bufferIndex++] = NEW_CHANNEL_CID;
 18477  002050  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18478  002052  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18479  002054  6ED9               	movwf	fsr2l,c
 18480  002056  0E00               	movlw	0
 18481  002058  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18482  00205A  6EDA               	movwf	fsr2h,c
 18483  00205C  0E07               	movlw	7
 18484  00205E  6EDF               	movwf	indf2,c
 18485                           
 18486                           ; BSR set to: 0
 18487  002060  2B6F               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18488                           
 18489                           ; BSR set to: 0
 18490                           ;lorawan.c: 1924: macBuffer[bufferIndex] = 0x00;
 18491  002062  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18492  002064  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18493  002066  6ED9               	movwf	fsr2l,c
 18494  002068  0E00               	movlw	0
 18495  00206A  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18496  00206C  6EDA               	movwf	fsr2h,c
 18497  00206E  6ADF               	clrf	indf2,c
 18498                           
 18499                           ; BSR set to: 0
 18500                           ;lorawan.c: 1925: if (loRa.macCommands[i].channelFrequencyAck == 1)
 18501  002070  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18502  002072  0D02               	mullw	2
 18503  002074  0EA9               	movlw	low (_loRa+169)
 18504  002076  24F3               	addwf	prodl,w,c
 18505  002078  6ED9               	movwf	fsr2l,c
 18506  00207A  0E02               	movlw	high (_loRa+169)
 18507  00207C  20F4               	addwfc	prodh,w,c
 18508  00207E  6EDA               	movwf	fsr2h,c
 18509  002080  AEDF               	btfss	indf2,7,c
 18510  002082  D009               	goto	l13038
 18511                           
 18512                           ; BSR set to: 2
 18513                           ;lorawan.c: 1926: {
 18514                           ;lorawan.c: 1927: macBuffer[bufferIndex] |= 0x01;
 18515  002084  0100               	movlb	0	; () banked
 18516  002086  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18517  002088  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18518  00208A  6ED9               	movwf	fsr2l,c
 18519  00208C  0E00               	movlw	0
 18520  00208E  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18521  002090  6EDA               	movwf	fsr2h,c
 18522  002092  0E00               	movlw	0
 18523  002094  80DB               	bsf	plusw2,0,c
 18524  002096                     l13038:
 18525                           
 18526                           ;lorawan.c: 1928: }
 18527                           ;lorawan.c: 1930: if (loRa.macCommands[i].dataRateRangeAck == 1)
 18528  002096  0100               	movlb	0	; () banked
 18529  002098  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18530  00209A  0D02               	mullw	2
 18531  00209C  0EA9               	movlw	low (_loRa+169)
 18532  00209E  24F3               	addwf	prodl,w,c
 18533  0020A0  6ED9               	movwf	fsr2l,c
 18534  0020A2  0E02               	movlw	high (_loRa+169)
 18535  0020A4  20F4               	addwfc	prodh,w,c
 18536  0020A6  6EDA               	movwf	fsr2h,c
 18537  0020A8  ACDF               	btfss	indf2,6,c
 18538  0020AA  D75C               	goto	l12988
 18539                           
 18540                           ; BSR set to: 2
 18541                           ;lorawan.c: 1931: {
 18542                           ;lorawan.c: 1932: macBuffer[bufferIndex] |= 0x02;
 18543  0020AC  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18544  0020AE  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18545  0020B0  6ED9               	movwf	fsr2l,c
 18546  0020B2  0E00               	movlw	0
 18547  0020B4  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18548  0020B6  6EDA               	movwf	fsr2h,c
 18549  0020B8  0E00               	movlw	0
 18550  0020BA  82DB               	bsf	plusw2,1,c
 18551  0020BC  D753               	goto	l12988
 18552  0020BE                     l2232:
 18553                           
 18554                           ; BSR set to: 0
 18555                           ;lorawan.c: 1939: {
 18556                           ;lorawan.c: 1940: loRa.linkCheckMargin = 255;
 18557  0020BE  0102               	movlb	2	; () banked
 18558  0020C0  69DD               	setf	(_loRa+221)& (0+255),b
 18559                           
 18560                           ;lorawan.c: 1941: loRa.linkCheckGwCnt = 0;
 18561  0020C2  6BDE               	clrf	(_loRa+222)& (0+255),b
 18562  0020C4                     l13044:
 18563                           
 18564                           ;lorawan.c: 1942: macBuffer[bufferIndex++] = loRa.macCommands[i].receivedCid;
 18565  0020C4  0100               	movlb	0	; () banked
 18566  0020C6  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18567  0020C8  0D02               	mullw	2
 18568  0020CA  0EA8               	movlw	low (_loRa+168)
 18569  0020CC  24F3               	addwf	prodl,w,c
 18570  0020CE  6ED9               	movwf	fsr2l,c
 18571  0020D0  0E02               	movlw	high (_loRa+168)
 18572  0020D2  20F4               	addwfc	prodh,w,c
 18573  0020D4  6EDA               	movwf	fsr2h,c
 18574  0020D6  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18575  0020D8  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18576  0020DA  6EE9               	movwf	fsr0l,c
 18577  0020DC  0E00               	movlw	0
 18578  0020DE  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18579  0020E0  6EEA               	movwf	fsr0h,c
 18580  0020E2  CFDF FFEF          	movff	indf2,indf0
 18581  0020E6  D73E               	goto	l12988
 18582  0020E8                     l13054:
 18583                           
 18584                           ; BSR set to: 0
 18585  0020E8  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18586  0020EA  0D02               	mullw	2
 18587  0020EC  0EA8               	movlw	low (_loRa+168)
 18588  0020EE  24F3               	addwf	prodl,w,c
 18589  0020F0  6ED9               	movwf	fsr2l,c
 18590  0020F2  0E02               	movlw	high (_loRa+168)
 18591  0020F4  20F4               	addwfc	prodh,w,c
 18592  0020F6  6EDA               	movwf	fsr2h,c
 18593  0020F8  50DF               	movf	indf2,w,c
 18594                           
 18595                           ; Switch size 1, requested type "speed"
 18596                           ; Number of cases is 7, Range of values is 2 to 8
 18597                           ; switch strategies available:
 18598                           ; Name         Instructions Cycles
 18599                           ; simple_byte           22    12 (average)
 18600                           ;	Chosen strategy is simple_byte
 18601  0020FA  0A02               	xorlw	2	; case 2
 18602  0020FC  E0E0               	bz	l2232
 18603  0020FE  0A01               	xorlw	1	; case 3
 18604  002100  E101 D6E6          	bz	l12970
 18605  002104  0A07               	xorlw	7	; case 4
 18606  002106  E0DE               	bz	l13044
 18607  002108  0A01               	xorlw	1	; case 5
 18608  00210A  E101 D72E          	bz	l12990
 18609  00210E  0A03               	xorlw	3	; case 6
 18610  002110  E101 D76D          	bz	l13010
 18611  002114  0A01               	xorlw	1	; case 7
 18612  002116  E09C               	bz	l13028
 18613  002118  0A0F               	xorlw	15	; case 8
 18614  00211A  E0D4               	bz	l13044
 18615  00211C                     l13056:
 18616                           
 18617                           ; BSR set to: 0
 18618  00211C  2B6E               	incf	IncludeMacCommandsResponse@i& (0+255),f,b
 18619  00211E                     l13058:
 18620                           
 18621                           ; BSR set to: 0
 18622  00211E  0102               	movlb	2	; () banked
 18623  002120  51A7               	movf	(_loRa+167)& (0+255),w,b
 18624  002122  0100               	movlb	0	; () banked
 18625  002124  5D6E               	subwf	IncludeMacCommandsResponse@i& (0+255),w,b
 18626  002126  E201 D694          	bnc	l12962
 18627  00212A                     l13060:
 18628                           
 18629                           ; BSR set to: 0
 18630                           ;lorawan.c: 1957: }
 18631                           ;lorawan.c: 1959: *pBufferIndex = bufferIndex;
 18632  00212A  5166               	movf	IncludeMacCommandsResponse@pBufferIndex& (0+255),w,b
 18633  00212C  6ED9               	movwf	fsr2l,c
 18634  00212E  6ADA               	clrf	fsr2h,c
 18635  002130  C06F  FFDF         	movff	IncludeMacCommandsResponse@bufferIndex,indf2
 18636                           
 18637                           ; BSR set to: 0
 18638  002134  0012               	return		;funcret
 18639  002136                     __end_of_IncludeMacCommandsResponse:
 18640                           	opt stack 0
 18641                           tosu	equ	0xFFF
 18642                           tosh	equ	0xFFE
 18643                           tosl	equ	0xFFD
 18644                           pclath	equ	0xFFA
 18645                           tblptru	equ	0xFF8
 18646                           tblptrh	equ	0xFF7
 18647                           tblptrl	equ	0xFF6
 18648                           tablat	equ	0xFF5
 18649                           prodh	equ	0xFF4
 18650                           prodl	equ	0xFF3
 18651                           intcon	equ	0xFF2
 18652                           intcon2	equ	0xFF1
 18653                           intcon3	equ	0xFF0
 18654                           indf0	equ	0xFEF
 18655                           postinc0	equ	0xFEE
 18656                           fsr0h	equ	0xFEA
 18657                           fsr0l	equ	0xFE9
 18658                           wreg	equ	0xFE8
 18659                           postinc1	equ	0xFE6
 18660                           postdec1	equ	0xFE5
 18661                           plusw1	equ	0xFE3
 18662                           fsr1h	equ	0xFE2
 18663                           fsr1l	equ	0xFE1
 18664                           indf2	equ	0xFDF
 18665                           postinc2	equ	0xFDE
 18666                           postdec2	equ	0xFDD
 18667                           plusw2	equ	0xFDB
 18668                           fsr2h	equ	0xFDA
 18669                           fsr2l	equ	0xFD9
 18670                           status	equ	0xFD8
 18671                           
 18672 ;; *************** function _RADIO_GetPacketSnr *****************
 18673 ;; Defined at:
 18674 ;;		line 1429 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 18675 ;; Parameters:    Size  Location     Type
 18676 ;;		None
 18677 ;; Auto vars:     Size  Location     Type
 18678 ;;		None
 18679 ;; Return value:  Size  Location     Type
 18680 ;;                  1    wreg      char 
 18681 ;; Registers used:
 18682 ;;		wreg, status,2
 18683 ;; Tracked objects:
 18684 ;;		On entry : E/0
 18685 ;;		On exit  : F/1
 18686 ;;		Unchanged: 0/0
 18687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18692 ;;Total ram usage:        0 bytes
 18693 ;; Hardware stack levels used:    1
 18694 ;; Hardware stack levels required when called:    7
 18695 ;; This function calls:
 18696 ;;		Nothing
 18697 ;; This function is called by:
 18698 ;;		_IncludeMacCommandsResponse
 18699 ;; This function uses a non-reentrant model
 18700 ;;
 18701                           
 18702                           	psect	text95
 18703  0077CC                     __ptext95:
 18704                           	opt stack 0
 18705  0077CC                     _RADIO_GetPacketSnr:
 18706                           	opt stack 19
 18707                           
 18708                           ;radio_driver_SX1276.c: 1431: return RadioConfiguration.packetSNR;
 18709                           
 18710                           ; BSR set to: 0
 18711                           ;incstack = 0
 18712  0077CC  0101               	movlb	1	; () banked
 18713  0077CE  51A7               	movf	(_RadioConfiguration+50)& (0+255),w,b
 18714                           
 18715                           ; BSR set to: 1
 18716  0077D0  0012               	return		;funcret
 18717  0077D2                     __end_of_RADIO_GetPacketSnr:
 18718                           	opt stack 0
 18719                           tosu	equ	0xFFF
 18720                           tosh	equ	0xFFE
 18721                           tosl	equ	0xFFD
 18722                           pclath	equ	0xFFA
 18723                           tblptru	equ	0xFF8
 18724                           tblptrh	equ	0xFF7
 18725                           tblptrl	equ	0xFF6
 18726                           tablat	equ	0xFF5
 18727                           prodh	equ	0xFF4
 18728                           prodl	equ	0xFF3
 18729                           intcon	equ	0xFF2
 18730                           intcon2	equ	0xFF1
 18731                           intcon3	equ	0xFF0
 18732                           indf0	equ	0xFEF
 18733                           postinc0	equ	0xFEE
 18734                           fsr0h	equ	0xFEA
 18735                           fsr0l	equ	0xFE9
 18736                           wreg	equ	0xFE8
 18737                           postinc1	equ	0xFE6
 18738                           postdec1	equ	0xFE5
 18739                           plusw1	equ	0xFE3
 18740                           fsr1h	equ	0xFE2
 18741                           fsr1l	equ	0xFE1
 18742                           indf2	equ	0xFDF
 18743                           postinc2	equ	0xFDE
 18744                           postdec2	equ	0xFDD
 18745                           plusw2	equ	0xFDB
 18746                           fsr2h	equ	0xFDA
 18747                           fsr2l	equ	0xFD9
 18748                           status	equ	0xFD8
 18749                           
 18750 ;; *************** function _FindSmallestDataRate *****************
 18751 ;; Defined at:
 18752 ;;		line 1963 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 18753 ;; Parameters:    Size  Location     Type
 18754 ;;		None
 18755 ;; Auto vars:     Size  Location     Type
 18756 ;;  dataRate        1    7[BANK0 ] unsigned char 
 18757 ;;  i               1    6[BANK0 ] unsigned char 
 18758 ;;  found           1    5[BANK0 ] unsigned char 
 18759 ;; Return value:  Size  Location     Type
 18760 ;;                  1    wreg      unsigned char 
 18761 ;; Registers used:
 18762 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18763 ;; Tracked objects:
 18764 ;;		On entry : F/2
 18765 ;;		On exit  : F/0
 18766 ;;		Unchanged: 0/0
 18767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18769 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18770 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18771 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18772 ;;Total ram usage:        4 bytes
 18773 ;; Hardware stack levels used:    1
 18774 ;; Hardware stack levels required when called:    7
 18775 ;; This function calls:
 18776 ;;		Nothing
 18777 ;; This function is called by:
 18778 ;;		_AckRetransmissionCallback
 18779 ;;		_AssemblePacket
 18780 ;; This function uses a non-reentrant model
 18781 ;;
 18782                           
 18783                           	psect	text96
 18784  005A00                     __ptext96:
 18785                           	opt stack 0
 18786  005A00                     _FindSmallestDataRate:
 18787                           	opt stack 20
 18788                           
 18789                           ; BSR set to: 2
 18790                           ;lorawan.c: 1966: bool found = 0;
 18791                           
 18792                           ; BSR set to: 1
 18793                           ;incstack = 0
 18794  005A00  0100               	movlb	0	; () banked
 18795  005A02  6B65               	clrf	FindSmallestDataRate@found& (0+255),b
 18796                           
 18797                           ; BSR set to: 0
 18798                           ;lorawan.c: 1968: if (loRa.currentDataRate > loRa.minDataRate)
 18799  005A04  0102               	movlb	2	; () banked
 18800  005A06  51DF               	movf	(_loRa+223)& (0+255),w,b
 18801  005A08  5DEB               	subwf	(_loRa+235)& (0+255),w,b
 18802  005A0A  E24A               	bc	l12888
 18803                           
 18804                           ; BSR set to: 2
 18805                           ;lorawan.c: 1969: {
 18806                           ;lorawan.c: 1970: dataRate = loRa.currentDataRate - 1;
 18807  005A0C  05DF               	decf	(_loRa+223)& (0+255),w,b
 18808  005A0E  0100               	movlb	0	; () banked
 18809  005A10  6F67               	movwf	FindSmallestDataRate@dataRate& (0+255),b
 18810                           
 18811                           ;lorawan.c: 1972: while ( (found == 0) && (dataRate >= loRa.minDataRate) )
 18812  005A12  D03A               	goto	l12880
 18813  005A14                     l2241:
 18814                           
 18815                           ; BSR set to: 0
 18816                           ;lorawan.c: 1973: {
 18817                           ;lorawan.c: 1974: for ( i = 0; i < loRa.maxChannels; i++ )
 18818  005A14  6B66               	clrf	FindSmallestDataRate@i& (0+255),b
 18819  005A16  D02B               	goto	l12872
 18820  005A18                     l12862:
 18821                           
 18822                           ; BSR set to: 0
 18823                           ;lorawan.c: 1975: {
 18824                           ;lorawan.c: 1976: if ( (dataRate >= Channels[i].dataRange.min) && (dataRate <= Channels[
      +                          i].dataRange.max ) && ( Channels[i].status == 1 ) )
 18825  005A18  5166               	movf	FindSmallestDataRate@i& (0+255),w,b
 18826  005A1A  0D0E               	mullw	14
 18827  005A1C  0E05               	movlw	low (_Channels+5)
 18828  005A1E  24F3               	addwf	prodl,w,c
 18829  005A20  6ED9               	movwf	fsr2l,c
 18830  005A22  0E04               	movlw	high (_Channels+5)
 18831  005A24  20F4               	addwfc	prodh,w,c
 18832  005A26  6EDA               	movwf	fsr2h,c
 18833  005A28  50DF               	movf	223,w,c
 18834  005A2A  0B0F               	andlw	15
 18835  005A2C  0100               	movlb	0	; () banked
 18836  005A2E  6F64               	movwf	??_FindSmallestDataRate& (0+255),b
 18837  005A30  5164               	movf	??_FindSmallestDataRate& (0+255),w,b
 18838  005A32  5D67               	subwf	FindSmallestDataRate@dataRate& (0+255),w,b
 18839  005A34  E31B               	bnc	l12870
 18840                           
 18841                           ; BSR set to: 0
 18842  005A36  5166               	movf	FindSmallestDataRate@i& (0+255),w,b
 18843  005A38  0D0E               	mullw	14
 18844  005A3A  0E05               	movlw	low (_Channels+5)
 18845  005A3C  24F3               	addwf	prodl,w,c
 18846  005A3E  6ED9               	movwf	fsr2l,c
 18847  005A40  0E04               	movlw	high (_Channels+5)
 18848  005A42  20F4               	addwfc	prodh,w,c
 18849  005A44  6EDA               	movwf	fsr2h,c
 18850  005A46  38DF               	swapf	223,w,c
 18851  005A48  0B0F               	andlw	15
 18852  005A4A  6F64               	movwf	??_FindSmallestDataRate& (0+255),b
 18853  005A4C  5167               	movf	FindSmallestDataRate@dataRate& (0+255),w,b
 18854  005A4E  5D64               	subwf	??_FindSmallestDataRate& (0+255),w,b
 18855  005A50  E30D               	bnc	l12870
 18856                           
 18857                           ; BSR set to: 0
 18858  005A52  5166               	movf	FindSmallestDataRate@i& (0+255),w,b
 18859  005A54  0D0E               	mullw	14
 18860  005A56  0E04               	movlw	low (_Channels+4)
 18861  005A58  24F3               	addwf	prodl,w,c
 18862  005A5A  6ED9               	movwf	fsr2l,c
 18863  005A5C  0E04               	movlw	high (_Channels+4)
 18864  005A5E  20F4               	addwfc	prodh,w,c
 18865  005A60  6EDA               	movwf	fsr2h,c
 18866  005A62  04DE               	decf	postinc2,w,c
 18867  005A64  E103               	bnz	l12870
 18868                           
 18869                           ; BSR set to: 0
 18870                           ;lorawan.c: 1977: {
 18871                           ;lorawan.c: 1978: found = 1;
 18872  005A66  0E01               	movlw	1
 18873  005A68  6F65               	movwf	FindSmallestDataRate@found& (0+255),b
 18874                           
 18875                           ;lorawan.c: 1979: break;
 18876  005A6A  D006               	goto	l12874
 18877  005A6C                     l12870:
 18878                           
 18879                           ; BSR set to: 0
 18880  005A6C  2B66               	incf	FindSmallestDataRate@i& (0+255),f,b
 18881  005A6E                     l12872:
 18882                           
 18883                           ; BSR set to: 0
 18884  005A6E  0102               	movlb	2	; () banked
 18885  005A70  51ED               	movf	(_loRa+237)& (0+255),w,b
 18886  005A72  0100               	movlb	0	; () banked
 18887  005A74  5D66               	subwf	FindSmallestDataRate@i& (0+255),w,b
 18888  005A76  E3D0               	bnc	l12862
 18889  005A78                     l12874:
 18890                           
 18891                           ; BSR set to: 0
 18892                           ;lorawan.c: 1980: }
 18893                           ;lorawan.c: 1981: }
 18894                           ;lorawan.c: 1982: if ( (found == 0) && (dataRate > loRa.minDataRate) )
 18895  005A78  5165               	movf	FindSmallestDataRate@found& (0+255),w,b
 18896  005A7A  E106               	bnz	l12880
 18897                           
 18898                           ; BSR set to: 0
 18899  005A7C  5167               	movf	FindSmallestDataRate@dataRate& (0+255),w,b
 18900  005A7E  0102               	movlb	2	; () banked
 18901  005A80  5DEB               	subwf	(_loRa+235)& (0+255),w,b
 18902  005A82  E202               	bc	l12880
 18903                           
 18904                           ; BSR set to: 2
 18905                           ;lorawan.c: 1983: {
 18906                           ;lorawan.c: 1984: dataRate = dataRate - 1;
 18907  005A84  0100               	movlb	0	; () banked
 18908  005A86  0767               	decf	FindSmallestDataRate@dataRate& (0+255),f,b
 18909  005A88                     l12880:
 18910  005A88  0100               	movlb	0	; () banked
 18911  005A8A  5165               	movf	FindSmallestDataRate@found& (0+255),w,b
 18912  005A8C  E105               	bnz	l12884
 18913                           
 18914                           ; BSR set to: 0
 18915  005A8E  0102               	movlb	2	; () banked
 18916  005A90  51EB               	movf	(_loRa+235)& (0+255),w,b
 18917  005A92  0100               	movlb	0	; () banked
 18918  005A94  5D67               	subwf	FindSmallestDataRate@dataRate& (0+255),w,b
 18919  005A96  E2BE               	bc	l2241
 18920  005A98                     l12884:
 18921                           
 18922                           ; BSR set to: 0
 18923                           ;lorawan.c: 1985: }
 18924                           ;lorawan.c: 1986: }
 18925                           ;lorawan.c: 1988: if (found == 1)
 18926  005A98  0565               	decf	FindSmallestDataRate@found& (0+255),w,b
 18927  005A9A  E102               	bnz	l12888
 18928                           
 18929                           ; BSR set to: 0
 18930                           ;lorawan.c: 1989: {
 18931                           ;lorawan.c: 1990: loRa.currentDataRate = dataRate;
 18932  005A9C  C067  F2DF         	movff	FindSmallestDataRate@dataRate,_loRa+223
 18933  005AA0                     l12888:
 18934                           
 18935                           ;lorawan.c: 1991: }
 18936                           ;lorawan.c: 1992: }
 18937                           ;lorawan.c: 1994: return found;
 18938  005AA0  0100               	movlb	0	; () banked
 18939  005AA2  5165               	movf	FindSmallestDataRate@found& (0+255),w,b
 18940                           
 18941                           ; BSR set to: 0
 18942  005AA4  0012               	return		;funcret
 18943  005AA6                     __end_of_FindSmallestDataRate:
 18944                           	opt stack 0
 18945                           tosu	equ	0xFFF
 18946                           tosh	equ	0xFFE
 18947                           tosl	equ	0xFFD
 18948                           pclath	equ	0xFFA
 18949                           tblptru	equ	0xFF8
 18950                           tblptrh	equ	0xFF7
 18951                           tblptrl	equ	0xFF6
 18952                           tablat	equ	0xFF5
 18953                           prodh	equ	0xFF4
 18954                           prodl	equ	0xFF3
 18955                           intcon	equ	0xFF2
 18956                           intcon2	equ	0xFF1
 18957                           intcon3	equ	0xFF0
 18958                           indf0	equ	0xFEF
 18959                           postinc0	equ	0xFEE
 18960                           fsr0h	equ	0xFEA
 18961                           fsr0l	equ	0xFE9
 18962                           wreg	equ	0xFE8
 18963                           postinc1	equ	0xFE6
 18964                           postdec1	equ	0xFE5
 18965                           plusw1	equ	0xFE3
 18966                           fsr1h	equ	0xFE2
 18967                           fsr1l	equ	0xFE1
 18968                           indf2	equ	0xFDF
 18969                           postinc2	equ	0xFDE
 18970                           postdec2	equ	0xFDD
 18971                           plusw2	equ	0xFDB
 18972                           fsr2h	equ	0xFDA
 18973                           fsr2l	equ	0xFD9
 18974                           status	equ	0xFD8
 18975                           
 18976 ;; *************** function _EncryptFRMPayload *****************
 18977 ;; Defined at:
 18978 ;;		line 2205 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 18979 ;; Parameters:    Size  Location     Type
 18980 ;;  buffer          2   68[BANK0 ] PTR unsigned char 
 18981 ;;		 -> payload(2), LORAWAN_RxDone@hdr(2), radioBuffer(271), NULL(0), 
 18982 ;;  bufferLength    1   70[BANK0 ] unsigned char 
 18983 ;;  dir             1   71[BANK0 ] unsigned char 
 18984 ;;  frameCounter    4   72[BANK0 ] unsigned long 
 18985 ;;  key             2   76[BANK0 ] PTR unsigned char 
 18986 ;;		 -> loRa.activationParameters(105), loRa(245), 
 18987 ;;  macBufferInd    1   78[BANK0 ] unsigned char 
 18988 ;;  bufferToBeEn    2   79[BANK0 ] PTR unsigned char 
 18989 ;;		 -> macBuffer(271), radioBuffer(271), 
 18990 ;;  multicastSta    1   81[BANK0 ] unsigned char 
 18991 ;; Auto vars:     Size  Location     Type
 18992 ;;  j               1   89[BANK0 ] unsigned char 
 18993 ;;  i               1   88[BANK0 ] unsigned char 
 18994 ;;  k               1   87[BANK0 ] unsigned char 
 18995 ;; Return value:  Size  Location     Type
 18996 ;;                  1    wreg      void 
 18997 ;; Registers used:
 18998 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18999 ;; Tracked objects:
 19000 ;;		On entry : F/0
 19001 ;;		On exit  : F/0
 19002 ;;		Unchanged: 0/0
 19003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19004 ;;      Params:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19005 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19006 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19007 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19008 ;;Total ram usage:       22 bytes
 19009 ;; Hardware stack levels used:    1
 19010 ;; Hardware stack levels required when called:   10
 19011 ;; This function calls:
 19012 ;;		_AESEncodeLoRa
 19013 ;;		_AssembleEncryptionBlock
 19014 ;; This function is called by:
 19015 ;;		_LORAWAN_RxDone
 19016 ;;		_AssemblePacket
 19017 ;; This function uses a non-reentrant model
 19018 ;;
 19019                           
 19020                           	psect	text97
 19021  004182                     __ptext97:
 19022                           	opt stack 0
 19023  004182                     _EncryptFRMPayload:
 19024                           	opt stack 17
 19025                           
 19026                           ; BSR set to: 0
 19027                           
 19028                           ; BSR set to: 0
 19029                           ;incstack = 0
 19030  004182  6BB8               	clrf	EncryptFRMPayload@i& (0+255),b
 19031  004184  6BB9               	clrf	EncryptFRMPayload@j& (0+255),b
 19032                           
 19033                           ; BSR set to: 0
 19034                           ;lorawan.c: 2209: k = bufferLength / 16;
 19035  004186  39A6               	swapf	EncryptFRMPayload@bufferLength& (0+255),w,b
 19036  004188  0B0F               	andlw	15
 19037  00418A  6FB7               	movwf	EncryptFRMPayload@k& (0+255),b
 19038                           
 19039                           ; BSR set to: 0
 19040                           ;lorawan.c: 2210: for (i = 1; i <= k; i++)
 19041  00418C  0E01               	movlw	1
 19042  00418E  6FB8               	movwf	EncryptFRMPayload@i& (0+255),b
 19043  004190  D051               	goto	l12924
 19044  004192                     l12906:
 19045                           
 19046                           ; BSR set to: 0
 19047                           ;lorawan.c: 2211: {
 19048                           ;lorawan.c: 2212: AssembleEncryptionBlock (dir, frameCounter, i, 0x01, multicastStatus);
 19049  004192  C0A8  F06E         	movff	EncryptFRMPayload@frameCounter,AssembleEncryptionBlock@frameCounter
 19050  004196  C0A9  F06F         	movff	EncryptFRMPayload@frameCounter+1,AssembleEncryptionBlock@frameCounter+1
 19051  00419A  C0AA  F070         	movff	EncryptFRMPayload@frameCounter+2,AssembleEncryptionBlock@frameCounter+2
 19052  00419E  C0AB  F071         	movff	EncryptFRMPayload@frameCounter+3,AssembleEncryptionBlock@frameCounter+3
 19053  0041A2  C0B8  F072         	movff	EncryptFRMPayload@i,AssembleEncryptionBlock@blockId
 19054  0041A6  0E01               	movlw	1
 19055  0041A8  6F73               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 19056  0041AA  C0B1  F074         	movff	EncryptFRMPayload@multicastStatus,AssembleEncryptionBlock@multicastStatus
 19057  0041AE  51A7               	movf	EncryptFRMPayload@dir& (0+255),w,b
 19058  0041B0  ECA0  F02B         	call	_AssembleEncryptionBlock
 19059                           
 19060                           ;lorawan.c: 2213: AESEncodeLoRa(aesBuffer, key);
 19061  0041B4  0EAB               	movlw	low _aesBuffer
 19062  0041B6  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 19063  0041B8  0E01               	movlw	high _aesBuffer
 19064  0041BA  6F91               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 19065  0041BC  C0AC  F092         	movff	EncryptFRMPayload@key,AESEncodeLoRa@key
 19066  0041C0  C0AD  F093         	movff	EncryptFRMPayload@key+1,AESEncodeLoRa@key+1
 19067  0041C4  EC09  F039         	call	_AESEncodeLoRa	;wreg free
 19068                           
 19069                           ; BSR set to: 0
 19070                           ;lorawan.c: 2215: for (j = 0; j < 16; j++)
 19071  0041C8  6BB9               	clrf	EncryptFRMPayload@j& (0+255),b
 19072  0041CA                     l12914:
 19073                           
 19074                           ; BSR set to: 0
 19075                           ;lorawan.c: 2216: {
 19076                           ;lorawan.c: 2217: bufferToBeEncrypted[macBufferIndex++] = aesBuffer[j] ^ buffer[16*(i-1)
      +                           + j];
 19077  0041CA  51AE               	movf	EncryptFRMPayload@macBufferIndex& (0+255),w,b
 19078  0041CC  25AF               	addwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),w,b
 19079  0041CE  6ED9               	movwf	fsr2l,c
 19080  0041D0  0E00               	movlw	0
 19081  0041D2  21B0               	addwfc	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),w,b
 19082  0041D4  6EDA               	movwf	fsr2h,c
 19083  0041D6  51B8               	movf	EncryptFRMPayload@i& (0+255),w,b
 19084  0041D8  6FB2               	movwf	??_EncryptFRMPayload& (0+255),b
 19085  0041DA  6BB3               	clrf	(??_EncryptFRMPayload+1)& (0+255),b
 19086  0041DC  3BB2               	swapf	??_EncryptFRMPayload& (0+255),f,b
 19087  0041DE  3BB3               	swapf	(??_EncryptFRMPayload+1)& (0+255),f,b
 19088  0041E0  0EF0               	movlw	240
 19089  0041E2  17B3               	andwf	(??_EncryptFRMPayload+1)& (0+255),f,b
 19090  0041E4  51B2               	movf	??_EncryptFRMPayload& (0+255),w,b
 19091  0041E6  0B0F               	andlw	15
 19092  0041E8  13B3               	iorwf	(??_EncryptFRMPayload+1)& (0+255),f,b
 19093  0041EA  0EF0               	movlw	240
 19094  0041EC  17B2               	andwf	??_EncryptFRMPayload& (0+255),f,b
 19095  0041EE  C0A4  F0B4         	movff	EncryptFRMPayload@buffer,??_EncryptFRMPayload+2
 19096  0041F2  C0A5  F0B5         	movff	EncryptFRMPayload@buffer+1,??_EncryptFRMPayload+3
 19097  0041F6  51B2               	movf	??_EncryptFRMPayload& (0+255),w,b
 19098  0041F8  27B4               	addwf	(??_EncryptFRMPayload+2)& (0+255),f,b
 19099  0041FA  51B3               	movf	(??_EncryptFRMPayload+1)& (0+255),w,b
 19100  0041FC  23B5               	addwfc	(??_EncryptFRMPayload+3)& (0+255),f,b
 19101  0041FE  51B9               	movf	EncryptFRMPayload@j& (0+255),w,b
 19102  004200  27B4               	addwf	(??_EncryptFRMPayload+2)& (0+255),f,b
 19103  004202  0E00               	movlw	0
 19104  004204  23B5               	addwfc	(??_EncryptFRMPayload+3)& (0+255),f,b
 19105  004206  0EF0               	movlw	240
 19106  004208  25B4               	addwf	(??_EncryptFRMPayload+2)& (0+255),w,b
 19107  00420A  6EE9               	movwf	fsr0l,c
 19108  00420C  0EFF               	movlw	255
 19109  00420E  21B5               	addwfc	(??_EncryptFRMPayload+3)& (0+255),w,b
 19110  004210  6EEA               	movwf	fsr0h,c
 19111  004212  50EF               	movf	indf0,w,c
 19112  004214  6FB6               	movwf	(??_EncryptFRMPayload+4)& (0+255),b
 19113  004216  0EAB               	movlw	low _aesBuffer
 19114  004218  25B9               	addwf	EncryptFRMPayload@j& (0+255),w,b
 19115  00421A  6EE9               	movwf	fsr0l,c
 19116  00421C  6AEA               	clrf	fsr0h,c
 19117  00421E  0E01               	movlw	high _aesBuffer
 19118  004220  22EA               	addwfc	fsr0h,f,c
 19119  004222  50EF               	movf	indf0,w,c
 19120  004224  19B6               	xorwf	(??_EncryptFRMPayload+4)& (0+255),w,b
 19121  004226  6EDF               	movwf	indf2,c
 19122                           
 19123                           ; BSR set to: 0
 19124  004228  2BAE               	incf	EncryptFRMPayload@macBufferIndex& (0+255),f,b
 19125                           
 19126                           ; BSR set to: 0
 19127  00422A  2BB9               	incf	EncryptFRMPayload@j& (0+255),f,b
 19128                           
 19129                           ; BSR set to: 0
 19130  00422C  0E0F               	movlw	15
 19131  00422E  65B9               	cpfsgt	EncryptFRMPayload@j& (0+255),b
 19132  004230  D7CC               	goto	l12914
 19133                           
 19134                           ; BSR set to: 0
 19135  004232  2BB8               	incf	EncryptFRMPayload@i& (0+255),f,b
 19136  004234                     l12924:
 19137                           
 19138                           ; BSR set to: 0
 19139  004234  51B8               	movf	EncryptFRMPayload@i& (0+255),w,b
 19140  004236  5DB7               	subwf	EncryptFRMPayload@k& (0+255),w,b
 19141  004238  E2AC               	bc	l12906
 19142                           
 19143                           ; BSR set to: 0
 19144                           ;lorawan.c: 2218: }
 19145                           ;lorawan.c: 2219: }
 19146                           ;lorawan.c: 2221: if ( (bufferLength % 16) != 0 )
 19147  00423A  C0A6  F0B2         	movff	EncryptFRMPayload@bufferLength,??_EncryptFRMPayload
 19148  00423E  0E0F               	movlw	15
 19149  004240  17B2               	andwf	??_EncryptFRMPayload& (0+255),f,b
 19150  004242  B4D8               	btfsc	status,2,c
 19151  004244  0C0F               	retlw	15
 19152                           
 19153                           ; BSR set to: 0
 19154                           ;lorawan.c: 2222: {
 19155                           ;lorawan.c: 2223: AssembleEncryptionBlock (dir, frameCounter, i, 0x01, multicastStatus);
 19156  004246  C0A8  F06E         	movff	EncryptFRMPayload@frameCounter,AssembleEncryptionBlock@frameCounter
 19157  00424A  C0A9  F06F         	movff	EncryptFRMPayload@frameCounter+1,AssembleEncryptionBlock@frameCounter+1
 19158  00424E  C0AA  F070         	movff	EncryptFRMPayload@frameCounter+2,AssembleEncryptionBlock@frameCounter+2
 19159  004252  C0AB  F071         	movff	EncryptFRMPayload@frameCounter+3,AssembleEncryptionBlock@frameCounter+3
 19160  004256  C0B8  F072         	movff	EncryptFRMPayload@i,AssembleEncryptionBlock@blockId
 19161  00425A  0E01               	movlw	1
 19162  00425C  6F73               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 19163  00425E  C0B1  F074         	movff	EncryptFRMPayload@multicastStatus,AssembleEncryptionBlock@multicastStatus
 19164  004262  51A7               	movf	EncryptFRMPayload@dir& (0+255),w,b
 19165  004264  ECA0  F02B         	call	_AssembleEncryptionBlock
 19166                           
 19167                           ;lorawan.c: 2224: AESEncodeLoRa (aesBuffer, key);
 19168  004268  0EAB               	movlw	low _aesBuffer
 19169  00426A  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 19170  00426C  0E01               	movlw	high _aesBuffer
 19171  00426E  6F91               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 19172  004270  C0AC  F092         	movff	EncryptFRMPayload@key,AESEncodeLoRa@key
 19173  004274  C0AD  F093         	movff	EncryptFRMPayload@key+1,AESEncodeLoRa@key+1
 19174  004278  EC09  F039         	call	_AESEncodeLoRa	;wreg free
 19175                           
 19176                           ; BSR set to: 0
 19177                           ;lorawan.c: 2226: for (j = 0; j < (bufferLength % 16); j++)
 19178  00427C  6BB9               	clrf	EncryptFRMPayload@j& (0+255),b
 19179  00427E  D023               	goto	l12938
 19180  004280                     l12932:
 19181                           
 19182                           ; BSR set to: 0
 19183                           ;lorawan.c: 2227: {
 19184                           ;lorawan.c: 2228: bufferToBeEncrypted[macBufferIndex++] = aesBuffer[j] ^ buffer[(16*k) +
      +                           j];
 19185  004280  51AE               	movf	EncryptFRMPayload@macBufferIndex& (0+255),w,b
 19186  004282  25AF               	addwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),w,b
 19187  004284  6ED9               	movwf	fsr2l,c
 19188  004286  0E00               	movlw	0
 19189  004288  21B0               	addwfc	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),w,b
 19190  00428A  6EDA               	movwf	fsr2h,c
 19191  00428C  51B7               	movf	EncryptFRMPayload@k& (0+255),w,b
 19192  00428E  0D10               	mullw	16
 19193  004290  C0A4  F0B2         	movff	EncryptFRMPayload@buffer,??_EncryptFRMPayload
 19194  004294  C0A5  F0B3         	movff	EncryptFRMPayload@buffer+1,??_EncryptFRMPayload+1
 19195  004298  50F3               	movf	prodl,w,c
 19196  00429A  27B2               	addwf	??_EncryptFRMPayload& (0+255),f,b
 19197  00429C  50F4               	movf	prodh,w,c
 19198  00429E  23B3               	addwfc	(??_EncryptFRMPayload+1)& (0+255),f,b
 19199  0042A0  51B9               	movf	EncryptFRMPayload@j& (0+255),w,b
 19200  0042A2  25B2               	addwf	??_EncryptFRMPayload& (0+255),w,b
 19201  0042A4  6EE9               	movwf	fsr0l,c
 19202  0042A6  0E00               	movlw	0
 19203  0042A8  21B3               	addwfc	(??_EncryptFRMPayload+1)& (0+255),w,b
 19204  0042AA  6EEA               	movwf	fsr0h,c
 19205  0042AC  50EF               	movf	indf0,w,c
 19206  0042AE  6FB4               	movwf	(??_EncryptFRMPayload+2)& (0+255),b
 19207  0042B0  0EAB               	movlw	low _aesBuffer
 19208  0042B2  25B9               	addwf	EncryptFRMPayload@j& (0+255),w,b
 19209  0042B4  6EE9               	movwf	fsr0l,c
 19210  0042B6  6AEA               	clrf	fsr0h,c
 19211  0042B8  0E01               	movlw	high _aesBuffer
 19212  0042BA  22EA               	addwfc	fsr0h,f,c
 19213  0042BC  50EF               	movf	indf0,w,c
 19214  0042BE  19B4               	xorwf	(??_EncryptFRMPayload+2)& (0+255),w,b
 19215  0042C0  6EDF               	movwf	indf2,c
 19216                           
 19217                           ; BSR set to: 0
 19218  0042C2  2BAE               	incf	EncryptFRMPayload@macBufferIndex& (0+255),f,b
 19219                           
 19220                           ; BSR set to: 0
 19221  0042C4  2BB9               	incf	EncryptFRMPayload@j& (0+255),f,b
 19222  0042C6                     l12938:
 19223                           
 19224                           ; BSR set to: 0
 19225  0042C6  C0A6  F0B2         	movff	EncryptFRMPayload@bufferLength,??_EncryptFRMPayload
 19226  0042CA  0E0F               	movlw	15
 19227  0042CC  17B2               	andwf	??_EncryptFRMPayload& (0+255),f,b
 19228  0042CE  51B2               	movf	??_EncryptFRMPayload& (0+255),w,b
 19229  0042D0  5DB9               	subwf	EncryptFRMPayload@j& (0+255),w,b
 19230  0042D2  E3D6               	bnc	l12932
 19231                           
 19232                           ; BSR set to: 0
 19233  0042D4  0012               	return		;funcret
 19234  0042D6                     __end_of_EncryptFRMPayload:
 19235                           	opt stack 0
 19236                           tosu	equ	0xFFF
 19237                           tosh	equ	0xFFE
 19238                           tosl	equ	0xFFD
 19239                           pclath	equ	0xFFA
 19240                           tblptru	equ	0xFF8
 19241                           tblptrh	equ	0xFF7
 19242                           tblptrl	equ	0xFF6
 19243                           tablat	equ	0xFF5
 19244                           prodh	equ	0xFF4
 19245                           prodl	equ	0xFF3
 19246                           intcon	equ	0xFF2
 19247                           intcon2	equ	0xFF1
 19248                           intcon3	equ	0xFF0
 19249                           indf0	equ	0xFEF
 19250                           postinc0	equ	0xFEE
 19251                           fsr0h	equ	0xFEA
 19252                           fsr0l	equ	0xFE9
 19253                           wreg	equ	0xFE8
 19254                           postinc1	equ	0xFE6
 19255                           postdec1	equ	0xFE5
 19256                           plusw1	equ	0xFE3
 19257                           fsr1h	equ	0xFE2
 19258                           fsr1l	equ	0xFE1
 19259                           indf2	equ	0xFDF
 19260                           postinc2	equ	0xFDE
 19261                           postdec2	equ	0xFDD
 19262                           plusw2	equ	0xFDB
 19263                           fsr2h	equ	0xFDA
 19264                           fsr2l	equ	0xFD9
 19265                           status	equ	0xFD8
 19266                           
 19267 ;; *************** function _AssembleEncryptionBlock *****************
 19268 ;; Defined at:
 19269 ;;		line 2156 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19270 ;; Parameters:    Size  Location     Type
 19271 ;;  dir             1    wreg     unsigned char 
 19272 ;;  frameCounter    4   14[BANK0 ] unsigned long 
 19273 ;;  blockId         1   18[BANK0 ] unsigned char 
 19274 ;;  firstByte       1   19[BANK0 ] unsigned char 
 19275 ;;  multicastSta    1   20[BANK0 ] unsigned char 
 19276 ;; Auto vars:     Size  Location     Type
 19277 ;;  dir             1   21[BANK0 ] unsigned char 
 19278 ;;  bufferIndex     1   22[BANK0 ] unsigned char 
 19279 ;; Return value:  Size  Location     Type
 19280 ;;                  1    wreg      void 
 19281 ;; Registers used:
 19282 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19283 ;; Tracked objects:
 19284 ;;		On entry : F/0
 19285 ;;		On exit  : F/0
 19286 ;;		Unchanged: 0/0
 19287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19288 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19289 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19291 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19292 ;;Total ram usage:        9 bytes
 19293 ;; Hardware stack levels used:    1
 19294 ;; Hardware stack levels required when called:    8
 19295 ;; This function calls:
 19296 ;;		_memcpy
 19297 ;;		_memset
 19298 ;; This function is called by:
 19299 ;;		_LORAWAN_RxDone
 19300 ;;		_AssemblePacket
 19301 ;;		_EncryptFRMPayload
 19302 ;; This function uses a non-reentrant model
 19303 ;;
 19304                           
 19305                           	psect	text98
 19306  005740                     __ptext98:
 19307                           	opt stack 0
 19308  005740                     _AssembleEncryptionBlock:
 19309                           	opt stack 18
 19310                           
 19311                           ; BSR set to: 0
 19312                           ;incstack = 0
 19313                           ;AssembleEncryptionBlock@dir stored from wreg
 19314  005740  6F75               	movwf	AssembleEncryptionBlock@dir& (0+255),b
 19315                           
 19316                           ;lorawan.c: 2158: uint8_t bufferIndex = 0;
 19317  005742  0100               	movlb	0	; () banked
 19318  005744  6B76               	clrf	AssembleEncryptionBlock@bufferIndex& (0+255),b
 19319                           
 19320                           ; BSR set to: 0
 19321                           ;lorawan.c: 2160: memset (aesBuffer, 0, sizeof (aesBuffer));
 19322  005746  0EAB               	movlw	low _aesBuffer
 19323  005748  6F64               	movwf	memset@p1& (0+255),b
 19324  00574A  0E01               	movlw	high _aesBuffer
 19325  00574C  6F65               	movwf	(memset@p1+1)& (0+255),b
 19326  00574E  6B67               	clrf	(memset@c+1)& (0+255),b
 19327  005750  6B66               	clrf	memset@c& (0+255),b
 19328  005752  6B69               	clrf	(memset@n+1)& (0+255),b
 19329  005754  0E10               	movlw	16
 19330  005756  6F68               	movwf	memset@n& (0+255),b
 19331  005758  ECE0  F038         	call	_memset	;wreg free
 19332                           
 19333                           ; BSR set to: 0
 19334                           ;lorawan.c: 2162: aesBuffer[bufferIndex] = firstByte;
 19335  00575C  C073  F1AB         	movff	AssembleEncryptionBlock@firstByte,_aesBuffer
 19336                           
 19337                           ; BSR set to: 0
 19338                           ;lorawan.c: 2164: bufferIndex = bufferIndex + 5;
 19339  005760  0E05               	movlw	5
 19340  005762  2776               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19341                           
 19342                           ; BSR set to: 0
 19343                           ;lorawan.c: 2166: aesBuffer[bufferIndex++] = dir;
 19344  005764  0EAB               	movlw	low _aesBuffer
 19345  005766  2576               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 19346  005768  6ED9               	movwf	fsr2l,c
 19347  00576A  6ADA               	clrf	fsr2h,c
 19348  00576C  0E01               	movlw	high _aesBuffer
 19349  00576E  22DA               	addwfc	fsr2h,f,c
 19350  005770  C075  FFDF         	movff	AssembleEncryptionBlock@dir,indf2
 19351                           
 19352                           ; BSR set to: 0
 19353  005774  2B76               	incf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19354                           
 19355                           ; BSR set to: 0
 19356                           ;lorawan.c: 2168: if (0 == multicastStatus)
 19357  005776  5174               	movf	AssembleEncryptionBlock@multicastStatus& (0+255),w,b
 19358  005778  E112               	bnz	l12466
 19359                           
 19360                           ; BSR set to: 0
 19361                           ;lorawan.c: 2169: {
 19362                           ;lorawan.c: 2170: memcpy (&aesBuffer[bufferIndex], &loRa.activationParameters.deviceAddr
      +                          ess, sizeof (loRa.activationParameters.deviceAddress));
 19363  00577A  0EAB               	movlw	low _aesBuffer
 19364  00577C  2576               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 19365  00577E  6F64               	movwf	memcpy@d1& (0+255),b
 19366  005780  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 19367  005782  0E01               	movlw	high _aesBuffer
 19368  005784  2365               	addwfc	(memcpy@d1+1)& (0+255),f,b
 19369  005786  0E1E               	movlw	low (_loRa+30)
 19370  005788  6F66               	movwf	memcpy@s1& (0+255),b
 19371  00578A  0E02               	movlw	high (_loRa+30)
 19372  00578C  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 19373  00578E  6B69               	clrf	(memcpy@n+1)& (0+255),b
 19374  005790  0E04               	movlw	4
 19375  005792  6F68               	movwf	memcpy@n& (0+255),b
 19376  005794  ECCA  F033         	call	_memcpy	;wreg free
 19377  005798                     l12464:
 19378                           
 19379                           ; BSR set to: 0
 19380                           ;lorawan.c: 2171: bufferIndex = bufferIndex + sizeof (loRa.activationParameters.deviceAd
      +                          dress);
 19381  005798  0E04               	movlw	4
 19382  00579A  2776               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19383                           
 19384                           ;lorawan.c: 2172: }
 19385  00579C  D010               	goto	l12470
 19386  00579E                     l12466:
 19387                           
 19388                           ; BSR set to: 0
 19389                           ;lorawan.c: 2173: else
 19390                           ;lorawan.c: 2174: {
 19391                           ;lorawan.c: 2175: memcpy (&aesBuffer[bufferIndex], &loRa.activationParameters.mcastDevic
      +                          eAddress, sizeof (loRa.activationParameters.mcastDeviceAddress));
 19392  00579E  0EAB               	movlw	low _aesBuffer
 19393  0057A0  2576               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 19394  0057A2  6F64               	movwf	memcpy@d1& (0+255),b
 19395  0057A4  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 19396  0057A6  0E01               	movlw	high _aesBuffer
 19397  0057A8  2365               	addwfc	(memcpy@d1+1)& (0+255),f,b
 19398  0057AA  0E62               	movlw	low (_loRa+98)
 19399  0057AC  6F66               	movwf	memcpy@s1& (0+255),b
 19400  0057AE  0E02               	movlw	high (_loRa+98)
 19401  0057B0  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 19402  0057B2  6B69               	clrf	(memcpy@n+1)& (0+255),b
 19403  0057B4  0E04               	movlw	4
 19404  0057B6  6F68               	movwf	memcpy@n& (0+255),b
 19405  0057B8  ECCA  F033         	call	_memcpy	;wreg free
 19406  0057BC  D7ED               	goto	l12464
 19407  0057BE                     l12470:
 19408                           
 19409                           ; BSR set to: 0
 19410                           ;lorawan.c: 2177: }
 19411                           ;lorawan.c: 2179: memcpy (&aesBuffer[bufferIndex], &frameCounter, sizeof (frameCounter))
      +                          ;
 19412  0057BE  0EAB               	movlw	low _aesBuffer
 19413  0057C0  2576               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 19414  0057C2  6F64               	movwf	memcpy@d1& (0+255),b
 19415  0057C4  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 19416  0057C6  0E01               	movlw	high _aesBuffer
 19417  0057C8  2365               	addwfc	(memcpy@d1+1)& (0+255),f,b
 19418  0057CA  0E6E               	movlw	low AssembleEncryptionBlock@frameCounter
 19419  0057CC  6F66               	movwf	memcpy@s1& (0+255),b
 19420  0057CE  6B67               	clrf	(memcpy@s1+1)& (0+255),b
 19421  0057D0  6B69               	clrf	(memcpy@n+1)& (0+255),b
 19422  0057D2  0E04               	movlw	4
 19423  0057D4  6F68               	movwf	memcpy@n& (0+255),b
 19424  0057D6  ECCA  F033         	call	_memcpy	;wreg free
 19425                           
 19426                           ;lorawan.c: 2180: bufferIndex = bufferIndex + sizeof (frameCounter) ;
 19427  0057DA  0E04               	movlw	4
 19428  0057DC  2776               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19429                           
 19430                           ; BSR set to: 0
 19431                           ;lorawan.c: 2182: bufferIndex ++;
 19432  0057DE  2B76               	incf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19433                           
 19434                           ; BSR set to: 0
 19435                           ;lorawan.c: 2184: aesBuffer[bufferIndex] = blockId;
 19436  0057E0  0EAB               	movlw	low _aesBuffer
 19437  0057E2  2576               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 19438  0057E4  6ED9               	movwf	fsr2l,c
 19439  0057E6  6ADA               	clrf	fsr2h,c
 19440  0057E8  0E01               	movlw	high _aesBuffer
 19441  0057EA  22DA               	addwfc	fsr2h,f,c
 19442  0057EC  C072  FFDF         	movff	AssembleEncryptionBlock@blockId,indf2
 19443                           
 19444                           ; BSR set to: 0
 19445  0057F0  0012               	return		;funcret
 19446  0057F2                     __end_of_AssembleEncryptionBlock:
 19447                           	opt stack 0
 19448                           tosu	equ	0xFFF
 19449                           tosh	equ	0xFFE
 19450                           tosl	equ	0xFFD
 19451                           pclath	equ	0xFFA
 19452                           tblptru	equ	0xFF8
 19453                           tblptrh	equ	0xFF7
 19454                           tblptrl	equ	0xFF6
 19455                           tablat	equ	0xFF5
 19456                           prodh	equ	0xFF4
 19457                           prodl	equ	0xFF3
 19458                           intcon	equ	0xFF2
 19459                           intcon2	equ	0xFF1
 19460                           intcon3	equ	0xFF0
 19461                           indf0	equ	0xFEF
 19462                           postinc0	equ	0xFEE
 19463                           fsr0h	equ	0xFEA
 19464                           fsr0l	equ	0xFE9
 19465                           wreg	equ	0xFE8
 19466                           postinc1	equ	0xFE6
 19467                           postdec1	equ	0xFE5
 19468                           plusw1	equ	0xFE3
 19469                           fsr1h	equ	0xFE2
 19470                           fsr1l	equ	0xFE1
 19471                           indf2	equ	0xFDF
 19472                           postinc2	equ	0xFDE
 19473                           postdec2	equ	0xFDD
 19474                           plusw2	equ	0xFDB
 19475                           fsr2h	equ	0xFDA
 19476                           fsr2l	equ	0xFD9
 19477                           status	equ	0xFD8
 19478                           
 19479 ;; *************** function _CountfOptsLength *****************
 19480 ;; Defined at:
 19481 ;;		line 2134 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19482 ;; Parameters:    Size  Location     Type
 19483 ;;		None
 19484 ;; Auto vars:     Size  Location     Type
 19485 ;;  i               1   11[BANK0 ] unsigned char 
 19486 ;;  macCommandLe    1   10[BANK0 ] unsigned char 
 19487 ;; Return value:  Size  Location     Type
 19488 ;;                  1    wreg      unsigned char 
 19489 ;; Registers used:
 19490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 19491 ;; Tracked objects:
 19492 ;;		On entry : C/2
 19493 ;;		On exit  : F/0
 19494 ;;		Unchanged: 0/0
 19495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19497 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19498 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19499 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19500 ;;Total ram usage:        8 bytes
 19501 ;; Hardware stack levels used:    1
 19502 ;; Hardware stack levels required when called:    7
 19503 ;; This function calls:
 19504 ;;		Nothing
 19505 ;; This function is called by:
 19506 ;;		_LORAWAN_GetMaxPayloadSize
 19507 ;;		_AssemblePacket
 19508 ;; This function uses a non-reentrant model
 19509 ;;
 19510                           
 19511                           	psect	text99
 19512  0058A2                     __ptext99:
 19513                           	opt stack 0
 19514  0058A2                     _CountfOptsLength:
 19515                           	opt stack 20
 19516                           
 19517                           ;lorawan.c: 2136: uint8_t i, macCommandLength=0;
 19518                           
 19519                           ; BSR set to: 0
 19520                           ;incstack = 0
 19521  0058A2  0100               	movlb	0	; () banked
 19522  0058A4  6B6A               	clrf	CountfOptsLength@macCommandLength& (0+255),b
 19523                           
 19524                           ;lorawan.c: 2138: for (i = 0; i < loRa.crtMacCmdIndex; i++)
 19525  0058A6  6B6B               	clrf	CountfOptsLength@i& (0+255),b
 19526  0058A8  D04D               	goto	l12950
 19527  0058AA                     l12942:
 19528                           
 19529                           ; BSR set to: 0
 19530                           ;lorawan.c: 2139: {
 19531                           ;lorawan.c: 2140: if(loRa.macCommands[i].receivedCid != 0xFF)
 19532  0058AA  516B               	movf	CountfOptsLength@i& (0+255),w,b
 19533  0058AC  0D02               	mullw	2
 19534  0058AE  0EA8               	movlw	low (_loRa+168)
 19535  0058B0  24F3               	addwf	prodl,w,c
 19536  0058B2  6ED9               	movwf	fsr2l,c
 19537  0058B4  0E02               	movlw	high (_loRa+168)
 19538  0058B6  20F4               	addwfc	prodh,w,c
 19539  0058B8  6EDA               	movwf	fsr2h,c
 19540  0058BA  28DE               	incf	postinc2,w,c
 19541  0058BC  E042               	bz	l12948
 19542                           
 19543                           ; BSR set to: 0
 19544                           ;lorawan.c: 2141: {
 19545                           ;lorawan.c: 2142: if((macCommandLength + macEndDevCmdReplyLen[loRa.macCommands[i].receiv
      +                          edCid - 2]) <= 0x0F)
 19546  0058BE  0EFE               	movlw	254
 19547  0058C0  6F64               	movwf	??_CountfOptsLength& (0+255),b
 19548  0058C2  6965               	setf	(??_CountfOptsLength+1)& (0+255),b
 19549  0058C4  516B               	movf	CountfOptsLength@i& (0+255),w,b
 19550  0058C6  0D02               	mullw	2
 19551  0058C8  0EA8               	movlw	low (_loRa+168)
 19552  0058CA  24F3               	addwf	prodl,w,c
 19553  0058CC  6ED9               	movwf	fsr2l,c
 19554  0058CE  0E02               	movlw	high (_loRa+168)
 19555  0058D0  20F4               	addwfc	prodh,w,c
 19556  0058D2  6EDA               	movwf	fsr2h,c
 19557  0058D4  50DF               	movf	indf2,w,c
 19558  0058D6  6F66               	movwf	(??_CountfOptsLength+2)& (0+255),b
 19559  0058D8  6B67               	clrf	(??_CountfOptsLength+3)& (0+255),b
 19560  0058DA  5164               	movf	??_CountfOptsLength& (0+255),w,b
 19561  0058DC  2766               	addwf	(??_CountfOptsLength+2)& (0+255),f,b
 19562  0058DE  5165               	movf	(??_CountfOptsLength+1)& (0+255),w,b
 19563  0058E0  2367               	addwfc	(??_CountfOptsLength+3)& (0+255),f,b
 19564  0058E2  0E94               	movlw	low _macEndDevCmdReplyLen
 19565  0058E4  2566               	addwf	(??_CountfOptsLength+2)& (0+255),w,b
 19566  0058E6  6EF6               	movwf	tblptrl,c
 19567  0058E8  0E7F               	movlw	high _macEndDevCmdReplyLen
 19568  0058EA  2167               	addwfc	(??_CountfOptsLength+3)& (0+255),w,b
 19569  0058EC  6EF7               	movwf	tblptrh,c
 19570  0058EE                     	if	0	;There are less than 3 active tblptr bytes
 19571  0058EE                     	endif
 19572  0058EE  0008               	tblrd		*
 19573  0058F0  50F5               	movf	tablat,w,c
 19574  0058F2  C06A  F068         	movff	CountfOptsLength@macCommandLength,??_CountfOptsLength+4
 19575  0058F6  6B69               	clrf	(??_CountfOptsLength+5)& (0+255),b
 19576  0058F8  2768               	addwf	(??_CountfOptsLength+4)& (0+255),f,b
 19577  0058FA  0E00               	movlw	0
 19578  0058FC  2369               	addwfc	(??_CountfOptsLength+5)& (0+255),f,b
 19579  0058FE  BF69               	btfsc	(??_CountfOptsLength+5)& (0+255),7,b
 19580  005900  D005               	goto	l12946
 19581  005902  5169               	movf	(??_CountfOptsLength+5)& (0+255),w,b
 19582  005904  E124               	bnz	l12952
 19583  005906  0E10               	movlw	16
 19584  005908  5D68               	subwf	(??_CountfOptsLength+4)& (0+255),w,b
 19585  00590A  E221               	bc	l12952
 19586  00590C                     l12946:
 19587                           
 19588                           ; BSR set to: 0
 19589                           ;lorawan.c: 2143: {
 19590                           ;lorawan.c: 2144: macCommandLength += macEndDevCmdReplyLen[loRa.macCommands[i].receivedC
      +                          id - 2];
 19591  00590C  0EFE               	movlw	254
 19592  00590E  6F64               	movwf	??_CountfOptsLength& (0+255),b
 19593  005910  6965               	setf	(??_CountfOptsLength+1)& (0+255),b
 19594  005912  516B               	movf	CountfOptsLength@i& (0+255),w,b
 19595  005914  0D02               	mullw	2
 19596  005916  0EA8               	movlw	low (_loRa+168)
 19597  005918  24F3               	addwf	prodl,w,c
 19598  00591A  6ED9               	movwf	fsr2l,c
 19599  00591C  0E02               	movlw	high (_loRa+168)
 19600  00591E  20F4               	addwfc	prodh,w,c
 19601  005920  6EDA               	movwf	fsr2h,c
 19602  005922  50DF               	movf	indf2,w,c
 19603  005924  6F66               	movwf	(??_CountfOptsLength+2)& (0+255),b
 19604  005926  6B67               	clrf	(??_CountfOptsLength+3)& (0+255),b
 19605  005928  5164               	movf	??_CountfOptsLength& (0+255),w,b
 19606  00592A  2766               	addwf	(??_CountfOptsLength+2)& (0+255),f,b
 19607  00592C  5165               	movf	(??_CountfOptsLength+1)& (0+255),w,b
 19608  00592E  2367               	addwfc	(??_CountfOptsLength+3)& (0+255),f,b
 19609  005930  0E94               	movlw	low _macEndDevCmdReplyLen
 19610  005932  2566               	addwf	(??_CountfOptsLength+2)& (0+255),w,b
 19611  005934  6EF6               	movwf	tblptrl,c
 19612  005936  0E7F               	movlw	high _macEndDevCmdReplyLen
 19613  005938  2167               	addwfc	(??_CountfOptsLength+3)& (0+255),w,b
 19614  00593A  6EF7               	movwf	tblptrh,c
 19615  00593C                     	if	0	;There are less than 3 active tblptr bytes
 19616  00593C                     	endif
 19617  00593C  0008               	tblrd		*
 19618  00593E  50F5               	movf	tablat,w,c
 19619  005940  276A               	addwf	CountfOptsLength@macCommandLength& (0+255),f,b
 19620  005942                     l12948:
 19621                           
 19622                           ; BSR set to: 0
 19623  005942  2B6B               	incf	CountfOptsLength@i& (0+255),f,b
 19624  005944                     l12950:
 19625                           
 19626                           ; BSR set to: 0
 19627  005944  0102               	movlb	2	; () banked
 19628  005946  51A7               	movf	(_loRa+167)& (0+255),w,b
 19629  005948  0100               	movlb	0	; () banked
 19630  00594A  5D6B               	subwf	CountfOptsLength@i& (0+255),w,b
 19631  00594C  E3AE               	bnc	l12942
 19632  00594E                     l12952:
 19633                           
 19634                           ; BSR set to: 0
 19635                           ;lorawan.c: 2149: }
 19636                           ;lorawan.c: 2150: }
 19637                           ;lorawan.c: 2151: }
 19638                           ;lorawan.c: 2153: return macCommandLength;
 19639  00594E  516A               	movf	CountfOptsLength@macCommandLength& (0+255),w,b
 19640                           
 19641                           ; BSR set to: 0
 19642  005950  0012               	return		;funcret
 19643  005952                     __end_of_CountfOptsLength:
 19644                           	opt stack 0
 19645                           tosu	equ	0xFFF
 19646                           tosh	equ	0xFFE
 19647                           tosl	equ	0xFFD
 19648                           pclath	equ	0xFFA
 19649                           tblptru	equ	0xFF8
 19650                           tblptrh	equ	0xFF7
 19651                           tblptrl	equ	0xFF6
 19652                           tablat	equ	0xFF5
 19653                           prodh	equ	0xFF4
 19654                           prodl	equ	0xFF3
 19655                           intcon	equ	0xFF2
 19656                           intcon2	equ	0xFF1
 19657                           intcon3	equ	0xFF0
 19658                           indf0	equ	0xFEF
 19659                           postinc0	equ	0xFEE
 19660                           fsr0h	equ	0xFEA
 19661                           fsr0l	equ	0xFE9
 19662                           wreg	equ	0xFE8
 19663                           postinc1	equ	0xFE6
 19664                           postdec1	equ	0xFE5
 19665                           plusw1	equ	0xFE3
 19666                           fsr1h	equ	0xFE2
 19667                           fsr1l	equ	0xFE1
 19668                           indf2	equ	0xFDF
 19669                           postinc2	equ	0xFDE
 19670                           postdec2	equ	0xFDD
 19671                           plusw2	equ	0xFDB
 19672                           fsr2h	equ	0xFDA
 19673                           fsr2l	equ	0xFD9
 19674                           status	equ	0xFD8
 19675                           
 19676 ;; *************** function _ExtractMic *****************
 19677 ;; Defined at:
 19678 ;;		line 2187 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19679 ;; Parameters:    Size  Location     Type
 19680 ;;  buffer          2   14[BANK0 ] PTR unsigned char 
 19681 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 19682 ;;  bufferLength    1   16[BANK0 ] unsigned char 
 19683 ;; Auto vars:     Size  Location     Type
 19684 ;;  mic             4   20[BANK0 ] unsigned long 
 19685 ;; Return value:  Size  Location     Type
 19686 ;;                  4   14[BANK0 ] unsigned long 
 19687 ;; Registers used:
 19688 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19689 ;; Tracked objects:
 19690 ;;		On entry : F/0
 19691 ;;		On exit  : F/0
 19692 ;;		Unchanged: 0/0
 19693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19694 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19695 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19696 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19697 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19698 ;;Total ram usage:       10 bytes
 19699 ;; Hardware stack levels used:    1
 19700 ;; Hardware stack levels required when called:    8
 19701 ;; This function calls:
 19702 ;;		_memcpy
 19703 ;; This function is called by:
 19704 ;;		_LORAWAN_RxDone
 19705 ;; This function uses a non-reentrant model
 19706 ;;
 19707                           
 19708                           	psect	text100
 19709  006C04                     __ptext100:
 19710                           	opt stack 0
 19711  006C04                     _ExtractMic:
 19712                           	opt stack 18
 19713                           
 19714                           ; BSR set to: 0
 19715                           ;lorawan.c: 2189: uint32_t mic = 0;
 19716                           
 19717                           ; BSR set to: 0
 19718                           ;incstack = 0
 19719  006C04  6B74               	clrf	ExtractMic@mic& (0+255),b
 19720  006C06  6B75               	clrf	(ExtractMic@mic+1)& (0+255),b
 19721  006C08  6B76               	clrf	(ExtractMic@mic+2)& (0+255),b
 19722  006C0A  6B77               	clrf	(ExtractMic@mic+3)& (0+255),b
 19723                           
 19724                           ; BSR set to: 0
 19725                           ;lorawan.c: 2190: memcpy (&mic, &buffer[bufferLength - 4], sizeof (mic));
 19726  006C0C  0E74               	movlw	low ExtractMic@mic
 19727  006C0E  6F64               	movwf	memcpy@d1& (0+255),b
 19728  006C10  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 19729  006C12  5170               	movf	ExtractMic@bufferLength& (0+255),w,b
 19730  006C14  256E               	addwf	ExtractMic@buffer& (0+255),w,b
 19731  006C16  6F72               	movwf	??_ExtractMic& (0+255),b
 19732  006C18  0E00               	movlw	0
 19733  006C1A  216F               	addwfc	(ExtractMic@buffer+1)& (0+255),w,b
 19734  006C1C  6F73               	movwf	(??_ExtractMic+1)& (0+255),b
 19735  006C1E  0EFC               	movlw	252
 19736  006C20  2572               	addwf	??_ExtractMic& (0+255),w,b
 19737  006C22  6F66               	movwf	memcpy@s1& (0+255),b
 19738  006C24  0EFF               	movlw	255
 19739  006C26  2173               	addwfc	(??_ExtractMic+1)& (0+255),w,b
 19740  006C28  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 19741  006C2A  6B69               	clrf	(memcpy@n+1)& (0+255),b
 19742  006C2C  0E04               	movlw	4
 19743  006C2E  6F68               	movwf	memcpy@n& (0+255),b
 19744  006C30  ECCA  F033         	call	_memcpy	;wreg free
 19745                           
 19746                           ; BSR set to: 0
 19747                           ;lorawan.c: 2191: return mic;
 19748  006C34  C074  F06E         	movff	ExtractMic@mic,?_ExtractMic
 19749  006C38  C075  F06F         	movff	ExtractMic@mic+1,?_ExtractMic+1
 19750  006C3C  C076  F070         	movff	ExtractMic@mic+2,?_ExtractMic+2
 19751  006C40  C077  F071         	movff	ExtractMic@mic+3,?_ExtractMic+3
 19752                           
 19753                           ; BSR set to: 0
 19754  006C44  0012               	return		;funcret
 19755  006C46                     __end_of_ExtractMic:
 19756                           	opt stack 0
 19757                           tosu	equ	0xFFF
 19758                           tosh	equ	0xFFE
 19759                           tosl	equ	0xFFD
 19760                           pclath	equ	0xFFA
 19761                           tblptru	equ	0xFF8
 19762                           tblptrh	equ	0xFF7
 19763                           tblptrl	equ	0xFF6
 19764                           tablat	equ	0xFF5
 19765                           prodh	equ	0xFF4
 19766                           prodl	equ	0xFF3
 19767                           intcon	equ	0xFF2
 19768                           intcon2	equ	0xFF1
 19769                           intcon3	equ	0xFF0
 19770                           indf0	equ	0xFEF
 19771                           postinc0	equ	0xFEE
 19772                           fsr0h	equ	0xFEA
 19773                           fsr0l	equ	0xFE9
 19774                           wreg	equ	0xFE8
 19775                           postinc1	equ	0xFE6
 19776                           postdec1	equ	0xFE5
 19777                           plusw1	equ	0xFE3
 19778                           fsr1h	equ	0xFE2
 19779                           fsr1l	equ	0xFE1
 19780                           indf2	equ	0xFDF
 19781                           postinc2	equ	0xFDE
 19782                           postdec2	equ	0xFDD
 19783                           plusw2	equ	0xFDB
 19784                           fsr2h	equ	0xFDA
 19785                           fsr2l	equ	0xFD9
 19786                           status	equ	0xFD8
 19787                           
 19788 ;; *************** function _ComputeSessionKeys *****************
 19789 ;; Defined at:
 19790 ;;		line 2062 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19791 ;; Parameters:    Size  Location     Type
 19792 ;;  joinAcceptBu    2   68[BANK0 ] PTR struct .
 19793 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 19794 ;; Auto vars:     Size  Location     Type
 19795 ;;		None
 19796 ;; Return value:  Size  Location     Type
 19797 ;;                  1    wreg      void 
 19798 ;; Registers used:
 19799 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19800 ;; Tracked objects:
 19801 ;;		On entry : D/0
 19802 ;;		On exit  : F/0
 19803 ;;		Unchanged: 0/0
 19804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19805 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19808 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19809 ;;Total ram usage:        2 bytes
 19810 ;; Hardware stack levels used:    1
 19811 ;; Hardware stack levels required when called:   10
 19812 ;; This function calls:
 19813 ;;		_AESEncodeLoRa
 19814 ;;		_PrepareSessionKeys
 19815 ;; This function is called by:
 19816 ;;		_LORAWAN_RxDone
 19817 ;; This function uses a non-reentrant model
 19818 ;;
 19819                           
 19820                           	psect	text101
 19821  005DFA                     __ptext101:
 19822                           	opt stack 0
 19823  005DFA                     _ComputeSessionKeys:
 19824                           	opt stack 16
 19825                           
 19826                           ;lorawan.c: 2064: PrepareSessionKeys(loRa.activationParameters.applicationSessionKey, jo
      +                          inAcceptBuffer->members.appNonce, joinAcceptBuffer->members.networkId);
 19827                           
 19828                           ; BSR set to: 0
 19829                           ;incstack = 0
 19830  005DFA  0E32               	movlw	low (_loRa+50)
 19831  005DFC  0100               	movlb	0	; () banked
 19832  005DFE  6F6E               	movwf	PrepareSessionKeys@sessionKey& (0+255),b
 19833  005E00  0E02               	movlw	high (_loRa+50)
 19834  005E02  6F6F               	movwf	(PrepareSessionKeys@sessionKey+1)& (0+255),b
 19835  005E04  29A4               	incf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 19836  005E06  6F70               	movwf	PrepareSessionKeys@appNonce& (0+255),b
 19837  005E08  0E00               	movlw	0
 19838  005E0A  21A5               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 19839  005E0C  6F71               	movwf	(PrepareSessionKeys@appNonce+1)& (0+255),b
 19840  005E0E  0E04               	movlw	4
 19841  005E10  25A4               	addwf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 19842  005E12  6F72               	movwf	PrepareSessionKeys@networkId& (0+255),b
 19843  005E14  0E00               	movlw	0
 19844  005E16  21A5               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 19845  005E18  6F73               	movwf	(PrepareSessionKeys@networkId+1)& (0+255),b
 19846  005E1A  EC7B  F02F         	call	_PrepareSessionKeys	;wreg free
 19847                           
 19848                           ; BSR set to: 0
 19849                           ;lorawan.c: 2065: loRa.activationParameters.applicationSessionKey[0] = 0x02;
 19850  005E1E  0E02               	movlw	2
 19851  005E20  0102               	movlb	2	; () banked
 19852  005E22  6F32               	movwf	(_loRa+50)& (0+255),b
 19853                           
 19854                           ; BSR set to: 2
 19855                           ;lorawan.c: 2066: AESEncodeLoRa(loRa.activationParameters.applicationSessionKey, loRa.ac
      +                          tivationParameters.applicationKey);
 19856  005E24  0E32               	movlw	low (_loRa+50)
 19857  005E26  0100               	movlb	0	; () banked
 19858  005E28  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 19859  005E2A  0E02               	movlw	high (_loRa+50)
 19860  005E2C  6F91               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 19861  005E2E  0E42               	movlw	low (_loRa+66)
 19862  005E30  6F92               	movwf	AESEncodeLoRa@key& (0+255),b
 19863  005E32  0E02               	movlw	high (_loRa+66)
 19864  005E34  6F93               	movwf	(AESEncodeLoRa@key+1)& (0+255),b
 19865  005E36  EC09  F039         	call	_AESEncodeLoRa	;wreg free
 19866                           
 19867                           ; BSR set to: 0
 19868                           ;lorawan.c: 2068: PrepareSessionKeys(loRa.activationParameters.networkSessionKey, joinAc
      +                          ceptBuffer->members.appNonce, joinAcceptBuffer->members.networkId);
 19869  005E3A  0E22               	movlw	low (_loRa+34)
 19870  005E3C  6F6E               	movwf	PrepareSessionKeys@sessionKey& (0+255),b
 19871  005E3E  0E02               	movlw	high (_loRa+34)
 19872  005E40  6F6F               	movwf	(PrepareSessionKeys@sessionKey+1)& (0+255),b
 19873  005E42  29A4               	incf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 19874  005E44  6F70               	movwf	PrepareSessionKeys@appNonce& (0+255),b
 19875  005E46  0E00               	movlw	0
 19876  005E48  21A5               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 19877  005E4A  6F71               	movwf	(PrepareSessionKeys@appNonce+1)& (0+255),b
 19878  005E4C  0E04               	movlw	4
 19879  005E4E  25A4               	addwf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 19880  005E50  6F72               	movwf	PrepareSessionKeys@networkId& (0+255),b
 19881  005E52  0E00               	movlw	0
 19882  005E54  21A5               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 19883  005E56  6F73               	movwf	(PrepareSessionKeys@networkId+1)& (0+255),b
 19884  005E58  EC7B  F02F         	call	_PrepareSessionKeys	;wreg free
 19885                           
 19886                           ; BSR set to: 0
 19887                           ;lorawan.c: 2069: loRa.activationParameters.networkSessionKey[0] = 0x01;
 19888  005E5C  0E01               	movlw	1
 19889  005E5E  0102               	movlb	2	; () banked
 19890  005E60  6F22               	movwf	(_loRa+34)& (0+255),b
 19891                           
 19892                           ;lorawan.c: 2070: AESEncodeLoRa(loRa.activationParameters.networkSessionKey, loRa.activa
      +                          tionParameters.applicationKey);
 19893  005E62  0E22               	movlw	low (_loRa+34)
 19894  005E64  0100               	movlb	0	; () banked
 19895  005E66  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 19896  005E68  0E02               	movlw	high (_loRa+34)
 19897  005E6A  6F91               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 19898  005E6C  0E42               	movlw	low (_loRa+66)
 19899  005E6E  6F92               	movwf	AESEncodeLoRa@key& (0+255),b
 19900  005E70  0E02               	movlw	high (_loRa+66)
 19901  005E72  6F93               	movwf	(AESEncodeLoRa@key+1)& (0+255),b
 19902  005E74  EF09  F039         	goto	_AESEncodeLoRa	;wreg free
 19903  005E78                     __end_of_ComputeSessionKeys:
 19904                           	opt stack 0
 19905                           tosu	equ	0xFFF
 19906                           tosh	equ	0xFFE
 19907                           tosl	equ	0xFFD
 19908                           pclath	equ	0xFFA
 19909                           tblptru	equ	0xFF8
 19910                           tblptrh	equ	0xFF7
 19911                           tblptrl	equ	0xFF6
 19912                           tablat	equ	0xFF5
 19913                           prodh	equ	0xFF4
 19914                           prodl	equ	0xFF3
 19915                           intcon	equ	0xFF2
 19916                           intcon2	equ	0xFF1
 19917                           intcon3	equ	0xFF0
 19918                           indf0	equ	0xFEF
 19919                           postinc0	equ	0xFEE
 19920                           fsr0h	equ	0xFEA
 19921                           fsr0l	equ	0xFE9
 19922                           wreg	equ	0xFE8
 19923                           postinc1	equ	0xFE6
 19924                           postdec1	equ	0xFE5
 19925                           plusw1	equ	0xFE3
 19926                           fsr1h	equ	0xFE2
 19927                           fsr1l	equ	0xFE1
 19928                           indf2	equ	0xFDF
 19929                           postinc2	equ	0xFDE
 19930                           postdec2	equ	0xFDD
 19931                           plusw2	equ	0xFDB
 19932                           fsr2h	equ	0xFDA
 19933                           fsr2l	equ	0xFD9
 19934                           status	equ	0xFD8
 19935                           
 19936 ;; *************** function _PrepareSessionKeys *****************
 19937 ;; Defined at:
 19938 ;;		line 2045 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19939 ;; Parameters:    Size  Location     Type
 19940 ;;  sessionKey      2   14[BANK0 ] PTR unsigned char 
 19941 ;;		 -> loRa.activationParameters(105), loRa(245), 
 19942 ;;  appNonce        2   16[BANK0 ] PTR unsigned char 
 19943 ;;		 -> ComputeSessionKeys@joinAcceptBuffer(2), LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 19944 ;;  networkId       2   18[BANK0 ] PTR unsigned char 
 19945 ;;		 -> ComputeSessionKeys@joinAcceptBuffer(2), LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 19946 ;; Auto vars:     Size  Location     Type
 19947 ;;  index           1   20[BANK0 ] unsigned char 
 19948 ;; Return value:  Size  Location     Type
 19949 ;;                  1    wreg      void 
 19950 ;; Registers used:
 19951 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19952 ;; Tracked objects:
 19953 ;;		On entry : F/0
 19954 ;;		On exit  : F/0
 19955 ;;		Unchanged: 0/0
 19956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19957 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19958 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19960 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19961 ;;Total ram usage:        7 bytes
 19962 ;; Hardware stack levels used:    1
 19963 ;; Hardware stack levels required when called:    8
 19964 ;; This function calls:
 19965 ;;		_memcpy
 19966 ;;		_memset
 19967 ;; This function is called by:
 19968 ;;		_ComputeSessionKeys
 19969 ;; This function uses a non-reentrant model
 19970 ;;
 19971                           
 19972                           	psect	text102
 19973  005EF6                     __ptext102:
 19974                           	opt stack 0
 19975  005EF6                     _PrepareSessionKeys:
 19976                           	opt stack 17
 19977                           
 19978                           ; BSR set to: 0
 19979                           ;lorawan.c: 2047: uint8_t index = 0;
 19980                           
 19981                           ; BSR set to: 0
 19982                           ;incstack = 0
 19983  005EF6  6B74               	clrf	PrepareSessionKeys@index& (0+255),b
 19984                           
 19985                           ; BSR set to: 0
 19986                           ;lorawan.c: 2049: memset (&sessionKey[index], 0, sizeof(aesBuffer));
 19987  005EF8  C06E  F064         	movff	PrepareSessionKeys@sessionKey,memset@p1
 19988  005EFC  C06F  F065         	movff	PrepareSessionKeys@sessionKey+1,memset@p1+1
 19989  005F00  6B67               	clrf	(memset@c+1)& (0+255),b
 19990  005F02  6B66               	clrf	memset@c& (0+255),b
 19991  005F04  6B69               	clrf	(memset@n+1)& (0+255),b
 19992  005F06  0E10               	movlw	16
 19993  005F08  6F68               	movwf	memset@n& (0+255),b
 19994  005F0A  ECE0  F038         	call	_memset	;wreg free
 19995                           
 19996                           ; BSR set to: 0
 19997                           ;lorawan.c: 2050: index ++;
 19998  005F0E  2B74               	incf	PrepareSessionKeys@index& (0+255),f,b
 19999                           
 20000                           ; BSR set to: 0
 20001                           ;lorawan.c: 2052: memcpy(&sessionKey[index], appNonce, 3);
 20002  005F10  5174               	movf	PrepareSessionKeys@index& (0+255),w,b
 20003  005F12  256E               	addwf	PrepareSessionKeys@sessionKey& (0+255),w,b
 20004  005F14  6F64               	movwf	memcpy@d1& (0+255),b
 20005  005F16  0E00               	movlw	0
 20006  005F18  216F               	addwfc	(PrepareSessionKeys@sessionKey+1)& (0+255),w,b
 20007  005F1A  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 20008  005F1C  C070  F066         	movff	PrepareSessionKeys@appNonce,memcpy@s1
 20009  005F20  C071  F067         	movff	PrepareSessionKeys@appNonce+1,memcpy@s1+1
 20010  005F24  6B69               	clrf	(memcpy@n+1)& (0+255),b
 20011  005F26  0E03               	movlw	3
 20012  005F28  6F68               	movwf	memcpy@n& (0+255),b
 20013  005F2A  ECCA  F033         	call	_memcpy	;wreg free
 20014                           
 20015                           ; BSR set to: 0
 20016                           ;lorawan.c: 2053: index = index + 3;
 20017  005F2E  0E03               	movlw	3
 20018  005F30  2774               	addwf	PrepareSessionKeys@index& (0+255),f,b
 20019                           
 20020                           ; BSR set to: 0
 20021                           ;lorawan.c: 2055: memcpy(&sessionKey[index], networkId, 3);
 20022  005F32  5174               	movf	PrepareSessionKeys@index& (0+255),w,b
 20023  005F34  256E               	addwf	PrepareSessionKeys@sessionKey& (0+255),w,b
 20024  005F36  6F64               	movwf	memcpy@d1& (0+255),b
 20025  005F38  0E00               	movlw	0
 20026  005F3A  216F               	addwfc	(PrepareSessionKeys@sessionKey+1)& (0+255),w,b
 20027  005F3C  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 20028  005F3E  C072  F066         	movff	PrepareSessionKeys@networkId,memcpy@s1
 20029  005F42  C073  F067         	movff	PrepareSessionKeys@networkId+1,memcpy@s1+1
 20030  005F46  6B69               	clrf	(memcpy@n+1)& (0+255),b
 20031  005F48  0E03               	movlw	3
 20032  005F4A  6F68               	movwf	memcpy@n& (0+255),b
 20033  005F4C  ECCA  F033         	call	_memcpy	;wreg free
 20034                           
 20035                           ; BSR set to: 0
 20036                           ;lorawan.c: 2056: index = index + 3;
 20037  005F50  0E03               	movlw	3
 20038  005F52  2774               	addwf	PrepareSessionKeys@index& (0+255),f,b
 20039                           
 20040                           ; BSR set to: 0
 20041                           ;lorawan.c: 2058: memcpy(&sessionKey[index], &loRa.devNonce, sizeof(loRa.devNonce) );
 20042  005F54  5174               	movf	PrepareSessionKeys@index& (0+255),w,b
 20043  005F56  256E               	addwf	PrepareSessionKeys@sessionKey& (0+255),w,b
 20044  005F58  6F64               	movwf	memcpy@d1& (0+255),b
 20045  005F5A  0E00               	movlw	0
 20046  005F5C  216F               	addwfc	(PrepareSessionKeys@sessionKey+1)& (0+255),w,b
 20047  005F5E  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 20048  005F60  0ED2               	movlw	low (_loRa+210)
 20049  005F62  6F66               	movwf	memcpy@s1& (0+255),b
 20050  005F64  0E02               	movlw	high (_loRa+210)
 20051  005F66  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 20052  005F68  6B69               	clrf	(memcpy@n+1)& (0+255),b
 20053  005F6A  0E02               	movlw	2
 20054  005F6C  6F68               	movwf	memcpy@n& (0+255),b
 20055  005F6E  EFCA  F033         	goto	_memcpy	;wreg free
 20056  005F72                     __end_of_PrepareSessionKeys:
 20057                           	opt stack 0
 20058                           tosu	equ	0xFFF
 20059                           tosh	equ	0xFFE
 20060                           tosl	equ	0xFFD
 20061                           pclath	equ	0xFFA
 20062                           tblptru	equ	0xFF8
 20063                           tblptrh	equ	0xFF7
 20064                           tblptrl	equ	0xFF6
 20065                           tablat	equ	0xFF5
 20066                           prodh	equ	0xFF4
 20067                           prodl	equ	0xFF3
 20068                           intcon	equ	0xFF2
 20069                           intcon2	equ	0xFF1
 20070                           intcon3	equ	0xFF0
 20071                           indf0	equ	0xFEF
 20072                           postinc0	equ	0xFEE
 20073                           fsr0h	equ	0xFEA
 20074                           fsr0l	equ	0xFE9
 20075                           wreg	equ	0xFE8
 20076                           postinc1	equ	0xFE6
 20077                           postdec1	equ	0xFE5
 20078                           plusw1	equ	0xFE3
 20079                           fsr1h	equ	0xFE2
 20080                           fsr1l	equ	0xFE1
 20081                           indf2	equ	0xFDF
 20082                           postinc2	equ	0xFDE
 20083                           postdec2	equ	0xFDD
 20084                           plusw2	equ	0xFDB
 20085                           fsr2h	equ	0xFDA
 20086                           fsr2l	equ	0xFD9
 20087                           status	equ	0xFD8
 20088                           
 20089 ;; *************** function _CheckMcastFlags *****************
 20090 ;; Defined at:
 20091 ;;		line 2097 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20092 ;; Parameters:    Size  Location     Type
 20093 ;;  hdr             2    4[BANK0 ] PTR struct .
 20094 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 20095 ;; Auto vars:     Size  Location     Type
 20096 ;;		None
 20097 ;; Return value:  Size  Location     Type
 20098 ;;                  1    wreg      unsigned char 
 20099 ;; Registers used:
 20100 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20101 ;; Tracked objects:
 20102 ;;		On entry : F/2
 20103 ;;		On exit  : D/0
 20104 ;;		Unchanged: 0/0
 20105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20106 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20109 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20110 ;;Total ram usage:        2 bytes
 20111 ;; Hardware stack levels used:    1
 20112 ;; Hardware stack levels required when called:    7
 20113 ;; This function calls:
 20114 ;;		Nothing
 20115 ;; This function is called by:
 20116 ;;		_LORAWAN_RxDone
 20117 ;; This function uses a non-reentrant model
 20118 ;;
 20119                           
 20120                           	psect	text103
 20121  0060E0                     __ptext103:
 20122                           	opt stack 0
 20123  0060E0                     _CheckMcastFlags:
 20124                           	opt stack 19
 20125                           
 20126                           ; BSR set to: 2
 20127                           ;lorawan.c: 2109: if ((0 != hdr->members.fCtrl.ack) || (0 != hdr->members.fCtrl.adrAckRe
      +                          q) || (FRAME_TYPE_DATA_UNCONFIRMED_DOWN != hdr->members.mhdr.bits.mType))
 20128                           
 20129                           ; BSR set to: 0
 20130                           ;incstack = 0
 20131  0060E0  0100               	movlb	0	; () banked
 20132  0060E2  EE20 F005          	lfsr	2,5
 20133  0060E6  5164               	movf	CheckMcastFlags@hdr& (0+255),w,b
 20134  0060E8  26D9               	addwf	fsr2l,f,c
 20135  0060EA  5165               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 20136  0060EC  22DA               	addwfc	fsr2h,f,c
 20137  0060EE  BADF               	btfsc	indf2,5,c
 20138  0060F0  0C00               	retlw	0
 20139                           
 20140                           ; BSR set to: 0
 20141  0060F2  EE20 F005          	lfsr	2,5
 20142  0060F6  5164               	movf	CheckMcastFlags@hdr& (0+255),w,b
 20143  0060F8  26D9               	addwf	fsr2l,f,c
 20144  0060FA  5165               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 20145  0060FC  22DA               	addwfc	fsr2h,f,c
 20146  0060FE  BCDF               	btfsc	indf2,6,c
 20147  006100  0C00               	retlw	0
 20148                           
 20149                           ; BSR set to: 0
 20150  006102  C064  FFD9         	movff	CheckMcastFlags@hdr,fsr2l
 20151  006106  C065  FFDA         	movff	CheckMcastFlags@hdr+1,fsr2h
 20152  00610A  38DF               	swapf	223,w,c
 20153  00610C  32E8               	rrcf	wreg,f,c
 20154  00610E  0B07               	andlw	7
 20155  006110  0A03               	xorlw	3
 20156  006112  E001               	bz	l13762
 20157                           
 20158                           ; BSR set to: 0
 20159                           ;lorawan.c: 2110: {
 20160                           ;lorawan.c: 2111: return 0;
 20161  006114  0C00               	retlw	0
 20162  006116                     l13762:
 20163                           
 20164                           ; BSR set to: 0
 20165                           ;lorawan.c: 2112: }
 20166                           ;lorawan.c: 2114: if (0 != hdr->members.fCtrl.fOptsLen)
 20167  006116  EE20 F005          	lfsr	2,5
 20168  00611A  5164               	movf	CheckMcastFlags@hdr& (0+255),w,b
 20169  00611C  26D9               	addwf	fsr2l,f,c
 20170  00611E  5165               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 20171  006120  22DA               	addwfc	fsr2h,f,c
 20172  006122  50DF               	movf	223,w,c
 20173  006124  0B0F               	andlw	15
 20174  006126  E001               	bz	l13770
 20175  006128  0C00               	retlw	0
 20176  00612A                     l13770:
 20177                           
 20178                           ; BSR set to: 0
 20179                           ;lorawan.c: 2118: else
 20180                           ;lorawan.c: 2119: {
 20181                           ;lorawan.c: 2120: if ( 0 == *(((uint8_t *)hdr) + 8))
 20182  00612A  EE20 F008          	lfsr	2,8
 20183  00612E  5164               	movf	CheckMcastFlags@hdr& (0+255),w,b
 20184  006130  26D9               	addwf	fsr2l,f,c
 20185  006132  5165               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 20186  006134  22DA               	addwfc	fsr2h,f,c
 20187  006136  50DF               	movf	indf2,w,c
 20188  006138  E101               	bnz	l13776
 20189  00613A  0C00               	retlw	0
 20190  00613C                     l13776:
 20191                           
 20192                           ; BSR set to: 0
 20193                           ;lorawan.c: 2123: }
 20194                           ;lorawan.c: 2124: }
 20195                           ;lorawan.c: 2126: if (hdr->members.fCtrl.fPending == 1)
 20196  00613C  EE20 F005          	lfsr	2,5
 20197  006140  5164               	movf	CheckMcastFlags@hdr& (0+255),w,b
 20198  006142  26D9               	addwf	fsr2l,f,c
 20199  006144  5165               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 20200  006146  22DA               	addwfc	fsr2h,f,c
 20201  006148  A8DF               	btfss	indf2,4,c
 20202  00614A  0C01               	retlw	1
 20203                           
 20204                           ; BSR set to: 0
 20205                           ;lorawan.c: 2127: {
 20206                           ;lorawan.c: 2128: loRa.lorawanMacStatus.fPending = 1;
 20207  00614C  0102               	movlb	2	; () banked
 20208  00614E  8700               	bsf	_loRa& (0+255),3,b
 20209                           
 20210                           ;lorawan.c: 2129: }
 20211                           ;lorawan.c: 2131: return 1;
 20212  006150  0C01               	retlw	1	;funcret
 20213  006152                     __end_of_CheckMcastFlags:
 20214                           	opt stack 0
 20215                           tosu	equ	0xFFF
 20216                           tosh	equ	0xFFE
 20217                           tosl	equ	0xFFD
 20218                           pclath	equ	0xFFA
 20219                           tblptru	equ	0xFF8
 20220                           tblptrh	equ	0xFF7
 20221                           tblptrl	equ	0xFF6
 20222                           tablat	equ	0xFF5
 20223                           prodh	equ	0xFF4
 20224                           prodl	equ	0xFF3
 20225                           intcon	equ	0xFF2
 20226                           intcon2	equ	0xFF1
 20227                           intcon3	equ	0xFF0
 20228                           indf0	equ	0xFEF
 20229                           postinc0	equ	0xFEE
 20230                           fsr0h	equ	0xFEA
 20231                           fsr0l	equ	0xFE9
 20232                           wreg	equ	0xFE8
 20233                           postinc1	equ	0xFE6
 20234                           postdec1	equ	0xFE5
 20235                           plusw1	equ	0xFE3
 20236                           fsr1h	equ	0xFE2
 20237                           fsr1l	equ	0xFE1
 20238                           indf2	equ	0xFDF
 20239                           postinc2	equ	0xFDE
 20240                           postdec2	equ	0xFDD
 20241                           plusw2	equ	0xFDB
 20242                           fsr2h	equ	0xFDA
 20243                           fsr2l	equ	0xFD9
 20244                           status	equ	0xFD8
 20245                           
 20246 ;; *************** function _CheckFlags *****************
 20247 ;; Defined at:
 20248 ;;		line 2074 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20249 ;; Parameters:    Size  Location     Type
 20250 ;;  hdr             2    4[BANK0 ] PTR struct .
 20251 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 20252 ;; Auto vars:     Size  Location     Type
 20253 ;;		None
 20254 ;; Return value:  Size  Location     Type
 20255 ;;                  1    wreg      void 
 20256 ;; Registers used:
 20257 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20258 ;; Tracked objects:
 20259 ;;		On entry : F/2
 20260 ;;		On exit  : D/0
 20261 ;;		Unchanged: 0/0
 20262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20263 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20266 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20267 ;;Total ram usage:        2 bytes
 20268 ;; Hardware stack levels used:    1
 20269 ;; Hardware stack levels required when called:    7
 20270 ;; This function calls:
 20271 ;;		Nothing
 20272 ;; This function is called by:
 20273 ;;		_LORAWAN_RxDone
 20274 ;; This function uses a non-reentrant model
 20275 ;;
 20276                           
 20277                           	psect	text104
 20278  006624                     __ptext104:
 20279                           	opt stack 0
 20280  006624                     _CheckFlags:
 20281                           	opt stack 19
 20282                           
 20283                           ; BSR set to: 2
 20284                           ;lorawan.c: 2076: if (hdr->members.fCtrl.adr == 1)
 20285                           
 20286                           ;incstack = 0
 20287  006624  0100               	movlb	0	; () banked
 20288  006626  EE20 F005          	lfsr	2,5
 20289  00662A  5164               	movf	CheckFlags@hdr& (0+255),w,b
 20290  00662C  26D9               	addwf	fsr2l,f,c
 20291  00662E  5165               	movf	(CheckFlags@hdr+1)& (0+255),w,b
 20292  006630  22DA               	addwfc	fsr2h,f,c
 20293  006632  AEDF               	btfss	indf2,7,c
 20294  006634  D002               	goto	l13810
 20295                           
 20296                           ; BSR set to: 0
 20297                           ;lorawan.c: 2077: {
 20298                           ;lorawan.c: 2078: loRa.macStatus.adr = 1;
 20299  006636  0102               	movlb	2	; () banked
 20300  006638  8D02               	bsf	(_loRa+2)& (0+255),6,b
 20301  00663A                     l13810:
 20302                           
 20303                           ;lorawan.c: 2079: }
 20304                           ;lorawan.c: 2081: if (hdr->members.fCtrl.fPending == 1)
 20305  00663A  0100               	movlb	0	; () banked
 20306  00663C  EE20 F005          	lfsr	2,5
 20307  006640  5164               	movf	CheckFlags@hdr& (0+255),w,b
 20308  006642  26D9               	addwf	fsr2l,f,c
 20309  006644  5165               	movf	(CheckFlags@hdr+1)& (0+255),w,b
 20310  006646  22DA               	addwfc	fsr2h,f,c
 20311  006648  A8DF               	btfss	indf2,4,c
 20312  00664A  D002               	goto	l13814
 20313                           
 20314                           ; BSR set to: 0
 20315                           ;lorawan.c: 2082: {
 20316                           ;lorawan.c: 2083: loRa.lorawanMacStatus.fPending = 1;
 20317  00664C  0102               	movlb	2	; () banked
 20318  00664E  8700               	bsf	_loRa& (0+255),3,b
 20319  006650                     l13814:
 20320                           
 20321                           ;lorawan.c: 2084: }
 20322                           ;lorawan.c: 2086: if (hdr->members.fCtrl.adrAckReq == 1)
 20323  006650  0100               	movlb	0	; () banked
 20324  006652  EE20 F005          	lfsr	2,5
 20325  006656  5164               	movf	CheckFlags@hdr& (0+255),w,b
 20326  006658  26D9               	addwf	fsr2l,f,c
 20327  00665A  5165               	movf	(CheckFlags@hdr+1)& (0+255),w,b
 20328  00665C  22DA               	addwfc	fsr2h,f,c
 20329  00665E  ACDF               	btfss	indf2,6,c
 20330  006660  D002               	goto	l13818
 20331                           
 20332                           ; BSR set to: 0
 20333                           ;lorawan.c: 2087: {
 20334                           ;lorawan.c: 2088: loRa.lorawanMacStatus.adrAckRequest = 1;
 20335  006662  0102               	movlb	2	; () banked
 20336  006664  8900               	bsf	_loRa& (0+255),4,b
 20337  006666                     l13818:
 20338                           
 20339                           ;lorawan.c: 2089: }
 20340                           ;lorawan.c: 2091: if (hdr->members.mhdr.bits.mType == FRAME_TYPE_DATA_CONFIRMED_DOWN)
 20341  006666  C064  FFD9         	movff	CheckFlags@hdr,fsr2l
 20342  00666A  C065  FFDA         	movff	CheckFlags@hdr+1,fsr2h
 20343  00666E  0100               	movlb	0	; () banked
 20344  006670  38DF               	swapf	223,w,c
 20345  006672  32E8               	rrcf	wreg,f,c
 20346  006674  0B07               	andlw	7
 20347  006676  0A05               	xorlw	5
 20348  006678  A4D8               	btfss	status,2,c
 20349  00667A  0012               	return	
 20350                           
 20351                           ; BSR set to: 0
 20352                           ;lorawan.c: 2092: {
 20353                           ;lorawan.c: 2093: loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage = 1;
 20354  00667C  0102               	movlb	2	; () banked
 20355  00667E  8300               	bsf	_loRa& (0+255),1,b
 20356  006680  0012               	return		;funcret
 20357  006682                     __end_of_CheckFlags:
 20358                           	opt stack 0
 20359                           tosu	equ	0xFFF
 20360                           tosh	equ	0xFFE
 20361                           tosl	equ	0xFFD
 20362                           pclath	equ	0xFFA
 20363                           tblptru	equ	0xFF8
 20364                           tblptrh	equ	0xFF7
 20365                           tblptrl	equ	0xFF6
 20366                           tablat	equ	0xFF5
 20367                           prodh	equ	0xFF4
 20368                           prodl	equ	0xFF3
 20369                           intcon	equ	0xFF2
 20370                           intcon2	equ	0xFF1
 20371                           intcon3	equ	0xFF0
 20372                           indf0	equ	0xFEF
 20373                           postinc0	equ	0xFEE
 20374                           fsr0h	equ	0xFEA
 20375                           fsr0l	equ	0xFE9
 20376                           wreg	equ	0xFE8
 20377                           postinc1	equ	0xFE6
 20378                           postdec1	equ	0xFE5
 20379                           plusw1	equ	0xFE3
 20380                           fsr1h	equ	0xFE2
 20381                           fsr1l	equ	0xFE1
 20382                           indf2	equ	0xFDF
 20383                           postinc2	equ	0xFDE
 20384                           postdec2	equ	0xFDD
 20385                           plusw2	equ	0xFDB
 20386                           fsr2h	equ	0xFDA
 20387                           fsr2l	equ	0xFD9
 20388                           status	equ	0xFD8
 20389                           
 20390 ;; *************** function _RADIO_FSKPacketSent *****************
 20391 ;; Defined at:
 20392 ;;		line 1093 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 20393 ;; Parameters:    Size  Location     Type
 20394 ;;		None
 20395 ;; Auto vars:     Size  Location     Type
 20396 ;;  timeOnAir       4  116[BANK0 ] unsigned long 
 20397 ;;  irqFlags        1  124[BANK0 ] unsigned char 
 20398 ;; Return value:  Size  Location     Type
 20399 ;;                  1    wreg      void 
 20400 ;; Registers used:
 20401 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20402 ;; Tracked objects:
 20403 ;;		On entry : F/0
 20404 ;;		On exit  : C/0
 20405 ;;		Unchanged: 0/0
 20406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20408 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20409 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20410 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20411 ;;Total ram usage:       13 bytes
 20412 ;; Hardware stack levels used:    1
 20413 ;; Hardware stack levels required when called:   15
 20414 ;; This function calls:
 20415 ;;		_LORAWAN_TxDone
 20416 ;;		_RADIO_RegisterRead
 20417 ;;		_RADIO_WriteMode
 20418 ;;		_SwTimerReadValue
 20419 ;;		_SwTimerStop
 20420 ;; This function is called by:
 20421 ;;		_RADIO_DIO0
 20422 ;; This function uses a non-reentrant model
 20423 ;;
 20424                           
 20425                           	psect	text105
 20426  003A4E                     __ptext105:
 20427                           	opt stack 0
 20428  003A4E                     _RADIO_FSKPacketSent:
 20429                           	opt stack 13
 20430                           
 20431                           ; BSR set to: 0
 20432                           ;radio_driver_SX1276.c: 1095: uint8_t irqFlags;
 20433                           ;radio_driver_SX1276.c: 1096: uint32_t timeOnAir;
 20434                           ;radio_driver_SX1276.c: 1098: irqFlags = RADIO_RegisterRead(0x3F);
 20435                           
 20436                           ;incstack = 0
 20437  003A4E  0E3F               	movlw	63
 20438  003A50  EC30  F039         	call	_RADIO_RegisterRead
 20439  003A54  6FDC               	movwf	RADIO_FSKPacketSent@irqFlags& (0+255),b
 20440                           
 20441                           ; BSR set to: 0
 20442                           ;radio_driver_SX1276.c: 1099: if ((1<<(3)) == (irqFlags & (1<<(3))))
 20443  003A56  A7DC               	btfss	RADIO_FSKPacketSent@irqFlags& (0+255),3,b
 20444  003A58  0012               	return	
 20445                           
 20446                           ; BSR set to: 0
 20447                           ;radio_driver_SX1276.c: 1100: {
 20448                           ;radio_driver_SX1276.c: 1101: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
 20449  003A5A  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 20450  003A5E  0E00               	movlw	0
 20451  003A60  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 20452  003A62  EC8F  F028         	call	_RADIO_WriteMode
 20453                           
 20454                           ;radio_driver_SX1276.c: 1102: RadioConfiguration.flags &= ~(1 << (0));
 20455  003A66  0101               	movlb	1	; () banked
 20456  003A68  9198               	bcf	(_RadioConfiguration+35)& (0+255),0,b
 20457                           
 20458                           ; BSR set to: 1
 20459                           ;radio_driver_SX1276.c: 1104: SwTimerStop(RadioConfiguration.watchdogTimerId);
 20460  003A6A  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 20461  003A6C  EC7F  F03A         	call	_SwTimerStop
 20462                           
 20463                           ; BSR set to: 0
 20464                           ;radio_driver_SX1276.c: 1106: if ((RadioConfiguration.flags & (1 << (4))) == 0)
 20465  003A70  0101               	movlb	1	; () banked
 20466  003A72  B998               	btfsc	(_RadioConfiguration+35)& (0+255),4,b
 20467  003A74  0012               	return	
 20468                           
 20469                           ; BSR set to: 1
 20470                           ;radio_driver_SX1276.c: 1107: {
 20471                           ;radio_driver_SX1276.c: 1108: timeOnAir = ((uint32_t)20000) - ((SwTimerReadValue(RadioCo
      +                          nfiguration.timeOnAirTimerId)) < 0x00DFAC1FUL ? ( (((uint32_t)(SwTimerReadValue(RadioCon
      +                          figuration.timeOnAirTimerId))) * 125UL) >> (12) ) : ( (((uint32_t)(SwTimerReadValue(Radi
      +                          oConfiguration.t
 20472  003A76  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 20473  003A78  EC85  F036         	call	_SwTimerReadValue
 20474  003A7C  518E               	movf	(?_SwTimerReadValue+3)& (0+255),w,b
 20475  003A7E  E107               	bnz	u17360
 20476  003A80  0E1F               	movlw	31
 20477  003A82  5D8B               	subwf	?_SwTimerReadValue& (0+255),w,b
 20478  003A84  0EAC               	movlw	172
 20479  003A86  598C               	subwfb	(?_SwTimerReadValue+1)& (0+255),w,b
 20480  003A88  0EDF               	movlw	223
 20481  003A8A  598D               	subwfb	(?_SwTimerReadValue+2)& (0+255),w,b
 20482  003A8C  E346               	bnc	l14712
 20483  003A8E                     u17360:
 20484                           
 20485                           ; BSR set to: 0
 20486  003A8E  0101               	movlb	1	; () banked
 20487  003A90  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 20488  003A92  EC85  F036         	call	_SwTimerReadValue
 20489  003A96  0E0D               	movlw	13
 20490  003A98  D005               	goto	u17370
 20491  003A9A                     u17375:
 20492  003A9A  90D8               	bcf	status,0,c
 20493  003A9C  338E               	rrcf	(?_SwTimerReadValue+3)& (0+255),f,b
 20494  003A9E  338D               	rrcf	(?_SwTimerReadValue+2)& (0+255),f,b
 20495  003AA0  338C               	rrcf	(?_SwTimerReadValue+1)& (0+255),f,b
 20496  003AA2  338B               	rrcf	?_SwTimerReadValue& (0+255),f,b
 20497  003AA4                     u17370:
 20498  003AA4  2EE8               	decfsz	wreg,f,c
 20499  003AA6  D7F9               	goto	u17375
 20500  003AA8  0E7D               	movlw	125
 20501  003AAA  038B               	mulwf	?_SwTimerReadValue& (0+255),b
 20502  003AAC  CFF3 F0D0          	movff	prodl,??_RADIO_FSKPacketSent
 20503  003AB0  CFF4 F0D1          	movff	prodh,??_RADIO_FSKPacketSent+1
 20504  003AB4  6BD2               	clrf	(??_RADIO_FSKPacketSent+2)& (0+255),b
 20505  003AB6  6BD3               	clrf	(??_RADIO_FSKPacketSent+3)& (0+255),b
 20506  003AB8  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
 20507  003ABA  50F3               	movf	prodl,w,c
 20508  003ABC  27D1               	addwf	(??_RADIO_FSKPacketSent+1)& (0+255),f,b
 20509  003ABE  50F4               	movf	prodh,w,c
 20510  003AC0  23D2               	addwfc	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20511  003AC2  0E00               	movlw	0
 20512  003AC4  23D3               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20513  003AC6  038B               	mulwf	?_SwTimerReadValue& (0+255),b
 20514  003AC8  50F3               	movf	prodl,w,c
 20515  003ACA  27D1               	addwf	(??_RADIO_FSKPacketSent+1)& (0+255),f,b
 20516  003ACC  50F4               	movf	prodh,w,c
 20517  003ACE  23D2               	addwfc	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20518  003AD0  0E00               	movlw	0
 20519  003AD2  23D3               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20520  003AD4  0E7D               	movlw	125
 20521  003AD6  038D               	mulwf	(?_SwTimerReadValue+2)& (0+255),b
 20522  003AD8  50F3               	movf	prodl,w,c
 20523  003ADA  27D2               	addwf	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20524  003ADC  50F4               	movf	prodh,w,c
 20525  003ADE  23D3               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20526  003AE0  0E00               	movlw	0
 20527  003AE2  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
 20528  003AE4  50F3               	movf	prodl,w,c
 20529  003AE6  27D2               	addwf	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20530  003AE8  50F4               	movf	prodh,w,c
 20531  003AEA  23D3               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20532  003AEC  0E00               	movlw	0
 20533  003AEE  038B               	mulwf	?_SwTimerReadValue& (0+255),b
 20534  003AF0  50F3               	movf	prodl,w,c
 20535  003AF2  27D2               	addwf	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20536  003AF4  50F4               	movf	prodh,w,c
 20537  003AF6  23D3               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20538  003AF8  0E7D               	movlw	125
 20539  003AFA  038E               	mulwf	(?_SwTimerReadValue+3)& (0+255),b
 20540  003AFC  50F3               	movf	prodl,w,c
 20541  003AFE  27D3               	addwf	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20542  003B00  0E00               	movlw	0
 20543  003B02  038D               	mulwf	(?_SwTimerReadValue+2)& (0+255),b
 20544  003B04  50F3               	movf	prodl,w,c
 20545  003B06  27D3               	addwf	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20546  003B08  0E00               	movlw	0
 20547  003B0A  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
 20548  003B0C  50F3               	movf	prodl,w,c
 20549  003B0E  27D3               	addwf	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20550  003B10  0E00               	movlw	0
 20551  003B12  038B               	mulwf	?_SwTimerReadValue& (0+255),b
 20552  003B14  50F3               	movf	prodl,w,c
 20553  003B16  27D3               	addwf	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20554  003B18  D045               	goto	L11
 20555  003B1A                     l14712:
 20556                           
 20557                           ; BSR set to: 0
 20558  003B1A  0101               	movlb	1	; () banked
 20559  003B1C  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 20560  003B1E  EC85  F036         	call	_SwTimerReadValue
 20561  003B22  0E7D               	movlw	125
 20562  003B24  038B               	mulwf	?_SwTimerReadValue& (0+255),b
 20563  003B26  CFF3 F0D0          	movff	prodl,??_RADIO_FSKPacketSent
 20564  003B2A  CFF4 F0D1          	movff	prodh,??_RADIO_FSKPacketSent+1
 20565  003B2E  6BD2               	clrf	(??_RADIO_FSKPacketSent+2)& (0+255),b
 20566  003B30  6BD3               	clrf	(??_RADIO_FSKPacketSent+3)& (0+255),b
 20567  003B32  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
 20568  003B34  50F3               	movf	prodl,w,c
 20569  003B36  27D1               	addwf	(??_RADIO_FSKPacketSent+1)& (0+255),f,b
 20570  003B38  50F4               	movf	prodh,w,c
 20571  003B3A  23D2               	addwfc	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20572  003B3C  0E00               	movlw	0
 20573  003B3E  23D3               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20574  003B40  038B               	mulwf	?_SwTimerReadValue& (0+255),b
 20575  003B42  50F3               	movf	prodl,w,c
 20576  003B44  27D1               	addwf	(??_RADIO_FSKPacketSent+1)& (0+255),f,b
 20577  003B46  50F4               	movf	prodh,w,c
 20578  003B48  23D2               	addwfc	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20579  003B4A  0E00               	movlw	0
 20580  003B4C  23D3               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20581  003B4E  0E7D               	movlw	125
 20582  003B50  038D               	mulwf	(?_SwTimerReadValue+2)& (0+255),b
 20583  003B52  50F3               	movf	prodl,w,c
 20584  003B54  27D2               	addwf	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20585  003B56  50F4               	movf	prodh,w,c
 20586  003B58  23D3               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20587  003B5A  0E00               	movlw	0
 20588  003B5C  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
 20589  003B5E  50F3               	movf	prodl,w,c
 20590  003B60  27D2               	addwf	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20591  003B62  50F4               	movf	prodh,w,c
 20592  003B64  23D3               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20593  003B66  0E00               	movlw	0
 20594  003B68  038B               	mulwf	?_SwTimerReadValue& (0+255),b
 20595  003B6A  50F3               	movf	prodl,w,c
 20596  003B6C  27D2               	addwf	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20597  003B6E  50F4               	movf	prodh,w,c
 20598  003B70  23D3               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20599  003B72  0E7D               	movlw	125
 20600  003B74  038E               	mulwf	(?_SwTimerReadValue+3)& (0+255),b
 20601  003B76  50F3               	movf	prodl,w,c
 20602  003B78  27D3               	addwf	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20603  003B7A  0E00               	movlw	0
 20604  003B7C  038D               	mulwf	(?_SwTimerReadValue+2)& (0+255),b
 20605  003B7E  50F3               	movf	prodl,w,c
 20606  003B80  27D3               	addwf	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20607  003B82  0E00               	movlw	0
 20608  003B84  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
 20609  003B86  50F3               	movf	prodl,w,c
 20610  003B88  27D3               	addwf	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20611  003B8A  0E00               	movlw	0
 20612  003B8C  038B               	mulwf	?_SwTimerReadValue& (0+255),b
 20613  003B8E  50F3               	movf	prodl,w,c
 20614  003B90  27D3               	addwf	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20615  003B92  0E0D               	movlw	13
 20616  003B94  D005               	goto	u17380
 20617  003B96                     u17385:
 20618  003B96  90D8               	bcf	status,0,c
 20619  003B98  33D3               	rrcf	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20620  003B9A  33D2               	rrcf	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20621  003B9C  33D1               	rrcf	(??_RADIO_FSKPacketSent+1)& (0+255),f,b
 20622  003B9E  33D0               	rrcf	??_RADIO_FSKPacketSent& (0+255),f,b
 20623  003BA0                     u17380:
 20624  003BA0  2EE8               	decfsz	wreg,f,c
 20625  003BA2  D7F9               	goto	u17385
 20626  003BA4                     L11:
 20627  003BA4  C0D0  F0D8         	movff	??_RADIO_FSKPacketSent,_RADIO_FSKPacketSent$765
 20628  003BA8  C0D1  F0D9         	movff	??_RADIO_FSKPacketSent+1,_RADIO_FSKPacketSent$765+1
 20629  003BAC  C0D2  F0DA         	movff	??_RADIO_FSKPacketSent+2,_RADIO_FSKPacketSent$765+2
 20630  003BB0  C0D3  F0DB         	movff	??_RADIO_FSKPacketSent+3,_RADIO_FSKPacketSent$765+3
 20631                           
 20632                           ; BSR set to: 0
 20633  003BB4  51D8               	movf	_RADIO_FSKPacketSent$765& (0+255),w,b
 20634  003BB6  0820               	sublw	32
 20635  003BB8  6FD4               	movwf	RADIO_FSKPacketSent@timeOnAir& (0+255),b
 20636  003BBA  0E4E               	movlw	78
 20637  003BBC  55D9               	subfwb	(_RADIO_FSKPacketSent$765+1)& (0+255),w,b
 20638  003BBE  6FD5               	movwf	(RADIO_FSKPacketSent@timeOnAir+1)& (0+255),b
 20639  003BC0  0E00               	movlw	0
 20640  003BC2  55DA               	subfwb	(_RADIO_FSKPacketSent$765+2)& (0+255),w,b
 20641  003BC4  6FD6               	movwf	(RADIO_FSKPacketSent@timeOnAir+2)& (0+255),b
 20642  003BC6  0E00               	movlw	0
 20643  003BC8  55DB               	subfwb	(_RADIO_FSKPacketSent$765+3)& (0+255),w,b
 20644  003BCA  6FD7               	movwf	(RADIO_FSKPacketSent@timeOnAir+3)& (0+255),b
 20645                           
 20646                           ; BSR set to: 0
 20647                           ;radio_driver_SX1276.c: 1109: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 20648  003BCC  0101               	movlb	1	; () banked
 20649  003BCE  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 20650  003BD0  EC7F  F03A         	call	_SwTimerStop
 20651                           
 20652                           ; BSR set to: 0
 20653                           ;radio_driver_SX1276.c: 1110: LORAWAN_TxDone((uint16_t)timeOnAir);
 20654  003BD4  C0D4  F09E         	movff	RADIO_FSKPacketSent@timeOnAir,LORAWAN_TxDone@timeOnAir
 20655  003BD8  C0D5  F09F         	movff	RADIO_FSKPacketSent@timeOnAir+1,LORAWAN_TxDone@timeOnAir+1
 20656  003BDC  EF99  F005         	goto	_LORAWAN_TxDone	;wreg free
 20657  003BE0                     __end_of_RADIO_FSKPacketSent:
 20658                           	opt stack 0
 20659                           tosu	equ	0xFFF
 20660                           tosh	equ	0xFFE
 20661                           tosl	equ	0xFFD
 20662                           pclath	equ	0xFFA
 20663                           tblptru	equ	0xFF8
 20664                           tblptrh	equ	0xFF7
 20665                           tblptrl	equ	0xFF6
 20666                           tablat	equ	0xFF5
 20667                           prodh	equ	0xFF4
 20668                           prodl	equ	0xFF3
 20669                           intcon	equ	0xFF2
 20670                           intcon2	equ	0xFF1
 20671                           intcon3	equ	0xFF0
 20672                           indf0	equ	0xFEF
 20673                           postinc0	equ	0xFEE
 20674                           fsr0h	equ	0xFEA
 20675                           fsr0l	equ	0xFE9
 20676                           wreg	equ	0xFE8
 20677                           postinc1	equ	0xFE6
 20678                           postdec1	equ	0xFE5
 20679                           plusw1	equ	0xFE3
 20680                           fsr1h	equ	0xFE2
 20681                           fsr1l	equ	0xFE1
 20682                           indf2	equ	0xFDF
 20683                           postinc2	equ	0xFDE
 20684                           postdec2	equ	0xFDD
 20685                           plusw2	equ	0xFDB
 20686                           fsr2h	equ	0xFDA
 20687                           fsr2l	equ	0xFD9
 20688                           status	equ	0xFD8
 20689                           
 20690 ;; *************** function _LORAWAN_TxDone *****************
 20691 ;; Defined at:
 20692 ;;		line 365 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 20693 ;; Parameters:    Size  Location     Type
 20694 ;;  timeOnAir       2   62[BANK0 ] unsigned int 
 20695 ;; Auto vars:     Size  Location     Type
 20696 ;;  minim           4  107[BANK0 ] unsigned long 
 20697 ;;  ticks           4  103[BANK0 ] unsigned long 
 20698 ;;  delta           4   99[BANK0 ] unsigned long 
 20699 ;;  i               1  111[BANK0 ] unsigned char 
 20700 ;;  found           1   98[BANK0 ] unsigned char 
 20701 ;; Return value:  Size  Location     Type
 20702 ;;                  1    wreg      void 
 20703 ;; Registers used:
 20704 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20705 ;; Tracked objects:
 20706 ;;		On entry : E/1
 20707 ;;		On exit  : C/0
 20708 ;;		Unchanged: 0/0
 20709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20710 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20711 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20712 ;;      Temps:          0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20713 ;;      Totals:         0      50       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20714 ;;Total ram usage:       50 bytes
 20715 ;; Hardware stack levels used:    1
 20716 ;; Hardware stack levels required when called:   14
 20717 ;; This function calls:
 20718 ;;		_LORAWAN_EnterContinuousReceive
 20719 ;;		_RADIO_GetStatus
 20720 ;;		_RxDataDone
 20721 ;;		_SwTimerIsRunning
 20722 ;;		_SwTimerReadValue
 20723 ;;		_SwTimerSetTimeout
 20724 ;;		_SwTimerStart
 20725 ;;		_SwTimerStop
 20726 ;;		___lldiv
 20727 ;; This function is called by:
 20728 ;;		_RADIO_TxDone
 20729 ;;		_RADIO_FSKPacketSent
 20730 ;;		_RADIO_WatchdogTimeout
 20731 ;; This function uses a non-reentrant model
 20732 ;;
 20733                           
 20734                           	psect	text106
 20735  000B32                     __ptext106:
 20736                           	opt stack 0
 20737  000B32                     _LORAWAN_TxDone:
 20738                           	opt stack 13
 20739                           
 20740                           ;lorawan_eu.c: 367: if (loRa.macStatus.macPause == 0)
 20741                           
 20742                           ;incstack = 0
 20743  000B32  0102               	movlb	2	; () banked
 20744  000B34  B103               	btfsc	(_loRa+3)& (0+255),0,b
 20745  000B36  EFAB  F009         	goto	l14466
 20746                           
 20747                           ; BSR set to: 2
 20748                           ;lorawan_eu.c: 368: {
 20749                           ;lorawan_eu.c: 369: bool found = 0;
 20750  000B3A  0100               	movlb	0	; () banked
 20751  000B3C  6BC2               	clrf	LORAWAN_TxDone@found& (0+255),b
 20752                           
 20753                           ;lorawan_eu.c: 370: uint8_t i;
 20754                           ;lorawan_eu.c: 371: uint32_t delta = 0, minim = (4294967295UL), ticks;
 20755  000B3E  6BC3               	clrf	LORAWAN_TxDone@delta& (0+255),b
 20756  000B40  6BC4               	clrf	(LORAWAN_TxDone@delta+1)& (0+255),b
 20757  000B42  6BC5               	clrf	(LORAWAN_TxDone@delta+2)& (0+255),b
 20758  000B44  6BC6               	clrf	(LORAWAN_TxDone@delta+3)& (0+255),b
 20759  000B46  69CB               	setf	LORAWAN_TxDone@minim& (0+255),b
 20760  000B48  69CC               	setf	(LORAWAN_TxDone@minim+1)& (0+255),b
 20761  000B4A  69CD               	setf	(LORAWAN_TxDone@minim+2)& (0+255),b
 20762  000B4C  69CE               	setf	(LORAWAN_TxDone@minim+3)& (0+255),b
 20763                           
 20764                           ;lorawan_eu.c: 374: loRa.rx2DelayExpired = 0;
 20765  000B4E  0102               	movlb	2	; () banked
 20766  000B50  6BF1               	clrf	(_loRa+241)& (0+255),b
 20767                           
 20768                           ; BSR set to: 2
 20769                           ;lorawan_eu.c: 376: loRa.macStatus.macState = BEFORE_RX1;
 20770  000B52  5102               	movf	(_loRa+2)& (0+255),w,b
 20771  000B54  0BF0               	andlw	-16
 20772  000B56  0902               	iorlw	2
 20773  000B58  6F02               	movwf	(_loRa+2)& (0+255),b
 20774                           
 20775                           ; BSR set to: 2
 20776                           ;lorawan_eu.c: 378: i = loRa.lastUsedChannelIndex;
 20777  000B5A  C2DA  F0CF         	movff	_loRa+218,LORAWAN_TxDone@i
 20778                           
 20779                           ; BSR set to: 2
 20780                           ;lorawan_eu.c: 381: if (loRa.lorawanMacStatus.joining == 1)
 20781  000B5E  A500               	btfss	_loRa& (0+255),2,b
 20782  000B60  D10A               	goto	l14396
 20783                           
 20784                           ; BSR set to: 2
 20785                           ;lorawan_eu.c: 382: {
 20786                           ;lorawan_eu.c: 383: SwTimerSetTimeout(loRa.joinAccept1TimerId, ( (((uint32_t)(loRa.proto
      +                          colParameters.joinAcceptDelay1 + rxWindowOffset[loRa.receiveWindow1Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 20787  000B62  0E7D               	movlw	low _rxWindowOffset
 20788  000B64  2517               	addwf	(_loRa+23)& (0+255),w,b
 20789  000B66  6EF6               	movwf	tblptrl,c
 20790  000B68  6AF7               	clrf	tblptrh,c
 20791  000B6A  0E7F               	movlw	high _rxWindowOffset
 20792  000B6C  22F7               	addwfc	tblptrh,f,c
 20793  000B6E                     	if	0	;There are less than 3 active tblptr bytes
 20794  000B6E                     	endif
 20795  000B6E  0008               	tblrd		*
 20796  000B70  CFF5 F0A0          	movff	tablat,??_LORAWAN_TxDone
 20797  000B74  5198               	movf	(_loRa+152)& (0+255),w,b
 20798  000B76  0100               	movlb	0	; () banked
 20799  000B78  25A0               	addwf	??_LORAWAN_TxDone& (0+255),w,b
 20800  000B7A  6FA1               	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 20801  000B7C  0E00               	movlw	0
 20802  000B7E  BFA0               	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 20803  000B80  0EFF               	movlw	255
 20804  000B82  0102               	movlb	2	; () banked
 20805  000B84  2199               	addwfc	(_loRa+153)& (0+255),w,b
 20806  000B86  0100               	movlb	0	; () banked
 20807  000B88  6FA2               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 20808  000B8A  6BA3               	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 20809  000B8C  6BA4               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 20810  000B8E  0E0C               	movlw	12
 20811  000B90                     u16875:
 20812  000B90  90D8               	bcf	status,0,c
 20813  000B92  37A1               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 20814  000B94  37A2               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 20815  000B96  37A3               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 20816  000B98  37A4               	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 20817  000B9A  2EE8               	decfsz	wreg,f,c
 20818  000B9C  D7F9               	goto	u16875
 20819  000B9E  C0A1  F064         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 20820  000BA2  C0A2  F065         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 20821  000BA6  C0A3  F066         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 20822  000BAA  C0A4  F067         	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 20823  000BAE  0E7D               	movlw	125
 20824  000BB0  6F68               	movwf	___lldiv@divisor& (0+255),b
 20825  000BB2  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 20826  000BB4  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 20827  000BB6  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 20828  000BB8  EC35  F030         	call	___lldiv	;wreg free
 20829  000BBC  C064  F071         	movff	?___lldiv,SwTimerSetTimeout@timeout
 20830  000BC0  C065  F072         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 20831  000BC4  C066  F073         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 20832  000BC8  C067  F074         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 20833  000BCC  0102               	movlb	2	; () banked
 20834  000BCE  51E2               	movf	(_loRa+226)& (0+255),w,b
 20835  000BD0  EC44  F036         	call	_SwTimerSetTimeout
 20836                           
 20837                           ;lorawan_eu.c: 384: SwTimerSetTimeout(loRa.joinAccept2TimerId, ( (((uint32_t)(loRa.proto
      +                          colParameters.joinAcceptDelay2 + rxWindowOffset[loRa.receiveWindow2Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 20838  000BD4  0E7D               	movlw	low _rxWindowOffset
 20839  000BD6  0102               	movlb	2	; () banked
 20840  000BD8  251C               	addwf	(_loRa+28)& (0+255),w,b
 20841  000BDA  6EF6               	movwf	tblptrl,c
 20842  000BDC  6AF7               	clrf	tblptrh,c
 20843  000BDE  0E7F               	movlw	high _rxWindowOffset
 20844  000BE0  22F7               	addwfc	tblptrh,f,c
 20845  000BE2                     	if	0	;There are less than 3 active tblptr bytes
 20846  000BE2                     	endif
 20847  000BE2  0008               	tblrd		*
 20848  000BE4  CFF5 F0A0          	movff	tablat,??_LORAWAN_TxDone
 20849  000BE8  519A               	movf	(_loRa+154)& (0+255),w,b
 20850  000BEA  0100               	movlb	0	; () banked
 20851  000BEC  25A0               	addwf	??_LORAWAN_TxDone& (0+255),w,b
 20852  000BEE  6FA1               	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 20853  000BF0  0E00               	movlw	0
 20854  000BF2  BFA0               	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 20855  000BF4  0EFF               	movlw	255
 20856  000BF6  0102               	movlb	2	; () banked
 20857  000BF8  219B               	addwfc	(_loRa+155)& (0+255),w,b
 20858  000BFA  0100               	movlb	0	; () banked
 20859  000BFC  6FA2               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 20860  000BFE  6BA3               	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 20861  000C00  6BA4               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 20862  000C02  0E0C               	movlw	12
 20863  000C04                     u16885:
 20864  000C04  90D8               	bcf	status,0,c
 20865  000C06  37A1               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 20866  000C08  37A2               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 20867  000C0A  37A3               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 20868  000C0C  37A4               	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 20869  000C0E  2EE8               	decfsz	wreg,f,c
 20870  000C10  D7F9               	goto	u16885
 20871  000C12  C0A1  F064         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 20872  000C16  C0A2  F065         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 20873  000C1A  C0A3  F066         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 20874  000C1E  C0A4  F067         	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 20875  000C22  0E7D               	movlw	125
 20876  000C24  6F68               	movwf	___lldiv@divisor& (0+255),b
 20877  000C26  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 20878  000C28  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 20879  000C2A  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 20880  000C2C  EC35  F030         	call	___lldiv	;wreg free
 20881  000C30  C064  F071         	movff	?___lldiv,SwTimerSetTimeout@timeout
 20882  000C34  C065  F072         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 20883  000C38  C066  F073         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 20884  000C3C  C067  F074         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 20885  000C40  0102               	movlb	2	; () banked
 20886  000C42  51E3               	movf	(_loRa+227)& (0+255),w,b
 20887  000C44  EC44  F036         	call	_SwTimerSetTimeout
 20888                           
 20889                           ; BSR set to: 0
 20890                           ;lorawan_eu.c: 385: SwTimerStart(loRa.joinAccept1TimerId);
 20891  000C48  0102               	movlb	2	; () banked
 20892  000C4A  51E2               	movf	(_loRa+226)& (0+255),w,b
 20893  000C4C  EC35  F02E         	call	_SwTimerStart
 20894                           
 20895                           ; BSR set to: 0
 20896                           ;lorawan_eu.c: 386: SwTimerStart(loRa.joinAccept2TimerId);
 20897  000C50  0102               	movlb	2	; () banked
 20898  000C52  51E3               	movf	(_loRa+227)& (0+255),w,b
 20899  000C54  EC35  F02E         	call	_SwTimerStart
 20900                           
 20901                           ; BSR set to: 0
 20902                           ;lorawan_eu.c: 388: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)3029 
      +                          + 1) * ((uint32_t)loRa.prescaler) - 1);
 20903  000C58  C09E  F0A0         	movff	LORAWAN_TxDone@timeOnAir,??_LORAWAN_TxDone
 20904  000C5C  C09F  F0A1         	movff	LORAWAN_TxDone@timeOnAir+1,??_LORAWAN_TxDone+1
 20905  000C60  0102               	movlb	2	; () banked
 20906  000C62  51DB               	movf	(_loRa+219)& (0+255),w,b
 20907  000C64  0100               	movlb	0	; () banked
 20908  000C66  6FA2               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 20909  000C68  0102               	movlb	2	; () banked
 20910  000C6A  51DC               	movf	(_loRa+220)& (0+255),w,b
 20911  000C6C  0100               	movlb	0	; () banked
 20912  000C6E  6FA3               	movwf	(??_LORAWAN_TxDone+3)& (0+255),b
 20913  000C70  6BA4               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 20914  000C72  6BA5               	clrf	(??_LORAWAN_TxDone+5)& (0+255),b
 20915  000C74  0ED6               	movlw	214
 20916  000C76  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 20917  000C78  CFF3 F0A6          	movff	prodl,??_LORAWAN_TxDone+6
 20918  000C7C  CFF4 F0A7          	movff	prodh,??_LORAWAN_TxDone+7
 20919  000C80  6BA8               	clrf	(??_LORAWAN_TxDone+8)& (0+255),b
 20920  000C82  6BA9               	clrf	(??_LORAWAN_TxDone+9)& (0+255),b
 20921  000C84  03A3               	mulwf	(??_LORAWAN_TxDone+3)& (0+255),b
 20922  000C86  50F3               	movf	prodl,w,c
 20923  000C88  27A7               	addwf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 20924  000C8A  50F4               	movf	prodh,w,c
 20925  000C8C  23A8               	addwfc	(??_LORAWAN_TxDone+8)& (0+255),f,b
 20926  000C8E  0E00               	movlw	0
 20927  000C90  23A9               	addwfc	(??_LORAWAN_TxDone+9)& (0+255),f,b
 20928  000C92  0E0B               	movlw	11
 20929  000C94  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 20930  000C96  50F3               	movf	prodl,w,c
 20931  000C98  27A7               	addwf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 20932  000C9A  50F4               	movf	prodh,w,c
 20933  000C9C  23A8               	addwfc	(??_LORAWAN_TxDone+8)& (0+255),f,b
 20934  000C9E  0E00               	movlw	0
 20935  000CA0  23A9               	addwfc	(??_LORAWAN_TxDone+9)& (0+255),f,b
 20936  000CA2  0ED6               	movlw	214
 20937  000CA4  03A4               	mulwf	(??_LORAWAN_TxDone+4)& (0+255),b
 20938  000CA6  50F3               	movf	prodl,w,c
 20939  000CA8  27A8               	addwf	(??_LORAWAN_TxDone+8)& (0+255),f,b
 20940  000CAA  50F4               	movf	prodh,w,c
 20941  000CAC  23A9               	addwfc	(??_LORAWAN_TxDone+9)& (0+255),f,b
 20942  000CAE  0E0B               	movlw	11
 20943  000CB0  03A3               	mulwf	(??_LORAWAN_TxDone+3)& (0+255),b
 20944  000CB2  50F3               	movf	prodl,w,c
 20945  000CB4  27A8               	addwf	(??_LORAWAN_TxDone+8)& (0+255),f,b
 20946  000CB6  50F4               	movf	prodh,w,c
 20947  000CB8  23A9               	addwfc	(??_LORAWAN_TxDone+9)& (0+255),f,b
 20948  000CBA  0E00               	movlw	0
 20949  000CBC  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 20950  000CBE  50F3               	movf	prodl,w,c
 20951  000CC0  27A8               	addwf	(??_LORAWAN_TxDone+8)& (0+255),f,b
 20952  000CC2  50F4               	movf	prodh,w,c
 20953  000CC4  23A9               	addwfc	(??_LORAWAN_TxDone+9)& (0+255),f,b
 20954  000CC6  0ED6               	movlw	214
 20955  000CC8  03A5               	mulwf	(??_LORAWAN_TxDone+5)& (0+255),b
 20956  000CCA  50F3               	movf	prodl,w,c
 20957  000CCC  27A9               	addwf	(??_LORAWAN_TxDone+9)& (0+255),f,b
 20958  000CCE  0E0B               	movlw	11
 20959  000CD0  03A4               	mulwf	(??_LORAWAN_TxDone+4)& (0+255),b
 20960  000CD2  50F3               	movf	prodl,w,c
 20961  000CD4  27A9               	addwf	(??_LORAWAN_TxDone+9)& (0+255),f,b
 20962  000CD6  0E00               	movlw	0
 20963  000CD8  03A3               	mulwf	(??_LORAWAN_TxDone+3)& (0+255),b
 20964  000CDA  50F3               	movf	prodl,w,c
 20965  000CDC  27A9               	addwf	(??_LORAWAN_TxDone+9)& (0+255),f,b
 20966  000CDE  0E00               	movlw	0
 20967  000CE0  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 20968  000CE2  50F3               	movf	prodl,w,c
 20969  000CE4  27A9               	addwf	(??_LORAWAN_TxDone+9)& (0+255),f,b
 20970  000CE6  0EFF               	movlw	255
 20971  000CE8  25A6               	addwf	(??_LORAWAN_TxDone+6)& (0+255),w,b
 20972  000CEA  6FAA               	movwf	(??_LORAWAN_TxDone+10)& (0+255),b
 20973  000CEC  0EFF               	movlw	255
 20974  000CEE  21A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),w,b
 20975  000CF0  6FAB               	movwf	(??_LORAWAN_TxDone+11)& (0+255),b
 20976  000CF2  0EFF               	movlw	255
 20977  000CF4  21A8               	addwfc	(??_LORAWAN_TxDone+8)& (0+255),w,b
 20978  000CF6  6FAC               	movwf	(??_LORAWAN_TxDone+12)& (0+255),b
 20979  000CF8  0EFF               	movlw	255
 20980  000CFA  21A9               	addwfc	(??_LORAWAN_TxDone+9)& (0+255),w,b
 20981  000CFC  6FAD               	movwf	(??_LORAWAN_TxDone+13)& (0+255),b
 20982  000CFE  51AA               	movf	(??_LORAWAN_TxDone+10)& (0+255),w,b
 20983  000D00  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 20984  000D02  CFF3 F0AE          	movff	prodl,??_LORAWAN_TxDone+14
 20985  000D06  CFF4 F0AF          	movff	prodh,??_LORAWAN_TxDone+15
 20986  000D0A  6BB0               	clrf	(??_LORAWAN_TxDone+16)& (0+255),b
 20987  000D0C  6BB1               	clrf	(??_LORAWAN_TxDone+17)& (0+255),b
 20988  000D0E  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 20989  000D10  50F3               	movf	prodl,w,c
 20990  000D12  27AF               	addwf	(??_LORAWAN_TxDone+15)& (0+255),f,b
 20991  000D14  50F4               	movf	prodh,w,c
 20992  000D16  23B0               	addwfc	(??_LORAWAN_TxDone+16)& (0+255),f,b
 20993  000D18  0E00               	movlw	0
 20994  000D1A  23B1               	addwfc	(??_LORAWAN_TxDone+17)& (0+255),f,b
 20995  000D1C  51AB               	movf	(??_LORAWAN_TxDone+11)& (0+255),w,b
 20996  000D1E  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 20997  000D20  50F3               	movf	prodl,w,c
 20998  000D22  27AF               	addwf	(??_LORAWAN_TxDone+15)& (0+255),f,b
 20999  000D24  50F4               	movf	prodh,w,c
 21000  000D26  23B0               	addwfc	(??_LORAWAN_TxDone+16)& (0+255),f,b
 21001  000D28  0E00               	movlw	0
 21002  000D2A  23B1               	addwfc	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21003  000D2C  51AB               	movf	(??_LORAWAN_TxDone+11)& (0+255),w,b
 21004  000D2E  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21005  000D30  50F3               	movf	prodl,w,c
 21006  000D32  27B0               	addwf	(??_LORAWAN_TxDone+16)& (0+255),f,b
 21007  000D34  50F4               	movf	prodh,w,c
 21008  000D36  23B1               	addwfc	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21009  000D38  51AC               	movf	(??_LORAWAN_TxDone+12)& (0+255),w,b
 21010  000D3A  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21011  000D3C  50F3               	movf	prodl,w,c
 21012  000D3E  27B0               	addwf	(??_LORAWAN_TxDone+16)& (0+255),f,b
 21013  000D40  50F4               	movf	prodh,w,c
 21014  000D42  23B1               	addwfc	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21015  000D44  51AC               	movf	(??_LORAWAN_TxDone+12)& (0+255),w,b
 21016  000D46  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21017  000D48  50F3               	movf	prodl,w,c
 21018  000D4A  27B1               	addwf	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21019  000D4C  51AD               	movf	(??_LORAWAN_TxDone+13)& (0+255),w,b
 21020  000D4E  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21021  000D50  50F3               	movf	prodl,w,c
 21022  000D52  27B1               	addwf	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21023  000D54  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21024  000D56  0D0E               	mullw	14
 21025  000D58  0E08               	movlw	low (_Channels+8)
 21026  000D5A  24F3               	addwf	prodl,w,c
 21027  000D5C  6ED9               	movwf	fsr2l,c
 21028  000D5E  0E04               	movlw	high (_Channels+8)
 21029  000D60  20F4               	addwfc	prodh,w,c
 21030  000D62  6EDA               	movwf	fsr2h,c
 21031  000D64  C0AE  FFDE         	movff	??_LORAWAN_TxDone+14,postinc2
 21032  000D68  C0AF  FFDE         	movff	??_LORAWAN_TxDone+15,postinc2
 21033  000D6C  C0B0  FFDE         	movff	??_LORAWAN_TxDone+16,postinc2
 21034  000D70  C0B1  FFDE         	movff	??_LORAWAN_TxDone+17,postinc2
 21035                           
 21036                           ;lorawan_eu.c: 389: }
 21037  000D74  D117               	goto	l14406
 21038  000D76                     l14396:
 21039                           
 21040                           ; BSR set to: 2
 21041                           ;lorawan_eu.c: 390: else
 21042                           ;lorawan_eu.c: 391: {
 21043                           ;lorawan_eu.c: 392: SwTimerSetTimeout(loRa.receiveWindow1TimerId, ( (((uint32_t)(loRa.pr
      +                          otocolParameters.receiveDelay1 + rxWindowOffset[loRa.receiveWindow1Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 21044  000D76  0E7D               	movlw	low _rxWindowOffset
 21045  000D78  2517               	addwf	(_loRa+23)& (0+255),w,b
 21046  000D7A  6EF6               	movwf	tblptrl,c
 21047  000D7C  6AF7               	clrf	tblptrh,c
 21048  000D7E  0E7F               	movlw	high _rxWindowOffset
 21049  000D80  22F7               	addwfc	tblptrh,f,c
 21050  000D82                     	if	0	;There are less than 3 active tblptr bytes
 21051  000D82                     	endif
 21052  000D82  0008               	tblrd		*
 21053  000D84  CFF5 F0A0          	movff	tablat,??_LORAWAN_TxDone
 21054  000D88  5194               	movf	(_loRa+148)& (0+255),w,b
 21055  000D8A  0100               	movlb	0	; () banked
 21056  000D8C  25A0               	addwf	??_LORAWAN_TxDone& (0+255),w,b
 21057  000D8E  6FA1               	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21058  000D90  0E00               	movlw	0
 21059  000D92  BFA0               	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 21060  000D94  0EFF               	movlw	255
 21061  000D96  0102               	movlb	2	; () banked
 21062  000D98  2195               	addwfc	(_loRa+149)& (0+255),w,b
 21063  000D9A  0100               	movlb	0	; () banked
 21064  000D9C  6FA2               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21065  000D9E  6BA3               	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 21066  000DA0  6BA4               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 21067  000DA2  0E0C               	movlw	12
 21068  000DA4                     u16895:
 21069  000DA4  90D8               	bcf	status,0,c
 21070  000DA6  37A1               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 21071  000DA8  37A2               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 21072  000DAA  37A3               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 21073  000DAC  37A4               	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 21074  000DAE  2EE8               	decfsz	wreg,f,c
 21075  000DB0  D7F9               	goto	u16895
 21076  000DB2  C0A1  F064         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 21077  000DB6  C0A2  F065         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 21078  000DBA  C0A3  F066         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 21079  000DBE  C0A4  F067         	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 21080  000DC2  0E7D               	movlw	125
 21081  000DC4  6F68               	movwf	___lldiv@divisor& (0+255),b
 21082  000DC6  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 21083  000DC8  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 21084  000DCA  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 21085  000DCC  EC35  F030         	call	___lldiv	;wreg free
 21086  000DD0  C064  F071         	movff	?___lldiv,SwTimerSetTimeout@timeout
 21087  000DD4  C065  F072         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 21088  000DD8  C066  F073         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 21089  000DDC  C067  F074         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 21090  000DE0  0102               	movlb	2	; () banked
 21091  000DE2  51E4               	movf	(_loRa+228)& (0+255),w,b
 21092  000DE4  EC44  F036         	call	_SwTimerSetTimeout
 21093                           
 21094                           ;lorawan_eu.c: 393: SwTimerSetTimeout(loRa.receiveWindow2TimerId, ( (((uint32_t)(loRa.pr
      +                          otocolParameters.receiveDelay2 + rxWindowOffset[loRa.receiveWindow2Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 21095  000DE8  0E7D               	movlw	low _rxWindowOffset
 21096  000DEA  0102               	movlb	2	; () banked
 21097  000DEC  251C               	addwf	(_loRa+28)& (0+255),w,b
 21098  000DEE  6EF6               	movwf	tblptrl,c
 21099  000DF0  6AF7               	clrf	tblptrh,c
 21100  000DF2  0E7F               	movlw	high _rxWindowOffset
 21101  000DF4  22F7               	addwfc	tblptrh,f,c
 21102  000DF6                     	if	0	;There are less than 3 active tblptr bytes
 21103  000DF6                     	endif
 21104  000DF6  0008               	tblrd		*
 21105  000DF8  CFF5 F0A0          	movff	tablat,??_LORAWAN_TxDone
 21106  000DFC  5196               	movf	(_loRa+150)& (0+255),w,b
 21107  000DFE  0100               	movlb	0	; () banked
 21108  000E00  25A0               	addwf	??_LORAWAN_TxDone& (0+255),w,b
 21109  000E02  6FA1               	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21110  000E04  0E00               	movlw	0
 21111  000E06  BFA0               	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 21112  000E08  0EFF               	movlw	255
 21113  000E0A  0102               	movlb	2	; () banked
 21114  000E0C  2197               	addwfc	(_loRa+151)& (0+255),w,b
 21115  000E0E  0100               	movlb	0	; () banked
 21116  000E10  6FA2               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21117  000E12  6BA3               	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 21118  000E14  6BA4               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 21119  000E16  0E0C               	movlw	12
 21120  000E18                     u16905:
 21121  000E18  90D8               	bcf	status,0,c
 21122  000E1A  37A1               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 21123  000E1C  37A2               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 21124  000E1E  37A3               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 21125  000E20  37A4               	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 21126  000E22  2EE8               	decfsz	wreg,f,c
 21127  000E24  D7F9               	goto	u16905
 21128  000E26  C0A1  F064         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 21129  000E2A  C0A2  F065         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 21130  000E2E  C0A3  F066         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 21131  000E32  C0A4  F067         	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 21132  000E36  0E7D               	movlw	125
 21133  000E38  6F68               	movwf	___lldiv@divisor& (0+255),b
 21134  000E3A  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 21135  000E3C  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 21136  000E3E  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 21137  000E40  EC35  F030         	call	___lldiv	;wreg free
 21138  000E44  C064  F071         	movff	?___lldiv,SwTimerSetTimeout@timeout
 21139  000E48  C065  F072         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 21140  000E4C  C066  F073         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 21141  000E50  C067  F074         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 21142  000E54  0102               	movlb	2	; () banked
 21143  000E56  51E5               	movf	(_loRa+229)& (0+255),w,b
 21144  000E58  EC44  F036         	call	_SwTimerSetTimeout
 21145                           
 21146                           ; BSR set to: 0
 21147                           ;lorawan_eu.c: 394: SwTimerStart(loRa.receiveWindow1TimerId);
 21148  000E5C  0102               	movlb	2	; () banked
 21149  000E5E  51E4               	movf	(_loRa+228)& (0+255),w,b
 21150  000E60  EC35  F02E         	call	_SwTimerStart
 21151                           
 21152                           ; BSR set to: 0
 21153                           ;lorawan_eu.c: 395: if (CLASS_A == loRa.deviceClass)
 21154  000E64  0102               	movlb	2	; () banked
 21155  000E66  5112               	movf	(_loRa+18)& (0+255),w,b
 21156  000E68  E103               	bnz	l14404
 21157                           
 21158                           ; BSR set to: 2
 21159                           ;lorawan_eu.c: 396: {
 21160                           ;lorawan_eu.c: 397: SwTimerStart(loRa.receiveWindow2TimerId);
 21161  000E6A  51E5               	movf	(_loRa+229)& (0+255),w,b
 21162  000E6C  EC35  F02E         	call	_SwTimerStart
 21163  000E70                     l14404:
 21164                           
 21165                           ;lorawan_eu.c: 398: }
 21166                           ;lorawan_eu.c: 400: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)Chann
      +                          els[i].dutyCycle + 1) * ((uint32_t)loRa.prescaler) - 1);
 21167  000E70  C09E  F0A0         	movff	LORAWAN_TxDone@timeOnAir,??_LORAWAN_TxDone
 21168  000E74  C09F  F0A1         	movff	LORAWAN_TxDone@timeOnAir+1,??_LORAWAN_TxDone+1
 21169  000E78  EE22  F0DB         	lfsr	2,_loRa+219
 21170  000E7C  CFDE F0A2          	movff	postinc2,??_LORAWAN_TxDone+2
 21171  000E80  CFDD F0A3          	movff	postdec2,??_LORAWAN_TxDone+3
 21172  000E84  0100               	movlb	0	; () banked
 21173  000E86  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21174  000E88  0D0E               	mullw	14
 21175  000E8A  0E06               	movlw	low (_Channels+6)
 21176  000E8C  24F3               	addwf	prodl,w,c
 21177  000E8E  6ED9               	movwf	fsr2l,c
 21178  000E90  0E04               	movlw	high (_Channels+6)
 21179  000E92  20F4               	addwfc	prodh,w,c
 21180  000E94  6EDA               	movwf	fsr2h,c
 21181  000E96  CFDE F0A4          	movff	postinc2,??_LORAWAN_TxDone+4
 21182  000E9A  CFDD F0A5          	movff	postdec2,??_LORAWAN_TxDone+5
 21183  000E9E  51A4               	movf	(??_LORAWAN_TxDone+4)& (0+255),w,b
 21184  000EA0  6FA6               	movwf	(??_LORAWAN_TxDone+6)& (0+255),b
 21185  000EA2  51A5               	movf	(??_LORAWAN_TxDone+5)& (0+255),w,b
 21186  000EA4  6FA7               	movwf	(??_LORAWAN_TxDone+7)& (0+255),b
 21187  000EA6  6BA8               	clrf	(??_LORAWAN_TxDone+8)& (0+255),b
 21188  000EA8  6BA9               	clrf	(??_LORAWAN_TxDone+9)& (0+255),b
 21189  000EAA  29A6               	incf	(??_LORAWAN_TxDone+6)& (0+255),w,b
 21190  000EAC  6FAA               	movwf	(??_LORAWAN_TxDone+10)& (0+255),b
 21191  000EAE  0E00               	movlw	0
 21192  000EB0  21A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),w,b
 21193  000EB2  6FAB               	movwf	(??_LORAWAN_TxDone+11)& (0+255),b
 21194  000EB4  0E00               	movlw	0
 21195  000EB6  21A8               	addwfc	(??_LORAWAN_TxDone+8)& (0+255),w,b
 21196  000EB8  6FAC               	movwf	(??_LORAWAN_TxDone+12)& (0+255),b
 21197  000EBA  0E00               	movlw	0
 21198  000EBC  21A9               	addwfc	(??_LORAWAN_TxDone+9)& (0+255),w,b
 21199  000EBE  6FAD               	movwf	(??_LORAWAN_TxDone+13)& (0+255),b
 21200  000EC0  51AA               	movf	(??_LORAWAN_TxDone+10)& (0+255),w,b
 21201  000EC2  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21202  000EC4  CFF3 F0AE          	movff	prodl,??_LORAWAN_TxDone+14
 21203  000EC8  CFF4 F0AF          	movff	prodh,??_LORAWAN_TxDone+15
 21204  000ECC  6BB0               	clrf	(??_LORAWAN_TxDone+16)& (0+255),b
 21205  000ECE  6BB1               	clrf	(??_LORAWAN_TxDone+17)& (0+255),b
 21206  000ED0  03A3               	mulwf	(??_LORAWAN_TxDone+3)& (0+255),b
 21207  000ED2  50F3               	movf	prodl,w,c
 21208  000ED4  27AF               	addwf	(??_LORAWAN_TxDone+15)& (0+255),f,b
 21209  000ED6  50F4               	movf	prodh,w,c
 21210  000ED8  23B0               	addwfc	(??_LORAWAN_TxDone+16)& (0+255),f,b
 21211  000EDA  0E00               	movlw	0
 21212  000EDC  23B1               	addwfc	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21213  000EDE  51AB               	movf	(??_LORAWAN_TxDone+11)& (0+255),w,b
 21214  000EE0  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21215  000EE2  50F3               	movf	prodl,w,c
 21216  000EE4  27AF               	addwf	(??_LORAWAN_TxDone+15)& (0+255),f,b
 21217  000EE6  50F4               	movf	prodh,w,c
 21218  000EE8  23B0               	addwfc	(??_LORAWAN_TxDone+16)& (0+255),f,b
 21219  000EEA  0E00               	movlw	0
 21220  000EEC  23B1               	addwfc	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21221  000EEE  51AB               	movf	(??_LORAWAN_TxDone+11)& (0+255),w,b
 21222  000EF0  03A3               	mulwf	(??_LORAWAN_TxDone+3)& (0+255),b
 21223  000EF2  50F3               	movf	prodl,w,c
 21224  000EF4  27B0               	addwf	(??_LORAWAN_TxDone+16)& (0+255),f,b
 21225  000EF6  50F4               	movf	prodh,w,c
 21226  000EF8  23B1               	addwfc	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21227  000EFA  51AC               	movf	(??_LORAWAN_TxDone+12)& (0+255),w,b
 21228  000EFC  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21229  000EFE  50F3               	movf	prodl,w,c
 21230  000F00  27B0               	addwf	(??_LORAWAN_TxDone+16)& (0+255),f,b
 21231  000F02  50F4               	movf	prodh,w,c
 21232  000F04  23B1               	addwfc	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21233  000F06  51AC               	movf	(??_LORAWAN_TxDone+12)& (0+255),w,b
 21234  000F08  03A3               	mulwf	(??_LORAWAN_TxDone+3)& (0+255),b
 21235  000F0A  50F3               	movf	prodl,w,c
 21236  000F0C  27B1               	addwf	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21237  000F0E  51AD               	movf	(??_LORAWAN_TxDone+13)& (0+255),w,b
 21238  000F10  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21239  000F12  50F3               	movf	prodl,w,c
 21240  000F14  27B1               	addwf	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21241  000F16  0EFF               	movlw	255
 21242  000F18  25AE               	addwf	(??_LORAWAN_TxDone+14)& (0+255),w,b
 21243  000F1A  6FB2               	movwf	(??_LORAWAN_TxDone+18)& (0+255),b
 21244  000F1C  0EFF               	movlw	255
 21245  000F1E  21AF               	addwfc	(??_LORAWAN_TxDone+15)& (0+255),w,b
 21246  000F20  6FB3               	movwf	(??_LORAWAN_TxDone+19)& (0+255),b
 21247  000F22  0EFF               	movlw	255
 21248  000F24  21B0               	addwfc	(??_LORAWAN_TxDone+16)& (0+255),w,b
 21249  000F26  6FB4               	movwf	(??_LORAWAN_TxDone+20)& (0+255),b
 21250  000F28  0EFF               	movlw	255
 21251  000F2A  21B1               	addwfc	(??_LORAWAN_TxDone+17)& (0+255),w,b
 21252  000F2C  6FB5               	movwf	(??_LORAWAN_TxDone+21)& (0+255),b
 21253  000F2E  51B2               	movf	(??_LORAWAN_TxDone+18)& (0+255),w,b
 21254  000F30  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21255  000F32  CFF3 F0B6          	movff	prodl,??_LORAWAN_TxDone+22
 21256  000F36  CFF4 F0B7          	movff	prodh,??_LORAWAN_TxDone+23
 21257  000F3A  6BB8               	clrf	(??_LORAWAN_TxDone+24)& (0+255),b
 21258  000F3C  6BB9               	clrf	(??_LORAWAN_TxDone+25)& (0+255),b
 21259  000F3E  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21260  000F40  50F3               	movf	prodl,w,c
 21261  000F42  27B7               	addwf	(??_LORAWAN_TxDone+23)& (0+255),f,b
 21262  000F44  50F4               	movf	prodh,w,c
 21263  000F46  23B8               	addwfc	(??_LORAWAN_TxDone+24)& (0+255),f,b
 21264  000F48  0E00               	movlw	0
 21265  000F4A  23B9               	addwfc	(??_LORAWAN_TxDone+25)& (0+255),f,b
 21266  000F4C  51B3               	movf	(??_LORAWAN_TxDone+19)& (0+255),w,b
 21267  000F4E  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21268  000F50  50F3               	movf	prodl,w,c
 21269  000F52  27B7               	addwf	(??_LORAWAN_TxDone+23)& (0+255),f,b
 21270  000F54  50F4               	movf	prodh,w,c
 21271  000F56  23B8               	addwfc	(??_LORAWAN_TxDone+24)& (0+255),f,b
 21272  000F58  0E00               	movlw	0
 21273  000F5A  23B9               	addwfc	(??_LORAWAN_TxDone+25)& (0+255),f,b
 21274  000F5C  51B3               	movf	(??_LORAWAN_TxDone+19)& (0+255),w,b
 21275  000F5E  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21276  000F60  50F3               	movf	prodl,w,c
 21277  000F62  27B8               	addwf	(??_LORAWAN_TxDone+24)& (0+255),f,b
 21278  000F64  50F4               	movf	prodh,w,c
 21279  000F66  23B9               	addwfc	(??_LORAWAN_TxDone+25)& (0+255),f,b
 21280  000F68  51B4               	movf	(??_LORAWAN_TxDone+20)& (0+255),w,b
 21281  000F6A  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21282  000F6C  50F3               	movf	prodl,w,c
 21283  000F6E  27B8               	addwf	(??_LORAWAN_TxDone+24)& (0+255),f,b
 21284  000F70  50F4               	movf	prodh,w,c
 21285  000F72  23B9               	addwfc	(??_LORAWAN_TxDone+25)& (0+255),f,b
 21286  000F74  51B4               	movf	(??_LORAWAN_TxDone+20)& (0+255),w,b
 21287  000F76  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21288  000F78  50F3               	movf	prodl,w,c
 21289  000F7A  27B9               	addwf	(??_LORAWAN_TxDone+25)& (0+255),f,b
 21290  000F7C  51B5               	movf	(??_LORAWAN_TxDone+21)& (0+255),w,b
 21291  000F7E  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21292  000F80  50F3               	movf	prodl,w,c
 21293  000F82  27B9               	addwf	(??_LORAWAN_TxDone+25)& (0+255),f,b
 21294  000F84  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21295  000F86  0D0E               	mullw	14
 21296  000F88  0E08               	movlw	low (_Channels+8)
 21297  000F8A  24F3               	addwf	prodl,w,c
 21298  000F8C  6ED9               	movwf	fsr2l,c
 21299  000F8E  0E04               	movlw	high (_Channels+8)
 21300  000F90  20F4               	addwfc	prodh,w,c
 21301  000F92  6EDA               	movwf	fsr2h,c
 21302  000F94  C0B6  FFDE         	movff	??_LORAWAN_TxDone+22,postinc2
 21303  000F98  C0B7  FFDE         	movff	??_LORAWAN_TxDone+23,postinc2
 21304  000F9C  C0B8  FFDE         	movff	??_LORAWAN_TxDone+24,postinc2
 21305  000FA0  C0B9  FFDE         	movff	??_LORAWAN_TxDone+25,postinc2
 21306  000FA4                     l14406:
 21307                           
 21308                           ; BSR set to: 0
 21309                           ;lorawan_eu.c: 401: }
 21310                           ;lorawan_eu.c: 403: if(SwTimerIsRunning(loRa.dutyCycleTimerId))
 21311  000FA4  0102               	movlb	2	; () banked
 21312  000FA6  51E9               	movf	(_loRa+233)& (0+255),w,b
 21313  000FA8  ECBA  F039         	call	_SwTimerIsRunning
 21314  000FAC  0900               	iorlw	0
 21315  000FAE  E101 D0C8          	bz	l14418
 21316                           
 21317                           ; BSR set to: 0
 21318                           ;lorawan_eu.c: 404: {
 21319                           ;lorawan_eu.c: 405: SwTimerStop(loRa.dutyCycleTimerId);
 21320  000FB2  0102               	movlb	2	; () banked
 21321  000FB4  51E9               	movf	(_loRa+233)& (0+255),w,b
 21322  000FB6  EC7F  F03A         	call	_SwTimerStop
 21323                           
 21324                           ;lorawan_eu.c: 407: ticks = SwTimerReadValue (loRa.dutyCycleTimerId);
 21325  000FBA  0102               	movlb	2	; () banked
 21326  000FBC  51E9               	movf	(_loRa+233)& (0+255),w,b
 21327  000FBE  EC85  F036         	call	_SwTimerReadValue
 21328  000FC2  C08B  F0C7         	movff	?_SwTimerReadValue,LORAWAN_TxDone@ticks
 21329  000FC6  C08C  F0C8         	movff	?_SwTimerReadValue+1,LORAWAN_TxDone@ticks+1
 21330  000FCA  C08D  F0C9         	movff	?_SwTimerReadValue+2,LORAWAN_TxDone@ticks+2
 21331  000FCE  C08E  F0CA         	movff	?_SwTimerReadValue+3,LORAWAN_TxDone@ticks+3
 21332                           
 21333                           ; BSR set to: 0
 21334                           ;lorawan_eu.c: 408: delta = loRa.lastTimerValue - ((ticks) < 0x00DFAC1FUL ? ( (((uint32_
      +                          t)(ticks)) * 125UL) >> (12) ) : ( (((uint32_t)(ticks)) >> (12)) * 125UL ) );
 21335  000FD2  51CA               	movf	(LORAWAN_TxDone@ticks+3)& (0+255),w,b
 21336  000FD4  E107               	bnz	u16930
 21337  000FD6  0E1F               	movlw	31
 21338  000FD8  5DC7               	subwf	LORAWAN_TxDone@ticks& (0+255),w,b
 21339  000FDA  0EAC               	movlw	172
 21340  000FDC  59C8               	subwfb	(LORAWAN_TxDone@ticks+1)& (0+255),w,b
 21341  000FDE  0EDF               	movlw	223
 21342  000FE0  59C9               	subwfb	(LORAWAN_TxDone@ticks+2)& (0+255),w,b
 21343  000FE2  E34A               	bnc	l14414
 21344  000FE4                     u16930:
 21345                           
 21346                           ; BSR set to: 0
 21347  000FE4  C0C7  F0A0         	movff	LORAWAN_TxDone@ticks,??_LORAWAN_TxDone
 21348  000FE8  C0C8  F0A1         	movff	LORAWAN_TxDone@ticks+1,??_LORAWAN_TxDone+1
 21349  000FEC  C0C9  F0A2         	movff	LORAWAN_TxDone@ticks+2,??_LORAWAN_TxDone+2
 21350  000FF0  C0CA  F0A3         	movff	LORAWAN_TxDone@ticks+3,??_LORAWAN_TxDone+3
 21351  000FF4  0E0D               	movlw	13
 21352  000FF6  D005               	goto	u16940
 21353  000FF8                     u16945:
 21354  000FF8  90D8               	bcf	status,0,c
 21355  000FFA  33A3               	rrcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 21356  000FFC  33A2               	rrcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 21357  000FFE  33A1               	rrcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 21358  001000  33A0               	rrcf	??_LORAWAN_TxDone& (0+255),f,b
 21359  001002                     u16940:
 21360  001002  2EE8               	decfsz	wreg,f,c
 21361  001004  D7F9               	goto	u16945
 21362  001006  0E7D               	movlw	125
 21363  001008  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21364  00100A  CFF3 F0A4          	movff	prodl,??_LORAWAN_TxDone+4
 21365  00100E  CFF4 F0A5          	movff	prodh,??_LORAWAN_TxDone+5
 21366  001012  6BA6               	clrf	(??_LORAWAN_TxDone+6)& (0+255),b
 21367  001014  6BA7               	clrf	(??_LORAWAN_TxDone+7)& (0+255),b
 21368  001016  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21369  001018  50F3               	movf	prodl,w,c
 21370  00101A  27A5               	addwf	(??_LORAWAN_TxDone+5)& (0+255),f,b
 21371  00101C  50F4               	movf	prodh,w,c
 21372  00101E  23A6               	addwfc	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21373  001020  0E00               	movlw	0
 21374  001022  23A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21375  001024  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21376  001026  50F3               	movf	prodl,w,c
 21377  001028  27A5               	addwf	(??_LORAWAN_TxDone+5)& (0+255),f,b
 21378  00102A  50F4               	movf	prodh,w,c
 21379  00102C  23A6               	addwfc	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21380  00102E  0E00               	movlw	0
 21381  001030  23A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21382  001032  0E7D               	movlw	125
 21383  001034  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21384  001036  50F3               	movf	prodl,w,c
 21385  001038  27A6               	addwf	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21386  00103A  50F4               	movf	prodh,w,c
 21387  00103C  23A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21388  00103E  0E00               	movlw	0
 21389  001040  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21390  001042  50F3               	movf	prodl,w,c
 21391  001044  27A6               	addwf	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21392  001046  50F4               	movf	prodh,w,c
 21393  001048  23A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21394  00104A  0E00               	movlw	0
 21395  00104C  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21396  00104E  50F3               	movf	prodl,w,c
 21397  001050  27A6               	addwf	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21398  001052  50F4               	movf	prodh,w,c
 21399  001054  23A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21400  001056  0E7D               	movlw	125
 21401  001058  03A3               	mulwf	(??_LORAWAN_TxDone+3)& (0+255),b
 21402  00105A  50F3               	movf	prodl,w,c
 21403  00105C  27A7               	addwf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21404  00105E  0E00               	movlw	0
 21405  001060  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21406  001062  50F3               	movf	prodl,w,c
 21407  001064  27A7               	addwf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21408  001066  0E00               	movlw	0
 21409  001068  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21410  00106A  50F3               	movf	prodl,w,c
 21411  00106C  27A7               	addwf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21412  00106E  0E00               	movlw	0
 21413  001070  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21414  001072  50F3               	movf	prodl,w,c
 21415  001074  27A7               	addwf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21416  001076  D049               	goto	L12
 21417  001078                     l14414:
 21418                           
 21419                           ; BSR set to: 0
 21420  001078  C0C7  F0A0         	movff	LORAWAN_TxDone@ticks,??_LORAWAN_TxDone
 21421  00107C  C0C8  F0A1         	movff	LORAWAN_TxDone@ticks+1,??_LORAWAN_TxDone+1
 21422  001080  C0C9  F0A2         	movff	LORAWAN_TxDone@ticks+2,??_LORAWAN_TxDone+2
 21423  001084  C0CA  F0A3         	movff	LORAWAN_TxDone@ticks+3,??_LORAWAN_TxDone+3
 21424  001088  0E7D               	movlw	125
 21425  00108A  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21426  00108C  CFF3 F0A4          	movff	prodl,??_LORAWAN_TxDone+4
 21427  001090  CFF4 F0A5          	movff	prodh,??_LORAWAN_TxDone+5
 21428  001094  6BA6               	clrf	(??_LORAWAN_TxDone+6)& (0+255),b
 21429  001096  6BA7               	clrf	(??_LORAWAN_TxDone+7)& (0+255),b
 21430  001098  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21431  00109A  50F3               	movf	prodl,w,c
 21432  00109C  27A5               	addwf	(??_LORAWAN_TxDone+5)& (0+255),f,b
 21433  00109E  50F4               	movf	prodh,w,c
 21434  0010A0  23A6               	addwfc	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21435  0010A2  0E00               	movlw	0
 21436  0010A4  23A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21437  0010A6  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21438  0010A8  50F3               	movf	prodl,w,c
 21439  0010AA  27A5               	addwf	(??_LORAWAN_TxDone+5)& (0+255),f,b
 21440  0010AC  50F4               	movf	prodh,w,c
 21441  0010AE  23A6               	addwfc	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21442  0010B0  0E00               	movlw	0
 21443  0010B2  23A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21444  0010B4  0E7D               	movlw	125
 21445  0010B6  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21446  0010B8  50F3               	movf	prodl,w,c
 21447  0010BA  27A6               	addwf	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21448  0010BC  50F4               	movf	prodh,w,c
 21449  0010BE  23A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21450  0010C0  0E00               	movlw	0
 21451  0010C2  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21452  0010C4  50F3               	movf	prodl,w,c
 21453  0010C6  27A6               	addwf	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21454  0010C8  50F4               	movf	prodh,w,c
 21455  0010CA  23A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21456  0010CC  0E00               	movlw	0
 21457  0010CE  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21458  0010D0  50F3               	movf	prodl,w,c
 21459  0010D2  27A6               	addwf	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21460  0010D4  50F4               	movf	prodh,w,c
 21461  0010D6  23A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21462  0010D8  0E7D               	movlw	125
 21463  0010DA  03A3               	mulwf	(??_LORAWAN_TxDone+3)& (0+255),b
 21464  0010DC  50F3               	movf	prodl,w,c
 21465  0010DE  27A7               	addwf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21466  0010E0  0E00               	movlw	0
 21467  0010E2  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21468  0010E4  50F3               	movf	prodl,w,c
 21469  0010E6  27A7               	addwf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21470  0010E8  0E00               	movlw	0
 21471  0010EA  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21472  0010EC  50F3               	movf	prodl,w,c
 21473  0010EE  27A7               	addwf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21474  0010F0  0E00               	movlw	0
 21475  0010F2  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21476  0010F4  50F3               	movf	prodl,w,c
 21477  0010F6  27A7               	addwf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21478  0010F8  0E0D               	movlw	13
 21479  0010FA  D005               	goto	u16950
 21480  0010FC                     u16955:
 21481  0010FC  90D8               	bcf	status,0,c
 21482  0010FE  33A7               	rrcf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21483  001100  33A6               	rrcf	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21484  001102  33A5               	rrcf	(??_LORAWAN_TxDone+5)& (0+255),f,b
 21485  001104  33A4               	rrcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 21486  001106                     u16950:
 21487  001106  2EE8               	decfsz	wreg,f,c
 21488  001108  D7F9               	goto	u16955
 21489  00110A                     L12:
 21490  00110A  C0A4  F0BA         	movff	??_LORAWAN_TxDone+4,_LORAWAN_TxDone$1845
 21491  00110E  C0A5  F0BB         	movff	??_LORAWAN_TxDone+5,_LORAWAN_TxDone$1845+1
 21492  001112  C0A6  F0BC         	movff	??_LORAWAN_TxDone+6,_LORAWAN_TxDone$1845+2
 21493  001116  C0A7  F0BD         	movff	??_LORAWAN_TxDone+7,_LORAWAN_TxDone$1845+3
 21494                           
 21495                           ; BSR set to: 0
 21496  00111A  51BA               	movf	_LORAWAN_TxDone$1845& (0+255),w,b
 21497  00111C  0102               	movlb	2	; () banked
 21498  00111E  5DC8               	subwf	(_loRa+200)& (0+255),w,b
 21499  001120  0100               	movlb	0	; () banked
 21500  001122  6FC3               	movwf	LORAWAN_TxDone@delta& (0+255),b
 21501  001124  51BB               	movf	(_LORAWAN_TxDone$1845+1)& (0+255),w,b
 21502  001126  0102               	movlb	2	; () banked
 21503  001128  59C9               	subwfb	(_loRa+201)& (0+255),w,b
 21504  00112A  0100               	movlb	0	; () banked
 21505  00112C  6FC4               	movwf	(LORAWAN_TxDone@delta+1)& (0+255),b
 21506  00112E  51BC               	movf	(_LORAWAN_TxDone$1845+2)& (0+255),w,b
 21507  001130  0102               	movlb	2	; () banked
 21508  001132  59CA               	subwfb	(_loRa+202)& (0+255),w,b
 21509  001134  0100               	movlb	0	; () banked
 21510  001136  6FC5               	movwf	(LORAWAN_TxDone@delta+2)& (0+255),b
 21511  001138  51BD               	movf	(_LORAWAN_TxDone$1845+3)& (0+255),w,b
 21512  00113A  0102               	movlb	2	; () banked
 21513  00113C  59CB               	subwfb	(_loRa+203)& (0+255),w,b
 21514  00113E  0100               	movlb	0	; () banked
 21515  001140  6FC6               	movwf	(LORAWAN_TxDone@delta+3)& (0+255),b
 21516  001142                     l14418:
 21517                           
 21518                           ; BSR set to: 0
 21519                           ;lorawan_eu.c: 409: }
 21520                           ;lorawan_eu.c: 411: for (i=0; i < 16; i++)
 21521  001142  6BCF               	clrf	LORAWAN_TxDone@i& (0+255),b
 21522  001144                     l14424:
 21523                           
 21524                           ; BSR set to: 0
 21525                           ;lorawan_eu.c: 412: {
 21526                           ;lorawan_eu.c: 413: if ((Channels[i].status == 1) && ( Channels[i].channelTimer != 0 ))
 21527  001144  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21528  001146  0D0E               	mullw	14
 21529  001148  0E04               	movlw	low (_Channels+4)
 21530  00114A  24F3               	addwf	prodl,w,c
 21531  00114C  6ED9               	movwf	fsr2l,c
 21532  00114E  0E04               	movlw	high (_Channels+4)
 21533  001150  20F4               	addwfc	prodh,w,c
 21534  001152  6EDA               	movwf	fsr2h,c
 21535  001154  04DE               	decf	postinc2,w,c
 21536  001156  E001 D08E          	bnz	l14442
 21537                           
 21538                           ; BSR set to: 0
 21539  00115A  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21540  00115C  0D0E               	mullw	14
 21541  00115E  0E08               	movlw	low (_Channels+8)
 21542  001160  24F3               	addwf	prodl,w,c
 21543  001162  6ED9               	movwf	fsr2l,c
 21544  001164  0E04               	movlw	high (_Channels+8)
 21545  001166  20F4               	addwfc	prodh,w,c
 21546  001168  6EDA               	movwf	fsr2h,c
 21547  00116A  50DE               	movf	postinc2,w,c
 21548  00116C  10DE               	iorwf	postinc2,w,c
 21549  00116E  10DE               	iorwf	postinc2,w,c
 21550  001170  10DE               	iorwf	postinc2,w,c
 21551  001172  E101 D080          	bz	l14442
 21552                           
 21553                           ; BSR set to: 0
 21554                           ;lorawan_eu.c: 414: {
 21555                           ;lorawan_eu.c: 415: if( i != loRa.lastUsedChannelIndex )
 21556  001176  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21557  001178  0102               	movlb	2	; () banked
 21558  00117A  19DA               	xorwf	(_loRa+218)& (0+255),w,b
 21559  00117C  E04B               	bz	l1048
 21560                           
 21561                           ; BSR set to: 2
 21562                           ;lorawan_eu.c: 416: {
 21563                           ;lorawan_eu.c: 417: if (Channels[i].channelTimer > delta)
 21564  00117E  0100               	movlb	0	; () banked
 21565  001180  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21566  001182  0D0E               	mullw	14
 21567  001184  0E08               	movlw	low (_Channels+8)
 21568  001186  24F3               	addwf	prodl,w,c
 21569  001188  6ED9               	movwf	fsr2l,c
 21570  00118A  0E04               	movlw	high (_Channels+8)
 21571  00118C  20F4               	addwfc	prodh,w,c
 21572  00118E  6EDA               	movwf	fsr2h,c
 21573  001190  50DE               	movf	postinc2,w,c
 21574  001192  5DC3               	subwf	LORAWAN_TxDone@delta& (0+255),w,b
 21575  001194  50DE               	movf	postinc2,w,c
 21576  001196  59C4               	subwfb	(LORAWAN_TxDone@delta+1)& (0+255),w,b
 21577  001198  50DE               	movf	postinc2,w,c
 21578  00119A  59C5               	subwfb	(LORAWAN_TxDone@delta+2)& (0+255),w,b
 21579  00119C  50DE               	movf	postinc2,w,c
 21580  00119E  59C6               	subwfb	(LORAWAN_TxDone@delta+3)& (0+255),w,b
 21581  0011A0  E22D               	bc	l14434
 21582                           
 21583                           ; BSR set to: 0
 21584                           ;lorawan_eu.c: 418: {
 21585                           ;lorawan_eu.c: 419: Channels[i].channelTimer = Channels[i].channelTimer - delta;
 21586  0011A2  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21587  0011A4  0D0E               	mullw	14
 21588  0011A6  0E08               	movlw	low (_Channels+8)
 21589  0011A8  24F3               	addwf	prodl,w,c
 21590  0011AA  6ED9               	movwf	fsr2l,c
 21591  0011AC  0E04               	movlw	high (_Channels+8)
 21592  0011AE  20F4               	addwfc	prodh,w,c
 21593  0011B0  6EDA               	movwf	fsr2h,c
 21594  0011B2  CFDE F0A0          	movff	postinc2,??_LORAWAN_TxDone
 21595  0011B6  CFDE F0A1          	movff	postinc2,??_LORAWAN_TxDone+1
 21596  0011BA  CFDE F0A2          	movff	postinc2,??_LORAWAN_TxDone+2
 21597  0011BE  CFDE F0A3          	movff	postinc2,??_LORAWAN_TxDone+3
 21598  0011C2  51C3               	movf	LORAWAN_TxDone@delta& (0+255),w,b
 21599  0011C4  5DA0               	subwf	??_LORAWAN_TxDone& (0+255),w,b
 21600  0011C6  6FA4               	movwf	(??_LORAWAN_TxDone+4)& (0+255),b
 21601  0011C8  51C4               	movf	(LORAWAN_TxDone@delta+1)& (0+255),w,b
 21602  0011CA  59A1               	subwfb	(??_LORAWAN_TxDone+1)& (0+255),w,b
 21603  0011CC  6FA5               	movwf	(??_LORAWAN_TxDone+5)& (0+255),b
 21604  0011CE  51C5               	movf	(LORAWAN_TxDone@delta+2)& (0+255),w,b
 21605  0011D0  59A2               	subwfb	(??_LORAWAN_TxDone+2)& (0+255),w,b
 21606  0011D2  6FA6               	movwf	(??_LORAWAN_TxDone+6)& (0+255),b
 21607  0011D4  51C6               	movf	(LORAWAN_TxDone@delta+3)& (0+255),w,b
 21608  0011D6  59A3               	subwfb	(??_LORAWAN_TxDone+3)& (0+255),w,b
 21609  0011D8  6FA7               	movwf	(??_LORAWAN_TxDone+7)& (0+255),b
 21610  0011DA  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21611  0011DC  0D0E               	mullw	14
 21612  0011DE  0E08               	movlw	low (_Channels+8)
 21613  0011E0  24F3               	addwf	prodl,w,c
 21614  0011E2  6ED9               	movwf	fsr2l,c
 21615  0011E4  0E04               	movlw	high (_Channels+8)
 21616  0011E6  20F4               	addwfc	prodh,w,c
 21617  0011E8  6EDA               	movwf	fsr2h,c
 21618  0011EA  C0A4  FFDE         	movff	??_LORAWAN_TxDone+4,postinc2
 21619  0011EE  C0A5  FFDE         	movff	??_LORAWAN_TxDone+5,postinc2
 21620  0011F2  C0A6  FFDE         	movff	??_LORAWAN_TxDone+6,postinc2
 21621  0011F6  C0A7  FFDE         	movff	??_LORAWAN_TxDone+7,postinc2
 21622                           
 21623                           ;lorawan_eu.c: 420: }
 21624  0011FA  D00C               	goto	l1048
 21625  0011FC                     l14434:
 21626                           
 21627                           ; BSR set to: 0
 21628                           ;lorawan_eu.c: 421: else
 21629                           ;lorawan_eu.c: 422: {
 21630                           ;lorawan_eu.c: 423: Channels[i].channelTimer = 0;
 21631  0011FC  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21632  0011FE  0D0E               	mullw	14
 21633  001200  0E08               	movlw	low (_Channels+8)
 21634  001202  24F3               	addwf	prodl,w,c
 21635  001204  6ED9               	movwf	fsr2l,c
 21636  001206  0E04               	movlw	high (_Channels+8)
 21637  001208  20F4               	addwfc	prodh,w,c
 21638  00120A  6EDA               	movwf	fsr2h,c
 21639  00120C  6ADE               	clrf	postinc2,c
 21640  00120E  6ADE               	clrf	postinc2,c
 21641  001210  6ADE               	clrf	postinc2,c
 21642  001212  6ADD               	clrf	postdec2,c
 21643  001214                     l1048:
 21644                           
 21645                           ;lorawan_eu.c: 424: }
 21646                           ;lorawan_eu.c: 425: }
 21647                           ;lorawan_eu.c: 426: if ( (Channels[i].channelTimer <= minim) && (Channels[i].channelTime
      +                          r !=0) )
 21648  001214  0100               	movlb	0	; () banked
 21649  001216  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21650  001218  0D0E               	mullw	14
 21651  00121A  0E08               	movlw	low (_Channels+8)
 21652  00121C  24F3               	addwf	prodl,w,c
 21653  00121E  6ED9               	movwf	fsr2l,c
 21654  001220  0E04               	movlw	high (_Channels+8)
 21655  001222  20F4               	addwfc	prodh,w,c
 21656  001224  6EDA               	movwf	fsr2h,c
 21657  001226  50DE               	movf	postinc2,w,c
 21658  001228  5DCB               	subwf	LORAWAN_TxDone@minim& (0+255),w,b
 21659  00122A  50DE               	movf	postinc2,w,c
 21660  00122C  59CC               	subwfb	(LORAWAN_TxDone@minim+1)& (0+255),w,b
 21661  00122E  50DE               	movf	postinc2,w,c
 21662  001230  59CD               	subwfb	(LORAWAN_TxDone@minim+2)& (0+255),w,b
 21663  001232  50DE               	movf	postinc2,w,c
 21664  001234  59CE               	subwfb	(LORAWAN_TxDone@minim+3)& (0+255),w,b
 21665  001236  E31F               	bnc	l14442
 21666                           
 21667                           ; BSR set to: 0
 21668  001238  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21669  00123A  0D0E               	mullw	14
 21670  00123C  0E08               	movlw	low (_Channels+8)
 21671  00123E  24F3               	addwf	prodl,w,c
 21672  001240  6ED9               	movwf	fsr2l,c
 21673  001242  0E04               	movlw	high (_Channels+8)
 21674  001244  20F4               	addwfc	prodh,w,c
 21675  001246  6EDA               	movwf	fsr2h,c
 21676  001248  50DE               	movf	postinc2,w,c
 21677  00124A  10DE               	iorwf	postinc2,w,c
 21678  00124C  10DE               	iorwf	postinc2,w,c
 21679  00124E  10DE               	iorwf	postinc2,w,c
 21680  001250  E012               	bz	l14442
 21681                           
 21682                           ; BSR set to: 0
 21683                           ;lorawan_eu.c: 427: {
 21684                           ;lorawan_eu.c: 428: minim = Channels[i].channelTimer;
 21685  001252  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21686  001254  0D0E               	mullw	14
 21687  001256  0E08               	movlw	low (_Channels+8)
 21688  001258  24F3               	addwf	prodl,w,c
 21689  00125A  6ED9               	movwf	fsr2l,c
 21690  00125C  0E04               	movlw	high (_Channels+8)
 21691  00125E  20F4               	addwfc	prodh,w,c
 21692  001260  6EDA               	movwf	fsr2h,c
 21693  001262  CFDE F0CB          	movff	postinc2,LORAWAN_TxDone@minim
 21694  001266  CFDE F0CC          	movff	postinc2,LORAWAN_TxDone@minim+1
 21695  00126A  CFDE F0CD          	movff	postinc2,LORAWAN_TxDone@minim+2
 21696  00126E  CFDE F0CE          	movff	postinc2,LORAWAN_TxDone@minim+3
 21697                           
 21698                           ; BSR set to: 0
 21699                           ;lorawan_eu.c: 429: found = 1;
 21700  001272  0E01               	movlw	1
 21701  001274  6FC2               	movwf	LORAWAN_TxDone@found& (0+255),b
 21702  001276                     l14442:
 21703                           
 21704                           ; BSR set to: 0
 21705  001276  2BCF               	incf	LORAWAN_TxDone@i& (0+255),f,b
 21706                           
 21707                           ; BSR set to: 0
 21708  001278  0E0F               	movlw	15
 21709  00127A  65CF               	cpfsgt	LORAWAN_TxDone@i& (0+255),b
 21710  00127C  D763               	goto	l14424
 21711                           
 21712                           ; BSR set to: 0
 21713                           ;lorawan_eu.c: 430: }
 21714                           ;lorawan_eu.c: 431: }
 21715                           ;lorawan_eu.c: 432: }
 21716                           ;lorawan_eu.c: 433: if (found == 1)
 21717  00127E  05C2               	decf	LORAWAN_TxDone@found& (0+255),w,b
 21718  001280  E15F               	bnz	l14460
 21719                           
 21720                           ; BSR set to: 0
 21721                           ;lorawan_eu.c: 434: {
 21722                           ;lorawan_eu.c: 435: loRa.lastTimerValue = minim;
 21723  001282  C0CB  F2C8         	movff	LORAWAN_TxDone@minim,_loRa+200
 21724  001286  C0CC  F2C9         	movff	LORAWAN_TxDone@minim+1,_loRa+201
 21725  00128A  C0CD  F2CA         	movff	LORAWAN_TxDone@minim+2,_loRa+202
 21726  00128E  C0CE  F2CB         	movff	LORAWAN_TxDone@minim+3,_loRa+203
 21727                           
 21728                           ; BSR set to: 0
 21729                           ;lorawan_eu.c: 436: SwTimerSetTimeout (loRa.dutyCycleTimerId, ((minim) < 0x000FFFFFUL ? 
      +                          ( (((uint32_t)(minim)) << (12)) / 125UL ) : ( (((uint32_t)(minim)) / 125UL) << (12) ) ))
      +                          ;
 21730  001292  51CE               	movf	(LORAWAN_TxDone@minim+3)& (0+255),w,b
 21731  001294  E106               	bnz	u17040
 21732  001296  29CB               	incf	LORAWAN_TxDone@minim& (0+255),w,b
 21733  001298  0EFF               	movlw	255
 21734  00129A  59CC               	subwfb	(LORAWAN_TxDone@minim+1)& (0+255),w,b
 21735  00129C  0E0F               	movlw	15
 21736  00129E  59CD               	subwfb	(LORAWAN_TxDone@minim+2)& (0+255),w,b
 21737  0012A0  E318               	bnc	l14454
 21738  0012A2                     u17040:
 21739                           
 21740                           ; BSR set to: 0
 21741  0012A2  C0CB  F064         	movff	LORAWAN_TxDone@minim,___lldiv@dividend
 21742  0012A6  C0CC  F065         	movff	LORAWAN_TxDone@minim+1,___lldiv@dividend+1
 21743  0012AA  C0CD  F066         	movff	LORAWAN_TxDone@minim+2,___lldiv@dividend+2
 21744  0012AE  C0CE  F067         	movff	LORAWAN_TxDone@minim+3,___lldiv@dividend+3
 21745  0012B2  0E7D               	movlw	125
 21746  0012B4  6F68               	movwf	___lldiv@divisor& (0+255),b
 21747  0012B6  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 21748  0012B8  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 21749  0012BA  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 21750  0012BC  EC35  F030         	call	___lldiv	;wreg free
 21751  0012C0  0E0C               	movlw	12
 21752  0012C2                     u17055:
 21753  0012C2  90D8               	bcf	status,0,c
 21754  0012C4  3764               	rlcf	?___lldiv& (0+255),f,b
 21755  0012C6  3765               	rlcf	(?___lldiv+1)& (0+255),f,b
 21756  0012C8  3766               	rlcf	(?___lldiv+2)& (0+255),f,b
 21757  0012CA  3767               	rlcf	(?___lldiv+3)& (0+255),f,b
 21758  0012CC  2EE8               	decfsz	wreg,f,c
 21759  0012CE  D7F9               	goto	u17055
 21760  0012D0  D01F               	goto	L13
 21761  0012D2                     l14454:
 21762                           
 21763                           ; BSR set to: 0
 21764  0012D2  C0CB  F0A0         	movff	LORAWAN_TxDone@minim,??_LORAWAN_TxDone
 21765  0012D6  C0CC  F0A1         	movff	LORAWAN_TxDone@minim+1,??_LORAWAN_TxDone+1
 21766  0012DA  C0CD  F0A2         	movff	LORAWAN_TxDone@minim+2,??_LORAWAN_TxDone+2
 21767  0012DE  C0CE  F0A3         	movff	LORAWAN_TxDone@minim+3,??_LORAWAN_TxDone+3
 21768  0012E2  0E0C               	movlw	12
 21769  0012E4                     u17065:
 21770  0012E4  90D8               	bcf	status,0,c
 21771  0012E6  37A0               	rlcf	??_LORAWAN_TxDone& (0+255),f,b
 21772  0012E8  37A1               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 21773  0012EA  37A2               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 21774  0012EC  37A3               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 21775  0012EE  2EE8               	decfsz	wreg,f,c
 21776  0012F0  D7F9               	goto	u17065
 21777  0012F2  C0A0  F064         	movff	??_LORAWAN_TxDone,___lldiv@dividend
 21778  0012F6  C0A1  F065         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend+1
 21779  0012FA  C0A2  F066         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+2
 21780  0012FE  C0A3  F067         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+3
 21781  001302  0E7D               	movlw	125
 21782  001304  6F68               	movwf	___lldiv@divisor& (0+255),b
 21783  001306  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 21784  001308  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 21785  00130A  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 21786  00130C  EC35  F030         	call	___lldiv	;wreg free
 21787  001310                     L13:
 21788  001310  C064  F0BE         	movff	?___lldiv,_LORAWAN_TxDone$1846
 21789  001314  C065  F0BF         	movff	?___lldiv+1,_LORAWAN_TxDone$1846+1
 21790  001318  C066  F0C0         	movff	?___lldiv+2,_LORAWAN_TxDone$1846+2
 21791  00131C  C067  F0C1         	movff	?___lldiv+3,_LORAWAN_TxDone$1846+3
 21792                           
 21793                           ; BSR set to: 0
 21794  001320  C0BE  F071         	movff	_LORAWAN_TxDone$1846,SwTimerSetTimeout@timeout
 21795  001324  C0BF  F072         	movff	_LORAWAN_TxDone$1846+1,SwTimerSetTimeout@timeout+1
 21796  001328  C0C0  F073         	movff	_LORAWAN_TxDone$1846+2,SwTimerSetTimeout@timeout+2
 21797  00132C  C0C1  F074         	movff	_LORAWAN_TxDone$1846+3,SwTimerSetTimeout@timeout+3
 21798  001330  0102               	movlb	2	; () banked
 21799  001332  51E9               	movf	(_loRa+233)& (0+255),w,b
 21800  001334  EC44  F036         	call	_SwTimerSetTimeout
 21801                           
 21802                           ; BSR set to: 0
 21803                           ;lorawan_eu.c: 437: SwTimerStart (loRa.dutyCycleTimerId);
 21804  001338  0102               	movlb	2	; () banked
 21805  00133A  51E9               	movf	(_loRa+233)& (0+255),w,b
 21806  00133C  EC35  F02E         	call	_SwTimerStart
 21807  001340                     l14460:
 21808                           
 21809                           ; BSR set to: 0
 21810                           ;lorawan_eu.c: 438: }
 21811                           ;lorawan_eu.c: 439: if (CLASS_C == loRa.deviceClass)
 21812  001340  0E02               	movlw	2
 21813  001342  0102               	movlb	2	; () banked
 21814  001344  1912               	xorwf	(_loRa+18)& (0+255),w,b
 21815  001346  A4D8               	btfss	status,2,c
 21816  001348  0012               	return	
 21817                           
 21818                           ; BSR set to: 2
 21819                           ;lorawan_eu.c: 440: {
 21820                           ;lorawan_eu.c: 441: loRa.macStatus.macState = CLASS_C_RX2_1_OPEN;
 21821  00134A  5102               	movf	(_loRa+2)& (0+255),w,b
 21822  00134C  0BF0               	andlw	-16
 21823  00134E  0908               	iorlw	8
 21824  001350  6F02               	movwf	(_loRa+2)& (0+255),b
 21825                           
 21826                           ; BSR set to: 2
 21827                           ;lorawan_eu.c: 442: LORAWAN_EnterContinuousReceive();
 21828  001352  EF81  F031         	goto	_LORAWAN_EnterContinuousReceive	;wreg free
 21829  001356                     l14466:
 21830                           
 21831                           ; BSR set to: 2
 21832                           ;lorawan_eu.c: 445: else
 21833                           ;lorawan_eu.c: 446: {
 21834                           ;lorawan_eu.c: 447: if ((RADIO_GetStatus() & (1 << (4))) != 0)
 21835  001356  ECE9  F03B         	call	_RADIO_GetStatus	;wreg free
 21836  00135A  0100               	movlb	0	; () banked
 21837  00135C  6FA0               	movwf	??_LORAWAN_TxDone& (0+255),b
 21838  00135E  A9A0               	btfss	??_LORAWAN_TxDone& (0+255),4,b
 21839  001360  D011               	goto	l14470
 21840                           
 21841                           ; BSR set to: 0
 21842                           ;lorawan_eu.c: 448: {
 21843                           ;lorawan_eu.c: 450: rxPayload.RxAppData( (0), 0, RADIO_NOT_OK );
 21844  001362  0E00               	movlw	0
 21845  001364  6F64               	movwf	RxDataDone@pData& (0+255),b
 21846  001366  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
 21847  001368  6F66               	movwf	RxDataDone@dataLength& (0+255),b
 21848  00136A  0E02               	movlw	2
 21849  00136C  6F67               	movwf	RxDataDone@status& (0+255),b
 21850  00136E  0005               	push	
 21851  001370  0101               	movlb	1	; () banked
 21852  001372  6EFA               	movwf	pclath,c
 21853  001374  516E               	movf	_rxPayload& (0+255),w,b
 21854  001376  6EFD               	movwf	tosl,c
 21855  001378  516F               	movf	(_rxPayload+1)& (0+255),w,b
 21856  00137A  6EFE               	movwf	tosh,c
 21857  00137C  50F8               	movf	tblptru,w,c
 21858  00137E  6EFF               	movwf	tosu,c
 21859  001380  50FA               	movf	pclath,w,c
 21860  001382  0012               	return		;indir
 21861  001384                     l14470:
 21862                           
 21863                           ; BSR set to: 0
 21864                           ;lorawan_eu.c: 452: else
 21865                           ;lorawan_eu.c: 453: {
 21866                           ;lorawan_eu.c: 455: if ( rxPayload.RxAppData != (0) )
 21867  001384  0101               	movlb	1	; () banked
 21868  001386  516E               	movf	_rxPayload& (0+255),w,b
 21869  001388  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 21870  00138A  B4D8               	btfsc	status,2,c
 21871  00138C  0012               	return	
 21872                           
 21873                           ; BSR set to: 1
 21874                           ;lorawan_eu.c: 456: {
 21875                           ;lorawan_eu.c: 457: rxPayload.RxAppData( (0), 0, RADIO_OK );
 21876  00138E  0E00               	movlw	0
 21877  001390  0100               	movlb	0	; () banked
 21878  001392  6F64               	movwf	RxDataDone@pData& (0+255),b
 21879  001394  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
 21880  001396  6F66               	movwf	RxDataDone@dataLength& (0+255),b
 21881  001398  0E03               	movlw	3
 21882  00139A  6F67               	movwf	RxDataDone@status& (0+255),b
 21883  00139C  0005               	push	
 21884  00139E  0101               	movlb	1	; () banked
 21885  0013A0  6EFA               	movwf	pclath,c
 21886  0013A2  516E               	movf	_rxPayload& (0+255),w,b
 21887  0013A4  6EFD               	movwf	tosl,c
 21888  0013A6  516F               	movf	(_rxPayload+1)& (0+255),w,b
 21889  0013A8  6EFE               	movwf	tosh,c
 21890  0013AA  50F8               	movf	tblptru,w,c
 21891  0013AC  6EFF               	movwf	tosu,c
 21892  0013AE  50FA               	movf	pclath,w,c
 21893  0013B0  0012               	return		;indir
 21894  0013B2                     __end_of_LORAWAN_TxDone:
 21895                           	opt stack 0
 21896                           tosu	equ	0xFFF
 21897                           tosh	equ	0xFFE
 21898                           tosl	equ	0xFFD
 21899                           pclath	equ	0xFFA
 21900                           tblptru	equ	0xFF8
 21901                           tblptrh	equ	0xFF7
 21902                           tblptrl	equ	0xFF6
 21903                           tablat	equ	0xFF5
 21904                           prodh	equ	0xFF4
 21905                           prodl	equ	0xFF3
 21906                           intcon	equ	0xFF2
 21907                           intcon2	equ	0xFF1
 21908                           intcon3	equ	0xFF0
 21909                           indf0	equ	0xFEF
 21910                           postinc0	equ	0xFEE
 21911                           fsr0h	equ	0xFEA
 21912                           fsr0l	equ	0xFE9
 21913                           wreg	equ	0xFE8
 21914                           postinc1	equ	0xFE6
 21915                           postdec1	equ	0xFE5
 21916                           plusw1	equ	0xFE3
 21917                           fsr1h	equ	0xFE2
 21918                           fsr1l	equ	0xFE1
 21919                           indf2	equ	0xFDF
 21920                           postinc2	equ	0xFDE
 21921                           postdec2	equ	0xFDD
 21922                           plusw2	equ	0xFDB
 21923                           fsr2h	equ	0xFDA
 21924                           fsr2l	equ	0xFD9
 21925                           status	equ	0xFD8
 21926                           
 21927 ;; *************** function _SwTimerReadValue *****************
 21928 ;; Defined at:
 21929 ;;		line 193 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 21930 ;; Parameters:    Size  Location     Type
 21931 ;;  timerId         1    wreg     unsigned char 
 21932 ;; Auto vars:     Size  Location     Type
 21933 ;;  timerId         1   51[BANK0 ] unsigned char 
 21934 ;;  ticksCount      4   47[BANK0 ] unsigned long 
 21935 ;; Return value:  Size  Location     Type
 21936 ;;                  4   43[BANK0 ] unsigned long 
 21937 ;; Registers used:
 21938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21939 ;; Tracked objects:
 21940 ;;		On entry : C/1
 21941 ;;		On exit  : F/0
 21942 ;;		Unchanged: 0/0
 21943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21944 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21945 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21947 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21948 ;;Total ram usage:        9 bytes
 21949 ;; Hardware stack levels used:    1
 21950 ;; Hardware stack levels required when called:   10
 21951 ;; This function calls:
 21952 ;;		_SwTimersInterrupt
 21953 ;; This function is called by:
 21954 ;;		_RADIO_TxDone
 21955 ;;		_RADIO_FSKPacketSent
 21956 ;;		_LORAWAN_TxDone
 21957 ;; This function uses a non-reentrant model
 21958 ;;
 21959                           
 21960                           	psect	text107
 21961  006D0A                     __ptext107:
 21962                           	opt stack 0
 21963  006D0A                     _SwTimerReadValue:
 21964                           	opt stack 16
 21965                           
 21966                           ;incstack = 0
 21967                           ;SwTimerReadValue@timerId stored from wreg
 21968  006D0A  0100               	movlb	0	; () banked
 21969  006D0C  6F93               	movwf	SwTimerReadValue@timerId& (0+255),b
 21970                           
 21971                           ;sw_timer.c: 195: uint32_t ticksCount;
 21972                           ;sw_timer.c: 197: (INTCONbits.GIE = 0);
 21973  006D0E  9EF2               	bcf	intcon,7,c	;volatile
 21974                           
 21975                           ;sw_timer.c: 200: SwTimersInterrupt();
 21976  006D10  ECD5  F025         	call	_SwTimersInterrupt	;wreg free
 21977                           
 21978                           ; BSR set to: 0
 21979                           ;sw_timer.c: 201: ticksCount = swTimers[timerId].ticksRemaining;
 21980  006D14  5193               	movf	SwTimerReadValue@timerId& (0+255),w,b
 21981  006D16  0D08               	mullw	8
 21982  006D18  0E00               	movlw	low _swTimers
 21983  006D1A  24F3               	addwf	prodl,w,c
 21984  006D1C  6ED9               	movwf	fsr2l,c
 21985  006D1E  0E03               	movlw	high _swTimers
 21986  006D20  20F4               	addwfc	prodh,w,c
 21987  006D22  6EDA               	movwf	fsr2h,c
 21988  006D24  CFDE F08F          	movff	postinc2,SwTimerReadValue@ticksCount
 21989  006D28  CFDE F090          	movff	postinc2,SwTimerReadValue@ticksCount+1
 21990  006D2C  CFDE F091          	movff	postinc2,SwTimerReadValue@ticksCount+2
 21991  006D30  CFDE F092          	movff	postinc2,SwTimerReadValue@ticksCount+3
 21992                           
 21993                           ; BSR set to: 0
 21994                           ;sw_timer.c: 202: (INTCONbits.GIE = 1);
 21995  006D34  8EF2               	bsf	intcon,7,c	;volatile
 21996                           
 21997                           ; BSR set to: 0
 21998                           ;sw_timer.c: 204: return ticksCount;
 21999  006D36  C08F  F08B         	movff	SwTimerReadValue@ticksCount,?_SwTimerReadValue
 22000  006D3A  C090  F08C         	movff	SwTimerReadValue@ticksCount+1,?_SwTimerReadValue+1
 22001  006D3E  C091  F08D         	movff	SwTimerReadValue@ticksCount+2,?_SwTimerReadValue+2
 22002  006D42  C092  F08E         	movff	SwTimerReadValue@ticksCount+3,?_SwTimerReadValue+3
 22003                           
 22004                           ; BSR set to: 0
 22005  006D46  0012               	return		;funcret
 22006  006D48                     __end_of_SwTimerReadValue:
 22007                           	opt stack 0
 22008                           tosu	equ	0xFFF
 22009                           tosh	equ	0xFFE
 22010                           tosl	equ	0xFFD
 22011                           pclath	equ	0xFFA
 22012                           tblptru	equ	0xFF8
 22013                           tblptrh	equ	0xFF7
 22014                           tblptrl	equ	0xFF6
 22015                           tablat	equ	0xFF5
 22016                           prodh	equ	0xFF4
 22017                           prodl	equ	0xFF3
 22018                           intcon	equ	0xFF2
 22019                           intcon2	equ	0xFF1
 22020                           intcon3	equ	0xFF0
 22021                           indf0	equ	0xFEF
 22022                           postinc0	equ	0xFEE
 22023                           fsr0h	equ	0xFEA
 22024                           fsr0l	equ	0xFE9
 22025                           wreg	equ	0xFE8
 22026                           postinc1	equ	0xFE6
 22027                           postdec1	equ	0xFE5
 22028                           plusw1	equ	0xFE3
 22029                           fsr1h	equ	0xFE2
 22030                           fsr1l	equ	0xFE1
 22031                           indf2	equ	0xFDF
 22032                           postinc2	equ	0xFDE
 22033                           postdec2	equ	0xFDD
 22034                           plusw2	equ	0xFDB
 22035                           fsr2h	equ	0xFDA
 22036                           fsr2l	equ	0xFD9
 22037                           status	equ	0xFD8
 22038                           
 22039 ;; *************** function _SwTimerIsRunning *****************
 22040 ;; Defined at:
 22041 ;;		line 207 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 22042 ;; Parameters:    Size  Location     Type
 22043 ;;  timerId         1    wreg     unsigned char 
 22044 ;; Auto vars:     Size  Location     Type
 22045 ;;  timerId         1    4[BANK0 ] unsigned char 
 22046 ;;  isRunning       1    5[BANK0 ] unsigned char 
 22047 ;; Return value:  Size  Location     Type
 22048 ;;                  1    wreg      unsigned char 
 22049 ;; Registers used:
 22050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22051 ;; Tracked objects:
 22052 ;;		On entry : F/2
 22053 ;;		On exit  : F/0
 22054 ;;		Unchanged: 0/0
 22055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22057 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22059 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22060 ;;Total ram usage:        2 bytes
 22061 ;; Hardware stack levels used:    1
 22062 ;; Hardware stack levels required when called:    7
 22063 ;; This function calls:
 22064 ;;		Nothing
 22065 ;; This function is called by:
 22066 ;;		_LORAWAN_TxDone
 22067 ;; This function uses a non-reentrant model
 22068 ;;
 22069                           
 22070                           	psect	text108
 22071  007374                     __ptext108:
 22072                           	opt stack 0
 22073  007374                     _SwTimerIsRunning:
 22074                           	opt stack 19
 22075                           
 22076                           ; BSR set to: 0
 22077                           ;incstack = 0
 22078                           ;SwTimerIsRunning@timerId stored from wreg
 22079  007374  0100               	movlb	0	; () banked
 22080  007376  6F64               	movwf	SwTimerIsRunning@timerId& (0+255),b
 22081                           
 22082                           ;sw_timer.c: 209: uint8_t isRunning;
 22083                           ;sw_timer.c: 211: (INTCONbits.GIE = 0);
 22084  007378  9EF2               	bcf	intcon,7,c	;volatile
 22085                           
 22086                           ;sw_timer.c: 212: isRunning = swTimers[timerId].running;
 22087  00737A  5164               	movf	SwTimerIsRunning@timerId& (0+255),w,b
 22088  00737C  0D08               	mullw	8
 22089  00737E  0E04               	movlw	low (_swTimers+4)
 22090  007380  24F3               	addwf	prodl,w,c
 22091  007382  6ED9               	movwf	fsr2l,c
 22092  007384  0E03               	movlw	high (_swTimers+4)
 22093  007386  20F4               	addwfc	prodh,w,c
 22094  007388  6EDA               	movwf	fsr2h,c
 22095  00738A  50DF               	movf	indf2,w,c
 22096  00738C  6F65               	movwf	SwTimerIsRunning@isRunning& (0+255),b
 22097                           
 22098                           ; BSR set to: 0
 22099                           ;sw_timer.c: 213: (INTCONbits.GIE = 1);
 22100  00738E  8EF2               	bsf	intcon,7,c	;volatile
 22101                           
 22102                           ; BSR set to: 0
 22103                           ;sw_timer.c: 215: return isRunning;
 22104  007390  5165               	movf	SwTimerIsRunning@isRunning& (0+255),w,b
 22105                           
 22106                           ; BSR set to: 0
 22107  007392  0012               	return		;funcret
 22108  007394                     __end_of_SwTimerIsRunning:
 22109                           	opt stack 0
 22110                           tosu	equ	0xFFF
 22111                           tosh	equ	0xFFE
 22112                           tosl	equ	0xFFD
 22113                           pclath	equ	0xFFA
 22114                           tblptru	equ	0xFF8
 22115                           tblptrh	equ	0xFF7
 22116                           tblptrl	equ	0xFF6
 22117                           tablat	equ	0xFF5
 22118                           prodh	equ	0xFF4
 22119                           prodl	equ	0xFF3
 22120                           intcon	equ	0xFF2
 22121                           intcon2	equ	0xFF1
 22122                           intcon3	equ	0xFF0
 22123                           indf0	equ	0xFEF
 22124                           postinc0	equ	0xFEE
 22125                           fsr0h	equ	0xFEA
 22126                           fsr0l	equ	0xFE9
 22127                           wreg	equ	0xFE8
 22128                           postinc1	equ	0xFE6
 22129                           postdec1	equ	0xFE5
 22130                           plusw1	equ	0xFE3
 22131                           fsr1h	equ	0xFE2
 22132                           fsr1l	equ	0xFE1
 22133                           indf2	equ	0xFDF
 22134                           postinc2	equ	0xFDE
 22135                           postdec2	equ	0xFDD
 22136                           plusw2	equ	0xFDB
 22137                           fsr2h	equ	0xFDA
 22138                           fsr2l	equ	0xFD9
 22139                           status	equ	0xFD8
 22140                           
 22141 ;; *************** function _RADIO_GetStatus *****************
 22142 ;; Defined at:
 22143 ;;		line 1116 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22144 ;; Parameters:    Size  Location     Type
 22145 ;;		None
 22146 ;; Auto vars:     Size  Location     Type
 22147 ;;		None
 22148 ;; Return value:  Size  Location     Type
 22149 ;;                  1    wreg      unsigned char 
 22150 ;; Registers used:
 22151 ;;		wreg, status,2
 22152 ;; Tracked objects:
 22153 ;;		On entry : C/2
 22154 ;;		On exit  : F/1
 22155 ;;		Unchanged: 0/0
 22156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22161 ;;Total ram usage:        0 bytes
 22162 ;; Hardware stack levels used:    1
 22163 ;; Hardware stack levels required when called:    7
 22164 ;; This function calls:
 22165 ;;		Nothing
 22166 ;; This function is called by:
 22167 ;;		_LORAWAN_TxDone
 22168 ;;		_LORAWAN_ReceiveWindow2Callback
 22169 ;;		_LORAWAN_RxDone
 22170 ;; This function uses a non-reentrant model
 22171 ;;
 22172                           
 22173                           	psect	text109
 22174  0077D2                     __ptext109:
 22175                           	opt stack 0
 22176  0077D2                     _RADIO_GetStatus:
 22177                           	opt stack 19
 22178                           
 22179                           ;radio_driver_SX1276.c: 1118: return RadioConfiguration.flags;
 22180                           
 22181                           ; BSR set to: 0
 22182                           ;incstack = 0
 22183  0077D2  0101               	movlb	1	; () banked
 22184  0077D4  5198               	movf	(_RadioConfiguration+35)& (0+255),w,b
 22185                           
 22186                           ; BSR set to: 1
 22187  0077D6  0012               	return		;funcret
 22188  0077D8                     __end_of_RADIO_GetStatus:
 22189                           	opt stack 0
 22190                           tosu	equ	0xFFF
 22191                           tosh	equ	0xFFE
 22192                           tosl	equ	0xFFD
 22193                           pclath	equ	0xFFA
 22194                           tblptru	equ	0xFF8
 22195                           tblptrh	equ	0xFF7
 22196                           tblptrl	equ	0xFF6
 22197                           tablat	equ	0xFF5
 22198                           prodh	equ	0xFF4
 22199                           prodl	equ	0xFF3
 22200                           intcon	equ	0xFF2
 22201                           intcon2	equ	0xFF1
 22202                           intcon3	equ	0xFF0
 22203                           indf0	equ	0xFEF
 22204                           postinc0	equ	0xFEE
 22205                           fsr0h	equ	0xFEA
 22206                           fsr0l	equ	0xFE9
 22207                           wreg	equ	0xFE8
 22208                           postinc1	equ	0xFE6
 22209                           postdec1	equ	0xFE5
 22210                           plusw1	equ	0xFE3
 22211                           fsr1h	equ	0xFE2
 22212                           fsr1l	equ	0xFE1
 22213                           indf2	equ	0xFDF
 22214                           postinc2	equ	0xFDE
 22215                           postdec2	equ	0xFDD
 22216                           plusw2	equ	0xFDB
 22217                           fsr2h	equ	0xFDA
 22218                           fsr2l	equ	0xFD9
 22219                           status	equ	0xFD8
 22220                           
 22221 ;; *************** function _LORAWAN_EnterContinuousReceive *****************
 22222 ;; Defined at:
 22223 ;;		line 915 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22224 ;; Parameters:    Size  Location     Type
 22225 ;;		None
 22226 ;; Auto vars:     Size  Location     Type
 22227 ;;		None
 22228 ;; Return value:  Size  Location     Type
 22229 ;;                  1    wreg      void 
 22230 ;; Registers used:
 22231 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22232 ;; Tracked objects:
 22233 ;;		On entry : F/2
 22234 ;;		On exit  : E/0
 22235 ;;		Unchanged: 0/0
 22236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22241 ;;Total ram usage:        0 bytes
 22242 ;; Hardware stack levels used:    1
 22243 ;; Hardware stack levels required when called:   13
 22244 ;; This function calls:
 22245 ;;		_ConfigureRadioRx
 22246 ;;		_RADIO_ReceiveStart
 22247 ;;		_RADIO_ReceiveStop
 22248 ;;		_RADIO_ReleaseData
 22249 ;;		_ResetParametersForConfirmedTransmission
 22250 ;;		_ResetParametersForUnconfirmedTransmission
 22251 ;;		_RxDataDone
 22252 ;; This function is called by:
 22253 ;;		_LORAWAN_TxDone
 22254 ;;		_LORAWAN_ReceiveWindow2Callback
 22255 ;;		_LORAWAN_RxDone
 22256 ;;		_SetReceptionNotOkState
 22257 ;; This function uses a non-reentrant model
 22258 ;;
 22259                           
 22260                           	psect	text110
 22261  006302                     __ptext110:
 22262                           	opt stack 0
 22263  006302                     _LORAWAN_EnterContinuousReceive:
 22264                           	opt stack 13
 22265                           
 22266                           ; BSR set to: 2
 22267                           ;lorawan.c: 917: RADIO_ReceiveStop();
 22268                           
 22269                           ; BSR set to: 1
 22270                           ;incstack = 0
 22271  006302  EC08  F03A         	call	_RADIO_ReceiveStop	;wreg free
 22272                           
 22273                           ; BSR set to: 1
 22274                           ;lorawan.c: 918: RADIO_ReleaseData();
 22275  006306  ECEC  F03B         	call	_RADIO_ReleaseData	;wreg free
 22276                           
 22277                           ; BSR set to: 1
 22278                           ;lorawan.c: 920: ConfigureRadioRx(loRa.receiveWindow2Parameters.dataRate, loRa.receiveWi
      +                          ndow2Parameters.frequency);
 22279  00630A  C218  F076         	movff	_loRa+24,ConfigureRadioRx@freq
 22280  00630E  C219  F077         	movff	_loRa+25,ConfigureRadioRx@freq+1
 22281  006312  C21A  F078         	movff	_loRa+26,ConfigureRadioRx@freq+2
 22282  006316  C21B  F079         	movff	_loRa+27,ConfigureRadioRx@freq+3
 22283  00631A  0102               	movlb	2	; () banked
 22284  00631C  511C               	movf	(_loRa+28)& (0+255),w,b
 22285  00631E  EC1D  F039         	call	_ConfigureRadioRx
 22286                           
 22287                           ;lorawan.c: 922: if (RADIO_ReceiveStart(0) != OK)
 22288  006322  0100               	movlb	0	; () banked
 22289  006324  6B95               	clrf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),b
 22290  006326  6B94               	clrf	RADIO_ReceiveStart@rxWindowSize& (0+255),b
 22291  006328  EC01  F016         	call	_RADIO_ReceiveStart	;wreg free
 22292  00632C  5194               	movf	?_RADIO_ReceiveStart& (0+255),w,b
 22293  00632E  1195               	iorwf	(?_RADIO_ReceiveStart+1)& (0+255),w,b
 22294  006330  B4D8               	btfsc	status,2,c
 22295  006332  0012               	return	
 22296                           
 22297                           ; BSR set to: 0
 22298                           ;lorawan.c: 923: {
 22299                           ;lorawan.c: 924: ResetParametersForConfirmedTransmission ();
 22300  006334  EC4B  F03B         	call	_ResetParametersForConfirmedTransmission	;wreg free
 22301                           
 22302                           ;lorawan.c: 925: ResetParametersForUnconfirmedTransmission ();
 22303  006338  EC44  F03B         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
 22304                           
 22305                           ; BSR set to: 2
 22306                           ;lorawan.c: 926: loRa.macStatus.macState = IDLE;
 22307  00633C  0EF0               	movlw	-16
 22308  00633E  1702               	andwf	(_loRa+2)& (0+255),f,b
 22309                           
 22310                           ; BSR set to: 2
 22311                           ;lorawan.c: 927: if (rxPayload.RxAppData != (0))
 22312  006340  0101               	movlb	1	; () banked
 22313  006342  516E               	movf	_rxPayload& (0+255),w,b
 22314  006344  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 22315  006346  B4D8               	btfsc	status,2,c
 22316  006348  0012               	return	
 22317                           
 22318                           ; BSR set to: 1
 22319                           ;lorawan.c: 928: {
 22320                           ;lorawan.c: 929: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 22321  00634A  0E00               	movlw	0
 22322  00634C  0100               	movlb	0	; () banked
 22323  00634E  6F64               	movwf	RxDataDone@pData& (0+255),b
 22324  006350  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
 22325  006352  6F66               	movwf	RxDataDone@dataLength& (0+255),b
 22326  006354  6F67               	movwf	RxDataDone@status& (0+255),b
 22327  006356  0005               	push	
 22328  006358  0101               	movlb	1	; () banked
 22329  00635A  6EFA               	movwf	pclath,c
 22330  00635C  516E               	movf	_rxPayload& (0+255),w,b
 22331  00635E  6EFD               	movwf	tosl,c
 22332  006360  516F               	movf	(_rxPayload+1)& (0+255),w,b
 22333  006362  6EFE               	movwf	tosh,c
 22334  006364  50F8               	movf	tblptru,w,c
 22335  006366  6EFF               	movwf	tosu,c
 22336  006368  50FA               	movf	pclath,w,c
 22337  00636A  0012               	return		;indir
 22338  00636C                     __end_of_LORAWAN_EnterContinuousReceive:
 22339                           	opt stack 0
 22340                           tosu	equ	0xFFF
 22341                           tosh	equ	0xFFE
 22342                           tosl	equ	0xFFD
 22343                           pclath	equ	0xFFA
 22344                           tblptru	equ	0xFF8
 22345                           tblptrh	equ	0xFF7
 22346                           tblptrl	equ	0xFF6
 22347                           tablat	equ	0xFF5
 22348                           prodh	equ	0xFF4
 22349                           prodl	equ	0xFF3
 22350                           intcon	equ	0xFF2
 22351                           intcon2	equ	0xFF1
 22352                           intcon3	equ	0xFF0
 22353                           indf0	equ	0xFEF
 22354                           postinc0	equ	0xFEE
 22355                           fsr0h	equ	0xFEA
 22356                           fsr0l	equ	0xFE9
 22357                           wreg	equ	0xFE8
 22358                           postinc1	equ	0xFE6
 22359                           postdec1	equ	0xFE5
 22360                           plusw1	equ	0xFE3
 22361                           fsr1h	equ	0xFE2
 22362                           fsr1l	equ	0xFE1
 22363                           indf2	equ	0xFDF
 22364                           postinc2	equ	0xFDE
 22365                           postdec2	equ	0xFDD
 22366                           plusw2	equ	0xFDB
 22367                           fsr2h	equ	0xFDA
 22368                           fsr2l	equ	0xFD9
 22369                           status	equ	0xFD8
 22370                           
 22371 ;; *************** function _RxDataDone *****************
 22372 ;; Defined at:
 22373 ;;		line 108 in file "main.c"
 22374 ;; Parameters:    Size  Location     Type
 22375 ;;  pData           2    4[BANK0 ] PTR unsigned char 
 22376 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), NULL(0), 
 22377 ;;  dataLength      1    6[BANK0 ] unsigned char 
 22378 ;;  status          1    7[BANK0 ] enum E18947
 22379 ;; Auto vars:     Size  Location     Type
 22380 ;;		None
 22381 ;; Return value:  Size  Location     Type
 22382 ;;                  1    wreg      void 
 22383 ;; Registers used:
 22384 ;;		None
 22385 ;; Tracked objects:
 22386 ;;		On entry : F/1
 22387 ;;		On exit  : F/1
 22388 ;;		Unchanged: F/0
 22389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22390 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22393 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22394 ;;Total ram usage:        4 bytes
 22395 ;; Hardware stack levels used:    1
 22396 ;; Hardware stack levels required when called:    7
 22397 ;; This function calls:
 22398 ;;		Nothing
 22399 ;; This function is called by:
 22400 ;;		_main
 22401 ;;		_LORAWAN_EnterContinuousReceive
 22402 ;;		_LORAWAN_ReceiveWindow2Callback
 22403 ;;		_SetReceptionNotOkState
 22404 ;;		_LORAWAN_RxDone
 22405 ;;		_LORAWAN_RxTimeout
 22406 ;;		_LORAWAN_TxDone
 22407 ;;		_AckRetransmissionCallback
 22408 ;;		_UnconfirmedTransmissionCallback
 22409 ;; This function uses a non-reentrant model
 22410 ;;
 22411                           
 22412                           	psect	text111
 22413  007820                     __ptext111:
 22414                           	opt stack 0
 22415  007820                     _RxDataDone:
 22416                           	opt stack 20
 22417                           
 22418                           ; BSR set to: 1
 22419                           
 22420                           ;incstack = 0
 22421  007820  0012               	return		;funcret
 22422  007822                     __end_of_RxDataDone:
 22423                           	opt stack 0
 22424                           tosu	equ	0xFFF
 22425                           tosh	equ	0xFFE
 22426                           tosl	equ	0xFFD
 22427                           pclath	equ	0xFFA
 22428                           tblptru	equ	0xFF8
 22429                           tblptrh	equ	0xFF7
 22430                           tblptrl	equ	0xFF6
 22431                           tablat	equ	0xFF5
 22432                           prodh	equ	0xFF4
 22433                           prodl	equ	0xFF3
 22434                           intcon	equ	0xFF2
 22435                           intcon2	equ	0xFF1
 22436                           intcon3	equ	0xFF0
 22437                           indf0	equ	0xFEF
 22438                           postinc0	equ	0xFEE
 22439                           fsr0h	equ	0xFEA
 22440                           fsr0l	equ	0xFE9
 22441                           wreg	equ	0xFE8
 22442                           postinc1	equ	0xFE6
 22443                           postdec1	equ	0xFE5
 22444                           plusw1	equ	0xFE3
 22445                           fsr1h	equ	0xFE2
 22446                           fsr1l	equ	0xFE1
 22447                           indf2	equ	0xFDF
 22448                           postinc2	equ	0xFDE
 22449                           postdec2	equ	0xFDD
 22450                           plusw2	equ	0xFDB
 22451                           fsr2h	equ	0xFDA
 22452                           fsr2l	equ	0xFD9
 22453                           status	equ	0xFD8
 22454                           
 22455 ;; *************** function _ResetParametersForUnconfirmedTransmission *****************
 22456 ;; Defined at:
 22457 ;;		line 1097 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22458 ;; Parameters:    Size  Location     Type
 22459 ;;		None
 22460 ;; Auto vars:     Size  Location     Type
 22461 ;;		None
 22462 ;; Return value:  Size  Location     Type
 22463 ;;                  1    wreg      void 
 22464 ;; Registers used:
 22465 ;;		wreg, status,2
 22466 ;; Tracked objects:
 22467 ;;		On entry : D/0
 22468 ;;		On exit  : F/2
 22469 ;;		Unchanged: 0/0
 22470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22475 ;;Total ram usage:        0 bytes
 22476 ;; Hardware stack levels used:    1
 22477 ;; Hardware stack levels required when called:    7
 22478 ;; This function calls:
 22479 ;;		Nothing
 22480 ;; This function is called by:
 22481 ;;		_LORAWAN_RxTimeout
 22482 ;;		_LORAWAN_ReceiveWindow2Callback
 22483 ;;		_LORAWAN_EnterContinuousReceive
 22484 ;;		_UnconfirmedTransmissionCallback
 22485 ;; This function uses a non-reentrant model
 22486 ;;
 22487                           
 22488                           	psect	text112
 22489  007688                     __ptext112:
 22490                           	opt stack 0
 22491  007688                     _ResetParametersForUnconfirmedTransmission:
 22492                           	opt stack 20
 22493                           
 22494                           ;lorawan.c: 1099: loRa.macStatus.macState = IDLE;
 22495                           
 22496                           ; BSR set to: 1
 22497                           ;incstack = 0
 22498  007688  0EF0               	movlw	-16
 22499  00768A  0102               	movlb	2	; () banked
 22500  00768C  1702               	andwf	(_loRa+2)& (0+255),f,b
 22501                           
 22502                           ;lorawan.c: 1100: loRa.counterRepetitionsUnconfirmedUplink = 1;
 22503  00768E  0E01               	movlw	1
 22504  007690  6FD8               	movwf	(_loRa+216)& (0+255),b
 22505                           
 22506                           ; BSR set to: 2
 22507                           ;lorawan.c: 1101: loRa.crtMacCmdIndex = 0;
 22508  007692  6BA7               	clrf	(_loRa+167)& (0+255),b
 22509                           
 22510                           ; BSR set to: 2
 22511  007694  0012               	return		;funcret
 22512  007696                     __end_of_ResetParametersForUnconfirmedTransmission:
 22513                           	opt stack 0
 22514                           tosu	equ	0xFFF
 22515                           tosh	equ	0xFFE
 22516                           tosl	equ	0xFFD
 22517                           pclath	equ	0xFFA
 22518                           tblptru	equ	0xFF8
 22519                           tblptrh	equ	0xFF7
 22520                           tblptrl	equ	0xFF6
 22521                           tablat	equ	0xFF5
 22522                           prodh	equ	0xFF4
 22523                           prodl	equ	0xFF3
 22524                           intcon	equ	0xFF2
 22525                           intcon2	equ	0xFF1
 22526                           intcon3	equ	0xFF0
 22527                           indf0	equ	0xFEF
 22528                           postinc0	equ	0xFEE
 22529                           fsr0h	equ	0xFEA
 22530                           fsr0l	equ	0xFE9
 22531                           wreg	equ	0xFE8
 22532                           postinc1	equ	0xFE6
 22533                           postdec1	equ	0xFE5
 22534                           plusw1	equ	0xFE3
 22535                           fsr1h	equ	0xFE2
 22536                           fsr1l	equ	0xFE1
 22537                           indf2	equ	0xFDF
 22538                           postinc2	equ	0xFDE
 22539                           postdec2	equ	0xFDD
 22540                           plusw2	equ	0xFDB
 22541                           fsr2h	equ	0xFDA
 22542                           fsr2l	equ	0xFD9
 22543                           status	equ	0xFD8
 22544                           
 22545 ;; *************** function _ResetParametersForConfirmedTransmission *****************
 22546 ;; Defined at:
 22547 ;;		line 1090 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22548 ;; Parameters:    Size  Location     Type
 22549 ;;		None
 22550 ;; Auto vars:     Size  Location     Type
 22551 ;;		None
 22552 ;; Return value:  Size  Location     Type
 22553 ;;                  1    wreg      void 
 22554 ;; Registers used:
 22555 ;;		wreg, status,2
 22556 ;; Tracked objects:
 22557 ;;		On entry : D/2
 22558 ;;		On exit  : F/2
 22559 ;;		Unchanged: 0/0
 22560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22565 ;;Total ram usage:        0 bytes
 22566 ;; Hardware stack levels used:    1
 22567 ;; Hardware stack levels required when called:    7
 22568 ;; This function calls:
 22569 ;;		Nothing
 22570 ;; This function is called by:
 22571 ;;		_LORAWAN_RxTimeout
 22572 ;;		_LORAWAN_ReceiveWindow2Callback
 22573 ;;		_LORAWAN_EnterContinuousReceive
 22574 ;;		_AckRetransmissionCallback
 22575 ;; This function uses a non-reentrant model
 22576 ;;
 22577                           
 22578                           	psect	text113
 22579  007696                     __ptext113:
 22580                           	opt stack 0
 22581  007696                     _ResetParametersForConfirmedTransmission:
 22582                           	opt stack 18
 22583                           
 22584                           ;lorawan.c: 1092: loRa.macStatus.macState = IDLE;
 22585                           
 22586                           ; BSR set to: 2
 22587                           ;incstack = 0
 22588  007696  0EF0               	movlw	-16
 22589  007698  0102               	movlb	2	; () banked
 22590  00769A  1702               	andwf	(_loRa+2)& (0+255),f,b
 22591                           
 22592                           ;lorawan.c: 1093: loRa.counterRepetitionsConfirmedUplink = 1;
 22593  00769C  0E01               	movlw	1
 22594  00769E  6FD9               	movwf	(_loRa+217)& (0+255),b
 22595                           
 22596                           ; BSR set to: 2
 22597                           ;lorawan.c: 1094: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 22598  0076A0  9100               	bcf	_loRa& (0+255),0,b
 22599                           
 22600                           ; BSR set to: 2
 22601  0076A2  0C01               	retlw	1	;funcret
 22602  0076A4                     __end_of_ResetParametersForConfirmedTransmission:
 22603                           	opt stack 0
 22604                           tosu	equ	0xFFF
 22605                           tosh	equ	0xFFE
 22606                           tosl	equ	0xFFD
 22607                           pclath	equ	0xFFA
 22608                           tblptru	equ	0xFF8
 22609                           tblptrh	equ	0xFF7
 22610                           tblptrl	equ	0xFF6
 22611                           tablat	equ	0xFF5
 22612                           prodh	equ	0xFF4
 22613                           prodl	equ	0xFF3
 22614                           intcon	equ	0xFF2
 22615                           intcon2	equ	0xFF1
 22616                           intcon3	equ	0xFF0
 22617                           indf0	equ	0xFEF
 22618                           postinc0	equ	0xFEE
 22619                           fsr0h	equ	0xFEA
 22620                           fsr0l	equ	0xFE9
 22621                           wreg	equ	0xFE8
 22622                           postinc1	equ	0xFE6
 22623                           postdec1	equ	0xFE5
 22624                           plusw1	equ	0xFE3
 22625                           fsr1h	equ	0xFE2
 22626                           fsr1l	equ	0xFE1
 22627                           indf2	equ	0xFDF
 22628                           postinc2	equ	0xFDE
 22629                           postdec2	equ	0xFDD
 22630                           plusw2	equ	0xFDB
 22631                           fsr2h	equ	0xFDA
 22632                           fsr2l	equ	0xFD9
 22633                           status	equ	0xFD8
 22634                           
 22635 ;; *************** function _RADIO_ReleaseData *****************
 22636 ;; Defined at:
 22637 ;;		line 1134 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22638 ;; Parameters:    Size  Location     Type
 22639 ;;		None
 22640 ;; Auto vars:     Size  Location     Type
 22641 ;;		None
 22642 ;; Return value:  Size  Location     Type
 22643 ;;                  1    wreg      void 
 22644 ;; Registers used:
 22645 ;;		status,2, status,0
 22646 ;; Tracked objects:
 22647 ;;		On entry : C/2
 22648 ;;		On exit  : F/1
 22649 ;;		Unchanged: 0/0
 22650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22655 ;;Total ram usage:        0 bytes
 22656 ;; Hardware stack levels used:    1
 22657 ;; Hardware stack levels required when called:    7
 22658 ;; This function calls:
 22659 ;;		Nothing
 22660 ;; This function is called by:
 22661 ;;		_LORAWAN_ReceiveWindow1Callback
 22662 ;;		_LORAWAN_ReceiveWindow2Callback
 22663 ;;		_LORAWAN_EnterContinuousReceive
 22664 ;;		_LORAWAN_RxDone
 22665 ;; This function uses a non-reentrant model
 22666 ;;
 22667                           
 22668                           	psect	text114
 22669  0077D8                     __ptext114:
 22670                           	opt stack 0
 22671  0077D8                     _RADIO_ReleaseData:
 22672                           	opt stack 18
 22673                           
 22674                           ;radio_driver_SX1276.c: 1136: RadioConfiguration.flags &= ~(1 << (2));
 22675                           
 22676                           ; BSR set to: 2
 22677                           ;incstack = 0
 22678  0077D8  0101               	movlb	1	; () banked
 22679  0077DA  9598               	bcf	(_RadioConfiguration+35)& (0+255),2,b
 22680                           
 22681                           ; BSR set to: 1
 22682  0077DC  0012               	return		;funcret
 22683  0077DE                     __end_of_RADIO_ReleaseData:
 22684                           	opt stack 0
 22685                           tosu	equ	0xFFF
 22686                           tosh	equ	0xFFE
 22687                           tosl	equ	0xFFD
 22688                           pclath	equ	0xFFA
 22689                           tblptru	equ	0xFF8
 22690                           tblptrh	equ	0xFF7
 22691                           tblptrl	equ	0xFF6
 22692                           tablat	equ	0xFF5
 22693                           prodh	equ	0xFF4
 22694                           prodl	equ	0xFF3
 22695                           intcon	equ	0xFF2
 22696                           intcon2	equ	0xFF1
 22697                           intcon3	equ	0xFF0
 22698                           indf0	equ	0xFEF
 22699                           postinc0	equ	0xFEE
 22700                           fsr0h	equ	0xFEA
 22701                           fsr0l	equ	0xFE9
 22702                           wreg	equ	0xFE8
 22703                           postinc1	equ	0xFE6
 22704                           postdec1	equ	0xFE5
 22705                           plusw1	equ	0xFE3
 22706                           fsr1h	equ	0xFE2
 22707                           fsr1l	equ	0xFE1
 22708                           indf2	equ	0xFDF
 22709                           postinc2	equ	0xFDE
 22710                           postdec2	equ	0xFDD
 22711                           plusw2	equ	0xFDB
 22712                           fsr2h	equ	0xFDA
 22713                           fsr2l	equ	0xFD9
 22714                           status	equ	0xFD8
 22715                           
 22716 ;; *************** function _RADIO_ReceiveStop *****************
 22717 ;; Defined at:
 22718 ;;		line 951 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22719 ;; Parameters:    Size  Location     Type
 22720 ;;		None
 22721 ;; Auto vars:     Size  Location     Type
 22722 ;;		None
 22723 ;; Return value:  Size  Location     Type
 22724 ;;                  1    wreg      void 
 22725 ;; Registers used:
 22726 ;;		wreg, status,2, status,0, cstack
 22727 ;; Tracked objects:
 22728 ;;		On entry : F/2
 22729 ;;		On exit  : F/1
 22730 ;;		Unchanged: 0/0
 22731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22736 ;;Total ram usage:        0 bytes
 22737 ;; Hardware stack levels used:    1
 22738 ;; Hardware stack levels required when called:   11
 22739 ;; This function calls:
 22740 ;;		_RADIO_WriteMode
 22741 ;; This function is called by:
 22742 ;;		_LORAWAN_Send
 22743 ;;		_LORAWAN_ReceiveWindow1Callback
 22744 ;;		_LORAWAN_ReceiveWindow2Callback
 22745 ;;		_LORAWAN_EnterContinuousReceive
 22746 ;; This function uses a non-reentrant model
 22747 ;;
 22748                           
 22749                           	psect	text115
 22750  007410                     __ptext115:
 22751                           	opt stack 0
 22752  007410                     _RADIO_ReceiveStop:
 22753                           	opt stack 17
 22754                           
 22755                           ; BSR set to: 2
 22756                           ;radio_driver_SX1276.c: 953: if ((1 << (1)) == RadioConfiguration.flags)
 22757                           
 22758                           ; BSR set to: 1
 22759                           ;incstack = 0
 22760  007410  0E02               	movlw	2
 22761  007412  0101               	movlb	1	; () banked
 22762  007414  1998               	xorwf	(_RadioConfiguration+35)& (0+255),w,b
 22763  007416  A4D8               	btfss	status,2,c
 22764  007418  0012               	return	
 22765                           
 22766                           ; BSR set to: 1
 22767                           ;radio_driver_SX1276.c: 954: {
 22768                           ;radio_driver_SX1276.c: 955: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation, 
      +                          0);
 22769  00741A  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 22770  00741E  0E00               	movlw	0
 22771  007420  0100               	movlb	0	; () banked
 22772  007422  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 22773  007424  EC8F  F028         	call	_RADIO_WriteMode
 22774                           
 22775                           ;radio_driver_SX1276.c: 956: RadioConfiguration.flags &= ~(1 << (1));
 22776  007428  0101               	movlb	1	; () banked
 22777  00742A  9398               	bcf	(_RadioConfiguration+35)& (0+255),1,b
 22778                           
 22779                           ; BSR set to: 1
 22780  00742C  0012               	return		;funcret
 22781  00742E                     __end_of_RADIO_ReceiveStop:
 22782                           	opt stack 0
 22783                           tosu	equ	0xFFF
 22784                           tosh	equ	0xFFE
 22785                           tosl	equ	0xFFD
 22786                           pclath	equ	0xFFA
 22787                           tblptru	equ	0xFF8
 22788                           tblptrh	equ	0xFF7
 22789                           tblptrl	equ	0xFF6
 22790                           tablat	equ	0xFF5
 22791                           prodh	equ	0xFF4
 22792                           prodl	equ	0xFF3
 22793                           intcon	equ	0xFF2
 22794                           intcon2	equ	0xFF1
 22795                           intcon3	equ	0xFF0
 22796                           indf0	equ	0xFEF
 22797                           postinc0	equ	0xFEE
 22798                           fsr0h	equ	0xFEA
 22799                           fsr0l	equ	0xFE9
 22800                           wreg	equ	0xFE8
 22801                           postinc1	equ	0xFE6
 22802                           postdec1	equ	0xFE5
 22803                           plusw1	equ	0xFE3
 22804                           fsr1h	equ	0xFE2
 22805                           fsr1l	equ	0xFE1
 22806                           indf2	equ	0xFDF
 22807                           postinc2	equ	0xFDE
 22808                           postdec2	equ	0xFDD
 22809                           plusw2	equ	0xFDB
 22810                           fsr2h	equ	0xFDA
 22811                           fsr2l	equ	0xFD9
 22812                           status	equ	0xFD8
 22813                           
 22814 ;; *************** function _RADIO_ReceiveStart *****************
 22815 ;; Defined at:
 22816 ;;		line 875 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22817 ;; Parameters:    Size  Location     Type
 22818 ;;  rxWindowSize    2   52[BANK0 ] unsigned int 
 22819 ;; Auto vars:     Size  Location     Type
 22820 ;;		None
 22821 ;; Return value:  Size  Location     Type
 22822 ;;                  2   52[BANK0 ] enum E18752
 22823 ;; Registers used:
 22824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22825 ;; Tracked objects:
 22826 ;;		On entry : F/0
 22827 ;;		On exit  : F/0
 22828 ;;		Unchanged: 0/0
 22829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22830 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22831 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22832 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22833 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22834 ;;Total ram usage:       10 bytes
 22835 ;; Hardware stack levels used:    1
 22836 ;; Hardware stack levels required when called:   12
 22837 ;; This function calls:
 22838 ;;		_RADIO_RegisterWrite
 22839 ;;		_RADIO_WriteConfiguration
 22840 ;;		_RADIO_WriteMode
 22841 ;;		_SwTimerSetTimeout
 22842 ;;		_SwTimerStart
 22843 ;;		___lldiv
 22844 ;; This function is called by:
 22845 ;;		_LORAWAN_ReceiveWindow1Callback
 22846 ;;		_LORAWAN_ReceiveWindow2Callback
 22847 ;;		_LORAWAN_EnterContinuousReceive
 22848 ;; This function uses a non-reentrant model
 22849 ;;
 22850                           
 22851                           	psect	text116
 22852  002C02                     __ptext116:
 22853                           	opt stack 0
 22854  002C02                     _RADIO_ReceiveStart:
 22855                           	opt stack 13
 22856                           
 22857                           ; BSR set to: 0
 22858                           ;radio_driver_SX1276.c: 877: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 22859                           
 22860                           ; BSR set to: 1
 22861                           ;incstack = 0
 22862  002C02  0101               	movlb	1	; () banked
 22863  002C04  A598               	btfss	(_RadioConfiguration+35)& (0+255),2,b
 22864  002C06  D006               	goto	l12488
 22865                           
 22866                           ; BSR set to: 1
 22867                           ;radio_driver_SX1276.c: 878: {
 22868                           ;radio_driver_SX1276.c: 879: return ERR_BUFFER_LOCKED;
 22869  002C08  0E80               	movlw	128
 22870  002C0A  0100               	movlb	0	; () banked
 22871  002C0C  6F95               	movwf	(?_RADIO_ReceiveStart+1)& (0+255),b
 22872  002C0E  0E03               	movlw	3
 22873  002C10  6F94               	movwf	?_RADIO_ReceiveStart& (0+255),b
 22874  002C12  0C03               	retlw	3
 22875  002C14                     l12488:
 22876                           
 22877                           ; BSR set to: 1
 22878                           ;radio_driver_SX1276.c: 880: }
 22879                           ;radio_driver_SX1276.c: 882: if ((RadioConfiguration.flags & ((1 << (0)) | (1 << (1)))) 
      +                          != 0)
 22880  002C14  C198  F096         	movff	_RadioConfiguration+35,??_RADIO_ReceiveStart
 22881  002C18  0E03               	movlw	3
 22882  002C1A  0100               	movlb	0	; () banked
 22883  002C1C  1796               	andwf	??_RADIO_ReceiveStart& (0+255),f,b
 22884  002C1E  E005               	bz	l12494
 22885                           
 22886                           ; BSR set to: 0
 22887                           ;radio_driver_SX1276.c: 883: {
 22888                           ;radio_driver_SX1276.c: 884: return ERR_RADIO_BUSY;
 22889  002C20  0E80               	movlw	128
 22890  002C22  6F95               	movwf	(?_RADIO_ReceiveStart+1)& (0+255),b
 22891  002C24  0E04               	movlw	4
 22892  002C26  6F94               	movwf	?_RADIO_ReceiveStart& (0+255),b
 22893  002C28  0C04               	retlw	4
 22894  002C2A                     l12494:
 22895                           
 22896                           ; BSR set to: 0
 22897                           ;radio_driver_SX1276.c: 885: }
 22898                           ;radio_driver_SX1276.c: 887: if (0 == rxWindowSize)
 22899  002C2A  5194               	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 22900  002C2C  1195               	iorwf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 22901  002C2E  E107               	bnz	l12498
 22902                           
 22903                           ; BSR set to: 0
 22904                           ;radio_driver_SX1276.c: 888: {
 22905                           ;radio_driver_SX1276.c: 889: RADIO_WriteConfiguration(4);
 22906  002C30  0E00               	movlw	0
 22907  002C32  6F7E               	movwf	(RADIO_WriteConfiguration@symbolTimeout+1)& (0+255),b
 22908  002C34  0E04               	movlw	4
 22909  002C36  6F7D               	movwf	RADIO_WriteConfiguration@symbolTimeout& (0+255),b
 22910  002C38  ECD9  F009         	call	_RADIO_WriteConfiguration	;wreg free
 22911                           
 22912                           ;radio_driver_SX1276.c: 890: }
 22913  002C3C  D006               	goto	l12500
 22914  002C3E                     l12498:
 22915                           
 22916                           ; BSR set to: 0
 22917                           ;radio_driver_SX1276.c: 891: else
 22918                           ;radio_driver_SX1276.c: 892: {
 22919                           ;radio_driver_SX1276.c: 893: RADIO_WriteConfiguration(rxWindowSize);
 22920  002C3E  C094  F07D         	movff	RADIO_ReceiveStart@rxWindowSize,RADIO_WriteConfiguration@symbolTimeout
 22921  002C42  C095  F07E         	movff	RADIO_ReceiveStart@rxWindowSize+1,RADIO_WriteConfiguration@symbolTimeout+1
 22922  002C46  ECD9  F009         	call	_RADIO_WriteConfiguration	;wreg free
 22923  002C4A                     l12500:
 22924                           
 22925                           ;radio_driver_SX1276.c: 894: }
 22926                           ;radio_driver_SX1276.c: 896: if (MODULATION_LORA == RadioConfiguration.modulation)
 22927  002C4A  0101               	movlb	1	; () banked
 22928  002C4C  058D               	decf	(_RadioConfiguration+24)& (0+255),w,b
 22929  002C4E  E111               	bnz	l12504
 22930                           
 22931                           ; BSR set to: 1
 22932                           ;radio_driver_SX1276.c: 897: {
 22933                           ;radio_driver_SX1276.c: 900: RADIO_RegisterWrite(0x22, 0x01);
 22934  002C50  0E01               	movlw	1
 22935  002C52  0100               	movlb	0	; () banked
 22936  002C54  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 22937  002C56  0E22               	movlw	34
 22938  002C58  EC17  F03A         	call	_RADIO_RegisterWrite
 22939                           
 22940                           ;radio_driver_SX1276.c: 906: RADIO_RegisterWrite(0x40, 0x00);
 22941  002C5C  0100               	movlb	0	; () banked
 22942  002C5E  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 22943  002C60  0E40               	movlw	64
 22944  002C62  EC17  F03A         	call	_RADIO_RegisterWrite
 22945                           
 22946                           ;radio_driver_SX1276.c: 907: RADIO_RegisterWrite(0x41, 0x00);
 22947  002C66  0100               	movlb	0	; () banked
 22948  002C68  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 22949  002C6A  0E41               	movlw	65
 22950  002C6C  EC17  F03A         	call	_RADIO_RegisterWrite
 22951                           
 22952                           ;radio_driver_SX1276.c: 908: }
 22953  002C70  D014               	goto	l12506
 22954  002C72                     l12504:
 22955                           
 22956                           ; BSR set to: 1
 22957                           ;radio_driver_SX1276.c: 909: else
 22958                           ;radio_driver_SX1276.c: 910: {
 22959                           ;radio_driver_SX1276.c: 911: RADIO_RegisterWrite(0x12, RadioConfiguration.rxBw);
 22960  002C72  C1A9  F066         	movff	_RadioConfiguration+52,RADIO_RegisterWrite@value
 22961  002C76  0E12               	movlw	18
 22962  002C78  EC17  F03A         	call	_RADIO_RegisterWrite
 22963                           
 22964                           ;radio_driver_SX1276.c: 912: RADIO_RegisterWrite(0x13, RadioConfiguration.afcBw);
 22965  002C7C  C1AA  F066         	movff	_RadioConfiguration+53,RADIO_RegisterWrite@value
 22966  002C80  0E13               	movlw	19
 22967  002C82  EC17  F03A         	call	_RADIO_RegisterWrite
 22968                           
 22969                           ;radio_driver_SX1276.c: 915: RADIO_RegisterWrite(0x40, 0x00);
 22970  002C86  0100               	movlb	0	; () banked
 22971  002C88  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 22972  002C8A  0E40               	movlw	64
 22973  002C8C  EC17  F03A         	call	_RADIO_RegisterWrite
 22974                           
 22975                           ;radio_driver_SX1276.c: 916: RADIO_RegisterWrite(0x41, 0x00);
 22976  002C90  0100               	movlb	0	; () banked
 22977  002C92  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 22978  002C94  0E41               	movlw	65
 22979  002C96  EC17  F03A         	call	_RADIO_RegisterWrite
 22980  002C9A                     l12506:
 22981                           
 22982                           ;radio_driver_SX1276.c: 917: }
 22983                           ;radio_driver_SX1276.c: 919: RadioConfiguration.flags |= (1 << (1));
 22984  002C9A  0101               	movlb	1	; () banked
 22985  002C9C  8398               	bsf	(_RadioConfiguration+35)& (0+255),1,b
 22986                           
 22987                           ; BSR set to: 1
 22988                           ;radio_driver_SX1276.c: 920: RadioConfiguration.flags &= ~((1 << (4)) | (1 << (3)));
 22989  002C9E  0EE7               	movlw	231
 22990  002CA0  1798               	andwf	(_RadioConfiguration+35)& (0+255),f,b
 22991                           
 22992                           ; BSR set to: 1
 22993                           ;radio_driver_SX1276.c: 924: if (0 == rxWindowSize)
 22994  002CA2  0100               	movlb	0	; () banked
 22995  002CA4  5194               	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 22996  002CA6  1195               	iorwf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 22997  002CA8  E108               	bnz	l12514
 22998                           
 22999                           ; BSR set to: 0
 23000                           ;radio_driver_SX1276.c: 925: {
 23001                           ;radio_driver_SX1276.c: 926: RADIO_WriteMode(MODE_RXCONT, RadioConfiguration.modulation,
      +                           0);
 23002  002CAA  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 23003  002CAE  0E00               	movlw	0
 23004  002CB0  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 23005  002CB2  0E05               	movlw	5
 23006  002CB4  EC8F  F028         	call	_RADIO_WriteMode
 23007                           
 23008                           ;radio_driver_SX1276.c: 927: }
 23009  002CB8  D041               	goto	l12524
 23010  002CBA                     l12514:
 23011                           
 23012                           ; BSR set to: 0
 23013                           ;radio_driver_SX1276.c: 928: else
 23014                           ;radio_driver_SX1276.c: 929: {
 23015                           ;radio_driver_SX1276.c: 930: if (MODULATION_LORA == RadioConfiguration.modulation)
 23016  002CBA  0101               	movlb	1	; () banked
 23017  002CBC  058D               	decf	(_RadioConfiguration+24)& (0+255),w,b
 23018  002CBE  E109               	bnz	l12518
 23019                           
 23020                           ; BSR set to: 1
 23021                           ;radio_driver_SX1276.c: 931: {
 23022                           ;radio_driver_SX1276.c: 932: RADIO_WriteMode(MODE_RXSINGLE, MODULATION_LORA, 0);
 23023  002CC0  0E01               	movlw	1
 23024  002CC2  0100               	movlb	0	; () banked
 23025  002CC4  6F69               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 23026  002CC6  0E00               	movlw	0
 23027  002CC8  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 23028  002CCA  0E06               	movlw	6
 23029  002CCC  EC8F  F028         	call	_RADIO_WriteMode
 23030                           
 23031                           ;radio_driver_SX1276.c: 933: }
 23032  002CD0  D035               	goto	l12524
 23033  002CD2                     l12518:
 23034                           
 23035                           ; BSR set to: 1
 23036                           ;radio_driver_SX1276.c: 934: else
 23037                           ;radio_driver_SX1276.c: 935: {
 23038                           ;radio_driver_SX1276.c: 936: RADIO_WriteMode(MODE_RXCONT, MODULATION_FSK, 0);
 23039  002CD2  0E00               	movlw	0
 23040  002CD4  0100               	movlb	0	; () banked
 23041  002CD6  6F69               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 23042  002CD8  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 23043  002CDA  0E05               	movlw	5
 23044  002CDC  EC8F  F028         	call	_RADIO_WriteMode
 23045                           
 23046                           ;radio_driver_SX1276.c: 937: SwTimerSetTimeout(RadioConfiguration.fskRxWindowTimerId, ( 
      +                          (((uint32_t)(rxWindowSize)) << (12)) / 125UL ));
 23047  002CE0  0100               	movlb	0	; () banked
 23048  002CE2  5194               	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 23049  002CE4  6F96               	movwf	??_RADIO_ReceiveStart& (0+255),b
 23050  002CE6  5195               	movf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 23051  002CE8  6F97               	movwf	(??_RADIO_ReceiveStart+1)& (0+255),b
 23052  002CEA  6B98               	clrf	(??_RADIO_ReceiveStart+2)& (0+255),b
 23053  002CEC  6B99               	clrf	(??_RADIO_ReceiveStart+3)& (0+255),b
 23054  002CEE  0E0C               	movlw	12
 23055  002CF0                     u13745:
 23056  002CF0  90D8               	bcf	status,0,c
 23057  002CF2  3796               	rlcf	??_RADIO_ReceiveStart& (0+255),f,b
 23058  002CF4  3797               	rlcf	(??_RADIO_ReceiveStart+1)& (0+255),f,b
 23059  002CF6  3798               	rlcf	(??_RADIO_ReceiveStart+2)& (0+255),f,b
 23060  002CF8  3799               	rlcf	(??_RADIO_ReceiveStart+3)& (0+255),f,b
 23061  002CFA  2EE8               	decfsz	wreg,f,c
 23062  002CFC  D7F9               	goto	u13745
 23063  002CFE  C096  F064         	movff	??_RADIO_ReceiveStart,___lldiv@dividend
 23064  002D02  C097  F065         	movff	??_RADIO_ReceiveStart+1,___lldiv@dividend+1
 23065  002D06  C098  F066         	movff	??_RADIO_ReceiveStart+2,___lldiv@dividend+2
 23066  002D0A  C099  F067         	movff	??_RADIO_ReceiveStart+3,___lldiv@dividend+3
 23067  002D0E  0E7D               	movlw	125
 23068  002D10  6F68               	movwf	___lldiv@divisor& (0+255),b
 23069  002D12  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 23070  002D14  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 23071  002D16  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 23072  002D18  EC35  F030         	call	___lldiv	;wreg free
 23073  002D1C  C064  F071         	movff	?___lldiv,SwTimerSetTimeout@timeout
 23074  002D20  C065  F072         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 23075  002D24  C066  F073         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 23076  002D28  C067  F074         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 23077  002D2C  0101               	movlb	1	; () banked
 23078  002D2E  519D               	movf	(_RadioConfiguration+40)& (0+255),w,b
 23079  002D30  EC44  F036         	call	_SwTimerSetTimeout
 23080                           
 23081                           ; BSR set to: 0
 23082                           ;radio_driver_SX1276.c: 938: SwTimerStart(RadioConfiguration.fskRxWindowTimerId);
 23083  002D34  0101               	movlb	1	; () banked
 23084  002D36  519D               	movf	(_RadioConfiguration+40)& (0+255),w,b
 23085  002D38  EC35  F02E         	call	_SwTimerStart
 23086  002D3C                     l12524:
 23087                           
 23088                           ;radio_driver_SX1276.c: 939: }
 23089                           ;radio_driver_SX1276.c: 940: }
 23090                           ;radio_driver_SX1276.c: 942: if (0 != RadioConfiguration.watchdogTimerTimeout)
 23091  002D3C  0101               	movlb	1	; () banked
 23092  002D3E  519F               	movf	(_RadioConfiguration+42)& (0+255),w,b
 23093  002D40  11A0               	iorwf	(_RadioConfiguration+43)& (0+255),w,b
 23094  002D42  11A1               	iorwf	(_RadioConfiguration+44)& (0+255),w,b
 23095  002D44  11A2               	iorwf	(_RadioConfiguration+45)& (0+255),w,b
 23096  002D46  E059               	bz	l12536
 23097                           
 23098                           ; BSR set to: 1
 23099                           ;radio_driver_SX1276.c: 943: {
 23100                           ;radio_driver_SX1276.c: 944: SwTimerSetTimeout(RadioConfiguration.watchdogTimerId, ((Rad
      +                          ioConfiguration.watchdogTimerTimeout) < 0x000FFFFFUL ? ( (((uint32_t)(RadioConfiguration
      +                          .watchdogTimerTimeout)) << (12)) / 125UL ) : ( (((uint32_t)(RadioConfiguration.watchdogT
      +                          imerTimeout)) /
 23101  002D48  51A2               	movf	(_RadioConfiguration+45)& (0+255),w,b
 23102  002D4A  E106               	bnz	u13760
 23103  002D4C  299F               	incf	(_RadioConfiguration+42)& (0+255),w,b
 23104  002D4E  0EFF               	movlw	255
 23105  002D50  59A0               	subwfb	(_RadioConfiguration+43)& (0+255),w,b
 23106  002D52  0E0F               	movlw	15
 23107  002D54  59A1               	subwfb	(_RadioConfiguration+44)& (0+255),w,b
 23108  002D56  E319               	bnc	l12530
 23109  002D58                     u13760:
 23110                           
 23111                           ; BSR set to: 1
 23112  002D58  C19F  F064         	movff	_RadioConfiguration+42,___lldiv@dividend
 23113  002D5C  C1A0  F065         	movff	_RadioConfiguration+43,___lldiv@dividend+1
 23114  002D60  C1A1  F066         	movff	_RadioConfiguration+44,___lldiv@dividend+2
 23115  002D64  C1A2  F067         	movff	_RadioConfiguration+45,___lldiv@dividend+3
 23116  002D68  0E7D               	movlw	125
 23117  002D6A  0100               	movlb	0	; () banked
 23118  002D6C  6F68               	movwf	___lldiv@divisor& (0+255),b
 23119  002D6E  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 23120  002D70  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 23121  002D72  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 23122  002D74  EC35  F030         	call	___lldiv	;wreg free
 23123  002D78  0E0C               	movlw	12
 23124  002D7A                     u13775:
 23125  002D7A  90D8               	bcf	status,0,c
 23126  002D7C  3764               	rlcf	?___lldiv& (0+255),f,b
 23127  002D7E  3765               	rlcf	(?___lldiv+1)& (0+255),f,b
 23128  002D80  3766               	rlcf	(?___lldiv+2)& (0+255),f,b
 23129  002D82  3767               	rlcf	(?___lldiv+3)& (0+255),f,b
 23130  002D84  2EE8               	decfsz	wreg,f,c
 23131  002D86  D7F9               	goto	u13775
 23132  002D88  D020               	goto	L14
 23133  002D8A                     l12530:
 23134                           
 23135                           ; BSR set to: 1
 23136  002D8A  C19F  F096         	movff	_RadioConfiguration+42,??_RADIO_ReceiveStart
 23137  002D8E  C1A0  F097         	movff	_RadioConfiguration+43,??_RADIO_ReceiveStart+1
 23138  002D92  C1A1  F098         	movff	_RadioConfiguration+44,??_RADIO_ReceiveStart+2
 23139  002D96  C1A2  F099         	movff	_RadioConfiguration+45,??_RADIO_ReceiveStart+3
 23140  002D9A  0E0C               	movlw	12
 23141  002D9C                     u13785:
 23142  002D9C  90D8               	bcf	status,0,c
 23143  002D9E  0100               	movlb	0	; () banked
 23144  002DA0  3796               	rlcf	??_RADIO_ReceiveStart& (0+255),f,b
 23145  002DA2  3797               	rlcf	(??_RADIO_ReceiveStart+1)& (0+255),f,b
 23146  002DA4  3798               	rlcf	(??_RADIO_ReceiveStart+2)& (0+255),f,b
 23147  002DA6  3799               	rlcf	(??_RADIO_ReceiveStart+3)& (0+255),f,b
 23148  002DA8  2EE8               	decfsz	wreg,f,c
 23149  002DAA  D7F8               	goto	u13785
 23150  002DAC  C096  F064         	movff	??_RADIO_ReceiveStart,___lldiv@dividend
 23151  002DB0  C097  F065         	movff	??_RADIO_ReceiveStart+1,___lldiv@dividend+1
 23152  002DB4  C098  F066         	movff	??_RADIO_ReceiveStart+2,___lldiv@dividend+2
 23153  002DB8  C099  F067         	movff	??_RADIO_ReceiveStart+3,___lldiv@dividend+3
 23154  002DBC  0E7D               	movlw	125
 23155  002DBE  6F68               	movwf	___lldiv@divisor& (0+255),b
 23156  002DC0  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 23157  002DC2  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 23158  002DC4  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 23159  002DC6  EC35  F030         	call	___lldiv	;wreg free
 23160  002DCA                     L14:
 23161  002DCA  C064  F09A         	movff	?___lldiv,_RADIO_ReceiveStart$749
 23162  002DCE  C065  F09B         	movff	?___lldiv+1,_RADIO_ReceiveStart$749+1
 23163  002DD2  C066  F09C         	movff	?___lldiv+2,_RADIO_ReceiveStart$749+2
 23164  002DD6  C067  F09D         	movff	?___lldiv+3,_RADIO_ReceiveStart$749+3
 23165                           
 23166                           ; BSR set to: 0
 23167  002DDA  C09A  F071         	movff	_RADIO_ReceiveStart$749,SwTimerSetTimeout@timeout
 23168  002DDE  C09B  F072         	movff	_RADIO_ReceiveStart$749+1,SwTimerSetTimeout@timeout+1
 23169  002DE2  C09C  F073         	movff	_RADIO_ReceiveStart$749+2,SwTimerSetTimeout@timeout+2
 23170  002DE6  C09D  F074         	movff	_RADIO_ReceiveStart$749+3,SwTimerSetTimeout@timeout+3
 23171  002DEA  0101               	movlb	1	; () banked
 23172  002DEC  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 23173  002DEE  EC44  F036         	call	_SwTimerSetTimeout
 23174                           
 23175                           ; BSR set to: 0
 23176                           ;radio_driver_SX1276.c: 945: SwTimerStart(RadioConfiguration.watchdogTimerId);
 23177  002DF2  0101               	movlb	1	; () banked
 23178  002DF4  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 23179  002DF6  EC35  F02E         	call	_SwTimerStart
 23180  002DFA                     l12536:
 23181                           
 23182                           ;radio_driver_SX1276.c: 946: }
 23183                           ;radio_driver_SX1276.c: 947: return ERR_NONE;
 23184  002DFA  0100               	movlb	0	; () banked
 23185  002DFC  6B94               	clrf	?_RADIO_ReceiveStart& (0+255),b
 23186  002DFE  6B95               	clrf	(?_RADIO_ReceiveStart+1)& (0+255),b
 23187                           
 23188                           ; BSR set to: 0
 23189  002E00  0012               	return		;funcret
 23190  002E02                     __end_of_RADIO_ReceiveStart:
 23191                           	opt stack 0
 23192                           tosu	equ	0xFFF
 23193                           tosh	equ	0xFFE
 23194                           tosl	equ	0xFFD
 23195                           pclath	equ	0xFFA
 23196                           tblptru	equ	0xFF8
 23197                           tblptrh	equ	0xFF7
 23198                           tblptrl	equ	0xFF6
 23199                           tablat	equ	0xFF5
 23200                           prodh	equ	0xFF4
 23201                           prodl	equ	0xFF3
 23202                           intcon	equ	0xFF2
 23203                           intcon2	equ	0xFF1
 23204                           intcon3	equ	0xFF0
 23205                           indf0	equ	0xFEF
 23206                           postinc0	equ	0xFEE
 23207                           fsr0h	equ	0xFEA
 23208                           fsr0l	equ	0xFE9
 23209                           wreg	equ	0xFE8
 23210                           postinc1	equ	0xFE6
 23211                           postdec1	equ	0xFE5
 23212                           plusw1	equ	0xFE3
 23213                           fsr1h	equ	0xFE2
 23214                           fsr1l	equ	0xFE1
 23215                           indf2	equ	0xFDF
 23216                           postinc2	equ	0xFDE
 23217                           postdec2	equ	0xFDD
 23218                           plusw2	equ	0xFDB
 23219                           fsr2h	equ	0xFDA
 23220                           fsr2l	equ	0xFD9
 23221                           status	equ	0xFD8
 23222                           
 23223 ;; *************** function _ConfigureRadioRx *****************
 23224 ;; Defined at:
 23225 ;;		line 2019 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23226 ;; Parameters:    Size  Location     Type
 23227 ;;  dataRate        1    wreg     unsigned char 
 23228 ;;  freq            4   22[BANK0 ] unsigned long 
 23229 ;; Auto vars:     Size  Location     Type
 23230 ;;  dataRate        1   26[BANK0 ] unsigned char 
 23231 ;; Return value:  Size  Location     Type
 23232 ;;                  1    wreg      void 
 23233 ;; Registers used:
 23234 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23235 ;; Tracked objects:
 23236 ;;		On entry : F/2
 23237 ;;		On exit  : 0/0
 23238 ;;		Unchanged: 0/0
 23239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23240 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23241 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23243 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23244 ;;Total ram usage:        5 bytes
 23245 ;; Hardware stack levels used:    1
 23246 ;; Hardware stack levels required when called:   10
 23247 ;; This function calls:
 23248 ;;		_ConfigureRadio
 23249 ;;		_RADIO_SetCRC
 23250 ;;		_RADIO_SetIQInverted
 23251 ;; This function is called by:
 23252 ;;		_LORAWAN_ReceiveWindow1Callback
 23253 ;;		_LORAWAN_ReceiveWindow2Callback
 23254 ;;		_LORAWAN_EnterContinuousReceive
 23255 ;; This function uses a non-reentrant model
 23256 ;;
 23257                           
 23258                           	psect	text117
 23259  00723A                     __ptext117:
 23260                           	opt stack 0
 23261  00723A                     _ConfigureRadioRx:
 23262                           	opt stack 15
 23263                           
 23264                           ; BSR set to: 0
 23265                           ;incstack = 0
 23266                           ;ConfigureRadioRx@dataRate stored from wreg
 23267  00723A  0100               	movlb	0	; () banked
 23268  00723C  6F7A               	movwf	ConfigureRadioRx@dataRate& (0+255),b
 23269                           
 23270                           ;lorawan.c: 2021: ConfigureRadio(dataRate, freq);
 23271  00723E  C076  F071         	movff	ConfigureRadioRx@freq,ConfigureRadio@freq
 23272  007242  C077  F072         	movff	ConfigureRadioRx@freq+1,ConfigureRadio@freq+1
 23273  007246  C078  F073         	movff	ConfigureRadioRx@freq+2,ConfigureRadio@freq+2
 23274  00724A  C079  F074         	movff	ConfigureRadioRx@freq+3,ConfigureRadio@freq+3
 23275  00724E  517A               	movf	ConfigureRadioRx@dataRate& (0+255),w,b
 23276  007250  ECB9  F02F         	call	_ConfigureRadio
 23277                           
 23278                           ;lorawan.c: 2022: RADIO_SetCRC(0);
 23279  007254  0E00               	movlw	0
 23280  007256  ECAD  F03B         	call	_RADIO_SetCRC
 23281                           
 23282                           ;lorawan.c: 2023: RADIO_SetIQInverted(1);
 23283  00725A  0E01               	movlw	1
 23284  00725C  EFA8  F03B         	goto	_RADIO_SetIQInverted
 23285  007260                     __end_of_ConfigureRadioRx:
 23286                           	opt stack 0
 23287                           tosu	equ	0xFFF
 23288                           tosh	equ	0xFFE
 23289                           tosl	equ	0xFFD
 23290                           pclath	equ	0xFFA
 23291                           tblptru	equ	0xFF8
 23292                           tblptrh	equ	0xFF7
 23293                           tblptrl	equ	0xFF6
 23294                           tablat	equ	0xFF5
 23295                           prodh	equ	0xFF4
 23296                           prodl	equ	0xFF3
 23297                           intcon	equ	0xFF2
 23298                           intcon2	equ	0xFF1
 23299                           intcon3	equ	0xFF0
 23300                           indf0	equ	0xFEF
 23301                           postinc0	equ	0xFEE
 23302                           fsr0h	equ	0xFEA
 23303                           fsr0l	equ	0xFE9
 23304                           wreg	equ	0xFE8
 23305                           postinc1	equ	0xFE6
 23306                           postdec1	equ	0xFE5
 23307                           plusw1	equ	0xFE3
 23308                           fsr1h	equ	0xFE2
 23309                           fsr1l	equ	0xFE1
 23310                           indf2	equ	0xFDF
 23311                           postinc2	equ	0xFDE
 23312                           postdec2	equ	0xFDD
 23313                           plusw2	equ	0xFDB
 23314                           fsr2h	equ	0xFDA
 23315                           fsr2l	equ	0xFD9
 23316                           status	equ	0xFD8
 23317                           
 23318 ;; *************** function _INTERRUPT_GetDioStatus *****************
 23319 ;; Defined at:
 23320 ;;		line 48 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 23321 ;; Parameters:    Size  Location     Type
 23322 ;;		None
 23323 ;; Auto vars:     Size  Location     Type
 23324 ;;  a               1    4[BANK0 ] unsigned char 
 23325 ;; Return value:  Size  Location     Type
 23326 ;;                  1    wreg      unsigned char 
 23327 ;; Registers used:
 23328 ;;		wreg, status,2
 23329 ;; Tracked objects:
 23330 ;;		On entry : F/0
 23331 ;;		On exit  : F/0
 23332 ;;		Unchanged: 0/0
 23333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23335 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23337 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23338 ;;Total ram usage:        1 bytes
 23339 ;; Hardware stack levels used:    1
 23340 ;; Hardware stack levels required when called:    7
 23341 ;; This function calls:
 23342 ;;		Nothing
 23343 ;; This function is called by:
 23344 ;;		_LORAWAN_Mainloop
 23345 ;; This function uses a non-reentrant model
 23346 ;;
 23347                           
 23348                           	psect	text118
 23349  0076A4                     __ptext118:
 23350                           	opt stack 0
 23351  0076A4                     _INTERRUPT_GetDioStatus:
 23352                           	opt stack 22
 23353                           
 23354                           ; BSR set to: 0
 23355                           ;interrupt_manager_lora_addons.c: 50: uint8_t a;
 23356                           ;interrupt_manager_lora_addons.c: 51: (INTCONbits.GIE = 0);
 23357                           
 23358                           ;incstack = 0
 23359  0076A4  9EF2               	bcf	intcon,7,c	;volatile
 23360                           
 23361                           ;interrupt_manager_lora_addons.c: 52: a = dioStatus;
 23362  0076A6  C048  F064         	movff	_dioStatus,INTERRUPT_GetDioStatus@a	;volatile
 23363                           
 23364                           ;interrupt_manager_lora_addons.c: 53: dioStatus = 0;
 23365  0076AA  6A48               	clrf	_dioStatus,c	;volatile
 23366                           
 23367                           ;interrupt_manager_lora_addons.c: 54: (INTCONbits.GIE = 1);
 23368  0076AC  8EF2               	bsf	intcon,7,c	;volatile
 23369                           
 23370                           ; BSR set to: 0
 23371                           ;interrupt_manager_lora_addons.c: 55: return a;
 23372  0076AE  5164               	movf	INTERRUPT_GetDioStatus@a& (0+255),w,b
 23373                           
 23374                           ; BSR set to: 0
 23375  0076B0  0012               	return		;funcret
 23376  0076B2                     __end_of_INTERRUPT_GetDioStatus:
 23377                           	opt stack 0
 23378                           tosu	equ	0xFFF
 23379                           tosh	equ	0xFFE
 23380                           tosl	equ	0xFFD
 23381                           pclath	equ	0xFFA
 23382                           tblptru	equ	0xFF8
 23383                           tblptrh	equ	0xFF7
 23384                           tblptrl	equ	0xFF6
 23385                           tablat	equ	0xFF5
 23386                           prodh	equ	0xFF4
 23387                           prodl	equ	0xFF3
 23388                           intcon	equ	0xFF2
 23389                           intcon2	equ	0xFF1
 23390                           intcon3	equ	0xFF0
 23391                           indf0	equ	0xFEF
 23392                           postinc0	equ	0xFEE
 23393                           fsr0h	equ	0xFEA
 23394                           fsr0l	equ	0xFE9
 23395                           wreg	equ	0xFE8
 23396                           postinc1	equ	0xFE6
 23397                           postdec1	equ	0xFE5
 23398                           plusw1	equ	0xFE3
 23399                           fsr1h	equ	0xFE2
 23400                           fsr1l	equ	0xFE1
 23401                           indf2	equ	0xFDF
 23402                           postinc2	equ	0xFDE
 23403                           postdec2	equ	0xFDD
 23404                           plusw2	equ	0xFDB
 23405                           fsr2h	equ	0xFDA
 23406                           fsr2l	equ	0xFD9
 23407                           status	equ	0xFD8
 23408                           
 23409 ;; *************** function _LORAWAN_Join *****************
 23410 ;; Defined at:
 23411 ;;		line 115 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23412 ;; Parameters:    Size  Location     Type
 23413 ;;  activationTy    1    wreg     enum E18927
 23414 ;; Auto vars:     Size  Location     Type
 23415 ;;  activationTy    1  142[BANK0 ] enum E18927
 23416 ;;  result          1  141[BANK0 ] enum E18904
 23417 ;;  bufferIndex     1  140[BANK0 ] unsigned char 
 23418 ;; Return value:  Size  Location     Type
 23419 ;;                  1    wreg      enum E18904
 23420 ;; Registers used:
 23421 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23422 ;; Tracked objects:
 23423 ;;		On entry : F/2
 23424 ;;		On exit  : D/0
 23425 ;;		Unchanged: 0/0
 23426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23428 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23430 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23431 ;;Total ram usage:        3 bytes
 23432 ;; Hardware stack levels used:    1
 23433 ;; Hardware stack levels required when called:   14
 23434 ;; This function calls:
 23435 ;;		_PrepareJoinRequestFrame
 23436 ;;		_RADIO_Transmit
 23437 ;;		_SelectChannelForTransmission
 23438 ;;		_SwTimerSetTimeout
 23439 ;;		_SwTimerStart
 23440 ;;		_UpdateJoinInProgress
 23441 ;; This function is called by:
 23442 ;;		_main
 23443 ;; This function uses a non-reentrant model
 23444 ;;
 23445                           
 23446                           	psect	text119
 23447  005BDE                     __ptext119:
 23448                           	opt stack 0
 23449  005BDE                     _LORAWAN_Join:
 23450                           	opt stack 16
 23451                           
 23452                           ; BSR set to: 0
 23453                           ;incstack = 0
 23454                           ;LORAWAN_Join@activationTypeNew stored from wreg
 23455  005BDE  0100               	movlb	0	; () banked
 23456  005BE0  6FEE               	movwf	LORAWAN_Join@activationTypeNew& (0+255),b
 23457                           
 23458                           ;lorawan.c: 117: uint8_t bufferIndex;
 23459                           ;lorawan.c: 118: LorawanError_t result;
 23460                           ;lorawan.c: 120: if (loRa.macStatus.macPause == 1)
 23461  005BE2  0102               	movlb	2	; () banked
 23462  005BE4  A103               	btfss	(_loRa+3)& (0+255),0,b
 23463                           
 23464                           ; BSR set to: 2
 23465                           ;lorawan.c: 123: }
 23466                           ;lorawan.c: 125: if (loRa.macStatus.silentImmediately == 1)
 23467  005BE6  BF02               	btfsc	(_loRa+2)& (0+255),7,b
 23468  005BE8  0012               	return	
 23469                           
 23470                           ; BSR set to: 2
 23471                           ;lorawan.c: 128: }
 23472                           ;lorawan.c: 130: if (loRa.macStatus.macState != IDLE)
 23473  005BEA  5102               	movf	(_loRa+2)& (0+255),w,b
 23474  005BEC  0B0F               	andlw	15
 23475  005BEE  E001               	bz	l1666
 23476  005BF0  0012               	return	
 23477  005BF2                     l1666:
 23478                           
 23479                           ; BSR set to: 2
 23480                           ;lorawan.c: 133: }
 23481                           ;lorawan.c: 135: loRa.activationParameters.activationType = activationTypeNew;
 23482  005BF2  C0EE  F21D         	movff	LORAWAN_Join@activationTypeNew,_loRa+29
 23483                           
 23484                           ; BSR set to: 2
 23485                           ;lorawan.c: 137: if (OTAA == activationTypeNew)
 23486  005BF6  0100               	movlb	0	; () banked
 23487  005BF8  51EE               	movf	LORAWAN_Join@activationTypeNew& (0+255),w,b
 23488  005BFA  E11F               	bnz	l1667
 23489                           
 23490                           ; BSR set to: 0
 23491                           ;lorawan.c: 138: {
 23492                           ;lorawan.c: 140: if ( (loRa.macKeys.deviceEui == 0) || (loRa.macKeys.applicationEui == 0
      +                          ) || (loRa.macKeys.applicationKey == 0) )
 23493  005BFC  0102               	movlb	2	; () banked
 23494  005BFE  B1A5               	btfsc	(_loRa+165)& (0+255),0,b
 23495                           
 23496                           ; BSR set to: 2
 23497  005C00  A3A5               	btfss	(_loRa+165)& (0+255),1,b
 23498  005C02  0012               	return	
 23499                           
 23500                           ; BSR set to: 2
 23501  005C04  A7A5               	btfss	(_loRa+165)& (0+255),3,b
 23502  005C06  0012               	return	
 23503                           
 23504                           ; BSR set to: 2
 23505                           ;lorawan.c: 144: else
 23506                           ;lorawan.c: 145: {
 23507                           ;lorawan.c: 146: bufferIndex = PrepareJoinRequestFrame ();
 23508  005C08  EC42  F023         	call	_PrepareJoinRequestFrame	;wreg free
 23509  005C0C  6FEC               	movwf	LORAWAN_Join@bufferIndex& (0+255),b
 23510                           
 23511                           ;lorawan.c: 147: result = SelectChannelForTransmission (0);
 23512  005C0E  0E00               	movlw	0
 23513  005C10  ECE2  F032         	call	_SelectChannelForTransmission
 23514  005C14  6FED               	movwf	LORAWAN_Join@result& (0+255),b
 23515                           
 23516                           ; BSR set to: 0
 23517                           ;lorawan.c: 149: if (result == OK)
 23518  005C16  51ED               	movf	LORAWAN_Join@result& (0+255),w,b
 23519  005C18  A4D8               	btfss	status,2,c
 23520  005C1A  0012               	return	
 23521                           
 23522                           ; BSR set to: 0
 23523                           ;lorawan.c: 150: {
 23524                           ;lorawan.c: 151: if (RADIO_Transmit(macBuffer, bufferIndex) == OK)
 23525  005C1C  0EE0               	movlw	low _macBuffer
 23526  005C1E  6F94               	movwf	RADIO_Transmit@buffer& (0+255),b
 23527  005C20  0E04               	movlw	high _macBuffer
 23528  005C22  6F95               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
 23529  005C24  C0EC  F096         	movff	LORAWAN_Join@bufferIndex,RADIO_Transmit@bufferLen
 23530  005C28  ECF9  F017         	call	_RADIO_Transmit	;wreg free
 23531  005C2C  5194               	movf	?_RADIO_Transmit& (0+255),w,b
 23532  005C2E  1195               	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 23533  005C30  A4D8               	btfss	status,2,c
 23534  005C32  0012               	return	
 23535                           
 23536                           ; BSR set to: 0
 23537                           ;lorawan.c: 152: {
 23538                           ;lorawan.c: 153: UpdateJoinInProgress(TRANSMISSION_OCCURRING);
 23539  005C34  0E01               	movlw	1
 23540  005C36  EFB6  F03A         	goto	_UpdateJoinInProgress
 23541  005C3A                     l1667:
 23542                           
 23543                           ; BSR set to: 0
 23544                           ;lorawan.c: 167: else
 23545                           ;lorawan.c: 168: {
 23546                           ;lorawan.c: 170: if ( (loRa.macKeys.applicationSessionKey == 0) || (loRa.macKeys.network
      +                          SessionKey == 0) || (loRa.macKeys.deviceAddress == 0) )
 23547  005C3A  0102               	movlb	2	; () banked
 23548  005C3C  BBA5               	btfsc	(_loRa+165)& (0+255),5,b
 23549                           
 23550                           ; BSR set to: 2
 23551  005C3E  A9A5               	btfss	(_loRa+165)& (0+255),4,b
 23552  005C40  0012               	return	
 23553                           
 23554                           ; BSR set to: 2
 23555  005C42  A5A5               	btfss	(_loRa+165)& (0+255),2,b
 23556  005C44  0012               	return	
 23557                           
 23558                           ; BSR set to: 2
 23559                           ;lorawan.c: 174: else
 23560                           ;lorawan.c: 175: {
 23561                           ;lorawan.c: 176: UpdateJoinInProgress(ABP_DELAY);
 23562  005C46  0E07               	movlw	7
 23563  005C48  ECB6  F03A         	call	_UpdateJoinInProgress
 23564                           
 23565                           ; BSR set to: 2
 23566                           ;lorawan.c: 177: SwTimerSetTimeout(loRa.abpJoinTimerId, ( (((uint32_t)(20)) << (12)) / 1
      +                          25UL ));
 23567  005C4C  0E8F               	movlw	143
 23568  005C4E  0100               	movlb	0	; () banked
 23569  005C50  6F71               	movwf	SwTimerSetTimeout@timeout& (0+255),b
 23570  005C52  0E02               	movlw	2
 23571  005C54  6F72               	movwf	(SwTimerSetTimeout@timeout+1)& (0+255),b
 23572  005C56  6B73               	clrf	(SwTimerSetTimeout@timeout+2)& (0+255),b
 23573  005C58  6B74               	clrf	(SwTimerSetTimeout@timeout+3)& (0+255),b
 23574  005C5A  0102               	movlb	2	; () banked
 23575  005C5C  51F3               	movf	(_loRa+243)& (0+255),w,b
 23576  005C5E  EC44  F036         	call	_SwTimerSetTimeout
 23577                           
 23578                           ; BSR set to: 0
 23579                           ;lorawan.c: 178: SwTimerStart(loRa.abpJoinTimerId);
 23580  005C62  0102               	movlb	2	; () banked
 23581  005C64  51F3               	movf	(_loRa+243)& (0+255),w,b
 23582  005C66  EF35  F02E         	goto	_SwTimerStart
 23583  005C6A                     __end_of_LORAWAN_Join:
 23584                           	opt stack 0
 23585                           tosu	equ	0xFFF
 23586                           tosh	equ	0xFFE
 23587                           tosl	equ	0xFFD
 23588                           pclath	equ	0xFFA
 23589                           tblptru	equ	0xFF8
 23590                           tblptrh	equ	0xFF7
 23591                           tblptrl	equ	0xFF6
 23592                           tablat	equ	0xFF5
 23593                           prodh	equ	0xFF4
 23594                           prodl	equ	0xFF3
 23595                           intcon	equ	0xFF2
 23596                           intcon2	equ	0xFF1
 23597                           intcon3	equ	0xFF0
 23598                           indf0	equ	0xFEF
 23599                           postinc0	equ	0xFEE
 23600                           fsr0h	equ	0xFEA
 23601                           fsr0l	equ	0xFE9
 23602                           wreg	equ	0xFE8
 23603                           postinc1	equ	0xFE6
 23604                           postdec1	equ	0xFE5
 23605                           plusw1	equ	0xFE3
 23606                           fsr1h	equ	0xFE2
 23607                           fsr1l	equ	0xFE1
 23608                           indf2	equ	0xFDF
 23609                           postinc2	equ	0xFDE
 23610                           postdec2	equ	0xFDD
 23611                           plusw2	equ	0xFDB
 23612                           fsr2h	equ	0xFDA
 23613                           fsr2l	equ	0xFD9
 23614                           status	equ	0xFD8
 23615                           
 23616 ;; *************** function _UpdateJoinInProgress *****************
 23617 ;; Defined at:
 23618 ;;		line 2037 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23619 ;; Parameters:    Size  Location     Type
 23620 ;;  state           1    wreg     unsigned char 
 23621 ;; Auto vars:     Size  Location     Type
 23622 ;;  state           1    4[BANK0 ] unsigned char 
 23623 ;; Return value:  Size  Location     Type
 23624 ;;                  1    wreg      void 
 23625 ;; Registers used:
 23626 ;;		wreg, status,2, status,0
 23627 ;; Tracked objects:
 23628 ;;		On entry : D/0
 23629 ;;		On exit  : F/2
 23630 ;;		Unchanged: 0/0
 23631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23633 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23635 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23636 ;;Total ram usage:        1 bytes
 23637 ;; Hardware stack levels used:    1
 23638 ;; Hardware stack levels required when called:    7
 23639 ;; This function calls:
 23640 ;;		Nothing
 23641 ;; This function is called by:
 23642 ;;		_LORAWAN_Join
 23643 ;; This function uses a non-reentrant model
 23644 ;;
 23645                           
 23646                           	psect	text120
 23647  00756C                     __ptext120:
 23648                           	opt stack 0
 23649  00756C                     _UpdateJoinInProgress:
 23650                           	opt stack 22
 23651                           
 23652                           ;incstack = 0
 23653                           ;UpdateJoinInProgress@state stored from wreg
 23654  00756C  0100               	movlb	0	; () banked
 23655  00756E  6F64               	movwf	UpdateJoinInProgress@state& (0+255),b
 23656                           
 23657                           ;lorawan.c: 2040: loRa.macStatus.networkJoined = 0;
 23658  007570  0102               	movlb	2	; () banked
 23659  007572  9902               	bcf	(_loRa+2)& (0+255),4,b
 23660                           
 23661                           ;lorawan.c: 2041: loRa.lorawanMacStatus.joining = 1;
 23662  007574  8500               	bsf	_loRa& (0+255),2,b
 23663                           
 23664                           ; BSR set to: 2
 23665                           ;lorawan.c: 2042: loRa.macStatus.macState = state;
 23666  007576  5102               	movf	(_loRa+2)& (0+255),w,b
 23667  007578  0100               	movlb	0	; () banked
 23668  00757A  1964               	xorwf	UpdateJoinInProgress@state& (0+255),w,b
 23669  00757C  0BF0               	andlw	-16
 23670  00757E  1964               	xorwf	UpdateJoinInProgress@state& (0+255),w,b
 23671  007580  0102               	movlb	2	; () banked
 23672  007582  6F02               	movwf	(_loRa+2)& (0+255),b
 23673                           
 23674                           ; BSR set to: 2
 23675  007584  0012               	return		;funcret
 23676  007586                     __end_of_UpdateJoinInProgress:
 23677                           	opt stack 0
 23678                           tosu	equ	0xFFF
 23679                           tosh	equ	0xFFE
 23680                           tosl	equ	0xFFD
 23681                           pclath	equ	0xFFA
 23682                           tblptru	equ	0xFF8
 23683                           tblptrh	equ	0xFF7
 23684                           tblptrl	equ	0xFF6
 23685                           tablat	equ	0xFF5
 23686                           prodh	equ	0xFF4
 23687                           prodl	equ	0xFF3
 23688                           intcon	equ	0xFF2
 23689                           intcon2	equ	0xFF1
 23690                           intcon3	equ	0xFF0
 23691                           indf0	equ	0xFEF
 23692                           postinc0	equ	0xFEE
 23693                           fsr0h	equ	0xFEA
 23694                           fsr0l	equ	0xFE9
 23695                           wreg	equ	0xFE8
 23696                           postinc1	equ	0xFE6
 23697                           postdec1	equ	0xFE5
 23698                           plusw1	equ	0xFE3
 23699                           fsr1h	equ	0xFE2
 23700                           fsr1l	equ	0xFE1
 23701                           indf2	equ	0xFDF
 23702                           postinc2	equ	0xFDE
 23703                           postdec2	equ	0xFDD
 23704                           plusw2	equ	0xFDB
 23705                           fsr2h	equ	0xFDA
 23706                           fsr2l	equ	0xFD9
 23707                           status	equ	0xFD8
 23708                           
 23709 ;; *************** function _SelectChannelForTransmission *****************
 23710 ;; Defined at:
 23711 ;;		line 919 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 23712 ;; Parameters:    Size  Location     Type
 23713 ;;  transmission    1    wreg     unsigned char 
 23714 ;; Auto vars:     Size  Location     Type
 23715 ;;  transmission    1   37[BANK0 ] unsigned char 
 23716 ;;  channelIndex    1   39[BANK0 ] unsigned char 
 23717 ;;  result          1   38[BANK0 ] enum E18963
 23718 ;; Return value:  Size  Location     Type
 23719 ;;                  1    wreg      enum E18963
 23720 ;; Registers used:
 23721 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23722 ;; Tracked objects:
 23723 ;;		On entry : 0/0
 23724 ;;		On exit  : F/0
 23725 ;;		Unchanged: 0/0
 23726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23728 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23730 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23731 ;;Total ram usage:        3 bytes
 23732 ;; Hardware stack levels used:    1
 23733 ;; Hardware stack levels required when called:   11
 23734 ;; This function calls:
 23735 ;;		_ConfigureRadioTx
 23736 ;;		_SearchAvailableChannel
 23737 ;; This function is called by:
 23738 ;;		_LORAWAN_RxTimeout
 23739 ;;		_LORAWAN_Join
 23740 ;;		_LORAWAN_Send
 23741 ;;		_AckRetransmissionCallback
 23742 ;;		_UnconfirmedTransmissionCallback
 23743 ;; This function uses a non-reentrant model
 23744 ;;
 23745                           
 23746                           	psect	text121
 23747  0065C4                     __ptext121:
 23748                           	opt stack 0
 23749  0065C4                     _SelectChannelForTransmission:
 23750                           	opt stack 17
 23751                           
 23752                           ; BSR set to: 2
 23753                           ;incstack = 0
 23754                           ;SelectChannelForTransmission@transmissionType stored from wreg
 23755  0065C4  0100               	movlb	0	; () banked
 23756  0065C6  6F85               	movwf	SelectChannelForTransmission@transmissionType& (0+255),b
 23757                           
 23758                           ;lorawan_eu.c: 922: uint8_t channelIndex;
 23759                           ;lorawan_eu.c: 924: result = SearchAvailableChannel (16, transmissionType, &channelIndex
      +                          );
 23760  0065C8  C085  F079         	movff	SelectChannelForTransmission@transmissionType,SearchAvailableChannel@transmission
      +                          Type
 23761  0065CC  0E87               	movlw	low SelectChannelForTransmission@channelIndex
 23762  0065CE  6F7A               	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 23763  0065D0  6B7B               	clrf	(SearchAvailableChannel@channelIndex+1)& (0+255),b
 23764  0065D2  0E10               	movlw	16
 23765  0065D4  ECB1  F027         	call	_SearchAvailableChannel
 23766  0065D8  6F86               	movwf	SelectChannelForTransmission@result& (0+255),b
 23767                           
 23768                           ; BSR set to: 0
 23769                           ;lorawan_eu.c: 926: if (result == OK)
 23770  0065DA  5186               	movf	SelectChannelForTransmission@result& (0+255),w,b
 23771  0065DC  E120               	bnz	l13184
 23772                           
 23773                           ; BSR set to: 0
 23774                           ;lorawan_eu.c: 927: {
 23775                           ;lorawan_eu.c: 928: loRa.lastUsedChannelIndex = channelIndex;
 23776  0065DE  C087  F2DA         	movff	SelectChannelForTransmission@channelIndex,_loRa+218
 23777                           
 23778                           ; BSR set to: 0
 23779                           ;lorawan_eu.c: 929: loRa.receiveWindow1Parameters.frequency = Channels[channelIndex].fre
      +                          quency;
 23780  0065E2  5187               	movf	SelectChannelForTransmission@channelIndex& (0+255),w,b
 23781  0065E4  0D0E               	mullw	14
 23782  0065E6  0E00               	movlw	low _Channels
 23783  0065E8  24F3               	addwf	prodl,w,c
 23784  0065EA  6ED9               	movwf	fsr2l,c
 23785  0065EC  0E04               	movlw	high _Channels
 23786  0065EE  20F4               	addwfc	prodh,w,c
 23787  0065F0  6EDA               	movwf	fsr2h,c
 23788  0065F2  CFDE F213          	movff	postinc2,_loRa+19
 23789  0065F6  CFDE F214          	movff	postinc2,_loRa+20
 23790  0065FA  CFDE F215          	movff	postinc2,_loRa+21
 23791  0065FE  CFDE F216          	movff	postinc2,_loRa+22
 23792                           
 23793                           ; BSR set to: 0
 23794                           ;lorawan_eu.c: 930: loRa.receiveWindow1Parameters.dataRate = loRa.currentDataRate;
 23795  006602  C2DF  F217         	movff	_loRa+223,_loRa+23
 23796                           
 23797                           ; BSR set to: 0
 23798                           ;lorawan_eu.c: 932: ConfigureRadioTx(loRa.receiveWindow1Parameters.dataRate, loRa.receiv
      +                          eWindow1Parameters.frequency);
 23799  006606  C213  F076         	movff	_loRa+19,ConfigureRadioTx@freq
 23800  00660A  C214  F077         	movff	_loRa+20,ConfigureRadioTx@freq+1
 23801  00660E  C215  F078         	movff	_loRa+21,ConfigureRadioTx@freq+2
 23802  006612  C216  F079         	movff	_loRa+22,ConfigureRadioTx@freq+3
 23803  006616  0102               	movlb	2	; () banked
 23804  006618  5117               	movf	(_loRa+23)& (0+255),w,b
 23805  00661A  EC23  F036         	call	_ConfigureRadioTx
 23806  00661E                     l13184:
 23807                           
 23808                           ;lorawan_eu.c: 933: }
 23809                           ;lorawan_eu.c: 934: return result;
 23810  00661E  0100               	movlb	0	; () banked
 23811  006620  5186               	movf	SelectChannelForTransmission@result& (0+255),w,b
 23812                           
 23813                           ; BSR set to: 0
 23814  006622  0012               	return		;funcret
 23815  006624                     __end_of_SelectChannelForTransmission:
 23816                           	opt stack 0
 23817                           tosu	equ	0xFFF
 23818                           tosh	equ	0xFFE
 23819                           tosl	equ	0xFFD
 23820                           pclath	equ	0xFFA
 23821                           tblptru	equ	0xFF8
 23822                           tblptrh	equ	0xFF7
 23823                           tblptrl	equ	0xFF6
 23824                           tablat	equ	0xFF5
 23825                           prodh	equ	0xFF4
 23826                           prodl	equ	0xFF3
 23827                           intcon	equ	0xFF2
 23828                           intcon2	equ	0xFF1
 23829                           intcon3	equ	0xFF0
 23830                           indf0	equ	0xFEF
 23831                           postinc0	equ	0xFEE
 23832                           fsr0h	equ	0xFEA
 23833                           fsr0l	equ	0xFE9
 23834                           wreg	equ	0xFE8
 23835                           postinc1	equ	0xFE6
 23836                           postdec1	equ	0xFE5
 23837                           plusw1	equ	0xFE3
 23838                           fsr1h	equ	0xFE2
 23839                           fsr1l	equ	0xFE1
 23840                           indf2	equ	0xFDF
 23841                           postinc2	equ	0xFDE
 23842                           postdec2	equ	0xFDD
 23843                           plusw2	equ	0xFDB
 23844                           fsr2h	equ	0xFDA
 23845                           fsr2l	equ	0xFD9
 23846                           status	equ	0xFD8
 23847                           
 23848 ;; *************** function _SearchAvailableChannel *****************
 23849 ;; Defined at:
 23850 ;;		line 778 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 23851 ;; Parameters:    Size  Location     Type
 23852 ;;  maxChannels     1    wreg     unsigned char 
 23853 ;;  transmission    1   25[BANK0 ] unsigned char 
 23854 ;;  channelIndex    2   26[BANK0 ] PTR unsigned char 
 23855 ;;		 -> LORAWAN_RxDone@channelIndex(1), SelectChannelForTransmission@channelIndex(1), 
 23856 ;; Auto vars:     Size  Location     Type
 23857 ;;  maxChannels     1   34[BANK0 ] unsigned char 
 23858 ;;  i               1   36[BANK0 ] unsigned char 
 23859 ;;  randomNumber    1   35[BANK0 ] unsigned char 
 23860 ;;  result          1   33[BANK0 ] enum E18963
 23861 ;;  randomNumber    1   32[BANK0 ] unsigned char 
 23862 ;; Return value:  Size  Location     Type
 23863 ;;                  1    wreg      enum E18963
 23864 ;; Registers used:
 23865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23866 ;; Tracked objects:
 23867 ;;		On entry : D/2
 23868 ;;		On exit  : F/0
 23869 ;;		Unchanged: 0/0
 23870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23871 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23872 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23873 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23874 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23875 ;;Total ram usage:       12 bytes
 23876 ;; Hardware stack levels used:    1
 23877 ;; Hardware stack levels required when called:   10
 23878 ;; This function calls:
 23879 ;;		_Random
 23880 ;; This function is called by:
 23881 ;;		_SelectChannelForTransmission
 23882 ;;		_LORAWAN_RxDone
 23883 ;; This function uses a non-reentrant model
 23884 ;;
 23885                           
 23886                           	psect	text122
 23887  004F62                     __ptext122:
 23888                           	opt stack 0
 23889  004F62                     _SearchAvailableChannel:
 23890                           	opt stack 17
 23891                           
 23892                           ; BSR set to: 0
 23893                           ;incstack = 0
 23894                           ;SearchAvailableChannel@maxChannels stored from wreg
 23895  004F62  0100               	movlb	0	; () banked
 23896  004F64  6F82               	movwf	SearchAvailableChannel@maxChannels& (0+255),b
 23897                           
 23898                           ;lorawan_eu.c: 780: uint8_t randomNumberCopy, randomNumber, i;
 23899                           ;lorawan_eu.c: 781: LorawanError_t result = OK;
 23900  004F66  6B81               	clrf	SearchAvailableChannel@result& (0+255),b
 23901                           
 23902                           ; BSR set to: 0
 23903                           ;lorawan_eu.c: 783: randomNumber = Random (maxChannels) + 1;
 23904  004F68  C082  F077         	movff	SearchAvailableChannel@maxChannels,Random@max
 23905  004F6C  6B78               	clrf	(Random@max+1)& (0+255),b
 23906  004F6E  EC89  F039         	call	_Random	;wreg free
 23907  004F72  2977               	incf	?_Random& (0+255),w,b
 23908  004F74  6F83               	movwf	SearchAvailableChannel@randomNumber& (0+255),b
 23909                           
 23910                           ; BSR set to: 0
 23911                           ;lorawan_eu.c: 784: randomNumberCopy = randomNumber;
 23912  004F76  C083  F080         	movff	SearchAvailableChannel@randomNumber,SearchAvailableChannel@randomNumberCopy
 23913                           
 23914                           ;lorawan_eu.c: 786: while (randomNumber)
 23915  004F7A  D054               	goto	l12738
 23916  004F7C                     l1150:
 23917                           
 23918                           ; BSR set to: 0
 23919                           ;lorawan_eu.c: 787: {
 23920                           ;lorawan_eu.c: 788: for (i=0; (i < maxChannels) && (randomNumber != 0) ; i++)
 23921  004F7C  6B84               	clrf	SearchAvailableChannel@i& (0+255),b
 23922  004F7E  D047               	goto	l12730
 23923  004F80                     l12714:
 23924                           
 23925                           ; BSR set to: 0
 23926                           ;lorawan_eu.c: 789: {
 23927                           ;lorawan_eu.c: 790: if ( ( Channels[i].status == 1 ) && ( Channels[i].channelTimer == 0 
      +                          ) && ( loRa.currentDataRate >= Channels[i].dataRange.min ) && ( loRa.currentDataRate <= 
      +                          Channels[i].dataRange.max ) )
 23928  004F80  5184               	movf	SearchAvailableChannel@i& (0+255),w,b
 23929  004F82  0D0E               	mullw	14
 23930  004F84  0E04               	movlw	low (_Channels+4)
 23931  004F86  24F3               	addwf	prodl,w,c
 23932  004F88  6ED9               	movwf	fsr2l,c
 23933  004F8A  0E04               	movlw	high (_Channels+4)
 23934  004F8C  20F4               	addwfc	prodh,w,c
 23935  004F8E  6EDA               	movwf	fsr2h,c
 23936  004F90  04DE               	decf	postinc2,w,c
 23937  004F92  E13B               	bnz	l1153
 23938                           
 23939                           ; BSR set to: 0
 23940  004F94  5184               	movf	SearchAvailableChannel@i& (0+255),w,b
 23941  004F96  0D0E               	mullw	14
 23942  004F98  0E08               	movlw	low (_Channels+8)
 23943  004F9A  24F3               	addwf	prodl,w,c
 23944  004F9C  6ED9               	movwf	fsr2l,c
 23945  004F9E  0E04               	movlw	high (_Channels+8)
 23946  004FA0  20F4               	addwfc	prodh,w,c
 23947  004FA2  6EDA               	movwf	fsr2h,c
 23948  004FA4  50DE               	movf	postinc2,w,c
 23949  004FA6  10DE               	iorwf	postinc2,w,c
 23950  004FA8  10DE               	iorwf	postinc2,w,c
 23951  004FAA  10DE               	iorwf	postinc2,w,c
 23952  004FAC  E12E               	bnz	l1153
 23953                           
 23954                           ; BSR set to: 0
 23955  004FAE  5184               	movf	SearchAvailableChannel@i& (0+255),w,b
 23956  004FB0  0D0E               	mullw	14
 23957  004FB2  0E05               	movlw	low (_Channels+5)
 23958  004FB4  24F3               	addwf	prodl,w,c
 23959  004FB6  6ED9               	movwf	fsr2l,c
 23960  004FB8  0E04               	movlw	high (_Channels+5)
 23961  004FBA  20F4               	addwfc	prodh,w,c
 23962  004FBC  6EDA               	movwf	fsr2h,c
 23963  004FBE  50DF               	movf	223,w,c
 23964  004FC0  0B0F               	andlw	15
 23965  004FC2  0100               	movlb	0	; () banked
 23966  004FC4  6F7C               	movwf	??_SearchAvailableChannel& (0+255),b
 23967  004FC6  517C               	movf	??_SearchAvailableChannel& (0+255),w,b
 23968  004FC8  0102               	movlb	2	; () banked
 23969  004FCA  5DDF               	subwf	(_loRa+223)& (0+255),w,b
 23970  004FCC  E31E               	bnc	l1153
 23971                           
 23972                           ; BSR set to: 2
 23973  004FCE  0100               	movlb	0	; () banked
 23974  004FD0  5184               	movf	SearchAvailableChannel@i& (0+255),w,b
 23975  004FD2  0D0E               	mullw	14
 23976  004FD4  0E05               	movlw	low (_Channels+5)
 23977  004FD6  24F3               	addwf	prodl,w,c
 23978  004FD8  6ED9               	movwf	fsr2l,c
 23979  004FDA  0E04               	movlw	high (_Channels+5)
 23980  004FDC  20F4               	addwfc	prodh,w,c
 23981  004FDE  6EDA               	movwf	fsr2h,c
 23982  004FE0  38DF               	swapf	223,w,c
 23983  004FE2  0B0F               	andlw	15
 23984  004FE4  6F7C               	movwf	??_SearchAvailableChannel& (0+255),b
 23985  004FE6  0102               	movlb	2	; () banked
 23986  004FE8  51DF               	movf	(_loRa+223)& (0+255),w,b
 23987  004FEA  0100               	movlb	0	; () banked
 23988  004FEC  5D7C               	subwf	??_SearchAvailableChannel& (0+255),w,b
 23989  004FEE  E30D               	bnc	l1153
 23990                           
 23991                           ; BSR set to: 0
 23992                           ;lorawan_eu.c: 791: {
 23993                           ;lorawan_eu.c: 792: if (transmissionType == 0)
 23994  004FF0  5179               	movf	SearchAvailableChannel@transmissionType& (0+255),w,b
 23995  004FF2  E10A               	bnz	l12726
 23996                           
 23997                           ; BSR set to: 0
 23998                           ;lorawan_eu.c: 793: {
 23999                           ;lorawan_eu.c: 794: if ( Channels[i].joinRequestChannel == 1 )
 24000  004FF4  5184               	movf	SearchAvailableChannel@i& (0+255),w,b
 24001  004FF6  0D0E               	mullw	14
 24002  004FF8  0E0C               	movlw	low (_Channels+12)
 24003  004FFA  24F3               	addwf	prodl,w,c
 24004  004FFC  6ED9               	movwf	fsr2l,c
 24005  004FFE  0E04               	movlw	high (_Channels+12)
 24006  005000  20F4               	addwfc	prodh,w,c
 24007  005002  6EDA               	movwf	fsr2h,c
 24008  005004  04DE               	decf	postinc2,w,c
 24009  005006  E101               	bnz	l1153
 24010  005008                     l12726:
 24011                           
 24012                           ; BSR set to: 0
 24013                           ;lorawan_eu.c: 795: {
 24014                           ;lorawan_eu.c: 796: randomNumber --;
 24015  005008  0783               	decf	SearchAvailableChannel@randomNumber& (0+255),f,b
 24016  00500A                     l1153:
 24017  00500A  0100               	movlb	0	; () banked
 24018  00500C  2B84               	incf	SearchAvailableChannel@i& (0+255),f,b
 24019  00500E                     l12730:
 24020                           
 24021                           ; BSR set to: 0
 24022  00500E  5182               	movf	SearchAvailableChannel@maxChannels& (0+255),w,b
 24023  005010  5D84               	subwf	SearchAvailableChannel@i& (0+255),w,b
 24024  005012  E202               	bc	l12734
 24025                           
 24026                           ; BSR set to: 0
 24027  005014  5183               	movf	SearchAvailableChannel@randomNumber& (0+255),w,b
 24028  005016  E1B4               	bnz	l12714
 24029  005018                     l12734:
 24030                           
 24031                           ; BSR set to: 0
 24032                           ;lorawan_eu.c: 802: }
 24033                           ;lorawan_eu.c: 803: }
 24034                           ;lorawan_eu.c: 804: }
 24035                           ;lorawan_eu.c: 806: if ( randomNumber == randomNumberCopy )
 24036  005018  5180               	movf	SearchAvailableChannel@randomNumberCopy& (0+255),w,b
 24037  00501A  1983               	xorwf	SearchAvailableChannel@randomNumber& (0+255),w,b
 24038  00501C  E103               	bnz	l12738
 24039                           
 24040                           ; BSR set to: 0
 24041                           ;lorawan_eu.c: 807: {
 24042                           ;lorawan_eu.c: 808: result = NO_CHANNELS_FOUND;
 24043  00501E  0E09               	movlw	9
 24044  005020  6F81               	movwf	SearchAvailableChannel@result& (0+255),b
 24045                           
 24046                           ;lorawan_eu.c: 809: break;
 24047  005022  D002               	goto	l12740
 24048  005024                     l12738:
 24049                           
 24050                           ; BSR set to: 0
 24051  005024  5183               	movf	SearchAvailableChannel@randomNumber& (0+255),w,b
 24052  005026  E1AA               	bnz	l1150
 24053  005028                     l12740:
 24054                           
 24055                           ; BSR set to: 0
 24056                           ;lorawan_eu.c: 810: }
 24057                           ;lorawan_eu.c: 811: }
 24058                           ;lorawan_eu.c: 813: if ( i != 0)
 24059  005028  5184               	movf	SearchAvailableChannel@i& (0+255),w,b
 24060  00502A  E007               	bz	l12744
 24061                           
 24062                           ; BSR set to: 0
 24063                           ;lorawan_eu.c: 814: {
 24064                           ;lorawan_eu.c: 815: *channelIndex = i - 1;
 24065  00502C  0584               	decf	SearchAvailableChannel@i& (0+255),w,b
 24066  00502E  C07A  FFD9         	movff	SearchAvailableChannel@channelIndex,fsr2l
 24067  005032  C07B  FFDA         	movff	SearchAvailableChannel@channelIndex+1,fsr2h
 24068  005036  6EDF               	movwf	indf2,c
 24069                           
 24070                           ;lorawan_eu.c: 816: }
 24071  005038  D002               	goto	l1163
 24072  00503A                     l12744:
 24073                           
 24074                           ; BSR set to: 0
 24075                           ;lorawan_eu.c: 817: else
 24076                           ;lorawan_eu.c: 818: {
 24077                           ;lorawan_eu.c: 819: result = NO_CHANNELS_FOUND;
 24078  00503A  0E09               	movlw	9
 24079  00503C  6F81               	movwf	SearchAvailableChannel@result& (0+255),b
 24080  00503E                     l1163:
 24081                           
 24082                           ; BSR set to: 0
 24083                           ;lorawan_eu.c: 820: }
 24084                           ;lorawan_eu.c: 821: return result;
 24085  00503E  5181               	movf	SearchAvailableChannel@result& (0+255),w,b
 24086                           
 24087                           ; BSR set to: 0
 24088  005040  0012               	return		;funcret
 24089  005042                     __end_of_SearchAvailableChannel:
 24090                           	opt stack 0
 24091                           tosu	equ	0xFFF
 24092                           tosh	equ	0xFFE
 24093                           tosl	equ	0xFFD
 24094                           pclath	equ	0xFFA
 24095                           tblptru	equ	0xFF8
 24096                           tblptrh	equ	0xFF7
 24097                           tblptrl	equ	0xFF6
 24098                           tablat	equ	0xFF5
 24099                           prodh	equ	0xFF4
 24100                           prodl	equ	0xFF3
 24101                           intcon	equ	0xFF2
 24102                           intcon2	equ	0xFF1
 24103                           intcon3	equ	0xFF0
 24104                           indf0	equ	0xFEF
 24105                           postinc0	equ	0xFEE
 24106                           fsr0h	equ	0xFEA
 24107                           fsr0l	equ	0xFE9
 24108                           wreg	equ	0xFE8
 24109                           postinc1	equ	0xFE6
 24110                           postdec1	equ	0xFE5
 24111                           plusw1	equ	0xFE3
 24112                           fsr1h	equ	0xFE2
 24113                           fsr1l	equ	0xFE1
 24114                           indf2	equ	0xFDF
 24115                           postinc2	equ	0xFDE
 24116                           postdec2	equ	0xFDD
 24117                           plusw2	equ	0xFDB
 24118                           fsr2h	equ	0xFDA
 24119                           fsr2l	equ	0xFD9
 24120                           status	equ	0xFD8
 24121                           
 24122 ;; *************** function _ConfigureRadioTx *****************
 24123 ;; Defined at:
 24124 ;;		line 1255 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 24125 ;; Parameters:    Size  Location     Type
 24126 ;;  dataRate        1    wreg     unsigned char 
 24127 ;;  freq            4   22[BANK0 ] unsigned long 
 24128 ;; Auto vars:     Size  Location     Type
 24129 ;;  dataRate        1   26[BANK0 ] unsigned char 
 24130 ;;  txPower         1   27[BANK0 ] char 
 24131 ;; Return value:  Size  Location     Type
 24132 ;;                  1    wreg      void 
 24133 ;; Registers used:
 24134 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24135 ;; Tracked objects:
 24136 ;;		On entry : F/2
 24137 ;;		On exit  : 0/0
 24138 ;;		Unchanged: 0/0
 24139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24140 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24141 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24143 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24144 ;;Total ram usage:        6 bytes
 24145 ;; Hardware stack levels used:    1
 24146 ;; Hardware stack levels required when called:   10
 24147 ;; This function calls:
 24148 ;;		_ConfigureRadio
 24149 ;;		_RADIO_SetCRC
 24150 ;;		_RADIO_SetIQInverted
 24151 ;;		_RADIO_SetOutputPower
 24152 ;; This function is called by:
 24153 ;;		_SelectChannelForTransmission
 24154 ;; This function uses a non-reentrant model
 24155 ;;
 24156                           
 24157                           	psect	text123
 24158  006C46                     __ptext123:
 24159                           	opt stack 0
 24160  006C46                     _ConfigureRadioTx:
 24161                           	opt stack 17
 24162                           
 24163                           ; BSR set to: 0
 24164                           ;incstack = 0
 24165                           ;ConfigureRadioTx@dataRate stored from wreg
 24166  006C46  0100               	movlb	0	; () banked
 24167  006C48  6F7A               	movwf	ConfigureRadioTx@dataRate& (0+255),b
 24168                           
 24169                           ;lorawan_eu.c: 1257: int8_t txPower;
 24170                           ;lorawan_eu.c: 1259: ConfigureRadio(dataRate, freq);
 24171  006C4A  C076  F071         	movff	ConfigureRadioTx@freq,ConfigureRadio@freq
 24172  006C4E  C077  F072         	movff	ConfigureRadioTx@freq+1,ConfigureRadio@freq+1
 24173  006C52  C078  F073         	movff	ConfigureRadioTx@freq+2,ConfigureRadio@freq+2
 24174  006C56  C079  F074         	movff	ConfigureRadioTx@freq+3,ConfigureRadio@freq+3
 24175  006C5A  517A               	movf	ConfigureRadioTx@dataRate& (0+255),w,b
 24176  006C5C  ECB9  F02F         	call	_ConfigureRadio
 24177                           
 24178                           ;lorawan_eu.c: 1262: {
 24179                           ;lorawan_eu.c: 1263: txPower = txPower868[loRa.txPower];
 24180  006C60  0EA2               	movlw	low _txPower868
 24181  006C62  0102               	movlb	2	; () banked
 24182  006C64  25E1               	addwf	(_loRa+225)& (0+255),w,b
 24183  006C66  6EF6               	movwf	tblptrl,c
 24184  006C68  6AF7               	clrf	tblptrh,c
 24185  006C6A  0E7F               	movlw	high _txPower868
 24186  006C6C  22F7               	addwfc	tblptrh,f,c
 24187  006C6E                     	if	0	;There are less than 3 active tblptr bytes
 24188  006C6E                     	endif
 24189  006C6E  0008               	tblrd		*
 24190  006C70  CFF5 F07B          	movff	tablat,ConfigureRadioTx@txPower
 24191                           
 24192                           ; BSR set to: 2
 24193                           ;lorawan_eu.c: 1268: }
 24194                           ;lorawan_eu.c: 1270: RADIO_SetOutputPower (txPower);
 24195                           
 24196                           ;lorawan_eu.c: 1264: }
 24197  006C74  0100               	movlb	0	; () banked
 24198  006C76  517B               	movf	ConfigureRadioTx@txPower& (0+255),w,b
 24199  006C78  ECCD  F03B         	call	_RADIO_SetOutputPower
 24200                           
 24201                           ;lorawan_eu.c: 1272: RADIO_SetCRC(1);
 24202  006C7C  0E01               	movlw	1
 24203  006C7E  ECAD  F03B         	call	_RADIO_SetCRC
 24204                           
 24205                           ;lorawan_eu.c: 1273: RADIO_SetIQInverted(0);
 24206  006C82  0E00               	movlw	0
 24207  006C84  EFA8  F03B         	goto	_RADIO_SetIQInverted
 24208  006C88                     __end_of_ConfigureRadioTx:
 24209                           	opt stack 0
 24210                           tosu	equ	0xFFF
 24211                           tosh	equ	0xFFE
 24212                           tosl	equ	0xFFD
 24213                           pclath	equ	0xFFA
 24214                           tblptru	equ	0xFF8
 24215                           tblptrh	equ	0xFF7
 24216                           tblptrl	equ	0xFF6
 24217                           tablat	equ	0xFF5
 24218                           prodh	equ	0xFF4
 24219                           prodl	equ	0xFF3
 24220                           intcon	equ	0xFF2
 24221                           intcon2	equ	0xFF1
 24222                           intcon3	equ	0xFF0
 24223                           indf0	equ	0xFEF
 24224                           postinc0	equ	0xFEE
 24225                           fsr0h	equ	0xFEA
 24226                           fsr0l	equ	0xFE9
 24227                           wreg	equ	0xFE8
 24228                           postinc1	equ	0xFE6
 24229                           postdec1	equ	0xFE5
 24230                           plusw1	equ	0xFE3
 24231                           fsr1h	equ	0xFE2
 24232                           fsr1l	equ	0xFE1
 24233                           indf2	equ	0xFDF
 24234                           postinc2	equ	0xFDE
 24235                           postdec2	equ	0xFDD
 24236                           plusw2	equ	0xFDB
 24237                           fsr2h	equ	0xFDA
 24238                           fsr2l	equ	0xFD9
 24239                           status	equ	0xFD8
 24240                           
 24241 ;; *************** function _RADIO_SetOutputPower *****************
 24242 ;; Defined at:
 24243 ;;		line 1464 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24244 ;; Parameters:    Size  Location     Type
 24245 ;;  power           1    wreg     char 
 24246 ;; Auto vars:     Size  Location     Type
 24247 ;;  power           1    4[BANK0 ] char 
 24248 ;; Return value:  Size  Location     Type
 24249 ;;                  1    wreg      void 
 24250 ;; Registers used:
 24251 ;;		wreg
 24252 ;; Tracked objects:
 24253 ;;		On entry : F/0
 24254 ;;		On exit  : 0/0
 24255 ;;		Unchanged: 0/0
 24256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24260 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24261 ;;Total ram usage:        1 bytes
 24262 ;; Hardware stack levels used:    1
 24263 ;; Hardware stack levels required when called:    7
 24264 ;; This function calls:
 24265 ;;		Nothing
 24266 ;; This function is called by:
 24267 ;;		_ConfigureRadioTx
 24268 ;; This function uses a non-reentrant model
 24269 ;;
 24270                           
 24271                           	psect	text124
 24272  00779A                     __ptext124:
 24273                           	opt stack 0
 24274  00779A                     _RADIO_SetOutputPower:
 24275                           	opt stack 19
 24276                           
 24277                           ;incstack = 0
 24278                           ;RADIO_SetOutputPower@power stored from wreg
 24279  00779A  6F64               	movwf	RADIO_SetOutputPower@power& (0+255),b
 24280                           
 24281                           ;radio_driver_SX1276.c: 1466: RadioConfiguration.outputPower = power;
 24282  00779C  C064  F190         	movff	RADIO_SetOutputPower@power,_RadioConfiguration+27
 24283  0077A0  0012               	return		;funcret
 24284  0077A2                     __end_of_RADIO_SetOutputPower:
 24285                           	opt stack 0
 24286                           tosu	equ	0xFFF
 24287                           tosh	equ	0xFFE
 24288                           tosl	equ	0xFFD
 24289                           pclath	equ	0xFFA
 24290                           tblptru	equ	0xFF8
 24291                           tblptrh	equ	0xFF7
 24292                           tblptrl	equ	0xFF6
 24293                           tablat	equ	0xFF5
 24294                           prodh	equ	0xFF4
 24295                           prodl	equ	0xFF3
 24296                           intcon	equ	0xFF2
 24297                           intcon2	equ	0xFF1
 24298                           intcon3	equ	0xFF0
 24299                           indf0	equ	0xFEF
 24300                           postinc0	equ	0xFEE
 24301                           fsr0h	equ	0xFEA
 24302                           fsr0l	equ	0xFE9
 24303                           wreg	equ	0xFE8
 24304                           postinc1	equ	0xFE6
 24305                           postdec1	equ	0xFE5
 24306                           plusw1	equ	0xFE3
 24307                           fsr1h	equ	0xFE2
 24308                           fsr1l	equ	0xFE1
 24309                           indf2	equ	0xFDF
 24310                           postinc2	equ	0xFDE
 24311                           postdec2	equ	0xFDD
 24312                           plusw2	equ	0xFDB
 24313                           fsr2h	equ	0xFDA
 24314                           fsr2l	equ	0xFD9
 24315                           status	equ	0xFD8
 24316                           
 24317 ;; *************** function _RADIO_SetIQInverted *****************
 24318 ;; Defined at:
 24319 ;;		line 1484 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24320 ;; Parameters:    Size  Location     Type
 24321 ;;  iqInverted      1    wreg     unsigned char 
 24322 ;; Auto vars:     Size  Location     Type
 24323 ;;  iqInverted      1    4[BANK0 ] unsigned char 
 24324 ;; Return value:  Size  Location     Type
 24325 ;;                  1    wreg      void 
 24326 ;; Registers used:
 24327 ;;		wreg
 24328 ;; Tracked objects:
 24329 ;;		On entry : 0/0
 24330 ;;		On exit  : 0/0
 24331 ;;		Unchanged: 0/0
 24332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24334 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24336 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24337 ;;Total ram usage:        1 bytes
 24338 ;; Hardware stack levels used:    1
 24339 ;; Hardware stack levels required when called:    7
 24340 ;; This function calls:
 24341 ;;		Nothing
 24342 ;; This function is called by:
 24343 ;;		_ConfigureRadioTx
 24344 ;;		_ConfigureRadioRx
 24345 ;; This function uses a non-reentrant model
 24346 ;;
 24347                           
 24348                           	psect	text125
 24349  007750                     __ptext125:
 24350                           	opt stack 0
 24351  007750                     _RADIO_SetIQInverted:
 24352                           	opt stack 19
 24353                           
 24354                           ;incstack = 0
 24355                           ;RADIO_SetIQInverted@iqInverted stored from wreg
 24356  007750  0100               	movlb	0	; () banked
 24357  007752  6F64               	movwf	RADIO_SetIQInverted@iqInverted& (0+255),b
 24358                           
 24359                           ;radio_driver_SX1276.c: 1486: RadioConfiguration.iqInverted = iqInverted;
 24360  007754  C064  F195         	movff	RADIO_SetIQInverted@iqInverted,_RadioConfiguration+32
 24361  007758  0012               	return		;funcret
 24362  00775A                     __end_of_RADIO_SetIQInverted:
 24363                           	opt stack 0
 24364                           tosu	equ	0xFFF
 24365                           tosh	equ	0xFFE
 24366                           tosl	equ	0xFFD
 24367                           pclath	equ	0xFFA
 24368                           tblptru	equ	0xFF8
 24369                           tblptrh	equ	0xFF7
 24370                           tblptrl	equ	0xFF6
 24371                           tablat	equ	0xFF5
 24372                           prodh	equ	0xFF4
 24373                           prodl	equ	0xFF3
 24374                           intcon	equ	0xFF2
 24375                           intcon2	equ	0xFF1
 24376                           intcon3	equ	0xFF0
 24377                           indf0	equ	0xFEF
 24378                           postinc0	equ	0xFEE
 24379                           fsr0h	equ	0xFEA
 24380                           fsr0l	equ	0xFE9
 24381                           wreg	equ	0xFE8
 24382                           postinc1	equ	0xFE6
 24383                           postdec1	equ	0xFE5
 24384                           plusw1	equ	0xFE3
 24385                           fsr1h	equ	0xFE2
 24386                           fsr1l	equ	0xFE1
 24387                           indf2	equ	0xFDF
 24388                           postinc2	equ	0xFDE
 24389                           postdec2	equ	0xFDD
 24390                           plusw2	equ	0xFDB
 24391                           fsr2h	equ	0xFDA
 24392                           fsr2l	equ	0xFD9
 24393                           status	equ	0xFD8
 24394                           
 24395 ;; *************** function _RADIO_SetCRC *****************
 24396 ;; Defined at:
 24397 ;;		line 1474 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24398 ;; Parameters:    Size  Location     Type
 24399 ;;  crc             1    wreg     unsigned char 
 24400 ;; Auto vars:     Size  Location     Type
 24401 ;;  crc             1    4[BANK0 ] unsigned char 
 24402 ;; Return value:  Size  Location     Type
 24403 ;;                  1    wreg      void 
 24404 ;; Registers used:
 24405 ;;		wreg
 24406 ;; Tracked objects:
 24407 ;;		On entry : 0/0
 24408 ;;		On exit  : 0/0
 24409 ;;		Unchanged: 0/0
 24410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24412 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24414 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24415 ;;Total ram usage:        1 bytes
 24416 ;; Hardware stack levels used:    1
 24417 ;; Hardware stack levels required when called:    7
 24418 ;; This function calls:
 24419 ;;		Nothing
 24420 ;; This function is called by:
 24421 ;;		_ConfigureRadioTx
 24422 ;;		_ConfigureRadioRx
 24423 ;; This function uses a non-reentrant model
 24424 ;;
 24425                           
 24426                           	psect	text126
 24427  00775A                     __ptext126:
 24428                           	opt stack 0
 24429  00775A                     _RADIO_SetCRC:
 24430                           	opt stack 19
 24431                           
 24432                           ;incstack = 0
 24433                           ;RADIO_SetCRC@crc stored from wreg
 24434  00775A  0100               	movlb	0	; () banked
 24435  00775C  6F64               	movwf	RADIO_SetCRC@crc& (0+255),b
 24436                           
 24437                           ;radio_driver_SX1276.c: 1476: RadioConfiguration.crcOn = crc;
 24438  00775E  C064  F191         	movff	RADIO_SetCRC@crc,_RadioConfiguration+28
 24439  007762  0012               	return		;funcret
 24440  007764                     __end_of_RADIO_SetCRC:
 24441                           	opt stack 0
 24442                           tosu	equ	0xFFF
 24443                           tosh	equ	0xFFE
 24444                           tosl	equ	0xFFD
 24445                           pclath	equ	0xFFA
 24446                           tblptru	equ	0xFF8
 24447                           tblptrh	equ	0xFF7
 24448                           tblptrl	equ	0xFF6
 24449                           tablat	equ	0xFF5
 24450                           prodh	equ	0xFF4
 24451                           prodl	equ	0xFF3
 24452                           intcon	equ	0xFF2
 24453                           intcon2	equ	0xFF1
 24454                           intcon3	equ	0xFF0
 24455                           indf0	equ	0xFEF
 24456                           postinc0	equ	0xFEE
 24457                           fsr0h	equ	0xFEA
 24458                           fsr0l	equ	0xFE9
 24459                           wreg	equ	0xFE8
 24460                           postinc1	equ	0xFE6
 24461                           postdec1	equ	0xFE5
 24462                           plusw1	equ	0xFE3
 24463                           fsr1h	equ	0xFE2
 24464                           fsr1l	equ	0xFE1
 24465                           indf2	equ	0xFDF
 24466                           postinc2	equ	0xFDE
 24467                           postdec2	equ	0xFDD
 24468                           plusw2	equ	0xFDB
 24469                           fsr2h	equ	0xFDA
 24470                           fsr2l	equ	0xFD9
 24471                           status	equ	0xFD8
 24472                           
 24473 ;; *************** function _ConfigureRadio *****************
 24474 ;; Defined at:
 24475 ;;		line 863 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 24476 ;; Parameters:    Size  Location     Type
 24477 ;;  dataRate        1    wreg     unsigned char 
 24478 ;;  freq            4   17[BANK0 ] unsigned long 
 24479 ;; Auto vars:     Size  Location     Type
 24480 ;;  dataRate        1   21[BANK0 ] unsigned char 
 24481 ;; Return value:  Size  Location     Type
 24482 ;;                  1    wreg      void 
 24483 ;; Registers used:
 24484 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24485 ;; Tracked objects:
 24486 ;;		On entry : F/0
 24487 ;;		On exit  : 0/0
 24488 ;;		Unchanged: 0/0
 24489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24490 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24491 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24493 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24494 ;;Total ram usage:        5 bytes
 24495 ;; Hardware stack levels used:    1
 24496 ;; Hardware stack levels required when called:    9
 24497 ;; This function calls:
 24498 ;;		_RADIO_SetBandwidth
 24499 ;;		_RADIO_SetChannelFrequency
 24500 ;;		_RADIO_SetFSKSyncWord
 24501 ;;		_RADIO_SetFrequencyHopPeriod
 24502 ;;		_RADIO_SetLoRaSyncWord
 24503 ;;		_RADIO_SetModulation
 24504 ;;		_RADIO_SetSpreadingFactor
 24505 ;; This function is called by:
 24506 ;;		_ConfigureRadioTx
 24507 ;;		_ConfigureRadioRx
 24508 ;; This function uses a non-reentrant model
 24509 ;;
 24510                           
 24511                           	psect	text127
 24512  005F72                     __ptext127:
 24513                           	opt stack 0
 24514  005F72                     _ConfigureRadio:
 24515                           	opt stack 17
 24516                           
 24517                           ;incstack = 0
 24518                           ;ConfigureRadio@dataRate stored from wreg
 24519  005F72  6F75               	movwf	ConfigureRadio@dataRate& (0+255),b
 24520                           
 24521                           ;lorawan_eu.c: 865: RADIO_SetModulation (modulation[dataRate]);
 24522  005F74  0E75               	movlw	low _modulation
 24523  005F76  0100               	movlb	0	; () banked
 24524  005F78  2575               	addwf	ConfigureRadio@dataRate& (0+255),w,b
 24525  005F7A  6EF6               	movwf	tblptrl,c
 24526  005F7C  6AF7               	clrf	tblptrh,c
 24527  005F7E  0E7F               	movlw	high _modulation
 24528  005F80  22F7               	addwfc	tblptrh,f,c
 24529  005F82                     	if	0	;There are less than 3 active tblptr bytes
 24530  005F82                     	endif
 24531  005F82  0008               	tblrd		*
 24532  005F84  50F5               	movf	tablat,w,c
 24533  005F86  ECD5  F03B         	call	_RADIO_SetModulation
 24534                           
 24535                           ;lorawan_eu.c: 866: RADIO_SetChannelFrequency (freq);
 24536  005F8A  C071  F064         	movff	ConfigureRadio@freq,RADIO_SetChannelFrequency@frequency
 24537  005F8E  C072  F065         	movff	ConfigureRadio@freq+1,RADIO_SetChannelFrequency@frequency+1
 24538  005F92  C073  F066         	movff	ConfigureRadio@freq+2,RADIO_SetChannelFrequency@frequency+2
 24539  005F96  C074  F067         	movff	ConfigureRadio@freq+3,RADIO_SetChannelFrequency@frequency+3
 24540  005F9A  ECBC  F02E         	call	_RADIO_SetChannelFrequency	;wreg free
 24541                           
 24542                           ; BSR set to: 0
 24543                           ;lorawan_eu.c: 867: RADIO_SetFrequencyHopPeriod (0);
 24544  005F9E  0E00               	movlw	0
 24545  005FA0  6B65               	clrf	(RADIO_SetFrequencyHopPeriod@frequencyHopPeriod+1)& (0+255),b
 24546  005FA2  6B64               	clrf	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod& (0+255),b
 24547  005FA4  ECB2  F03B         	call	_RADIO_SetFrequencyHopPeriod	;wreg free
 24548                           
 24549                           ; BSR set to: 0
 24550                           ;lorawan_eu.c: 869: if (dataRate <= 6)
 24551  005FA8  0E07               	movlw	7
 24552  005FAA  6175               	cpfslt	ConfigureRadio@dataRate& (0+255),b
 24553  005FAC  D019               	goto	l12378
 24554                           
 24555                           ; BSR set to: 0
 24556                           ;lorawan_eu.c: 870: {
 24557                           ;lorawan_eu.c: 872: RADIO_SetSpreadingFactor (spreadingFactor[dataRate]);
 24558  005FAE  0E9B               	movlw	low _spreadingFactor
 24559  005FB0  2575               	addwf	ConfigureRadio@dataRate& (0+255),w,b
 24560  005FB2  6EF6               	movwf	tblptrl,c
 24561  005FB4  6AF7               	clrf	tblptrh,c
 24562  005FB6  0E7F               	movlw	high _spreadingFactor
 24563  005FB8  22F7               	addwfc	tblptrh,f,c
 24564  005FBA                     	if	0	;There are less than 3 active tblptr bytes
 24565  005FBA                     	endif
 24566  005FBA  0008               	tblrd		*
 24567  005FBC  50F5               	movf	tablat,w,c
 24568  005FBE  ECD1  F03B         	call	_RADIO_SetSpreadingFactor
 24569                           
 24570                           ;lorawan_eu.c: 873: RADIO_SetBandwidth (bandwidth[dataRate]);
 24571  005FC2  0E8D               	movlw	low _bandwidth
 24572  005FC4  0100               	movlb	0	; () banked
 24573  005FC6  2575               	addwf	ConfigureRadio@dataRate& (0+255),w,b
 24574  005FC8  6EF6               	movwf	tblptrl,c
 24575  005FCA  6AF7               	clrf	tblptrh,c
 24576  005FCC  0E7F               	movlw	high _bandwidth
 24577  005FCE  22F7               	addwfc	tblptrh,f,c
 24578  005FD0                     	if	0	;There are less than 3 active tblptr bytes
 24579  005FD0                     	endif
 24580  005FD0  0008               	tblrd		*
 24581  005FD2  50F5               	movf	tablat,w,c
 24582  005FD4  ECD9  F03B         	call	_RADIO_SetBandwidth
 24583                           
 24584                           ;lorawan_eu.c: 874: RADIO_SetLoRaSyncWord(loRa.syncWord);
 24585  005FD8  0102               	movlb	2	; () banked
 24586  005FDA  51F4               	movf	(_loRa+244)& (0+255),w,b
 24587  005FDC  EFB7  F03B         	goto	_RADIO_SetLoRaSyncWord
 24588  005FE0                     l12378:
 24589                           
 24590                           ; BSR set to: 0
 24591                           ;lorawan_eu.c: 876: else
 24592                           ;lorawan_eu.c: 877: {
 24593                           ;lorawan_eu.c: 879: RADIO_SetFSKSyncWord(sizeof(FskSyncWordBuff) / sizeof(FskSyncWordBuf
      +                          f[0]), (uint8_t*)FskSyncWordBuff);
 24594  005FE0  0EFC               	movlw	low _FskSyncWordBuff
 24595  005FE2  6F6E               	movwf	RADIO_SetFSKSyncWord@syncWord& (0+255),b
 24596  005FE4  0E7F               	movlw	high _FskSyncWordBuff
 24597  005FE6  6F6F               	movwf	(RADIO_SetFSKSyncWord@syncWord+1)& (0+255),b
 24598  005FE8  0E03               	movlw	3
 24599  005FEA  EF76  F038         	goto	_RADIO_SetFSKSyncWord
 24600  005FEE                     __end_of_ConfigureRadio:
 24601                           	opt stack 0
 24602                           tosu	equ	0xFFF
 24603                           tosh	equ	0xFFE
 24604                           tosl	equ	0xFFD
 24605                           pclath	equ	0xFFA
 24606                           tblptru	equ	0xFF8
 24607                           tblptrh	equ	0xFF7
 24608                           tblptrl	equ	0xFF6
 24609                           tablat	equ	0xFF5
 24610                           prodh	equ	0xFF4
 24611                           prodl	equ	0xFF3
 24612                           intcon	equ	0xFF2
 24613                           intcon2	equ	0xFF1
 24614                           intcon3	equ	0xFF0
 24615                           indf0	equ	0xFEF
 24616                           postinc0	equ	0xFEE
 24617                           fsr0h	equ	0xFEA
 24618                           fsr0l	equ	0xFE9
 24619                           wreg	equ	0xFE8
 24620                           postinc1	equ	0xFE6
 24621                           postdec1	equ	0xFE5
 24622                           plusw1	equ	0xFE3
 24623                           fsr1h	equ	0xFE2
 24624                           fsr1l	equ	0xFE1
 24625                           indf2	equ	0xFDF
 24626                           postinc2	equ	0xFDE
 24627                           postdec2	equ	0xFDD
 24628                           plusw2	equ	0xFDB
 24629                           fsr2h	equ	0xFDA
 24630                           fsr2l	equ	0xFD9
 24631                           status	equ	0xFD8
 24632                           
 24633 ;; *************** function _RADIO_SetSpreadingFactor *****************
 24634 ;; Defined at:
 24635 ;;		line 1434 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24636 ;; Parameters:    Size  Location     Type
 24637 ;;  spreadingFac    1    wreg     enum E18708
 24638 ;; Auto vars:     Size  Location     Type
 24639 ;;  spreadingFac    1    4[BANK0 ] enum E18708
 24640 ;; Return value:  Size  Location     Type
 24641 ;;                  1    wreg      void 
 24642 ;; Registers used:
 24643 ;;		wreg
 24644 ;; Tracked objects:
 24645 ;;		On entry : F/0
 24646 ;;		On exit  : 0/0
 24647 ;;		Unchanged: 0/0
 24648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24650 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24652 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24653 ;;Total ram usage:        1 bytes
 24654 ;; Hardware stack levels used:    1
 24655 ;; Hardware stack levels required when called:    7
 24656 ;; This function calls:
 24657 ;;		Nothing
 24658 ;; This function is called by:
 24659 ;;		_ConfigureRadio
 24660 ;; This function uses a non-reentrant model
 24661 ;;
 24662                           
 24663                           	psect	text128
 24664  0077A2                     __ptext128:
 24665                           	opt stack 0
 24666  0077A2                     _RADIO_SetSpreadingFactor:
 24667                           	opt stack 18
 24668                           
 24669                           ;incstack = 0
 24670                           ;RADIO_SetSpreadingFactor@spreadingFactor stored from wreg
 24671  0077A2  6F64               	movwf	RADIO_SetSpreadingFactor@spreadingFactor& (0+255),b
 24672                           
 24673                           ;radio_driver_SX1276.c: 1436: RadioConfiguration.dataRate = spreadingFactor;
 24674  0077A4  C064  F18E         	movff	RADIO_SetSpreadingFactor@spreadingFactor,_RadioConfiguration+25
 24675  0077A8  0012               	return		;funcret
 24676  0077AA                     __end_of_RADIO_SetSpreadingFactor:
 24677                           	opt stack 0
 24678                           tosu	equ	0xFFF
 24679                           tosh	equ	0xFFE
 24680                           tosl	equ	0xFFD
 24681                           pclath	equ	0xFFA
 24682                           tblptru	equ	0xFF8
 24683                           tblptrh	equ	0xFF7
 24684                           tblptrl	equ	0xFF6
 24685                           tablat	equ	0xFF5
 24686                           prodh	equ	0xFF4
 24687                           prodl	equ	0xFF3
 24688                           intcon	equ	0xFF2
 24689                           intcon2	equ	0xFF1
 24690                           intcon3	equ	0xFF0
 24691                           indf0	equ	0xFEF
 24692                           postinc0	equ	0xFEE
 24693                           fsr0h	equ	0xFEA
 24694                           fsr0l	equ	0xFE9
 24695                           wreg	equ	0xFE8
 24696                           postinc1	equ	0xFE6
 24697                           postdec1	equ	0xFE5
 24698                           plusw1	equ	0xFE3
 24699                           fsr1h	equ	0xFE2
 24700                           fsr1l	equ	0xFE1
 24701                           indf2	equ	0xFDF
 24702                           postinc2	equ	0xFDE
 24703                           postdec2	equ	0xFDD
 24704                           plusw2	equ	0xFDB
 24705                           fsr2h	equ	0xFDA
 24706                           fsr2l	equ	0xFD9
 24707                           status	equ	0xFD8
 24708                           
 24709 ;; *************** function _RADIO_SetModulation *****************
 24710 ;; Defined at:
 24711 ;;		line 1515 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24712 ;; Parameters:    Size  Location     Type
 24713 ;;  modulation      1    wreg     enum E18698
 24714 ;; Auto vars:     Size  Location     Type
 24715 ;;  modulation      1    4[BANK0 ] enum E18698
 24716 ;; Return value:  Size  Location     Type
 24717 ;;                  1    wreg      void 
 24718 ;; Registers used:
 24719 ;;		wreg
 24720 ;; Tracked objects:
 24721 ;;		On entry : F/0
 24722 ;;		On exit  : 0/0
 24723 ;;		Unchanged: 0/0
 24724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24726 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24728 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24729 ;;Total ram usage:        1 bytes
 24730 ;; Hardware stack levels used:    1
 24731 ;; Hardware stack levels required when called:    7
 24732 ;; This function calls:
 24733 ;;		Nothing
 24734 ;; This function is called by:
 24735 ;;		_ConfigureRadio
 24736 ;; This function uses a non-reentrant model
 24737 ;;
 24738                           
 24739                           	psect	text129
 24740  0077AA                     __ptext129:
 24741                           	opt stack 0
 24742  0077AA                     _RADIO_SetModulation:
 24743                           	opt stack 18
 24744                           
 24745                           ;incstack = 0
 24746                           ;RADIO_SetModulation@modulation stored from wreg
 24747  0077AA  6F64               	movwf	RADIO_SetModulation@modulation& (0+255),b
 24748                           
 24749                           ;radio_driver_SX1276.c: 1517: RadioConfiguration.modulation = modulation;
 24750  0077AC  C064  F18D         	movff	RADIO_SetModulation@modulation,_RadioConfiguration+24
 24751  0077B0  0012               	return		;funcret
 24752  0077B2                     __end_of_RADIO_SetModulation:
 24753                           	opt stack 0
 24754                           tosu	equ	0xFFF
 24755                           tosh	equ	0xFFE
 24756                           tosl	equ	0xFFD
 24757                           pclath	equ	0xFFA
 24758                           tblptru	equ	0xFF8
 24759                           tblptrh	equ	0xFF7
 24760                           tblptrl	equ	0xFF6
 24761                           tablat	equ	0xFF5
 24762                           prodh	equ	0xFF4
 24763                           prodl	equ	0xFF3
 24764                           intcon	equ	0xFF2
 24765                           intcon2	equ	0xFF1
 24766                           intcon3	equ	0xFF0
 24767                           indf0	equ	0xFEF
 24768                           postinc0	equ	0xFEE
 24769                           fsr0h	equ	0xFEA
 24770                           fsr0l	equ	0xFE9
 24771                           wreg	equ	0xFE8
 24772                           postinc1	equ	0xFE6
 24773                           postdec1	equ	0xFE5
 24774                           plusw1	equ	0xFE3
 24775                           fsr1h	equ	0xFE2
 24776                           fsr1l	equ	0xFE1
 24777                           indf2	equ	0xFDF
 24778                           postinc2	equ	0xFDE
 24779                           postdec2	equ	0xFDD
 24780                           plusw2	equ	0xFDB
 24781                           fsr2h	equ	0xFDA
 24782                           fsr2l	equ	0xFD9
 24783                           status	equ	0xFD8
 24784                           
 24785 ;; *************** function _RADIO_SetFrequencyHopPeriod *****************
 24786 ;; Defined at:
 24787 ;;		line 1550 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24788 ;; Parameters:    Size  Location     Type
 24789 ;;  frequencyHop    2    4[BANK0 ] unsigned int 
 24790 ;; Auto vars:     Size  Location     Type
 24791 ;;		None
 24792 ;; Return value:  Size  Location     Type
 24793 ;;                  1    wreg      void 
 24794 ;; Registers used:
 24795 ;;		None
 24796 ;; Tracked objects:
 24797 ;;		On entry : F/0
 24798 ;;		On exit  : F/0
 24799 ;;		Unchanged: F/0
 24800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24801 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24804 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24805 ;;Total ram usage:        2 bytes
 24806 ;; Hardware stack levels used:    1
 24807 ;; Hardware stack levels required when called:    7
 24808 ;; This function calls:
 24809 ;;		Nothing
 24810 ;; This function is called by:
 24811 ;;		_ConfigureRadio
 24812 ;; This function uses a non-reentrant model
 24813 ;;
 24814                           
 24815                           	psect	text130
 24816  007764                     __ptext130:
 24817                           	opt stack 0
 24818  007764                     _RADIO_SetFrequencyHopPeriod:
 24819                           	opt stack 18
 24820                           
 24821                           ; BSR set to: 0
 24822                           ;radio_driver_SX1276.c: 1552: RadioConfiguration.frequencyHopPeriod = frequencyHopPeriod
      +                          ;
 24823                           
 24824                           ;incstack = 0
 24825  007764  C064  F193         	movff	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod,_RadioConfiguration+30
 24826  007768  C065  F194         	movff	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod+1,_RadioConfiguration+31
 24827                           
 24828                           ; BSR set to: 0
 24829  00776C  0012               	return		;funcret
 24830  00776E                     __end_of_RADIO_SetFrequencyHopPeriod:
 24831                           	opt stack 0
 24832                           tosu	equ	0xFFF
 24833                           tosh	equ	0xFFE
 24834                           tosl	equ	0xFFD
 24835                           pclath	equ	0xFFA
 24836                           tblptru	equ	0xFF8
 24837                           tblptrh	equ	0xFF7
 24838                           tblptrl	equ	0xFF6
 24839                           tablat	equ	0xFF5
 24840                           prodh	equ	0xFF4
 24841                           prodl	equ	0xFF3
 24842                           intcon	equ	0xFF2
 24843                           intcon2	equ	0xFF1
 24844                           intcon3	equ	0xFF0
 24845                           indf0	equ	0xFEF
 24846                           postinc0	equ	0xFEE
 24847                           fsr0h	equ	0xFEA
 24848                           fsr0l	equ	0xFE9
 24849                           wreg	equ	0xFE8
 24850                           postinc1	equ	0xFE6
 24851                           postdec1	equ	0xFE5
 24852                           plusw1	equ	0xFE3
 24853                           fsr1h	equ	0xFE2
 24854                           fsr1l	equ	0xFE1
 24855                           indf2	equ	0xFDF
 24856                           postinc2	equ	0xFDE
 24857                           postdec2	equ	0xFDD
 24858                           plusw2	equ	0xFDB
 24859                           fsr2h	equ	0xFDA
 24860                           fsr2l	equ	0xFD9
 24861                           status	equ	0xFD8
 24862                           
 24863 ;; *************** function _RADIO_SetFSKSyncWord *****************
 24864 ;; Defined at:
 24865 ;;		line 1624 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24866 ;; Parameters:    Size  Location     Type
 24867 ;;  syncWordLen     1    wreg     unsigned char 
 24868 ;;  syncWord        2   14[BANK0 ] PTR unsigned char 
 24869 ;;		 -> FskSyncWordBuff(3), 
 24870 ;; Auto vars:     Size  Location     Type
 24871 ;;  syncWordLen     1   16[BANK0 ] unsigned char 
 24872 ;; Return value:  Size  Location     Type
 24873 ;;                  1    wreg      void 
 24874 ;; Registers used:
 24875 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24876 ;; Tracked objects:
 24877 ;;		On entry : F/0
 24878 ;;		On exit  : F/0
 24879 ;;		Unchanged: 0/0
 24880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24881 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24882 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24884 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24885 ;;Total ram usage:        3 bytes
 24886 ;; Hardware stack levels used:    1
 24887 ;; Hardware stack levels required when called:    8
 24888 ;; This function calls:
 24889 ;;		_memcpy
 24890 ;; This function is called by:
 24891 ;;		_ConfigureRadio
 24892 ;; This function uses a non-reentrant model
 24893 ;;
 24894                           
 24895                           	psect	text131
 24896  0070EC                     __ptext131:
 24897                           	opt stack 0
 24898  0070EC                     _RADIO_SetFSKSyncWord:
 24899                           	opt stack 17
 24900                           
 24901                           ; BSR set to: 0
 24902                           ;incstack = 0
 24903                           ;RADIO_SetFSKSyncWord@syncWordLen stored from wreg
 24904  0070EC  6F70               	movwf	RADIO_SetFSKSyncWord@syncWordLen& (0+255),b
 24905                           
 24906                           ;radio_driver_SX1276.c: 1626: if (syncWordLen > 8)
 24907  0070EE  0E08               	movlw	8
 24908  0070F0  0100               	movlb	0	; () banked
 24909  0070F2  6570               	cpfsgt	RADIO_SetFSKSyncWord@syncWordLen& (0+255),b
 24910  0070F4  D001               	goto	l12084
 24911                           
 24912                           ; BSR set to: 0
 24913                           ;radio_driver_SX1276.c: 1627: {
 24914                           ;radio_driver_SX1276.c: 1628: syncWordLen = 8;
 24915  0070F6  6F70               	movwf	RADIO_SetFSKSyncWord@syncWordLen& (0+255),b
 24916  0070F8                     l12084:
 24917                           
 24918                           ; BSR set to: 0
 24919                           ;radio_driver_SX1276.c: 1629: }
 24920                           ;radio_driver_SX1276.c: 1630: memcpy(RadioConfiguration.syncWord, syncWord, syncWordLen)
      +                          ;
 24921  0070F8  0E84               	movlw	low (_RadioConfiguration+15)
 24922  0070FA  6F64               	movwf	memcpy@d1& (0+255),b
 24923  0070FC  0E01               	movlw	high (_RadioConfiguration+15)
 24924  0070FE  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 24925  007100  C06E  F066         	movff	RADIO_SetFSKSyncWord@syncWord,memcpy@s1
 24926  007104  C06F  F067         	movff	RADIO_SetFSKSyncWord@syncWord+1,memcpy@s1+1
 24927  007108  C070  F068         	movff	RADIO_SetFSKSyncWord@syncWordLen,memcpy@n
 24928  00710C  6B69               	clrf	(memcpy@n+1)& (0+255),b
 24929  00710E  ECCA  F033         	call	_memcpy	;wreg free
 24930                           
 24931                           ; BSR set to: 0
 24932                           ;radio_driver_SX1276.c: 1631: RadioConfiguration.syncWordLen = syncWordLen;
 24933  007112  C070  F18C         	movff	RADIO_SetFSKSyncWord@syncWordLen,_RadioConfiguration+23
 24934                           
 24935                           ; BSR set to: 0
 24936  007116  0012               	return		;funcret
 24937  007118                     __end_of_RADIO_SetFSKSyncWord:
 24938                           	opt stack 0
 24939                           tosu	equ	0xFFF
 24940                           tosh	equ	0xFFE
 24941                           tosl	equ	0xFFD
 24942                           pclath	equ	0xFFA
 24943                           tblptru	equ	0xFF8
 24944                           tblptrh	equ	0xFF7
 24945                           tblptrl	equ	0xFF6
 24946                           tablat	equ	0xFF5
 24947                           prodh	equ	0xFF4
 24948                           prodl	equ	0xFF3
 24949                           intcon	equ	0xFF2
 24950                           intcon2	equ	0xFF1
 24951                           intcon3	equ	0xFF0
 24952                           indf0	equ	0xFEF
 24953                           postinc0	equ	0xFEE
 24954                           fsr0h	equ	0xFEA
 24955                           fsr0l	equ	0xFE9
 24956                           wreg	equ	0xFE8
 24957                           postinc1	equ	0xFE6
 24958                           postdec1	equ	0xFE5
 24959                           plusw1	equ	0xFE3
 24960                           fsr1h	equ	0xFE2
 24961                           fsr1l	equ	0xFE1
 24962                           indf2	equ	0xFDF
 24963                           postinc2	equ	0xFDE
 24964                           postdec2	equ	0xFDD
 24965                           plusw2	equ	0xFDB
 24966                           fsr2h	equ	0xFDA
 24967                           fsr2l	equ	0xFD9
 24968                           status	equ	0xFD8
 24969                           
 24970 ;; *************** function _RADIO_SetChannelFrequency *****************
 24971 ;; Defined at:
 24972 ;;		line 1444 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24973 ;; Parameters:    Size  Location     Type
 24974 ;;  frequency       4    4[BANK0 ] unsigned long 
 24975 ;; Auto vars:     Size  Location     Type
 24976 ;;		None
 24977 ;; Return value:  Size  Location     Type
 24978 ;;                  2    4[BANK0 ] enum E18752
 24979 ;; Registers used:
 24980 ;;		wreg, status,2, status,0
 24981 ;; Tracked objects:
 24982 ;;		On entry : 0/0
 24983 ;;		On exit  : F/0
 24984 ;;		Unchanged: 0/0
 24985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24986 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24989 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24990 ;;Total ram usage:        4 bytes
 24991 ;; Hardware stack levels used:    1
 24992 ;; Hardware stack levels required when called:    7
 24993 ;; This function calls:
 24994 ;;		Nothing
 24995 ;; This function is called by:
 24996 ;;		_ConfigureRadio
 24997 ;; This function uses a non-reentrant model
 24998 ;;
 24999                           
 25000                           	psect	text132
 25001  005D78                     __ptext132:
 25002                           	opt stack 0
 25003  005D78                     _RADIO_SetChannelFrequency:
 25004                           	opt stack 18
 25005                           
 25006                           ;radio_driver_SX1276.c: 1446: if ( (frequency >= 137000000) && (frequency <= 175000000) 
      +                          ||
 25007                           ;radio_driver_SX1276.c: 1447: (frequency >= 410000000) && (frequency <= 525000000) ||
 25008                           ;radio_driver_SX1276.c: 1448: (frequency >= 862000000) && (frequency <= 1020000000) )
 25009                           
 25010                           ; BSR set to: 0
 25011                           ;incstack = 0
 25012  005D78  0E40               	movlw	64
 25013  005D7A  0100               	movlb	0	; () banked
 25014  005D7C  5D64               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 25015  005D7E  0E74               	movlw	116
 25016  005D80  5965               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 25017  005D82  0E2A               	movlw	42
 25018  005D84  5966               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 25019  005D86  0E08               	movlw	8
 25020  005D88  5967               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 25021  005D8A  E309               	bnc	l12064
 25022                           
 25023                           ; BSR set to: 0
 25024  005D8C  0EC1               	movlw	193
 25025  005D8E  5D64               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 25026  005D90  0E49               	movlw	73
 25027  005D92  5965               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 25028  005D94  0E6E               	movlw	110
 25029  005D96  5966               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 25030  005D98  0E0A               	movlw	10
 25031  005D9A  5967               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 25032  005D9C  E325               	bnc	l662
 25033  005D9E                     l12064:
 25034                           
 25035                           ; BSR set to: 0
 25036  005D9E  0E80               	movlw	128
 25037  005DA0  5D64               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 25038  005DA2  0E1A               	movlw	26
 25039  005DA4  5965               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 25040  005DA6  0E70               	movlw	112
 25041  005DA8  5966               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 25042  005DAA  0E18               	movlw	24
 25043  005DAC  5967               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 25044  005DAE  E309               	bnc	l12068
 25045                           
 25046                           ; BSR set to: 0
 25047  005DB0  0E41               	movlw	65
 25048  005DB2  5D64               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 25049  005DB4  0EDD               	movlw	221
 25050  005DB6  5965               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 25051  005DB8  0E4A               	movlw	74
 25052  005DBA  5966               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 25053  005DBC  0E1F               	movlw	31
 25054  005DBE  5967               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 25055  005DC0  E313               	bnc	l662
 25056  005DC2                     l12068:
 25057                           
 25058                           ; BSR set to: 0
 25059  005DC2  0E80               	movlw	128
 25060  005DC4  5D64               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 25061  005DC6  0E13               	movlw	19
 25062  005DC8  5965               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 25063  005DCA  0E61               	movlw	97
 25064  005DCC  5966               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 25065  005DCE  0E33               	movlw	51
 25066  005DD0  5967               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 25067  005DD2  A0D8               	btfss	status,0,c
 25068  005DD4  0012               	return	
 25069                           
 25070                           ; BSR set to: 0
 25071  005DD6  0564               	decf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 25072  005DD8  0EF7               	movlw	247
 25073  005DDA  5965               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 25074  005DDC  0ECB               	movlw	203
 25075  005DDE  5966               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 25076  005DE0  0E3C               	movlw	60
 25077  005DE2  5967               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 25078  005DE4  B0D8               	btfsc	status,0,c
 25079  005DE6  0012               	return	
 25080  005DE8                     l662:
 25081                           
 25082                           ; BSR set to: 0
 25083                           ;radio_driver_SX1276.c: 1449: {
 25084                           ;radio_driver_SX1276.c: 1450: RadioConfiguration.frequency = frequency;
 25085  005DE8  C064  F175         	movff	RADIO_SetChannelFrequency@frequency,_RadioConfiguration
 25086  005DEC  C065  F176         	movff	RADIO_SetChannelFrequency@frequency+1,_RadioConfiguration+1
 25087  005DF0  C066  F177         	movff	RADIO_SetChannelFrequency@frequency+2,_RadioConfiguration+2
 25088  005DF4  C067  F178         	movff	RADIO_SetChannelFrequency@frequency+3,_RadioConfiguration+3
 25089                           
 25090                           ; BSR set to: 0
 25091                           
 25092                           ;radio_driver_SX1276.c: 1451: return ERR_NONE;
 25093                           ;	Return value of _RADIO_SetChannelFrequency is never used
 25094  005DF8  0012               	return		;funcret
 25095  005DFA                     __end_of_RADIO_SetChannelFrequency:
 25096                           	opt stack 0
 25097                           tosu	equ	0xFFF
 25098                           tosh	equ	0xFFE
 25099                           tosl	equ	0xFFD
 25100                           pclath	equ	0xFFA
 25101                           tblptru	equ	0xFF8
 25102                           tblptrh	equ	0xFF7
 25103                           tblptrl	equ	0xFF6
 25104                           tablat	equ	0xFF5
 25105                           prodh	equ	0xFF4
 25106                           prodl	equ	0xFF3
 25107                           intcon	equ	0xFF2
 25108                           intcon2	equ	0xFF1
 25109                           intcon3	equ	0xFF0
 25110                           indf0	equ	0xFEF
 25111                           postinc0	equ	0xFEE
 25112                           fsr0h	equ	0xFEA
 25113                           fsr0l	equ	0xFE9
 25114                           wreg	equ	0xFE8
 25115                           postinc1	equ	0xFE6
 25116                           postdec1	equ	0xFE5
 25117                           plusw1	equ	0xFE3
 25118                           fsr1h	equ	0xFE2
 25119                           fsr1l	equ	0xFE1
 25120                           indf2	equ	0xFDF
 25121                           postinc2	equ	0xFDE
 25122                           postdec2	equ	0xFDD
 25123                           plusw2	equ	0xFDB
 25124                           fsr2h	equ	0xFDA
 25125                           fsr2l	equ	0xFD9
 25126                           status	equ	0xFD8
 25127                           
 25128 ;; *************** function _RADIO_SetBandwidth *****************
 25129 ;; Defined at:
 25130 ;;		line 1495 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 25131 ;; Parameters:    Size  Location     Type
 25132 ;;  bandwidth       1    wreg     enum E18716
 25133 ;; Auto vars:     Size  Location     Type
 25134 ;;  bandwidth       1    4[BANK0 ] enum E18716
 25135 ;; Return value:  Size  Location     Type
 25136 ;;                  1    wreg      void 
 25137 ;; Registers used:
 25138 ;;		wreg
 25139 ;; Tracked objects:
 25140 ;;		On entry : F/0
 25141 ;;		On exit  : 0/0
 25142 ;;		Unchanged: 0/0
 25143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 25144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25145 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25147 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25148 ;;Total ram usage:        1 bytes
 25149 ;; Hardware stack levels used:    1
 25150 ;; Hardware stack levels required when called:    7
 25151 ;; This function calls:
 25152 ;;		Nothing
 25153 ;; This function is called by:
 25154 ;;		_ConfigureRadio
 25155 ;; This function uses a non-reentrant model
 25156 ;;
 25157                           
 25158                           	psect	text133
 25159  0077B2                     __ptext133:
 25160                           	opt stack 0
 25161  0077B2                     _RADIO_SetBandwidth:
 25162                           	opt stack 18
 25163                           
 25164                           ; BSR set to: 0
 25165                           ;incstack = 0
 25166                           ;RADIO_SetBandwidth@bandwidth stored from wreg
 25167  0077B2  6F64               	movwf	RADIO_SetBandwidth@bandwidth& (0+255),b
 25168                           
 25169                           ;radio_driver_SX1276.c: 1497: RadioConfiguration.bandWidth = bandwidth;
 25170  0077B4  C064  F18F         	movff	RADIO_SetBandwidth@bandwidth,_RadioConfiguration+26
 25171  0077B8  0012               	return		;funcret
 25172  0077BA                     __end_of_RADIO_SetBandwidth:
 25173                           	opt stack 0
 25174                           tosu	equ	0xFFF
 25175                           tosh	equ	0xFFE
 25176                           tosl	equ	0xFFD
 25177                           pclath	equ	0xFFA
 25178                           tblptru	equ	0xFF8
 25179                           tblptrh	equ	0xFF7
 25180                           tblptrl	equ	0xFF6
 25181                           tablat	equ	0xFF5
 25182                           prodh	equ	0xFF4
 25183                           prodl	equ	0xFF3
 25184                           intcon	equ	0xFF2
 25185                           intcon2	equ	0xFF1
 25186                           intcon3	equ	0xFF0
 25187                           indf0	equ	0xFEF
 25188                           postinc0	equ	0xFEE
 25189                           fsr0h	equ	0xFEA
 25190                           fsr0l	equ	0xFE9
 25191                           wreg	equ	0xFE8
 25192                           postinc1	equ	0xFE6
 25193                           postdec1	equ	0xFE5
 25194                           plusw1	equ	0xFE3
 25195                           fsr1h	equ	0xFE2
 25196                           fsr1l	equ	0xFE1
 25197                           indf2	equ	0xFDF
 25198                           postinc2	equ	0xFDE
 25199                           postdec2	equ	0xFDD
 25200                           plusw2	equ	0xFDB
 25201                           fsr2h	equ	0xFDA
 25202                           fsr2l	equ	0xFD9
 25203                           status	equ	0xFD8
 25204                           
 25205 ;; *************** function _RADIO_Transmit *****************
 25206 ;; Defined at:
 25207 ;;		line 786 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 25208 ;; Parameters:    Size  Location     Type
 25209 ;;  buffer          2   52[BANK0 ] PTR unsigned char 
 25210 ;;		 -> macBuffer(271), 
 25211 ;;  bufferLen       1   54[BANK0 ] unsigned char 
 25212 ;; Auto vars:     Size  Location     Type
 25213 ;;  i               1   68[BANK0 ] unsigned char 
 25214 ;;  regValue        1   67[BANK0 ] unsigned char 
 25215 ;; Return value:  Size  Location     Type
 25216 ;;                  2   52[BANK0 ] enum E18752
 25217 ;; Registers used:
 25218 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25219 ;; Tracked objects:
 25220 ;;		On entry : F/0
 25221 ;;		On exit  : F/0
 25222 ;;		Unchanged: 0/0
 25223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 25224 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25225 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25226 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25227 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25228 ;;Total ram usage:       17 bytes
 25229 ;; Hardware stack levels used:    1
 25230 ;; Hardware stack levels required when called:   12
 25231 ;; This function calls:
 25232 ;;		_HALSPICSAssert
 25233 ;;		_HALSPICSDeassert
 25234 ;;		_HALSPISend
 25235 ;;		_RADIO_RegisterRead
 25236 ;;		_RADIO_RegisterWrite
 25237 ;;		_RADIO_WriteConfiguration
 25238 ;;		_RADIO_WriteMode
 25239 ;;		_SwTimerSetTimeout
 25240 ;;		_SwTimerStart
 25241 ;;		_SwTimerStop
 25242 ;;		___lldiv
 25243 ;; This function is called by:
 25244 ;;		_LORAWAN_RxTimeout
 25245 ;;		_LORAWAN_Join
 25246 ;;		_LORAWAN_Send
 25247 ;;		_AckRetransmissionCallback
 25248 ;;		_UnconfirmedTransmissionCallback
 25249 ;; This function uses a non-reentrant model
 25250 ;;
 25251                           
 25252                           	psect	text134
 25253  002FF2                     __ptext134:
 25254                           	opt stack 0
 25255  002FF2                     _RADIO_Transmit:
 25256                           	opt stack 16
 25257                           
 25258                           ; BSR set to: 0
 25259                           ;radio_driver_SX1276.c: 788: uint8_t regValue;
 25260                           ;radio_driver_SX1276.c: 789: uint8_t i;
 25261                           ;radio_driver_SX1276.c: 791: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 25262                           
 25263                           ;incstack = 0
 25264  002FF2  0101               	movlb	1	; () banked
 25265  002FF4  A598               	btfss	(_RadioConfiguration+35)& (0+255),2,b
 25266  002FF6  D006               	goto	l13068
 25267                           
 25268                           ; BSR set to: 1
 25269                           ;radio_driver_SX1276.c: 792: {
 25270                           ;radio_driver_SX1276.c: 793: return ERR_BUFFER_LOCKED;
 25271  002FF8  0E80               	movlw	128
 25272  002FFA  0100               	movlb	0	; () banked
 25273  002FFC  6F95               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 25274  002FFE  0E03               	movlw	3
 25275  003000  6F94               	movwf	?_RADIO_Transmit& (0+255),b
 25276  003002  0C03               	retlw	3
 25277  003004                     l13068:
 25278                           
 25279                           ; BSR set to: 1
 25280                           ;radio_driver_SX1276.c: 794: }
 25281                           ;radio_driver_SX1276.c: 796: if ((RadioConfiguration.flags & ((1 << (0)) | (1 << (1)))) 
      +                          != 0)
 25282  003004  C198  F097         	movff	_RadioConfiguration+35,??_RADIO_Transmit
 25283  003008  0E03               	movlw	3
 25284  00300A  0100               	movlb	0	; () banked
 25285  00300C  1797               	andwf	??_RADIO_Transmit& (0+255),f,b
 25286  00300E  E005               	bz	l13074
 25287                           
 25288                           ; BSR set to: 0
 25289                           ;radio_driver_SX1276.c: 797: {
 25290                           ;radio_driver_SX1276.c: 798: return ERR_RADIO_BUSY;
 25291  003010  0E80               	movlw	128
 25292  003012  6F95               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 25293  003014  0E04               	movlw	4
 25294  003016  6F94               	movwf	?_RADIO_Transmit& (0+255),b
 25295  003018  0C04               	retlw	4
 25296  00301A                     l13074:
 25297                           
 25298                           ; BSR set to: 0
 25299                           ;radio_driver_SX1276.c: 799: }
 25300                           ;radio_driver_SX1276.c: 801: if ((MODULATION_FSK == RadioConfiguration.modulation) && (b
      +                          ufferLen > 64))
 25301  00301A  0101               	movlb	1	; () banked
 25302  00301C  518D               	movf	(_RadioConfiguration+24)& (0+255),w,b
 25303  00301E  E109               	bnz	l13082
 25304                           
 25305                           ; BSR set to: 1
 25306  003020  0E40               	movlw	64
 25307  003022  0100               	movlb	0	; () banked
 25308  003024  6596               	cpfsgt	RADIO_Transmit@bufferLen& (0+255),b
 25309  003026  D005               	goto	l13082
 25310                           
 25311                           ; BSR set to: 0
 25312                           ;radio_driver_SX1276.c: 802: {
 25313                           ;radio_driver_SX1276.c: 803: return ERR_DATA_SIZE;
 25314  003028  0E80               	movlw	128
 25315  00302A  6F95               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 25316  00302C  0E02               	movlw	2
 25317  00302E  6F94               	movwf	?_RADIO_Transmit& (0+255),b
 25318  003030  0C02               	retlw	2
 25319  003032                     l13082:
 25320                           
 25321                           ;radio_driver_SX1276.c: 804: }
 25322                           ;radio_driver_SX1276.c: 806: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 25323  003032  0101               	movlb	1	; () banked
 25324  003034  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 25325  003036  EC7F  F03A         	call	_SwTimerStop
 25326                           
 25327                           ;radio_driver_SX1276.c: 810: RADIO_WriteConfiguration(4);
 25328  00303A  0E00               	movlw	0
 25329  00303C  6F7E               	movwf	(RADIO_WriteConfiguration@symbolTimeout+1)& (0+255),b
 25330  00303E  0E04               	movlw	4
 25331  003040  6F7D               	movwf	RADIO_WriteConfiguration@symbolTimeout& (0+255),b
 25332  003042  ECD9  F009         	call	_RADIO_WriteConfiguration	;wreg free
 25333                           
 25334                           ;radio_driver_SX1276.c: 812: if (MODULATION_LORA == RadioConfiguration.modulation)
 25335  003046  0101               	movlb	1	; () banked
 25336  003048  058D               	decf	(_RadioConfiguration+24)& (0+255),w,b
 25337  00304A  E123               	bnz	l13100
 25338                           
 25339                           ; BSR set to: 1
 25340                           ;radio_driver_SX1276.c: 813: {
 25341                           ;radio_driver_SX1276.c: 814: RADIO_RegisterWrite(0x22, bufferLen);
 25342  00304C  C096  F066         	movff	RADIO_Transmit@bufferLen,RADIO_RegisterWrite@value
 25343  003050  0E22               	movlw	34
 25344  003052  EC17  F03A         	call	_RADIO_RegisterWrite
 25345                           
 25346                           ;radio_driver_SX1276.c: 817: regValue = RADIO_RegisterRead(0x0A);
 25347  003056  0E0A               	movlw	10
 25348  003058  EC30  F039         	call	_RADIO_RegisterRead
 25349  00305C  6FA3               	movwf	RADIO_Transmit@regValue& (0+255),b
 25350                           
 25351                           ; BSR set to: 0
 25352                           ;radio_driver_SX1276.c: 818: regValue &= ~0x0F;
 25353  00305E  0EF0               	movlw	240
 25354  003060  17A3               	andwf	RADIO_Transmit@regValue& (0+255),f,b
 25355                           
 25356                           ; BSR set to: 0
 25357                           ;radio_driver_SX1276.c: 819: regValue |= 0x08;
 25358  003062  87A3               	bsf	RADIO_Transmit@regValue& (0+255),3,b
 25359                           
 25360                           ; BSR set to: 0
 25361                           ;radio_driver_SX1276.c: 820: RADIO_RegisterWrite(0x0A, regValue);
 25362  003064  C0A3  F066         	movff	RADIO_Transmit@regValue,RADIO_RegisterWrite@value
 25363  003068  0E0A               	movlw	10
 25364  00306A  EC17  F03A         	call	_RADIO_RegisterWrite
 25365                           
 25366                           ;radio_driver_SX1276.c: 824: RADIO_RegisterWrite(0x40, 0x40);
 25367  00306E  0E40               	movlw	64
 25368  003070  0100               	movlb	0	; () banked
 25369  003072  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 25370  003074  EC17  F03A         	call	_RADIO_RegisterWrite
 25371                           
 25372                           ;radio_driver_SX1276.c: 825: RADIO_RegisterWrite(0x41, 0x00);
 25373  003078  0100               	movlb	0	; () banked
 25374  00307A  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 25375  00307C  0E41               	movlw	65
 25376  00307E  EC17  F03A         	call	_RADIO_RegisterWrite
 25377                           
 25378                           ;radio_driver_SX1276.c: 827: RADIO_WriteMode(MODE_STANDBY, RadioConfiguration.modulation
      +                          , 1);
 25379  003082  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 25380  003086  0E01               	movlw	1
 25381  003088  0100               	movlb	0	; () banked
 25382  00308A  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 25383  00308C  EC8F  F028         	call	_RADIO_WriteMode
 25384                           
 25385                           ;radio_driver_SX1276.c: 828: }
 25386  003090  D00A               	goto	l13102
 25387  003092                     l13100:
 25388                           
 25389                           ; BSR set to: 1
 25390                           ;radio_driver_SX1276.c: 829: else
 25391                           ;radio_driver_SX1276.c: 830: {
 25392                           ;radio_driver_SX1276.c: 832: RADIO_RegisterWrite(0x40, 0x00);
 25393  003092  0100               	movlb	0	; () banked
 25394  003094  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 25395  003096  0E40               	movlw	64
 25396  003098  EC17  F03A         	call	_RADIO_RegisterWrite
 25397                           
 25398                           ;radio_driver_SX1276.c: 833: RADIO_RegisterWrite(0x41, 0x00);
 25399  00309C  0100               	movlb	0	; () banked
 25400  00309E  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 25401  0030A0  0E41               	movlw	65
 25402  0030A2  EC17  F03A         	call	_RADIO_RegisterWrite
 25403  0030A6                     l13102:
 25404                           
 25405                           ;radio_driver_SX1276.c: 834: }
 25406                           ;radio_driver_SX1276.c: 836: if (MODULATION_FSK == RadioConfiguration.modulation)
 25407  0030A6  0101               	movlb	1	; () banked
 25408  0030A8  518D               	movf	(_RadioConfiguration+24)& (0+255),w,b
 25409  0030AA  E105               	bnz	l13106
 25410                           
 25411                           ; BSR set to: 1
 25412                           ;radio_driver_SX1276.c: 837: {
 25413                           ;radio_driver_SX1276.c: 839: RADIO_RegisterWrite(0x00, bufferLen);
 25414  0030AC  C096  F066         	movff	RADIO_Transmit@bufferLen,RADIO_RegisterWrite@value
 25415  0030B0  0E00               	movlw	0
 25416  0030B2  EC17  F03A         	call	_RADIO_RegisterWrite
 25417  0030B6                     l13106:
 25418                           
 25419                           ;radio_driver_SX1276.c: 840: }
 25420                           ;radio_driver_SX1276.c: 842: HALSPICSAssert();
 25421  0030B6  EC01  F03C         	call	_HALSPICSAssert	;wreg free
 25422                           
 25423                           ;radio_driver_SX1276.c: 843: HALSPISend(0x80 | 0x00);
 25424  0030BA  0E80               	movlw	128
 25425  0030BC  ECBC  F03B         	call	_HALSPISend
 25426                           
 25427                           ;radio_driver_SX1276.c: 845: for (i = 0; i < bufferLen; i++)
 25428  0030C0  0100               	movlb	0	; () banked
 25429  0030C2  6BA4               	clrf	RADIO_Transmit@i& (0+255),b
 25430  0030C4  D00B               	goto	l13116
 25431  0030C6                     l13112:
 25432                           
 25433                           ; BSR set to: 0
 25434                           ;radio_driver_SX1276.c: 846: {
 25435                           ;radio_driver_SX1276.c: 847: HALSPISend(buffer[i]);
 25436  0030C6  51A4               	movf	RADIO_Transmit@i& (0+255),w,b
 25437  0030C8  2594               	addwf	RADIO_Transmit@buffer& (0+255),w,b
 25438  0030CA  6ED9               	movwf	fsr2l,c
 25439  0030CC  0E00               	movlw	0
 25440  0030CE  2195               	addwfc	(RADIO_Transmit@buffer+1)& (0+255),w,b
 25441  0030D0  6EDA               	movwf	fsr2h,c
 25442  0030D2  50DF               	movf	indf2,w,c
 25443  0030D4  ECBC  F03B         	call	_HALSPISend
 25444  0030D8  0100               	movlb	0	; () banked
 25445  0030DA  2BA4               	incf	RADIO_Transmit@i& (0+255),f,b
 25446  0030DC                     l13116:
 25447                           
 25448                           ; BSR set to: 0
 25449  0030DC  5196               	movf	RADIO_Transmit@bufferLen& (0+255),w,b
 25450  0030DE  5DA4               	subwf	RADIO_Transmit@i& (0+255),w,b
 25451  0030E0  E3F2               	bnc	l13112
 25452                           
 25453                           ; BSR set to: 0
 25454                           ;radio_driver_SX1276.c: 848: }
 25455                           ;radio_driver_SX1276.c: 849: HALSPICSDeassert();
 25456  0030E2  ECFF  F03B         	call	_HALSPICSDeassert	;wreg free
 25457                           
 25458                           ;radio_driver_SX1276.c: 851: RadioConfiguration.flags |= (1 << (0));
 25459  0030E6  0101               	movlb	1	; () banked
 25460  0030E8  8198               	bsf	(_RadioConfiguration+35)& (0+255),0,b
 25461                           
 25462                           ; BSR set to: 1
 25463                           ;radio_driver_SX1276.c: 852: RadioConfiguration.flags &= ~((1 << (4)) | (1 << (3)));
 25464  0030EA  0EE7               	movlw	231
 25465  0030EC  1798               	andwf	(_RadioConfiguration+35)& (0+255),f,b
 25466                           
 25467                           ; BSR set to: 1
 25468                           ;radio_driver_SX1276.c: 857: RADIO_WriteMode(MODE_TX, RadioConfiguration.modulation, 0);
 25469  0030EE  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 25470  0030F2  0E00               	movlw	0
 25471  0030F4  0100               	movlb	0	; () banked
 25472  0030F6  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 25473  0030F8  0E03               	movlw	3
 25474  0030FA  EC8F  F028         	call	_RADIO_WriteMode
 25475                           
 25476                           ;radio_driver_SX1276.c: 862: SwTimerSetTimeout(RadioConfiguration.timeOnAirTimerId, ((((
      +                          uint32_t)20000)) < 0x000FFFFFUL ? ( (((uint32_t)(((uint32_t)20000))) << (12)) / 125UL ) 
      +                          : ( (((uint32_t)(((uint32_t)20000))) / 125UL) << (12) ) ));
 25477  0030FE  0100               	movlb	0	; () banked
 25478  003100  6B71               	clrf	SwTimerSetTimeout@timeout& (0+255),b
 25479  003102  6B72               	clrf	(SwTimerSetTimeout@timeout+1)& (0+255),b
 25480  003104  0E0A               	movlw	10
 25481  003106  6F73               	movwf	(SwTimerSetTimeout@timeout+2)& (0+255),b
 25482  003108  6B74               	clrf	(SwTimerSetTimeout@timeout+3)& (0+255),b
 25483  00310A  0101               	movlb	1	; () banked
 25484  00310C  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 25485  00310E  EC44  F036         	call	_SwTimerSetTimeout
 25486                           
 25487                           ; BSR set to: 0
 25488                           ;radio_driver_SX1276.c: 863: SwTimerStart(RadioConfiguration.timeOnAirTimerId);
 25489  003112  0101               	movlb	1	; () banked
 25490  003114  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 25491  003116  EC35  F02E         	call	_SwTimerStart
 25492                           
 25493                           ; BSR set to: 0
 25494                           ;radio_driver_SX1276.c: 865: if (0 != RadioConfiguration.watchdogTimerTimeout)
 25495  00311A  0101               	movlb	1	; () banked
 25496  00311C  519F               	movf	(_RadioConfiguration+42)& (0+255),w,b
 25497  00311E  11A0               	iorwf	(_RadioConfiguration+43)& (0+255),w,b
 25498  003120  11A1               	iorwf	(_RadioConfiguration+44)& (0+255),w,b
 25499  003122  11A2               	iorwf	(_RadioConfiguration+45)& (0+255),w,b
 25500  003124  E059               	bz	l13146
 25501                           
 25502                           ; BSR set to: 1
 25503                           ;radio_driver_SX1276.c: 866: {
 25504                           ;radio_driver_SX1276.c: 867: SwTimerSetTimeout(RadioConfiguration.watchdogTimerId, ((Rad
      +                          ioConfiguration.watchdogTimerTimeout) < 0x000FFFFFUL ? ( (((uint32_t)(RadioConfiguration
      +                          .watchdogTimerTimeout)) << (12)) / 125UL ) : ( (((uint32_t)(RadioConfiguration.watchdogT
      +                          imerTimeout)) /
 25505  003126  51A2               	movf	(_RadioConfiguration+45)& (0+255),w,b
 25506  003128  E106               	bnz	u14710
 25507  00312A  299F               	incf	(_RadioConfiguration+42)& (0+255),w,b
 25508  00312C  0EFF               	movlw	255
 25509  00312E  59A0               	subwfb	(_RadioConfiguration+43)& (0+255),w,b
 25510  003130  0E0F               	movlw	15
 25511  003132  59A1               	subwfb	(_RadioConfiguration+44)& (0+255),w,b
 25512  003134  E319               	bnc	l13140
 25513  003136                     u14710:
 25514                           
 25515                           ; BSR set to: 1
 25516  003136  C19F  F064         	movff	_RadioConfiguration+42,___lldiv@dividend
 25517  00313A  C1A0  F065         	movff	_RadioConfiguration+43,___lldiv@dividend+1
 25518  00313E  C1A1  F066         	movff	_RadioConfiguration+44,___lldiv@dividend+2
 25519  003142  C1A2  F067         	movff	_RadioConfiguration+45,___lldiv@dividend+3
 25520  003146  0E7D               	movlw	125
 25521  003148  0100               	movlb	0	; () banked
 25522  00314A  6F68               	movwf	___lldiv@divisor& (0+255),b
 25523  00314C  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 25524  00314E  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 25525  003150  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 25526  003152  EC35  F030         	call	___lldiv	;wreg free
 25527  003156  0E0C               	movlw	12
 25528  003158                     u14725:
 25529  003158  90D8               	bcf	status,0,c
 25530  00315A  3764               	rlcf	?___lldiv& (0+255),f,b
 25531  00315C  3765               	rlcf	(?___lldiv+1)& (0+255),f,b
 25532  00315E  3766               	rlcf	(?___lldiv+2)& (0+255),f,b
 25533  003160  3767               	rlcf	(?___lldiv+3)& (0+255),f,b
 25534  003162  2EE8               	decfsz	wreg,f,c
 25535  003164  D7F9               	goto	u14725
 25536  003166  D020               	goto	L15
 25537  003168                     l13140:
 25538                           
 25539                           ; BSR set to: 1
 25540  003168  C19F  F097         	movff	_RadioConfiguration+42,??_RADIO_Transmit
 25541  00316C  C1A0  F098         	movff	_RadioConfiguration+43,??_RADIO_Transmit+1
 25542  003170  C1A1  F099         	movff	_RadioConfiguration+44,??_RADIO_Transmit+2
 25543  003174  C1A2  F09A         	movff	_RadioConfiguration+45,??_RADIO_Transmit+3
 25544  003178  0E0C               	movlw	12
 25545  00317A                     u14735:
 25546  00317A  90D8               	bcf	status,0,c
 25547  00317C  0100               	movlb	0	; () banked
 25548  00317E  3797               	rlcf	??_RADIO_Transmit& (0+255),f,b
 25549  003180  3798               	rlcf	(??_RADIO_Transmit+1)& (0+255),f,b
 25550  003182  3799               	rlcf	(??_RADIO_Transmit+2)& (0+255),f,b
 25551  003184  379A               	rlcf	(??_RADIO_Transmit+3)& (0+255),f,b
 25552  003186  2EE8               	decfsz	wreg,f,c
 25553  003188  D7F8               	goto	u14735
 25554  00318A  C097  F064         	movff	??_RADIO_Transmit,___lldiv@dividend
 25555  00318E  C098  F065         	movff	??_RADIO_Transmit+1,___lldiv@dividend+1
 25556  003192  C099  F066         	movff	??_RADIO_Transmit+2,___lldiv@dividend+2
 25557  003196  C09A  F067         	movff	??_RADIO_Transmit+3,___lldiv@dividend+3
 25558  00319A  0E7D               	movlw	125
 25559  00319C  6F68               	movwf	___lldiv@divisor& (0+255),b
 25560  00319E  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 25561  0031A0  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 25562  0031A2  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 25563  0031A4  EC35  F030         	call	___lldiv	;wreg free
 25564  0031A8                     L15:
 25565  0031A8  C064  F09F         	movff	?___lldiv,_RADIO_Transmit$746
 25566  0031AC  C065  F0A0         	movff	?___lldiv+1,_RADIO_Transmit$746+1
 25567  0031B0  C066  F0A1         	movff	?___lldiv+2,_RADIO_Transmit$746+2
 25568  0031B4  C067  F0A2         	movff	?___lldiv+3,_RADIO_Transmit$746+3
 25569                           
 25570                           ; BSR set to: 0
 25571  0031B8  C09F  F071         	movff	_RADIO_Transmit$746,SwTimerSetTimeout@timeout
 25572  0031BC  C0A0  F072         	movff	_RADIO_Transmit$746+1,SwTimerSetTimeout@timeout+1
 25573  0031C0  C0A1  F073         	movff	_RADIO_Transmit$746+2,SwTimerSetTimeout@timeout+2
 25574  0031C4  C0A2  F074         	movff	_RADIO_Transmit$746+3,SwTimerSetTimeout@timeout+3
 25575  0031C8  0101               	movlb	1	; () banked
 25576  0031CA  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 25577  0031CC  EC44  F036         	call	_SwTimerSetTimeout
 25578                           
 25579                           ; BSR set to: 0
 25580                           ;radio_driver_SX1276.c: 868: SwTimerStart(RadioConfiguration.watchdogTimerId);
 25581  0031D0  0101               	movlb	1	; () banked
 25582  0031D2  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 25583  0031D4  EC35  F02E         	call	_SwTimerStart
 25584  0031D8                     l13146:
 25585                           
 25586                           ;radio_driver_SX1276.c: 869: }
 25587                           ;radio_driver_SX1276.c: 871: return ERR_NONE;
 25588  0031D8  0100               	movlb	0	; () banked
 25589  0031DA  6B94               	clrf	?_RADIO_Transmit& (0+255),b
 25590  0031DC  6B95               	clrf	(?_RADIO_Transmit+1)& (0+255),b
 25591                           
 25592                           ; BSR set to: 0
 25593  0031DE  0012               	return		;funcret
 25594  0031E0                     __end_of_RADIO_Transmit:
 25595                           	opt stack 0
 25596                           tosu	equ	0xFFF
 25597                           tosh	equ	0xFFE
 25598                           tosl	equ	0xFFD
 25599                           pclath	equ	0xFFA
 25600                           tblptru	equ	0xFF8
 25601                           tblptrh	equ	0xFF7
 25602                           tblptrl	equ	0xFF6
 25603                           tablat	equ	0xFF5
 25604                           prodh	equ	0xFF4
 25605                           prodl	equ	0xFF3
 25606                           intcon	equ	0xFF2
 25607                           intcon2	equ	0xFF1
 25608                           intcon3	equ	0xFF0
 25609                           indf0	equ	0xFEF
 25610                           postinc0	equ	0xFEE
 25611                           fsr0h	equ	0xFEA
 25612                           fsr0l	equ	0xFE9
 25613                           wreg	equ	0xFE8
 25614                           postinc1	equ	0xFE6
 25615                           postdec1	equ	0xFE5
 25616                           plusw1	equ	0xFE3
 25617                           fsr1h	equ	0xFE2
 25618                           fsr1l	equ	0xFE1
 25619                           indf2	equ	0xFDF
 25620                           postinc2	equ	0xFDE
 25621                           postdec2	equ	0xFDD
 25622                           plusw2	equ	0xFDB
 25623                           fsr2h	equ	0xFDA
 25624                           fsr2l	equ	0xFD9
 25625                           status	equ	0xFD8
 25626                           
 25627 ;; *************** function _RADIO_WriteConfiguration *****************
 25628 ;; Defined at:
 25629 ;;		line 533 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 25630 ;; Parameters:    Size  Location     Type
 25631 ;;  symbolTimeou    2   29[BANK0 ] unsigned int 
 25632 ;; Auto vars:     Size  Location     Type
 25633 ;;  tempValue       4   34[BANK0 ] unsigned long 
 25634 ;;  regValue        1   38[BANK0 ] unsigned char 
 25635 ;;  i               1   33[BANK0 ] unsigned char 
 25636 ;; Return value:  Size  Location     Type
 25637 ;;                  1    wreg      void 
 25638 ;; Registers used:
 25639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25640 ;; Tracked objects:
 25641 ;;		On entry : F/0
 25642 ;;		On exit  : 0/0
 25643 ;;		Unchanged: 0/0
 25644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 25645 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25646 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25647 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25648 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25649 ;;Total ram usage:       10 bytes
 25650 ;; Hardware stack levels used:    1
 25651 ;; Hardware stack levels required when called:   11
 25652 ;; This function calls:
 25653 ;;		_RADIO_RegisterRead
 25654 ;;		_RADIO_RegisterWrite
 25655 ;;		_RADIO_WriteFSKBitRate
 25656 ;;		_RADIO_WriteFSKFrequencyDeviation
 25657 ;;		_RADIO_WriteFrequency
 25658 ;;		_RADIO_WriteMode
 25659 ;;		_RADIO_WritePower
 25660 ;;		___lmul
 25661 ;; This function is called by:
 25662 ;;		_RADIO_Transmit
 25663 ;;		_RADIO_ReceiveStart
 25664 ;; This function uses a non-reentrant model
 25665 ;;
 25666                           
 25667                           	psect	text135
 25668  0013B2                     __ptext135:
 25669                           	opt stack 0
 25670  0013B2                     _RADIO_WriteConfiguration:
 25671                           	opt stack 16
 25672                           
 25673                           ; BSR set to: 0
 25674                           ;radio_driver_SX1276.c: 535: uint32_t tempValue;
 25675                           ;radio_driver_SX1276.c: 536: uint8_t regValue;
 25676                           ;radio_driver_SX1276.c: 537: uint8_t i;
 25677                           ;radio_driver_SX1276.c: 540: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation, 
      +                          0);
 25678                           
 25679                           ; BSR set to: 0
 25680                           ;incstack = 0
 25681  0013B2  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 25682  0013B6  0E00               	movlw	0
 25683  0013B8  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 25684  0013BA  EC8F  F028         	call	_RADIO_WriteMode
 25685                           
 25686                           ;radio_driver_SX1276.c: 541: RADIO_WriteFrequency(RadioConfiguration.frequency);
 25687  0013BE  C175  F071         	movff	_RadioConfiguration,RADIO_WriteFrequency@frequency
 25688  0013C2  C176  F072         	movff	_RadioConfiguration+1,RADIO_WriteFrequency@frequency+1
 25689  0013C6  C177  F073         	movff	_RadioConfiguration+2,RADIO_WriteFrequency@frequency+2
 25690  0013CA  C178  F074         	movff	_RadioConfiguration+3,RADIO_WriteFrequency@frequency+3
 25691  0013CE  EC21  F028         	call	_RADIO_WriteFrequency	;wreg free
 25692                           
 25693                           ;radio_driver_SX1276.c: 542: RADIO_WritePower(RadioConfiguration.outputPower);
 25694  0013D2  0101               	movlb	1	; () banked
 25695  0013D4  5190               	movf	(_RadioConfiguration+27)& (0+255),w,b
 25696  0013D6  EC63  F029         	call	_RADIO_WritePower
 25697                           
 25698                           ;radio_driver_SX1276.c: 544: if (MODULATION_LORA == RadioConfiguration.modulation)
 25699  0013DA  0101               	movlb	1	; () banked
 25700  0013DC  058D               	decf	(_RadioConfiguration+24)& (0+255),w,b
 25701  0013DE  E001 D1B6          	bnz	l12304
 25702                           
 25703                           ; BSR set to: 1
 25704                           ;radio_driver_SX1276.c: 545: {
 25705                           ;radio_driver_SX1276.c: 546: RADIO_RegisterWrite(0x39, RadioConfiguration.syncWordLoRa);
 25706  0013E2  C183  F066         	movff	_RadioConfiguration+14,RADIO_RegisterWrite@value
 25707  0013E6  0E39               	movlw	57
 25708  0013E8  EC17  F03A         	call	_RADIO_RegisterWrite
 25709                           
 25710                           ;radio_driver_SX1276.c: 548: RADIO_RegisterWrite(0x1D,
 25711                           ;radio_driver_SX1276.c: 549: (RadioConfiguration.bandWidth << (4)) |
 25712                           ;radio_driver_SX1276.c: 550: (RadioConfiguration.errorCodingRate << (1)) |
 25713                           ;radio_driver_SX1276.c: 551: (RadioConfiguration.implicitHeaderMode & 0x01));
 25714  0013EC  C197  F07F         	movff	_RadioConfiguration+34,??_RADIO_WriteConfiguration
 25715  0013F0  0E01               	movlw	1
 25716  0013F2  0100               	movlb	0	; () banked
 25717  0013F4  177F               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 25718  0013F6  0101               	movlb	1	; () banked
 25719  0013F8  90D8               	bcf	status,0,c
 25720  0013FA  3596               	rlcf	(_RadioConfiguration+33)& (0+255),w,b
 25721  0013FC  0100               	movlb	0	; () banked
 25722  0013FE  6F80               	movwf	(??_RADIO_WriteConfiguration+1)& (0+255),b
 25723  001400  0101               	movlb	1	; () banked
 25724  001402  398F               	swapf	(_RadioConfiguration+26)& (0+255),w,b
 25725  001404  0BF0               	andlw	240
 25726  001406  0100               	movlb	0	; () banked
 25727  001408  1180               	iorwf	(??_RADIO_WriteConfiguration+1)& (0+255),w,b
 25728  00140A  117F               	iorwf	??_RADIO_WriteConfiguration& (0+255),w,b
 25729  00140C  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 25730  00140E  0E1D               	movlw	29
 25731  001410  EC17  F03A         	call	_RADIO_RegisterWrite
 25732                           
 25733                           ;radio_driver_SX1276.c: 553: RADIO_RegisterWrite(0x1E,
 25734                           ;radio_driver_SX1276.c: 554: (RadioConfiguration.dataRate << (4)) |
 25735                           ;radio_driver_SX1276.c: 555: ((RadioConfiguration.crcOn & 0x01) << (2)) |
 25736                           ;radio_driver_SX1276.c: 556: ((symbolTimeout & 0x0300) >> (8)));
 25737  001414  C07E  F07F         	movff	RADIO_WriteConfiguration@symbolTimeout+1,??_RADIO_WriteConfiguration
 25738  001418  0E03               	movlw	3
 25739  00141A  0100               	movlb	0	; () banked
 25740  00141C  177F               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 25741  00141E  C191  F080         	movff	_RadioConfiguration+28,??_RADIO_WriteConfiguration+1
 25742  001422  0E01               	movlw	1
 25743  001424  1780               	andwf	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 25744  001426  90D8               	bcf	status,0,c
 25745  001428  3780               	rlcf	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 25746  00142A  90D8               	bcf	status,0,c
 25747  00142C  3780               	rlcf	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 25748  00142E  0101               	movlb	1	; () banked
 25749  001430  398E               	swapf	(_RadioConfiguration+25)& (0+255),w,b
 25750  001432  0BF0               	andlw	240
 25751  001434  0100               	movlb	0	; () banked
 25752  001436  1180               	iorwf	(??_RADIO_WriteConfiguration+1)& (0+255),w,b
 25753  001438  117F               	iorwf	??_RADIO_WriteConfiguration& (0+255),w,b
 25754  00143A  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 25755  00143C  0E1E               	movlw	30
 25756  00143E  EC17  F03A         	call	_RADIO_RegisterWrite
 25757                           
 25758                           ;radio_driver_SX1276.c: 560: if (0 != RadioConfiguration.frequencyHopPeriod)
 25759  001442  0101               	movlb	1	; () banked
 25760  001444  5193               	movf	(_RadioConfiguration+30)& (0+255),w,b
 25761  001446  1194               	iorwf	(_RadioConfiguration+31)& (0+255),w,b
 25762  001448  E060               	bz	l419
 25763                           
 25764                           ; BSR set to: 1
 25765                           ;radio_driver_SX1276.c: 561: {
 25766                           ;radio_driver_SX1276.c: 562: tempValue = RadioConfiguration.frequencyHopPeriod;
 25767  00144A  C193  F082         	movff	_RadioConfiguration+30,RADIO_WriteConfiguration@tempValue
 25768  00144E  C194  F083         	movff	_RadioConfiguration+31,RADIO_WriteConfiguration@tempValue+1
 25769  001452  0100               	movlb	0	; () banked
 25770  001454  6B84               	clrf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),b
 25771  001456  6B85               	clrf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),b
 25772                           
 25773                           ;radio_driver_SX1276.c: 564: switch (RadioConfiguration.bandWidth)
 25774  001458  D042               	goto	l12196
 25775  00145A                     l12188:
 25776                           
 25777                           ; BSR set to: 1
 25778                           ;radio_driver_SX1276.c: 567: tempValue *= 125;
 25779  00145A  C082  F064         	movff	RADIO_WriteConfiguration@tempValue,___lmul@multiplier
 25780  00145E  C083  F065         	movff	RADIO_WriteConfiguration@tempValue+1,___lmul@multiplier+1
 25781  001462  C084  F066         	movff	RADIO_WriteConfiguration@tempValue+2,___lmul@multiplier+2
 25782  001466  C085  F067         	movff	RADIO_WriteConfiguration@tempValue+3,___lmul@multiplier+3
 25783  00146A  0E7D               	movlw	125
 25784  00146C  0100               	movlb	0	; () banked
 25785  00146E  6F68               	movwf	___lmul@multiplicand& (0+255),b
 25786  001470  6B69               	clrf	(___lmul@multiplicand+1)& (0+255),b
 25787  001472  6B6A               	clrf	(___lmul@multiplicand+2)& (0+255),b
 25788  001474  6B6B               	clrf	(___lmul@multiplicand+3)& (0+255),b
 25789  001476  EC79  F02E         	call	___lmul	;wreg free
 25790  00147A  D022               	goto	L17
 25791  00147C                     l12190:
 25792                           
 25793                           ; BSR set to: 1
 25794                           ;radio_driver_SX1276.c: 570: tempValue *= 250;
 25795  00147C  C082  F064         	movff	RADIO_WriteConfiguration@tempValue,___lmul@multiplier
 25796  001480  C083  F065         	movff	RADIO_WriteConfiguration@tempValue+1,___lmul@multiplier+1
 25797  001484  C084  F066         	movff	RADIO_WriteConfiguration@tempValue+2,___lmul@multiplier+2
 25798  001488  C085  F067         	movff	RADIO_WriteConfiguration@tempValue+3,___lmul@multiplier+3
 25799  00148C  0EFA               	movlw	250
 25800  00148E  0100               	movlb	0	; () banked
 25801  001490  6F68               	movwf	___lmul@multiplicand& (0+255),b
 25802  001492  6B69               	clrf	(___lmul@multiplicand+1)& (0+255),b
 25803  001494  6B6A               	clrf	(___lmul@multiplicand+2)& (0+255),b
 25804  001496  6B6B               	clrf	(___lmul@multiplicand+3)& (0+255),b
 25805  001498  EC79  F02E         	call	___lmul	;wreg free
 25806  00149C  D011               	goto	L17
 25807  00149E                     l12192:
 25808                           
 25809                           ; BSR set to: 1
 25810                           ;radio_driver_SX1276.c: 573: tempValue *= 500;
 25811  00149E  C082  F064         	movff	RADIO_WriteConfiguration@tempValue,___lmul@multiplier
 25812  0014A2  C083  F065         	movff	RADIO_WriteConfiguration@tempValue+1,___lmul@multiplier+1
 25813  0014A6  C084  F066         	movff	RADIO_WriteConfiguration@tempValue+2,___lmul@multiplier+2
 25814  0014AA  C085  F067         	movff	RADIO_WriteConfiguration@tempValue+3,___lmul@multiplier+3
 25815  0014AE  0EF4               	movlw	244
 25816  0014B0  0100               	movlb	0	; () banked
 25817  0014B2  6F68               	movwf	___lmul@multiplicand& (0+255),b
 25818  0014B4  0E01               	movlw	1
 25819  0014B6  6F69               	movwf	(___lmul@multiplicand+1)& (0+255),b
 25820  0014B8  6B6A               	clrf	(___lmul@multiplicand+2)& (0+255),b
 25821  0014BA  6B6B               	clrf	(___lmul@multiplicand+3)& (0+255),b
 25822  0014BC  EC79  F02E         	call	___lmul	;wreg free
 25823  0014C0                     L17:
 25824  0014C0  C064  F082         	movff	?___lmul,RADIO_WriteConfiguration@tempValue
 25825  0014C4  C065  F083         	movff	?___lmul+1,RADIO_WriteConfiguration@tempValue+1
 25826  0014C8  C066  F084         	movff	?___lmul+2,RADIO_WriteConfiguration@tempValue+2
 25827  0014CC  C067  F085         	movff	?___lmul+3,RADIO_WriteConfiguration@tempValue+3
 25828                           
 25829                           ;radio_driver_SX1276.c: 574: break;
 25830  0014D0  D00F               	goto	l12198
 25831  0014D2                     l425:
 25832                           
 25833                           ; BSR set to: 1
 25834                           ;radio_driver_SX1276.c: 577: tempValue = 0;
 25835  0014D2  0100               	movlb	0	; () banked
 25836  0014D4  6B82               	clrf	RADIO_WriteConfiguration@tempValue& (0+255),b
 25837  0014D6  6B83               	clrf	(RADIO_WriteConfiguration@tempValue+1)& (0+255),b
 25838  0014D8  6B84               	clrf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),b
 25839  0014DA  6B85               	clrf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),b
 25840                           
 25841                           ;radio_driver_SX1276.c: 578: break;
 25842  0014DC  D009               	goto	l12198
 25843  0014DE                     l12196:
 25844                           
 25845                           ; BSR set to: 0
 25846  0014DE  0101               	movlb	1	; () banked
 25847  0014E0  518F               	movf	(_RadioConfiguration+26)& (0+255),w,b
 25848                           
 25849                           ; Switch size 1, requested type "speed"
 25850                           ; Number of cases is 3, Range of values is 7 to 9
 25851                           ; switch strategies available:
 25852                           ; Name         Instructions Cycles
 25853                           ; simple_byte           10     6 (average)
 25854                           ;	Chosen strategy is simple_byte
 25855  0014E2  0A07               	xorlw	7	; case 7
 25856  0014E4  E0BA               	bz	l12188
 25857  0014E6  0A0F               	xorlw	15	; case 8
 25858  0014E8  E0C9               	bz	l12190
 25859  0014EA  0A01               	xorlw	1	; case 9
 25860  0014EC  E0D8               	bz	l12192
 25861  0014EE  D7F1               	goto	l425
 25862  0014F0                     l12198:
 25863                           
 25864                           ; BSR set to: 0
 25865                           ;radio_driver_SX1276.c: 581: tempValue >>= RadioConfiguration.dataRate;
 25866  0014F0  0101               	movlb	1	; () banked
 25867  0014F2  298E               	incf	(_RadioConfiguration+25)& (0+255),w,b
 25868  0014F4  0100               	movlb	0	; () banked
 25869  0014F6  6F7F               	movwf	??_RADIO_WriteConfiguration& (0+255),b
 25870  0014F8  D005               	goto	u13290
 25871  0014FA                     u13295:
 25872  0014FA  90D8               	bcf	status,0,c
 25873  0014FC  3385               	rrcf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),f,b
 25874  0014FE  3384               	rrcf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),f,b
 25875  001500  3383               	rrcf	(RADIO_WriteConfiguration@tempValue+1)& (0+255),f,b
 25876  001502  3382               	rrcf	RADIO_WriteConfiguration@tempValue& (0+255),f,b
 25877  001504                     u13290:
 25878  001504  2F7F               	decfsz	??_RADIO_WriteConfiguration& (0+255),f,b
 25879  001506  D7F9               	goto	u13295
 25880                           
 25881                           ;radio_driver_SX1276.c: 582: }
 25882  001508  D005               	goto	l12200
 25883  00150A                     l419:
 25884                           
 25885                           ; BSR set to: 1
 25886                           ;radio_driver_SX1276.c: 583: else
 25887                           ;radio_driver_SX1276.c: 584: {
 25888                           ;radio_driver_SX1276.c: 585: tempValue = 0;
 25889  00150A  0100               	movlb	0	; () banked
 25890  00150C  6B82               	clrf	RADIO_WriteConfiguration@tempValue& (0+255),b
 25891  00150E  6B83               	clrf	(RADIO_WriteConfiguration@tempValue+1)& (0+255),b
 25892  001510  6B84               	clrf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),b
 25893  001512  6B85               	clrf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),b
 25894  001514                     l12200:
 25895                           
 25896                           ;radio_driver_SX1276.c: 586: }
 25897                           ;radio_driver_SX1276.c: 587: RADIO_RegisterWrite(0x24, (uint8_t)tempValue);
 25898  001514  C082  F066         	movff	RADIO_WriteConfiguration@tempValue,RADIO_RegisterWrite@value
 25899  001518  0E24               	movlw	36
 25900  00151A  EC17  F03A         	call	_RADIO_RegisterWrite
 25901                           
 25902                           ;radio_driver_SX1276.c: 589: RADIO_RegisterWrite(0x1F, (symbolTimeout & 0xFF));
 25903  00151E  C07D  F066         	movff	RADIO_WriteConfiguration@symbolTimeout,RADIO_RegisterWrite@value
 25904  001522  0E1F               	movlw	31
 25905  001524  EC17  F03A         	call	_RADIO_RegisterWrite
 25906                           
 25907                           ;radio_driver_SX1276.c: 595: regValue = RADIO_RegisterRead(0x26);
 25908  001528  0E26               	movlw	38
 25909  00152A  EC30  F039         	call	_RADIO_RegisterRead
 25910  00152E  6F86               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 25911                           
 25912                           ; BSR set to: 0
 25913                           ;radio_driver_SX1276.c: 596: if (
 25914                           ;radio_driver_SX1276.c: 597: (
 25915                           ;radio_driver_SX1276.c: 598: (SF_12 == RadioConfiguration.dataRate) &&
 25916                           ;radio_driver_SX1276.c: 599: ((BW_125KHZ == RadioConfiguration.bandWidth) || (BW_250KHZ 
      +                          == RadioConfiguration.bandWidth))
 25917                           ;radio_driver_SX1276.c: 600: ) ||
 25918                           ;radio_driver_SX1276.c: 601: (
 25919                           ;radio_driver_SX1276.c: 602: (SF_11 == RadioConfiguration.dataRate) &&
 25920                           ;radio_driver_SX1276.c: 603: (BW_125KHZ == RadioConfiguration.bandWidth)
 25921                           ;radio_driver_SX1276.c: 604: )
 25922                           ;radio_driver_SX1276.c: 605: )
 25923  001530  0E0C               	movlw	12
 25924  001532  0101               	movlb	1	; () banked
 25925  001534  198E               	xorwf	(_RadioConfiguration+25)& (0+255),w,b
 25926  001536  E106               	bnz	l12208
 25927                           
 25928                           ; BSR set to: 1
 25929  001538  0E07               	movlw	7
 25930  00153A  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 25931  00153C  E009               	bz	l12212
 25932                           
 25933                           ; BSR set to: 1
 25934  00153E  0E08               	movlw	8
 25935  001540  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 25936  001542  E006               	bz	l12212
 25937  001544                     l12208:
 25938                           
 25939                           ; BSR set to: 1
 25940  001544  0E0B               	movlw	11
 25941  001546  198E               	xorwf	(_RadioConfiguration+25)& (0+255),w,b
 25942  001548  E106               	bnz	l12214
 25943                           
 25944                           ; BSR set to: 1
 25945  00154A  0E07               	movlw	7
 25946  00154C  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 25947  00154E  E103               	bnz	l12214
 25948  001550                     l12212:
 25949                           
 25950                           ; BSR set to: 1
 25951                           ;radio_driver_SX1276.c: 606: {
 25952                           ;radio_driver_SX1276.c: 607: regValue |= 1 << (3);
 25953  001550  0100               	movlb	0	; () banked
 25954  001552  8786               	bsf	RADIO_WriteConfiguration@regValue& (0+255),3,b
 25955                           
 25956                           ;radio_driver_SX1276.c: 608: }
 25957  001554  D002               	goto	l432
 25958  001556                     l12214:
 25959                           
 25960                           ; BSR set to: 1
 25961                           ;radio_driver_SX1276.c: 609: else
 25962                           ;radio_driver_SX1276.c: 610: {
 25963                           ;radio_driver_SX1276.c: 611: regValue &= ~(1 << (3));
 25964  001556  0100               	movlb	0	; () banked
 25965  001558  9786               	bcf	RADIO_WriteConfiguration@regValue& (0+255),3,b
 25966  00155A                     l432:
 25967                           
 25968                           ; BSR set to: 0
 25969                           ;radio_driver_SX1276.c: 612: }
 25970                           ;radio_driver_SX1276.c: 613: regValue |= 1 << (2);
 25971  00155A  8586               	bsf	RADIO_WriteConfiguration@regValue& (0+255),2,b
 25972                           
 25973                           ; BSR set to: 0
 25974                           ;radio_driver_SX1276.c: 614: RADIO_RegisterWrite(0x26, regValue);
 25975  00155C  C086  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 25976  001560  0E26               	movlw	38
 25977  001562  EC17  F03A         	call	_RADIO_RegisterWrite
 25978                           
 25979                           ;radio_driver_SX1276.c: 616: regValue = RADIO_RegisterRead(0x31);
 25980  001566  0E31               	movlw	49
 25981  001568  EC30  F039         	call	_RADIO_RegisterRead
 25982  00156C  6F86               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 25983                           
 25984                           ; BSR set to: 0
 25985                           ;radio_driver_SX1276.c: 617: regValue &= ~(0x07);
 25986  00156E  0EF8               	movlw	248
 25987  001570  1786               	andwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 25988                           
 25989                           ; BSR set to: 0
 25990                           ;radio_driver_SX1276.c: 618: regValue |= 0x03;
 25991  001572  0E03               	movlw	3
 25992  001574  1386               	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 25993                           
 25994                           ; BSR set to: 0
 25995                           ;radio_driver_SX1276.c: 619: RADIO_RegisterWrite(0x31, regValue);
 25996  001576  C086  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 25997  00157A  0E31               	movlw	49
 25998  00157C  EC17  F03A         	call	_RADIO_RegisterWrite
 25999                           
 26000                           ;radio_driver_SX1276.c: 622: RADIO_RegisterWrite(0x37, 0x0A);
 26001  001580  0E0A               	movlw	10
 26002  001582  0100               	movlb	0	; () banked
 26003  001584  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26004  001586  0E37               	movlw	55
 26005  001588  EC17  F03A         	call	_RADIO_RegisterWrite
 26006                           
 26007                           ;radio_driver_SX1276.c: 625: if (0x12 == RadioConfiguration.regVersion)
 26008  00158C  0E12               	movlw	18
 26009  00158E  0101               	movlb	1	; () banked
 26010  001590  19A6               	xorwf	(_RadioConfiguration+49)& (0+255),w,b
 26011  001592  E129               	bnz	l12252
 26012                           
 26013                           ; BSR set to: 1
 26014                           ;radio_driver_SX1276.c: 626: {
 26015                           ;radio_driver_SX1276.c: 629: if ( (BW_125KHZ == RadioConfiguration.bandWidth) ||
 26016                           ;radio_driver_SX1276.c: 630: (BW_250KHZ == RadioConfiguration.bandWidth) )
 26017  001594  0E07               	movlw	7
 26018  001596  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26019  001598  E003               	bz	l12234
 26020                           
 26021                           ; BSR set to: 1
 26022  00159A  0E08               	movlw	8
 26023  00159C  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26024  00159E  E115               	bnz	l12244
 26025  0015A0                     l12234:
 26026                           
 26027                           ; BSR set to: 1
 26028                           ;radio_driver_SX1276.c: 631: {
 26029                           ;radio_driver_SX1276.c: 632: regValue = RADIO_RegisterRead(0x31);
 26030  0015A0  0E31               	movlw	49
 26031  0015A2  EC30  F039         	call	_RADIO_RegisterRead
 26032  0015A6  6F86               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26033                           
 26034                           ; BSR set to: 0
 26035                           ;radio_driver_SX1276.c: 633: regValue &= ~0x80;
 26036  0015A8  9F86               	bcf	RADIO_WriteConfiguration@regValue& (0+255),7,b
 26037                           
 26038                           ; BSR set to: 0
 26039                           ;radio_driver_SX1276.c: 634: RADIO_RegisterWrite(0x31, regValue);
 26040  0015AA  C086  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26041  0015AE  0E31               	movlw	49
 26042  0015B0  EC17  F03A         	call	_RADIO_RegisterWrite
 26043                           
 26044                           ;radio_driver_SX1276.c: 635: RADIO_RegisterWrite(0x2F, 0x40);
 26045  0015B4  0E40               	movlw	64
 26046  0015B6  0100               	movlb	0	; () banked
 26047  0015B8  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26048  0015BA  0E2F               	movlw	47
 26049  0015BC  EC17  F03A         	call	_RADIO_RegisterWrite
 26050                           
 26051                           ;radio_driver_SX1276.c: 636: RADIO_RegisterWrite(0x30, 0x00);
 26052  0015C0  0100               	movlb	0	; () banked
 26053  0015C2  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26054  0015C4  0E30               	movlw	48
 26055  0015C6  EC17  F03A         	call	_RADIO_RegisterWrite
 26056  0015CA                     l12244:
 26057                           
 26058                           ;radio_driver_SX1276.c: 637: }
 26059                           ;radio_driver_SX1276.c: 639: if (BW_500KHZ == RadioConfiguration.bandWidth)
 26060  0015CA  0E09               	movlw	9
 26061  0015CC  0101               	movlb	1	; () banked
 26062  0015CE  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26063  0015D0  E10A               	bnz	l12252
 26064                           
 26065                           ; BSR set to: 1
 26066                           ;radio_driver_SX1276.c: 640: {
 26067                           ;radio_driver_SX1276.c: 641: regValue = RADIO_RegisterRead(0x31);
 26068  0015D2  0E31               	movlw	49
 26069  0015D4  EC30  F039         	call	_RADIO_RegisterRead
 26070  0015D8  6F86               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26071                           
 26072                           ; BSR set to: 0
 26073                           ;radio_driver_SX1276.c: 642: regValue |= 0x80;
 26074  0015DA  8F86               	bsf	RADIO_WriteConfiguration@regValue& (0+255),7,b
 26075                           
 26076                           ; BSR set to: 0
 26077                           ;radio_driver_SX1276.c: 643: RADIO_RegisterWrite(0x31, regValue);
 26078  0015DC  C086  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26079  0015E0  0E31               	movlw	49
 26080  0015E2  EC17  F03A         	call	_RADIO_RegisterWrite
 26081  0015E6                     l12252:
 26082                           
 26083                           ;radio_driver_SX1276.c: 644: }
 26084                           ;radio_driver_SX1276.c: 645: }
 26085                           ;radio_driver_SX1276.c: 647: regValue = RADIO_RegisterRead(0x33);
 26086  0015E6  0E33               	movlw	51
 26087  0015E8  EC30  F039         	call	_RADIO_RegisterRead
 26088  0015EC  6F86               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26089                           
 26090                           ; BSR set to: 0
 26091                           ;radio_driver_SX1276.c: 648: regValue &= ~(1 << (6));
 26092  0015EE  9D86               	bcf	RADIO_WriteConfiguration@regValue& (0+255),6,b
 26093                           
 26094                           ; BSR set to: 0
 26095                           ;radio_driver_SX1276.c: 649: regValue |= (1 << (0));
 26096  0015F0  8186               	bsf	RADIO_WriteConfiguration@regValue& (0+255),0,b
 26097                           
 26098                           ; BSR set to: 0
 26099                           ;radio_driver_SX1276.c: 650: regValue |= (RadioConfiguration.iqInverted & 0x01) << (6);
 26100  0015F2  C195  F07F         	movff	_RadioConfiguration+32,??_RADIO_WriteConfiguration
 26101  0015F6  0E01               	movlw	1
 26102  0015F8  177F               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 26103  0015FA  0E06               	movlw	6
 26104  0015FC  6F80               	movwf	(??_RADIO_WriteConfiguration+1)& (0+255),b
 26105  0015FE                     u13395:
 26106  0015FE  90D8               	bcf	status,0,c
 26107  001600  377F               	rlcf	??_RADIO_WriteConfiguration& (0+255),f,b
 26108  001602  2F80               	decfsz	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 26109  001604  D7FC               	goto	u13395
 26110  001606  517F               	movf	??_RADIO_WriteConfiguration& (0+255),w,b
 26111  001608  1386               	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 26112                           
 26113                           ; BSR set to: 0
 26114                           ;radio_driver_SX1276.c: 651: RADIO_RegisterWrite(0x33, regValue);
 26115  00160A  C086  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26116  00160E  0E33               	movlw	51
 26117  001610  EC17  F03A         	call	_RADIO_RegisterWrite
 26118                           
 26119                           ;radio_driver_SX1276.c: 653: regValue = 0x1D & (~((RadioConfiguration.iqInverted & 0x01)
      +                           << (2)));
 26120  001614  C195  F07F         	movff	_RadioConfiguration+32,??_RADIO_WriteConfiguration
 26121  001618  0E01               	movlw	1
 26122  00161A  0100               	movlb	0	; () banked
 26123  00161C  177F               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 26124  00161E  90D8               	bcf	status,0,c
 26125  001620  377F               	rlcf	??_RADIO_WriteConfiguration& (0+255),f,b
 26126  001622  90D8               	bcf	status,0,c
 26127  001624  357F               	rlcf	??_RADIO_WriteConfiguration& (0+255),w,b
 26128  001626  0AFF               	xorlw	255
 26129  001628  0B1D               	andlw	29
 26130  00162A  6F86               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26131                           
 26132                           ; BSR set to: 0
 26133                           ;radio_driver_SX1276.c: 654: RADIO_RegisterWrite(0x3B, regValue);
 26134  00162C  C086  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26135  001630  0E3B               	movlw	59
 26136  001632  EC17  F03A         	call	_RADIO_RegisterWrite
 26137                           
 26138                           ;radio_driver_SX1276.c: 656: RADIO_RegisterWrite(0x20, RadioConfiguration.preambleLen >>
      +                           (8));
 26139  001636  0101               	movlb	1	; () banked
 26140  001638  5182               	movf	(_RadioConfiguration+13)& (0+255),w,b
 26141  00163A  0100               	movlb	0	; () banked
 26142  00163C  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26143  00163E  0E20               	movlw	32
 26144  001640  EC17  F03A         	call	_RADIO_RegisterWrite
 26145                           
 26146                           ;radio_driver_SX1276.c: 657: RADIO_RegisterWrite(0x21, RadioConfiguration.preambleLen & 
      +                          0xFF);
 26147  001644  C181  F066         	movff	_RadioConfiguration+12,RADIO_RegisterWrite@value
 26148  001648  0E21               	movlw	33
 26149  00164A  EC17  F03A         	call	_RADIO_RegisterWrite
 26150                           
 26151                           ;radio_driver_SX1276.c: 659: RADIO_RegisterWrite(0x0D, 0x00);
 26152  00164E  0100               	movlb	0	; () banked
 26153  001650  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26154  001652  0E0D               	movlw	13
 26155  001654  EC17  F03A         	call	_RADIO_RegisterWrite
 26156                           
 26157                           ;radio_driver_SX1276.c: 660: RADIO_RegisterWrite(0x0E, 0x00);
 26158  001658  0100               	movlb	0	; () banked
 26159  00165A  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26160  00165C  0E0E               	movlw	14
 26161  00165E  EC17  F03A         	call	_RADIO_RegisterWrite
 26162                           
 26163                           ;radio_driver_SX1276.c: 661: RADIO_RegisterWrite(0x0F, 0x00);
 26164  001662  0100               	movlb	0	; () banked
 26165  001664  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26166  001666  0E0F               	movlw	15
 26167  001668  EC17  F03A         	call	_RADIO_RegisterWrite
 26168                           
 26169                           ;radio_driver_SX1276.c: 664: if (0x12 == RadioConfiguration.regVersion)
 26170  00166C  0E12               	movlw	18
 26171  00166E  0101               	movlb	1	; () banked
 26172  001670  19A6               	xorwf	(_RadioConfiguration+49)& (0+255),w,b
 26173  001672  E168               	bnz	l438
 26174                           
 26175                           ; BSR set to: 1
 26176                           ;radio_driver_SX1276.c: 665: {
 26177                           ;radio_driver_SX1276.c: 666: if ( (BW_500KHZ == RadioConfiguration.bandWidth) &&
 26178                           ;radio_driver_SX1276.c: 667: (RadioConfiguration.frequency >= 862000000) &&
 26179                           ;radio_driver_SX1276.c: 668: (RadioConfiguration.frequency <= 1020000000)
 26180                           ;radio_driver_SX1276.c: 669: )
 26181  001674  0E09               	movlw	9
 26182  001676  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26183  001678  E11E               	bnz	l12286
 26184                           
 26185                           ; BSR set to: 1
 26186  00167A  0E80               	movlw	128
 26187  00167C  5D75               	subwf	_RadioConfiguration& (0+255),w,b
 26188  00167E  0E13               	movlw	19
 26189  001680  5976               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 26190  001682  0E61               	movlw	97
 26191  001684  5977               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 26192  001686  0E33               	movlw	51
 26193  001688  5978               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 26194  00168A  E315               	bnc	l12286
 26195                           
 26196                           ; BSR set to: 1
 26197  00168C  0575               	decf	_RadioConfiguration& (0+255),w,b
 26198  00168E  0EF7               	movlw	247
 26199  001690  5976               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 26200  001692  0ECB               	movlw	203
 26201  001694  5977               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 26202  001696  0E3C               	movlw	60
 26203  001698  5978               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 26204  00169A  E20D               	bc	l12286
 26205                           
 26206                           ; BSR set to: 1
 26207                           ;radio_driver_SX1276.c: 670: {
 26208                           ;radio_driver_SX1276.c: 671: RADIO_RegisterWrite(0x36, 0x02);
 26209  00169C  0E02               	movlw	2
 26210  00169E  0100               	movlb	0	; () banked
 26211  0016A0  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26212  0016A2  0E36               	movlw	54
 26213  0016A4  EC17  F03A         	call	_RADIO_RegisterWrite
 26214                           
 26215                           ;radio_driver_SX1276.c: 672: RADIO_RegisterWrite(0x3a, 0x64);
 26216  0016A8  0E64               	movlw	100
 26217  0016AA  0100               	movlb	0	; () banked
 26218  0016AC  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26219  0016AE  0E3A               	movlw	58
 26220  0016B0  EC17  F03A         	call	_RADIO_RegisterWrite
 26221                           
 26222                           ;radio_driver_SX1276.c: 673: }
 26223  0016B4  D028               	goto	l12296
 26224  0016B6                     l12286:
 26225                           
 26226                           ; BSR set to: 1
 26227                           ;radio_driver_SX1276.c: 674: else if ( (BW_500KHZ == RadioConfiguration.bandWidth) &&
 26228                           ;radio_driver_SX1276.c: 675: (RadioConfiguration.frequency >= 410000000) &&
 26229                           ;radio_driver_SX1276.c: 676: (RadioConfiguration.frequency <= 525000000)
 26230                           ;radio_driver_SX1276.c: 677: )
 26231  0016B6  0E09               	movlw	9
 26232  0016B8  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26233  0016BA  E11F               	bnz	l12294
 26234                           
 26235                           ; BSR set to: 1
 26236  0016BC  0E80               	movlw	128
 26237  0016BE  5D75               	subwf	_RadioConfiguration& (0+255),w,b
 26238  0016C0  0E1A               	movlw	26
 26239  0016C2  5976               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 26240  0016C4  0E70               	movlw	112
 26241  0016C6  5977               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 26242  0016C8  0E18               	movlw	24
 26243  0016CA  5978               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 26244  0016CC  E316               	bnc	l12294
 26245                           
 26246                           ; BSR set to: 1
 26247  0016CE  0E41               	movlw	65
 26248  0016D0  5D75               	subwf	_RadioConfiguration& (0+255),w,b
 26249  0016D2  0EDD               	movlw	221
 26250  0016D4  5976               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 26251  0016D6  0E4A               	movlw	74
 26252  0016D8  5977               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 26253  0016DA  0E1F               	movlw	31
 26254  0016DC  5978               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 26255  0016DE  E20D               	bc	l12294
 26256                           
 26257                           ; BSR set to: 1
 26258                           ;radio_driver_SX1276.c: 678: {
 26259                           ;radio_driver_SX1276.c: 679: RADIO_RegisterWrite(0x36, 0x02);
 26260  0016E0  0E02               	movlw	2
 26261  0016E2  0100               	movlb	0	; () banked
 26262  0016E4  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26263  0016E6  0E36               	movlw	54
 26264  0016E8  EC17  F03A         	call	_RADIO_RegisterWrite
 26265                           
 26266                           ;radio_driver_SX1276.c: 680: RADIO_RegisterWrite(0x3a, 0x7F);
 26267  0016EC  0E7F               	movlw	127
 26268  0016EE  0100               	movlb	0	; () banked
 26269  0016F0  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26270  0016F2  0E3A               	movlw	58
 26271  0016F4  EC17  F03A         	call	_RADIO_RegisterWrite
 26272                           
 26273                           ;radio_driver_SX1276.c: 681: }
 26274  0016F8  D006               	goto	l12296
 26275  0016FA                     l12294:
 26276                           
 26277                           ; BSR set to: 1
 26278                           ;radio_driver_SX1276.c: 682: else
 26279                           ;radio_driver_SX1276.c: 683: {
 26280                           ;radio_driver_SX1276.c: 684: RADIO_RegisterWrite(0x36, 0x03);
 26281  0016FA  0E03               	movlw	3
 26282  0016FC  0100               	movlb	0	; () banked
 26283  0016FE  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26284  001700  0E36               	movlw	54
 26285  001702  EC17  F03A         	call	_RADIO_RegisterWrite
 26286  001706                     l12296:
 26287                           
 26288                           ;radio_driver_SX1276.c: 685: }
 26289                           ;radio_driver_SX1276.c: 688: if ((BW_500KHZ == RadioConfiguration.bandWidth) && (1 == Ra
      +                          dioConfiguration.iqInverted))
 26290  001706  0E09               	movlw	9
 26291  001708  0101               	movlb	1	; () banked
 26292  00170A  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26293  00170C  E10F               	bnz	l12302
 26294                           
 26295                           ; BSR set to: 1
 26296  00170E  0595               	decf	(_RadioConfiguration+32)& (0+255),w,b
 26297  001710  E10D               	bnz	l12302
 26298                           
 26299                           ; BSR set to: 1
 26300                           ;radio_driver_SX1276.c: 689: {
 26301                           ;radio_driver_SX1276.c: 690: RADIO_RegisterWrite(0x3A, 0x65);
 26302  001712  0E65               	movlw	101
 26303  001714  0100               	movlb	0	; () banked
 26304  001716  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26305  001718  0E3A               	movlw	58
 26306  00171A  EC17  F03A         	call	_RADIO_RegisterWrite
 26307                           
 26308                           ;radio_driver_SX1276.c: 691: RADIO_RegisterWrite(0x3B, 25);
 26309  00171E  0E19               	movlw	25
 26310  001720  0100               	movlb	0	; () banked
 26311  001722  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26312  001724  0E3B               	movlw	59
 26313  001726  EC17  F03A         	call	_RADIO_RegisterWrite
 26314                           
 26315                           ;radio_driver_SX1276.c: 692: }
 26316  00172A  D00C               	goto	l438
 26317  00172C                     l12302:
 26318                           
 26319                           ; BSR set to: 1
 26320                           ;radio_driver_SX1276.c: 693: else
 26321                           ;radio_driver_SX1276.c: 694: {
 26322                           ;radio_driver_SX1276.c: 695: RADIO_RegisterWrite(0x3A, 0x65);
 26323  00172C  0E65               	movlw	101
 26324  00172E  0100               	movlb	0	; () banked
 26325  001730  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26326  001732  0E3A               	movlw	58
 26327  001734  EC17  F03A         	call	_RADIO_RegisterWrite
 26328                           
 26329                           ;radio_driver_SX1276.c: 696: RADIO_RegisterWrite(0x3B, 29);
 26330  001738  0E1D               	movlw	29
 26331  00173A  0100               	movlb	0	; () banked
 26332  00173C  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26333  00173E  0E3B               	movlw	59
 26334  001740  EC17  F03A         	call	_RADIO_RegisterWrite
 26335  001744                     l438:
 26336                           
 26337                           ;radio_driver_SX1276.c: 697: }
 26338                           ;radio_driver_SX1276.c: 698: }
 26339                           ;radio_driver_SX1276.c: 701: RADIO_RegisterWrite(0x12, 0xFF);
 26340  001744  0100               	movlb	0	; () banked
 26341  001746  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
 26342  001748  0E12               	movlw	18
 26343  00174A  EF17  F03A         	goto	_RADIO_RegisterWrite
 26344  00174E                     l12304:
 26345                           
 26346                           ; BSR set to: 1
 26347                           ;radio_driver_SX1276.c: 703: else
 26348                           ;radio_driver_SX1276.c: 704: {
 26349                           ;radio_driver_SX1276.c: 706: RADIO_WriteFSKFrequencyDeviation(RadioConfiguration.frequen
      +                          cyDeviation);
 26350  00174E  C179  F071         	movff	_RadioConfiguration+4,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation
 26351  001752  C17A  F072         	movff	_RadioConfiguration+5,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+1
 26352  001756  C17B  F073         	movff	_RadioConfiguration+6,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+2
 26353  00175A  C17C  F074         	movff	_RadioConfiguration+7,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+3
 26354  00175E  EC4E  F032         	call	_RADIO_WriteFSKFrequencyDeviation	;wreg free
 26355                           
 26356                           ;radio_driver_SX1276.c: 707: RADIO_WriteFSKBitRate(RadioConfiguration.bitRate);
 26357  001762  C17D  F071         	movff	_RadioConfiguration+8,RADIO_WriteFSKBitRate@bitRate
 26358  001766  C17E  F072         	movff	_RadioConfiguration+9,RADIO_WriteFSKBitRate@bitRate+1
 26359  00176A  C17F  F073         	movff	_RadioConfiguration+10,RADIO_WriteFSKBitRate@bitRate+2
 26360  00176E  C180  F074         	movff	_RadioConfiguration+11,RADIO_WriteFSKBitRate@bitRate+3
 26361  001772  EC80  F032         	call	_RADIO_WriteFSKBitRate	;wreg free
 26362                           
 26363                           ;radio_driver_SX1276.c: 709: RADIO_RegisterWrite(0x25, RadioConfiguration.preambleLen >>
      +                           (8));
 26364  001776  0101               	movlb	1	; () banked
 26365  001778  5182               	movf	(_RadioConfiguration+13)& (0+255),w,b
 26366  00177A  0100               	movlb	0	; () banked
 26367  00177C  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26368  00177E  0E25               	movlw	37
 26369  001780  EC17  F03A         	call	_RADIO_RegisterWrite
 26370                           
 26371                           ;radio_driver_SX1276.c: 710: RADIO_RegisterWrite(0x26, RadioConfiguration.preambleLen & 
      +                          0xFF);
 26372  001784  C181  F066         	movff	_RadioConfiguration+12,RADIO_RegisterWrite@value
 26373  001788  0E26               	movlw	38
 26374  00178A  EC17  F03A         	call	_RADIO_RegisterWrite
 26375                           
 26376                           ;radio_driver_SX1276.c: 713: regValue = RADIO_RegisterRead(0x0A);
 26377  00178E  0E0A               	movlw	10
 26378  001790  EC30  F039         	call	_RADIO_RegisterRead
 26379  001794  6F86               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26380                           
 26381                           ; BSR set to: 0
 26382                           ;radio_driver_SX1276.c: 714: regValue &= ~0x60;
 26383  001796  0E9F               	movlw	159
 26384  001798  1786               	andwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 26385                           
 26386                           ; BSR set to: 0
 26387                           ;radio_driver_SX1276.c: 715: regValue |= RadioConfiguration.fskDataShaping << (5);
 26388  00179A  0101               	movlb	1	; () banked
 26389  00179C  39A8               	swapf	(_RadioConfiguration+51)& (0+255),w,b
 26390  00179E  46E8               	rlncf	wreg,f,c
 26391  0017A0  0BE0               	andlw	224
 26392  0017A2  0100               	movlb	0	; () banked
 26393  0017A4  1386               	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 26394                           
 26395                           ;radio_driver_SX1276.c: 716: RADIO_RegisterWrite(0x0A, regValue);
 26396  0017A6  C086  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26397  0017AA  0E0A               	movlw	10
 26398  0017AC  EC17  F03A         	call	_RADIO_RegisterWrite
 26399                           
 26400                           ;radio_driver_SX1276.c: 720: regValue = 0xC8;
 26401  0017B0  0EC8               	movlw	200
 26402  0017B2  0100               	movlb	0	; () banked
 26403  0017B4  6F86               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26404                           
 26405                           ; BSR set to: 0
 26406                           ;radio_driver_SX1276.c: 721: if (RadioConfiguration.crcOn)
 26407  0017B6  0101               	movlb	1	; () banked
 26408  0017B8  5191               	movf	(_RadioConfiguration+28)& (0+255),w,b
 26409  0017BA  E002               	bz	l12316
 26410                           
 26411                           ; BSR set to: 1
 26412                           ;radio_driver_SX1276.c: 722: {
 26413                           ;radio_driver_SX1276.c: 723: regValue |= 0x10;
 26414  0017BC  0100               	movlb	0	; () banked
 26415  0017BE  8986               	bsf	RADIO_WriteConfiguration@regValue& (0+255),4,b
 26416  0017C0                     l12316:
 26417                           
 26418                           ;radio_driver_SX1276.c: 724: }
 26419                           ;radio_driver_SX1276.c: 725: RADIO_RegisterWrite(0x30, regValue);
 26420  0017C0  C086  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26421  0017C4  0E30               	movlw	48
 26422  0017C6  EC17  F03A         	call	_RADIO_RegisterWrite
 26423                           
 26424                           ;radio_driver_SX1276.c: 728: for (i = 0; i < RadioConfiguration.syncWordLen; i++)
 26425  0017CA  0100               	movlb	0	; () banked
 26426  0017CC  6B81               	clrf	RADIO_WriteConfiguration@i& (0+255),b
 26427  0017CE  D00E               	goto	l12324
 26428  0017D0                     l12320:
 26429                           
 26430                           ; BSR set to: 0
 26431                           ;radio_driver_SX1276.c: 729: {
 26432                           ;radio_driver_SX1276.c: 732: RADIO_RegisterWrite(0x28 + i, RadioConfiguration.syncWord[i
      +                          ]);
 26433  0017D0  0E84               	movlw	low (_RadioConfiguration+15)
 26434  0017D2  2581               	addwf	RADIO_WriteConfiguration@i& (0+255),w,b
 26435  0017D4  6ED9               	movwf	fsr2l,c
 26436  0017D6  6ADA               	clrf	fsr2h,c
 26437  0017D8  0E01               	movlw	high (_RadioConfiguration+15)
 26438  0017DA  22DA               	addwfc	fsr2h,f,c
 26439  0017DC  50DF               	movf	indf2,w,c
 26440  0017DE  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26441  0017E0  5181               	movf	RADIO_WriteConfiguration@i& (0+255),w,b
 26442  0017E2  0F28               	addlw	40
 26443  0017E4  EC17  F03A         	call	_RADIO_RegisterWrite
 26444  0017E8  0100               	movlb	0	; () banked
 26445  0017EA  2B81               	incf	RADIO_WriteConfiguration@i& (0+255),f,b
 26446  0017EC                     l12324:
 26447                           
 26448                           ; BSR set to: 0
 26449  0017EC  0101               	movlb	1	; () banked
 26450  0017EE  518C               	movf	(_RadioConfiguration+23)& (0+255),w,b
 26451  0017F0  0100               	movlb	0	; () banked
 26452  0017F2  5D81               	subwf	RADIO_WriteConfiguration@i& (0+255),w,b
 26453  0017F4  E3ED               	bnc	l12320
 26454                           
 26455                           ; BSR set to: 0
 26456                           ;radio_driver_SX1276.c: 733: }
 26457                           ;radio_driver_SX1276.c: 736: if (RadioConfiguration.syncWordLen != 0)
 26458  0017F6  0101               	movlb	1	; () banked
 26459  0017F8  518C               	movf	(_RadioConfiguration+23)& (0+255),w,b
 26460  0017FA  E008               	bz	l12330
 26461                           
 26462                           ; BSR set to: 1
 26463                           ;radio_driver_SX1276.c: 737: {
 26464                           ;radio_driver_SX1276.c: 738: RADIO_RegisterWrite(0x27, 0x10 | (RadioConfiguration.syncWo
      +                          rdLen - 1));
 26465  0017FC  058C               	decf	(_RadioConfiguration+23)& (0+255),w,b
 26466  0017FE  0910               	iorlw	16
 26467  001800  0100               	movlb	0	; () banked
 26468  001802  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26469  001804  0E27               	movlw	39
 26470  001806  EC17  F03A         	call	_RADIO_RegisterWrite
 26471                           
 26472                           ;radio_driver_SX1276.c: 739: }
 26473  00180A  D005               	goto	l451
 26474  00180C                     l12330:
 26475                           
 26476                           ; BSR set to: 1
 26477                           ;radio_driver_SX1276.c: 740: else
 26478                           ;radio_driver_SX1276.c: 741: {
 26479                           ;radio_driver_SX1276.c: 742: RADIO_RegisterWrite(0x27, 0x00);
 26480  00180C  0100               	movlb	0	; () banked
 26481  00180E  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26482  001810  0E27               	movlw	39
 26483  001812  EC17  F03A         	call	_RADIO_RegisterWrite
 26484  001816                     l451:
 26485                           
 26486                           ;radio_driver_SX1276.c: 743: }
 26487                           ;radio_driver_SX1276.c: 746: RADIO_RegisterWrite(0x3E, 0xFF);
 26488  001816  0100               	movlb	0	; () banked
 26489  001818  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
 26490  00181A  0E3E               	movlw	62
 26491  00181C  EC17  F03A         	call	_RADIO_RegisterWrite
 26492                           
 26493                           ;radio_driver_SX1276.c: 747: RADIO_RegisterWrite(0x3F, 0xFF);
 26494  001820  0100               	movlb	0	; () banked
 26495  001822  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
 26496  001824  0E3F               	movlw	63
 26497  001826  EF17  F03A         	goto	_RADIO_RegisterWrite
 26498  00182A                     __end_of_RADIO_WriteConfiguration:
 26499                           	opt stack 0
 26500                           tosu	equ	0xFFF
 26501                           tosh	equ	0xFFE
 26502                           tosl	equ	0xFFD
 26503                           pclath	equ	0xFFA
 26504                           tblptru	equ	0xFF8
 26505                           tblptrh	equ	0xFF7
 26506                           tblptrl	equ	0xFF6
 26507                           tablat	equ	0xFF5
 26508                           prodh	equ	0xFF4
 26509                           prodl	equ	0xFF3
 26510                           intcon	equ	0xFF2
 26511                           intcon2	equ	0xFF1
 26512                           intcon3	equ	0xFF0
 26513                           indf0	equ	0xFEF
 26514                           postinc0	equ	0xFEE
 26515                           fsr0h	equ	0xFEA
 26516                           fsr0l	equ	0xFE9
 26517                           wreg	equ	0xFE8
 26518                           postinc1	equ	0xFE6
 26519                           postdec1	equ	0xFE5
 26520                           plusw1	equ	0xFE3
 26521                           fsr1h	equ	0xFE2
 26522                           fsr1l	equ	0xFE1
 26523                           indf2	equ	0xFDF
 26524                           postinc2	equ	0xFDE
 26525                           postdec2	equ	0xFDD
 26526                           plusw2	equ	0xFDB
 26527                           fsr2h	equ	0xFDA
 26528                           fsr2l	equ	0xFD9
 26529                           status	equ	0xFD8
 26530                           
 26531 ;; *************** function _RADIO_WritePower *****************
 26532 ;; Defined at:
 26533 ;;		line 342 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26534 ;; Parameters:    Size  Location     Type
 26535 ;;  power           1    wreg     char 
 26536 ;; Auto vars:     Size  Location     Type
 26537 ;;  power           1   10[BANK0 ] char 
 26538 ;;  paDac           1    9[BANK0 ] unsigned char 
 26539 ;;  ocp             1    8[BANK0 ] unsigned char 
 26540 ;; Return value:  Size  Location     Type
 26541 ;;                  1    wreg      void 
 26542 ;; Registers used:
 26543 ;;		wreg, status,2, status,0, cstack
 26544 ;; Tracked objects:
 26545 ;;		On entry : F/1
 26546 ;;		On exit  : 0/0
 26547 ;;		Unchanged: 0/0
 26548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 26549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26550 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26552 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26553 ;;Total ram usage:        3 bytes
 26554 ;; Hardware stack levels used:    1
 26555 ;; Hardware stack levels required when called:   10
 26556 ;; This function calls:
 26557 ;;		_RADIO_RegisterRead
 26558 ;;		_RADIO_RegisterWrite
 26559 ;; This function is called by:
 26560 ;;		_RADIO_WriteConfiguration
 26561 ;; This function uses a non-reentrant model
 26562 ;;
 26563                           
 26564                           	psect	text136
 26565  0052C6                     __ptext136:
 26566                           	opt stack 0
 26567  0052C6                     _RADIO_WritePower:
 26568                           	opt stack 16
 26569                           
 26570                           ;incstack = 0
 26571                           ;RADIO_WritePower@power stored from wreg
 26572  0052C6  0100               	movlb	0	; () banked
 26573  0052C8  6F6A               	movwf	RADIO_WritePower@power& (0+255),b
 26574                           
 26575                           ;radio_driver_SX1276.c: 344: uint8_t paDac;
 26576                           ;radio_driver_SX1276.c: 345: uint8_t ocp;
 26577                           ;radio_driver_SX1276.c: 347: if (RadioConfiguration.paBoost == 0)
 26578  0052CA  0101               	movlb	1	; () banked
 26579  0052CC  5192               	movf	(_RadioConfiguration+29)& (0+255),w,b
 26580  0052CE  E127               	bnz	l12018
 26581                           
 26582                           ; BSR set to: 1
 26583                           ;radio_driver_SX1276.c: 348: {
 26584                           ;radio_driver_SX1276.c: 350: if (power < -3)
 26585  0052D0  0100               	movlb	0	; () banked
 26586  0052D2  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26587  0052D4  0A80               	xorlw	128
 26588  0052D6  0F83               	addlw	131
 26589  0052D8  E202               	bc	l11998
 26590                           
 26591                           ; BSR set to: 0
 26592                           ;radio_driver_SX1276.c: 351: {
 26593                           ;radio_driver_SX1276.c: 352: power = -3;
 26594  0052DA  0EFD               	movlw	253
 26595  0052DC  6F6A               	movwf	RADIO_WritePower@power& (0+255),b
 26596  0052DE                     l11998:
 26597                           
 26598                           ; BSR set to: 0
 26599                           ;radio_driver_SX1276.c: 353: }
 26600                           ;radio_driver_SX1276.c: 354: if (power > 15)
 26601  0052DE  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26602  0052E0  0A80               	xorlw	128
 26603  0052E2  0F70               	addlw	-144
 26604  0052E4  E302               	bnc	l12002
 26605                           
 26606                           ; BSR set to: 0
 26607                           ;radio_driver_SX1276.c: 355: {
 26608                           ;radio_driver_SX1276.c: 356: power = 15;
 26609  0052E6  0E0F               	movlw	15
 26610  0052E8  6F6A               	movwf	RADIO_WritePower@power& (0+255),b
 26611  0052EA                     l12002:
 26612                           
 26613                           ; BSR set to: 0
 26614                           ;radio_driver_SX1276.c: 357: }
 26615                           ;radio_driver_SX1276.c: 359: paDac = RADIO_RegisterRead(0x4D);
 26616  0052EA  0E4D               	movlw	77
 26617  0052EC  EC30  F039         	call	_RADIO_RegisterRead
 26618  0052F0  6F69               	movwf	RADIO_WritePower@paDac& (0+255),b
 26619                           
 26620                           ; BSR set to: 0
 26621                           ;radio_driver_SX1276.c: 360: paDac &= ~(0x07);
 26622  0052F2  0EF8               	movlw	248
 26623  0052F4  1769               	andwf	RADIO_WritePower@paDac& (0+255),f,b
 26624                           
 26625                           ; BSR set to: 0
 26626                           ;radio_driver_SX1276.c: 361: paDac |= 0x04;
 26627  0052F6  8569               	bsf	RADIO_WritePower@paDac& (0+255),2,b
 26628                           
 26629                           ; BSR set to: 0
 26630                           ;radio_driver_SX1276.c: 362: RADIO_RegisterWrite(0x4D, paDac);
 26631  0052F8  C069  F066         	movff	RADIO_WritePower@paDac,RADIO_RegisterWrite@value
 26632  0052FC  0E4D               	movlw	77
 26633  0052FE  EC17  F03A         	call	_RADIO_RegisterWrite
 26634                           
 26635                           ;radio_driver_SX1276.c: 364: if (power < 0)
 26636  005302  0100               	movlb	0	; () banked
 26637  005304  AF6A               	btfss	RADIO_WritePower@power& (0+255),7,b
 26638  005306  D005               	goto	l12016
 26639                           
 26640                           ; BSR set to: 0
 26641                           ;radio_driver_SX1276.c: 365: {
 26642                           ;radio_driver_SX1276.c: 369: power += 3;
 26643  005308  0E03               	movlw	3
 26644  00530A  276A               	addwf	RADIO_WritePower@power& (0+255),f,b
 26645                           
 26646                           ; BSR set to: 0
 26647                           ;radio_driver_SX1276.c: 370: RADIO_RegisterWrite(0x09, 0x20 | power);
 26648  00530C  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26649  00530E  0920               	iorlw	32
 26650  005310  D002               	goto	L19
 26651  005312                     l12016:
 26652                           
 26653                           ; BSR set to: 0
 26654                           ;radio_driver_SX1276.c: 372: else
 26655                           ;radio_driver_SX1276.c: 373: {
 26656                           ;radio_driver_SX1276.c: 377: RADIO_RegisterWrite(0x09, 0x70 | power);
 26657  005312  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26658  005314  0970               	iorlw	112
 26659  005316                     L19:
 26660  005316  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26661  005318  0E09               	movlw	9
 26662  00531A  EF17  F03A         	goto	_RADIO_RegisterWrite
 26663  00531E                     l12018:
 26664                           
 26665                           ; BSR set to: 1
 26666                           ;radio_driver_SX1276.c: 380: else
 26667                           ;radio_driver_SX1276.c: 381: {
 26668                           ;radio_driver_SX1276.c: 385: if (power < 2)
 26669  00531E  0100               	movlb	0	; () banked
 26670  005320  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26671  005322  0A80               	xorlw	128
 26672  005324  0F7E               	addlw	-130
 26673  005326  E202               	bc	l12022
 26674                           
 26675                           ; BSR set to: 0
 26676                           ;radio_driver_SX1276.c: 386: {
 26677                           ;radio_driver_SX1276.c: 387: power = 2;
 26678  005328  0E02               	movlw	2
 26679  00532A  6F6A               	movwf	RADIO_WritePower@power& (0+255),b
 26680  00532C                     l12022:
 26681                           
 26682                           ; BSR set to: 0
 26683                           ;radio_driver_SX1276.c: 388: }
 26684                           ;radio_driver_SX1276.c: 391: if (power >= 20)
 26685  00532C  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26686  00532E  0A80               	xorlw	128
 26687  005330  0F6C               	addlw	-148
 26688  005332  E302               	bnc	l12026
 26689                           
 26690                           ; BSR set to: 0
 26691                           ;radio_driver_SX1276.c: 392: {
 26692                           ;radio_driver_SX1276.c: 393: power = 20;
 26693  005334  0E14               	movlw	20
 26694  005336  D005               	goto	L18
 26695  005338                     l12026:
 26696                           
 26697                           ; BSR set to: 0
 26698                           ;radio_driver_SX1276.c: 395: else if (power > 17)
 26699  005338  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26700  00533A  0A80               	xorlw	128
 26701  00533C  0F6E               	addlw	-146
 26702  00533E  E302               	bnc	l12030
 26703                           
 26704                           ; BSR set to: 0
 26705                           ;radio_driver_SX1276.c: 396: {
 26706                           ;radio_driver_SX1276.c: 397: power = 17;
 26707  005340  0E11               	movlw	17
 26708  005342                     L18:
 26709  005342  6F6A               	movwf	RADIO_WritePower@power& (0+255),b
 26710  005344                     l12030:
 26711                           
 26712                           ; BSR set to: 0
 26713                           ;radio_driver_SX1276.c: 398: }
 26714                           ;radio_driver_SX1276.c: 400: ocp = RADIO_RegisterRead(0x0B);
 26715  005344  0E0B               	movlw	11
 26716  005346  EC30  F039         	call	_RADIO_RegisterRead
 26717  00534A  6F68               	movwf	RADIO_WritePower@ocp& (0+255),b
 26718                           
 26719                           ; BSR set to: 0
 26720                           ;radio_driver_SX1276.c: 401: paDac = RADIO_RegisterRead(0x4D);
 26721  00534C  0E4D               	movlw	77
 26722  00534E  EC30  F039         	call	_RADIO_RegisterRead
 26723  005352  6F69               	movwf	RADIO_WritePower@paDac& (0+255),b
 26724                           
 26725                           ; BSR set to: 0
 26726                           ;radio_driver_SX1276.c: 402: paDac &= ~(0x07);
 26727  005354  0EF8               	movlw	248
 26728  005356  1769               	andwf	RADIO_WritePower@paDac& (0+255),f,b
 26729                           
 26730                           ; BSR set to: 0
 26731                           ;radio_driver_SX1276.c: 403: if (power == 20)
 26732  005358  0E14               	movlw	20
 26733  00535A  196A               	xorwf	RADIO_WritePower@power& (0+255),w,b
 26734  00535C  E106               	bnz	l12044
 26735                           
 26736                           ; BSR set to: 0
 26737                           ;radio_driver_SX1276.c: 404: {
 26738                           ;radio_driver_SX1276.c: 405: paDac |= 0x07;
 26739  00535E  0E07               	movlw	7
 26740  005360  1369               	iorwf	RADIO_WritePower@paDac& (0+255),f,b
 26741                           
 26742                           ; BSR set to: 0
 26743                           ;radio_driver_SX1276.c: 406: power = 15;
 26744  005362  0E0F               	movlw	15
 26745  005364  6F6A               	movwf	RADIO_WritePower@power& (0+255),b
 26746                           
 26747                           ; BSR set to: 0
 26748                           ;radio_driver_SX1276.c: 407: ocp &= ~(0x20);
 26749  005366  9B68               	bcf	RADIO_WritePower@ocp& (0+255),5,b
 26750                           
 26751                           ;radio_driver_SX1276.c: 408: }
 26752  005368  D004               	goto	l12050
 26753  00536A                     l12044:
 26754                           
 26755                           ; BSR set to: 0
 26756                           ;radio_driver_SX1276.c: 409: else
 26757                           ;radio_driver_SX1276.c: 410: {
 26758                           ;radio_driver_SX1276.c: 411: paDac |= 0x04;
 26759  00536A  8569               	bsf	RADIO_WritePower@paDac& (0+255),2,b
 26760                           
 26761                           ; BSR set to: 0
 26762                           ;radio_driver_SX1276.c: 412: power -= 2;
 26763  00536C  0EFE               	movlw	254
 26764  00536E  276A               	addwf	RADIO_WritePower@power& (0+255),f,b
 26765                           
 26766                           ; BSR set to: 0
 26767                           ;radio_driver_SX1276.c: 413: ocp |= 0x20;
 26768  005370  8B68               	bsf	RADIO_WritePower@ocp& (0+255),5,b
 26769  005372                     l12050:
 26770                           
 26771                           ; BSR set to: 0
 26772                           ;radio_driver_SX1276.c: 414: }
 26773                           ;radio_driver_SX1276.c: 416: RADIO_RegisterWrite(0x4D, paDac);
 26774  005372  C069  F066         	movff	RADIO_WritePower@paDac,RADIO_RegisterWrite@value
 26775  005376  0E4D               	movlw	77
 26776  005378  EC17  F03A         	call	_RADIO_RegisterWrite
 26777                           
 26778                           ;radio_driver_SX1276.c: 417: RADIO_RegisterWrite(0x09, 0x80 | power);
 26779  00537C  0100               	movlb	0	; () banked
 26780  00537E  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26781  005380  0980               	iorlw	128
 26782  005382  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26783  005384  0E09               	movlw	9
 26784  005386  EC17  F03A         	call	_RADIO_RegisterWrite
 26785                           
 26786                           ;radio_driver_SX1276.c: 418: RADIO_RegisterWrite(0x0B, ocp);
 26787  00538A  C068  F066         	movff	RADIO_WritePower@ocp,RADIO_RegisterWrite@value
 26788  00538E  0E0B               	movlw	11
 26789  005390  EF17  F03A         	goto	_RADIO_RegisterWrite
 26790  005394                     __end_of_RADIO_WritePower:
 26791                           	opt stack 0
 26792                           tosu	equ	0xFFF
 26793                           tosh	equ	0xFFE
 26794                           tosl	equ	0xFFD
 26795                           pclath	equ	0xFFA
 26796                           tblptru	equ	0xFF8
 26797                           tblptrh	equ	0xFF7
 26798                           tblptrl	equ	0xFF6
 26799                           tablat	equ	0xFF5
 26800                           prodh	equ	0xFF4
 26801                           prodl	equ	0xFF3
 26802                           intcon	equ	0xFF2
 26803                           intcon2	equ	0xFF1
 26804                           intcon3	equ	0xFF0
 26805                           indf0	equ	0xFEF
 26806                           postinc0	equ	0xFEE
 26807                           fsr0h	equ	0xFEA
 26808                           fsr0l	equ	0xFE9
 26809                           wreg	equ	0xFE8
 26810                           postinc1	equ	0xFE6
 26811                           postdec1	equ	0xFE5
 26812                           plusw1	equ	0xFE3
 26813                           fsr1h	equ	0xFE2
 26814                           fsr1l	equ	0xFE1
 26815                           indf2	equ	0xFDF
 26816                           postinc2	equ	0xFDE
 26817                           postdec2	equ	0xFDD
 26818                           plusw2	equ	0xFDB
 26819                           fsr2h	equ	0xFDA
 26820                           fsr2l	equ	0xFD9
 26821                           status	equ	0xFD8
 26822                           
 26823 ;; *************** function _RADIO_WriteFSKFrequencyDeviation *****************
 26824 ;; Defined at:
 26825 ;;		line 294 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26826 ;; Parameters:    Size  Location     Type
 26827 ;;  frequencyDev    4   17[BANK0 ] unsigned long 
 26828 ;; Auto vars:     Size  Location     Type
 26829 ;;  num             4   21[BANK0 ] unsigned long 
 26830 ;; Return value:  Size  Location     Type
 26831 ;;                  1    wreg      void 
 26832 ;; Registers used:
 26833 ;;		wreg, status,2, status,0, cstack
 26834 ;; Tracked objects:
 26835 ;;		On entry : F/1
 26836 ;;		On exit  : 0/0
 26837 ;;		Unchanged: 0/0
 26838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 26839 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26840 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26842 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26843 ;;Total ram usage:        8 bytes
 26844 ;; Hardware stack levels used:    1
 26845 ;; Hardware stack levels required when called:   10
 26846 ;; This function calls:
 26847 ;;		_RADIO_RegisterWrite
 26848 ;;		___lldiv
 26849 ;; This function is called by:
 26850 ;;		_RADIO_WriteConfiguration
 26851 ;; This function uses a non-reentrant model
 26852 ;;
 26853                           
 26854                           	psect	text137
 26855  00649C                     __ptext137:
 26856                           	opt stack 0
 26857  00649C                     _RADIO_WriteFSKFrequencyDeviation:
 26858                           	opt stack 16
 26859                           
 26860                           ; BSR set to: 1
 26861                           ;radio_driver_SX1276.c: 296: uint32_t num;
 26862                           ;radio_driver_SX1276.c: 303: num = frequencyDeviation;
 26863                           
 26864                           ;incstack = 0
 26865  00649C  C071  F075         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation,RADIO_WriteFSKFrequencyDeviat
      +                          ion@num
 26866  0064A0  C072  F076         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+1,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+1
 26867  0064A4  C073  F077         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+2,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+2
 26868  0064A8  C074  F078         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+3,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+3
 26869                           
 26870                           ; BSR set to: 1
 26871                           ;radio_driver_SX1276.c: 304: num <<= (8);
 26872  0064AC  C077  F078         	movff	RADIO_WriteFSKFrequencyDeviation@num+2,RADIO_WriteFSKFrequencyDeviation@num+3
 26873  0064B0  C076  F077         	movff	RADIO_WriteFSKFrequencyDeviation@num+1,RADIO_WriteFSKFrequencyDeviation@num+2
 26874  0064B4  C075  F076         	movff	RADIO_WriteFSKFrequencyDeviation@num,RADIO_WriteFSKFrequencyDeviation@num+1
 26875  0064B8  0100               	movlb	0	; () banked
 26876  0064BA  6B75               	clrf	RADIO_WriteFSKFrequencyDeviation@num& (0+255),b
 26877                           
 26878                           ; BSR set to: 0
 26879                           ;radio_driver_SX1276.c: 305: num /= 15625;
 26880  0064BC  C075  F064         	movff	RADIO_WriteFSKFrequencyDeviation@num,___lldiv@dividend
 26881  0064C0  C076  F065         	movff	RADIO_WriteFSKFrequencyDeviation@num+1,___lldiv@dividend+1
 26882  0064C4  C077  F066         	movff	RADIO_WriteFSKFrequencyDeviation@num+2,___lldiv@dividend+2
 26883  0064C8  C078  F067         	movff	RADIO_WriteFSKFrequencyDeviation@num+3,___lldiv@dividend+3
 26884  0064CC  0E09               	movlw	9
 26885  0064CE  6F68               	movwf	___lldiv@divisor& (0+255),b
 26886  0064D0  0E3D               	movlw	61
 26887  0064D2  6F69               	movwf	(___lldiv@divisor+1)& (0+255),b
 26888  0064D4  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 26889  0064D6  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 26890  0064D8  EC35  F030         	call	___lldiv	;wreg free
 26891  0064DC  C064  F075         	movff	?___lldiv,RADIO_WriteFSKFrequencyDeviation@num
 26892  0064E0  C065  F076         	movff	?___lldiv+1,RADIO_WriteFSKFrequencyDeviation@num+1
 26893  0064E4  C066  F077         	movff	?___lldiv+2,RADIO_WriteFSKFrequencyDeviation@num+2
 26894  0064E8  C067  F078         	movff	?___lldiv+3,RADIO_WriteFSKFrequencyDeviation@num+3
 26895                           
 26896                           ; BSR set to: 0
 26897                           ;radio_driver_SX1276.c: 309: RADIO_RegisterWrite(0x04, (num >> (8)) & 0xFF);
 26898  0064EC  C076  F066         	movff	RADIO_WriteFSKFrequencyDeviation@num+1,RADIO_RegisterWrite@value
 26899  0064F0  0E04               	movlw	4
 26900  0064F2  EC17  F03A         	call	_RADIO_RegisterWrite
 26901                           
 26902                           ;radio_driver_SX1276.c: 310: RADIO_RegisterWrite(0x05, num & 0xFF);
 26903  0064F6  C075  F066         	movff	RADIO_WriteFSKFrequencyDeviation@num,RADIO_RegisterWrite@value
 26904  0064FA  0E05               	movlw	5
 26905  0064FC  EF17  F03A         	goto	_RADIO_RegisterWrite
 26906  006500                     __end_of_RADIO_WriteFSKFrequencyDeviation:
 26907                           	opt stack 0
 26908                           tosu	equ	0xFFF
 26909                           tosh	equ	0xFFE
 26910                           tosl	equ	0xFFD
 26911                           pclath	equ	0xFFA
 26912                           tblptru	equ	0xFF8
 26913                           tblptrh	equ	0xFF7
 26914                           tblptrl	equ	0xFF6
 26915                           tablat	equ	0xFF5
 26916                           prodh	equ	0xFF4
 26917                           prodl	equ	0xFF3
 26918                           intcon	equ	0xFF2
 26919                           intcon2	equ	0xFF1
 26920                           intcon3	equ	0xFF0
 26921                           indf0	equ	0xFEF
 26922                           postinc0	equ	0xFEE
 26923                           fsr0h	equ	0xFEA
 26924                           fsr0l	equ	0xFE9
 26925                           wreg	equ	0xFE8
 26926                           postinc1	equ	0xFE6
 26927                           postdec1	equ	0xFE5
 26928                           plusw1	equ	0xFE3
 26929                           fsr1h	equ	0xFE2
 26930                           fsr1l	equ	0xFE1
 26931                           indf2	equ	0xFDF
 26932                           postinc2	equ	0xFDE
 26933                           postdec2	equ	0xFDD
 26934                           plusw2	equ	0xFDB
 26935                           fsr2h	equ	0xFDA
 26936                           fsr2l	equ	0xFD9
 26937                           status	equ	0xFD8
 26938                           
 26939 ;; *************** function _RADIO_WriteFSKBitRate *****************
 26940 ;; Defined at:
 26941 ;;		line 316 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26942 ;; Parameters:    Size  Location     Type
 26943 ;;  bitRate         4   17[BANK0 ] unsigned long 
 26944 ;; Auto vars:     Size  Location     Type
 26945 ;;  num             4   21[BANK0 ] unsigned long 
 26946 ;; Return value:  Size  Location     Type
 26947 ;;                  1    wreg      void 
 26948 ;; Registers used:
 26949 ;;		wreg, status,2, status,0, cstack
 26950 ;; Tracked objects:
 26951 ;;		On entry : 0/1
 26952 ;;		On exit  : 0/0
 26953 ;;		Unchanged: 0/0
 26954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 26955 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26956 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26958 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26959 ;;Total ram usage:        8 bytes
 26960 ;; Hardware stack levels used:    1
 26961 ;; Hardware stack levels required when called:   10
 26962 ;; This function calls:
 26963 ;;		_RADIO_RegisterWrite
 26964 ;;		___lldiv
 26965 ;; This function is called by:
 26966 ;;		_RADIO_WriteConfiguration
 26967 ;; This function uses a non-reentrant model
 26968 ;;
 26969                           
 26970                           	psect	text138
 26971  006500                     __ptext138:
 26972                           	opt stack 0
 26973  006500                     _RADIO_WriteFSKBitRate:
 26974                           	opt stack 16
 26975                           
 26976                           ;radio_driver_SX1276.c: 318: uint32_t num;
 26977                           ;radio_driver_SX1276.c: 320: num = 32000000;
 26978                           
 26979                           ;incstack = 0
 26980  006500  0100               	movlb	0	; () banked
 26981  006502  6B75               	clrf	RADIO_WriteFSKBitRate@num& (0+255),b
 26982  006504  0E48               	movlw	72
 26983  006506  6F76               	movwf	(RADIO_WriteFSKBitRate@num+1)& (0+255),b
 26984  006508  0EE8               	movlw	232
 26985  00650A  6F77               	movwf	(RADIO_WriteFSKBitRate@num+2)& (0+255),b
 26986  00650C  0E01               	movlw	1
 26987  00650E  6F78               	movwf	(RADIO_WriteFSKBitRate@num+3)& (0+255),b
 26988                           
 26989                           ; BSR set to: 0
 26990                           ;radio_driver_SX1276.c: 321: num /= bitRate;
 26991  006510  C075  F064         	movff	RADIO_WriteFSKBitRate@num,___lldiv@dividend
 26992  006514  C076  F065         	movff	RADIO_WriteFSKBitRate@num+1,___lldiv@dividend+1
 26993  006518  C077  F066         	movff	RADIO_WriteFSKBitRate@num+2,___lldiv@dividend+2
 26994  00651C  C078  F067         	movff	RADIO_WriteFSKBitRate@num+3,___lldiv@dividend+3
 26995  006520  C071  F068         	movff	RADIO_WriteFSKBitRate@bitRate,___lldiv@divisor
 26996  006524  C072  F069         	movff	RADIO_WriteFSKBitRate@bitRate+1,___lldiv@divisor+1
 26997  006528  C073  F06A         	movff	RADIO_WriteFSKBitRate@bitRate+2,___lldiv@divisor+2
 26998  00652C  C074  F06B         	movff	RADIO_WriteFSKBitRate@bitRate+3,___lldiv@divisor+3
 26999  006530  EC35  F030         	call	___lldiv	;wreg free
 27000  006534  C064  F075         	movff	?___lldiv,RADIO_WriteFSKBitRate@num
 27001  006538  C065  F076         	movff	?___lldiv+1,RADIO_WriteFSKBitRate@num+1
 27002  00653C  C066  F077         	movff	?___lldiv+2,RADIO_WriteFSKBitRate@num+2
 27003  006540  C067  F078         	movff	?___lldiv+3,RADIO_WriteFSKBitRate@num+3
 27004                           
 27005                           ; BSR set to: 0
 27006                           ;radio_driver_SX1276.c: 325: RADIO_RegisterWrite(0x02, (num >> (8)) & 0xFF);
 27007  006544  C076  F066         	movff	RADIO_WriteFSKBitRate@num+1,RADIO_RegisterWrite@value
 27008  006548  0E02               	movlw	2
 27009  00654A  EC17  F03A         	call	_RADIO_RegisterWrite
 27010                           
 27011                           ;radio_driver_SX1276.c: 326: RADIO_RegisterWrite(0x03, num & 0xFF);
 27012  00654E  C075  F066         	movff	RADIO_WriteFSKBitRate@num,RADIO_RegisterWrite@value
 27013  006552  0E03               	movlw	3
 27014  006554  EC17  F03A         	call	_RADIO_RegisterWrite
 27015                           
 27016                           ;radio_driver_SX1276.c: 327: RADIO_RegisterWrite(0x5D, 0x00);
 27017  006558  0100               	movlb	0	; () banked
 27018  00655A  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 27019  00655C  0E5D               	movlw	93
 27020  00655E  EF17  F03A         	goto	_RADIO_RegisterWrite
 27021  006562                     __end_of_RADIO_WriteFSKBitRate:
 27022                           	opt stack 0
 27023                           tosu	equ	0xFFF
 27024                           tosh	equ	0xFFE
 27025                           tosl	equ	0xFFD
 27026                           pclath	equ	0xFFA
 27027                           tblptru	equ	0xFF8
 27028                           tblptrh	equ	0xFF7
 27029                           tblptrl	equ	0xFF6
 27030                           tablat	equ	0xFF5
 27031                           prodh	equ	0xFF4
 27032                           prodl	equ	0xFF3
 27033                           intcon	equ	0xFF2
 27034                           intcon2	equ	0xFF1
 27035                           intcon3	equ	0xFF0
 27036                           indf0	equ	0xFEF
 27037                           postinc0	equ	0xFEE
 27038                           fsr0h	equ	0xFEA
 27039                           fsr0l	equ	0xFE9
 27040                           wreg	equ	0xFE8
 27041                           postinc1	equ	0xFE6
 27042                           postdec1	equ	0xFE5
 27043                           plusw1	equ	0xFE3
 27044                           fsr1h	equ	0xFE2
 27045                           fsr1l	equ	0xFE1
 27046                           indf2	equ	0xFDF
 27047                           postinc2	equ	0xFDE
 27048                           postdec2	equ	0xFDD
 27049                           plusw2	equ	0xFDB
 27050                           fsr2h	equ	0xFDA
 27051                           fsr2l	equ	0xFD9
 27052                           status	equ	0xFD8
 27053                           
 27054 ;; *************** function _PrepareJoinRequestFrame *****************
 27055 ;; Defined at:
 27056 ;;		line 1806 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 27057 ;; Parameters:    Size  Location     Type
 27058 ;;		None
 27059 ;; Auto vars:     Size  Location     Type
 27060 ;;  mic             4  133[BANK0 ] unsigned long 
 27061 ;;  iCtr            1  139[BANK0 ] unsigned char 
 27062 ;;  bufferIndex     1  138[BANK0 ] unsigned char 
 27063 ;;  mhdr            1  137[BANK0 ] struct .
 27064 ;; Return value:  Size  Location     Type
 27065 ;;                  1    wreg      unsigned char 
 27066 ;; Registers used:
 27067 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27068 ;; Tracked objects:
 27069 ;;		On entry : F/2
 27070 ;;		On exit  : F/0
 27071 ;;		Unchanged: 0/0
 27072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 27073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27074 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27075 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27076 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27077 ;;Total ram usage:        9 bytes
 27078 ;; Hardware stack levels used:    1
 27079 ;; Hardware stack levels required when called:   13
 27080 ;; This function calls:
 27081 ;;		_ComputeMic
 27082 ;;		_Random
 27083 ;;		_memcpy
 27084 ;;		_memset
 27085 ;; This function is called by:
 27086 ;;		_LORAWAN_Join
 27087 ;; This function uses a non-reentrant model
 27088 ;;
 27089                           
 27090                           	psect	text139
 27091  004684                     __ptext139:
 27092                           	opt stack 0
 27093  004684                     _PrepareJoinRequestFrame:
 27094                           	opt stack 16
 27095                           
 27096                           ; BSR set to: 2
 27097                           ;lorawan.c: 1808: uint8_t bufferIndex = 0, iCtr;
 27098                           
 27099                           ;incstack = 0
 27100  004684  0100               	movlb	0	; () banked
 27101  004686  6BEA               	clrf	PrepareJoinRequestFrame@bufferIndex& (0+255),b
 27102                           
 27103                           ; BSR set to: 0
 27104                           ;lorawan.c: 1809: Mhdr_t mhdr;
 27105                           ;lorawan.c: 1810: uint32_t mic;
 27106                           ;lorawan.c: 1812: memset (macBuffer, 0, sizeof(macBuffer) );
 27107  004688  0EE0               	movlw	low _macBuffer
 27108  00468A  6F64               	movwf	memset@p1& (0+255),b
 27109  00468C  0E04               	movlw	high _macBuffer
 27110  00468E  6F65               	movwf	(memset@p1+1)& (0+255),b
 27111  004690  6B67               	clrf	(memset@c+1)& (0+255),b
 27112  004692  6B66               	clrf	memset@c& (0+255),b
 27113  004694  0E01               	movlw	1
 27114  004696  6F69               	movwf	(memset@n+1)& (0+255),b
 27115  004698  0E0F               	movlw	15
 27116  00469A  6F68               	movwf	memset@n& (0+255),b
 27117  00469C  ECE0  F038         	call	_memset	;wreg free
 27118                           
 27119                           ; BSR set to: 0
 27120                           ;lorawan.c: 1814: mhdr.bits.mType = FRAME_TYPE_JOIN_REQ;
 27121  0046A0  0E1F               	movlw	-225
 27122  0046A2  17E9               	andwf	PrepareJoinRequestFrame@mhdr& (0+255),f,b
 27123                           
 27124                           ; BSR set to: 0
 27125                           ;lorawan.c: 1815: mhdr.bits.major = 0;
 27126  0046A4  0EFC               	movlw	-4
 27127  0046A6  17E9               	andwf	PrepareJoinRequestFrame@mhdr& (0+255),f,b
 27128                           
 27129                           ; BSR set to: 0
 27130                           ;lorawan.c: 1816: mhdr.bits.rfu = 0;
 27131  0046A8  0EE3               	movlw	-29
 27132  0046AA  17E9               	andwf	PrepareJoinRequestFrame@mhdr& (0+255),f,b
 27133                           
 27134                           ; BSR set to: 0
 27135                           ;lorawan.c: 1818: macBuffer[bufferIndex++] = mhdr.value;
 27136  0046AC  EE24  F0E0         	lfsr	2,_macBuffer
 27137  0046B0  C0E9  FFDF         	movff	PrepareJoinRequestFrame@mhdr,indf2
 27138                           
 27139                           ; BSR set to: 0
 27140  0046B4  2BEA               	incf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27141                           
 27142                           ; BSR set to: 0
 27143                           ;lorawan.c: 1820: for(iCtr = 0; iCtr < 8; iCtr ++)
 27144  0046B6  6BEB               	clrf	PrepareJoinRequestFrame@iCtr& (0+255),b
 27145  0046B8                     l15376:
 27146                           
 27147                           ; BSR set to: 0
 27148                           ;lorawan.c: 1821: {
 27149                           ;lorawan.c: 1822: macBuffer[bufferIndex + iCtr] = loRa.activationParameters.applicationE
      +                          ui.buffer[7 - iCtr];
 27150  0046B8  51EB               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 27151  0046BA  0859               	sublw	low (_loRa+89)
 27152  0046BC  6ED9               	movwf	fsr2l,c
 27153  0046BE  0E00               	movlw	0
 27154  0046C0  A0D8               	btfss	status,0,c
 27155  0046C2  2AE8               	incf	wreg,f,c
 27156  0046C4  0802               	sublw	high (_loRa+89)
 27157  0046C6  6EDA               	movwf	fsr2h,c
 27158  0046C8  0EE0               	movlw	low _macBuffer
 27159  0046CA  6FE3               	movwf	??_PrepareJoinRequestFrame& (0+255),b
 27160  0046CC  0E04               	movlw	high _macBuffer
 27161  0046CE  6FE4               	movwf	(??_PrepareJoinRequestFrame+1)& (0+255),b
 27162  0046D0  51EA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27163  0046D2  27E3               	addwf	??_PrepareJoinRequestFrame& (0+255),f,b
 27164  0046D4  0E00               	movlw	0
 27165  0046D6  23E4               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 27166  0046D8  51EB               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 27167  0046DA  25E3               	addwf	??_PrepareJoinRequestFrame& (0+255),w,b
 27168  0046DC  6EE9               	movwf	fsr0l,c
 27169  0046DE  0E00               	movlw	0
 27170  0046E0  21E4               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),w,b
 27171  0046E2  6EEA               	movwf	fsr0h,c
 27172  0046E4  CFDF FFEF          	movff	indf2,indf0
 27173                           
 27174                           ; BSR set to: 0
 27175  0046E8  2BEB               	incf	PrepareJoinRequestFrame@iCtr& (0+255),f,b
 27176                           
 27177                           ; BSR set to: 0
 27178  0046EA  0E07               	movlw	7
 27179  0046EC  65EB               	cpfsgt	PrepareJoinRequestFrame@iCtr& (0+255),b
 27180  0046EE  D7E4               	goto	l15376
 27181                           
 27182                           ; BSR set to: 0
 27183                           ;lorawan.c: 1823: }
 27184                           ;lorawan.c: 1824: bufferIndex = bufferIndex + sizeof(loRa.activationParameters.applicati
      +                          onEui);
 27185  0046F0  0E08               	movlw	8
 27186  0046F2  27EA               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27187                           
 27188                           ; BSR set to: 0
 27189                           ;lorawan.c: 1827: for (iCtr = 0; iCtr < 8; iCtr ++)
 27190  0046F4  6BEB               	clrf	PrepareJoinRequestFrame@iCtr& (0+255),b
 27191  0046F6                     l15388:
 27192                           
 27193                           ; BSR set to: 0
 27194                           ;lorawan.c: 1828: {
 27195                           ;lorawan.c: 1829: macBuffer[bufferIndex + iCtr] = loRa.activationParameters.deviceEui.bu
      +                          ffer[7 - iCtr];
 27196  0046F6  51EB               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 27197  0046F8  0861               	sublw	low (_loRa+97)
 27198  0046FA  6ED9               	movwf	fsr2l,c
 27199  0046FC  0E00               	movlw	0
 27200  0046FE  A0D8               	btfss	status,0,c
 27201  004700  2AE8               	incf	wreg,f,c
 27202  004702  0802               	sublw	high (_loRa+97)
 27203  004704  6EDA               	movwf	fsr2h,c
 27204  004706  0EE0               	movlw	low _macBuffer
 27205  004708  6FE3               	movwf	??_PrepareJoinRequestFrame& (0+255),b
 27206  00470A  0E04               	movlw	high _macBuffer
 27207  00470C  6FE4               	movwf	(??_PrepareJoinRequestFrame+1)& (0+255),b
 27208  00470E  51EA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27209  004710  27E3               	addwf	??_PrepareJoinRequestFrame& (0+255),f,b
 27210  004712  0E00               	movlw	0
 27211  004714  23E4               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 27212  004716  51EB               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 27213  004718  25E3               	addwf	??_PrepareJoinRequestFrame& (0+255),w,b
 27214  00471A  6EE9               	movwf	fsr0l,c
 27215  00471C  0E00               	movlw	0
 27216  00471E  21E4               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),w,b
 27217  004720  6EEA               	movwf	fsr0h,c
 27218  004722  CFDF FFEF          	movff	indf2,indf0
 27219                           
 27220                           ; BSR set to: 0
 27221  004726  2BEB               	incf	PrepareJoinRequestFrame@iCtr& (0+255),f,b
 27222                           
 27223                           ; BSR set to: 0
 27224  004728  0E07               	movlw	7
 27225  00472A  65EB               	cpfsgt	PrepareJoinRequestFrame@iCtr& (0+255),b
 27226  00472C  D7E4               	goto	l15388
 27227                           
 27228                           ; BSR set to: 0
 27229                           ;lorawan.c: 1830: }
 27230                           ;lorawan.c: 1831: bufferIndex = bufferIndex + sizeof( loRa.activationParameters.deviceEu
      +                          i );
 27231  00472E  0E08               	movlw	8
 27232  004730  27EA               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27233                           
 27234                           ; BSR set to: 0
 27235                           ;lorawan.c: 1833: loRa.devNonce = Random ((65535U));
 27236  004732  6978               	setf	(Random@max+1)& (0+255),b
 27237  004734  6977               	setf	Random@max& (0+255),b
 27238  004736  EC89  F039         	call	_Random	;wreg free
 27239  00473A  C077  F2D2         	movff	?_Random,_loRa+210
 27240  00473E  C078  F2D3         	movff	?_Random+1,_loRa+211
 27241                           
 27242                           ; BSR set to: 0
 27243                           ;lorawan.c: 1834: memcpy (&macBuffer[bufferIndex], &loRa.devNonce, sizeof (loRa.devNonce
      +                          ) );
 27244  004742  0EE0               	movlw	low _macBuffer
 27245  004744  25EA               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27246  004746  6F64               	movwf	memcpy@d1& (0+255),b
 27247  004748  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 27248  00474A  0E04               	movlw	high _macBuffer
 27249  00474C  2365               	addwfc	(memcpy@d1+1)& (0+255),f,b
 27250  00474E  0ED2               	movlw	low (_loRa+210)
 27251  004750  6F66               	movwf	memcpy@s1& (0+255),b
 27252  004752  0E02               	movlw	high (_loRa+210)
 27253  004754  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 27254  004756  6B69               	clrf	(memcpy@n+1)& (0+255),b
 27255  004758  0E02               	movlw	2
 27256  00475A  6F68               	movwf	memcpy@n& (0+255),b
 27257  00475C  ECCA  F033         	call	_memcpy	;wreg free
 27258                           
 27259                           ; BSR set to: 0
 27260                           ;lorawan.c: 1835: bufferIndex = bufferIndex + sizeof( loRa.devNonce );
 27261  004760  0E02               	movlw	2
 27262  004762  27EA               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27263                           
 27264                           ; BSR set to: 0
 27265                           ;lorawan.c: 1837: mic = ComputeMic (loRa.activationParameters.applicationKey, macBuffer,
      +                           bufferIndex);
 27266  004764  0E42               	movlw	low (_loRa+66)
 27267  004766  6FDA               	movwf	ComputeMic@key& (0+255),b
 27268  004768  0E02               	movlw	high (_loRa+66)
 27269  00476A  6FDB               	movwf	(ComputeMic@key+1)& (0+255),b
 27270  00476C  0EE0               	movlw	low _macBuffer
 27271  00476E  6FDC               	movwf	ComputeMic@buffer& (0+255),b
 27272  004770  0E04               	movlw	high _macBuffer
 27273  004772  6FDD               	movwf	(ComputeMic@buffer+1)& (0+255),b
 27274  004774  C0EA  F0DE         	movff	PrepareJoinRequestFrame@bufferIndex,ComputeMic@bufferLength
 27275  004778  EC1E  F034         	call	_ComputeMic	;wreg free
 27276  00477C  C0DA  F0E5         	movff	?_ComputeMic,PrepareJoinRequestFrame@mic
 27277  004780  C0DB  F0E6         	movff	?_ComputeMic+1,PrepareJoinRequestFrame@mic+1
 27278  004784  C0DC  F0E7         	movff	?_ComputeMic+2,PrepareJoinRequestFrame@mic+2
 27279  004788  C0DD  F0E8         	movff	?_ComputeMic+3,PrepareJoinRequestFrame@mic+3
 27280                           
 27281                           ; BSR set to: 0
 27282                           ;lorawan.c: 1839: memcpy ( &macBuffer[bufferIndex], &mic, sizeof (mic));
 27283  00478C  0EE0               	movlw	low _macBuffer
 27284  00478E  25EA               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27285  004790  6F64               	movwf	memcpy@d1& (0+255),b
 27286  004792  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 27287  004794  0E04               	movlw	high _macBuffer
 27288  004796  2365               	addwfc	(memcpy@d1+1)& (0+255),f,b
 27289  004798  0EE5               	movlw	low PrepareJoinRequestFrame@mic
 27290  00479A  6F66               	movwf	memcpy@s1& (0+255),b
 27291  00479C  6B67               	clrf	(memcpy@s1+1)& (0+255),b
 27292  00479E  6B69               	clrf	(memcpy@n+1)& (0+255),b
 27293  0047A0  0E04               	movlw	4
 27294  0047A2  6F68               	movwf	memcpy@n& (0+255),b
 27295  0047A4  ECCA  F033         	call	_memcpy	;wreg free
 27296                           
 27297                           ; BSR set to: 0
 27298                           ;lorawan.c: 1840: bufferIndex = bufferIndex + sizeof(mic);
 27299  0047A8  0E04               	movlw	4
 27300  0047AA  27EA               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27301                           
 27302                           ; BSR set to: 0
 27303                           ;lorawan.c: 1842: return bufferIndex;
 27304  0047AC  51EA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27305                           
 27306                           ; BSR set to: 0
 27307  0047AE  0012               	return		;funcret
 27308  0047B0                     __end_of_PrepareJoinRequestFrame:
 27309                           	opt stack 0
 27310                           tosu	equ	0xFFF
 27311                           tosh	equ	0xFFE
 27312                           tosl	equ	0xFFD
 27313                           pclath	equ	0xFFA
 27314                           tblptru	equ	0xFF8
 27315                           tblptrh	equ	0xFF7
 27316                           tblptrl	equ	0xFF6
 27317                           tablat	equ	0xFF5
 27318                           prodh	equ	0xFF4
 27319                           prodl	equ	0xFF3
 27320                           intcon	equ	0xFF2
 27321                           intcon2	equ	0xFF1
 27322                           intcon3	equ	0xFF0
 27323                           indf0	equ	0xFEF
 27324                           postinc0	equ	0xFEE
 27325                           fsr0h	equ	0xFEA
 27326                           fsr0l	equ	0xFE9
 27327                           wreg	equ	0xFE8
 27328                           postinc1	equ	0xFE6
 27329                           postdec1	equ	0xFE5
 27330                           plusw1	equ	0xFE3
 27331                           fsr1h	equ	0xFE2
 27332                           fsr1l	equ	0xFE1
 27333                           indf2	equ	0xFDF
 27334                           postinc2	equ	0xFDE
 27335                           postdec2	equ	0xFDD
 27336                           plusw2	equ	0xFDB
 27337                           fsr2h	equ	0xFDA
 27338                           fsr2l	equ	0xFD9
 27339                           status	equ	0xFD8
 27340                           
 27341 ;; *************** function _Random *****************
 27342 ;; Defined at:
 27343 ;;		line 1116 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 27344 ;; Parameters:    Size  Location     Type
 27345 ;;  max             2   23[BANK0 ] unsigned int 
 27346 ;; Auto vars:     Size  Location     Type
 27347 ;;		None
 27348 ;; Return value:  Size  Location     Type
 27349 ;;                  2   23[BANK0 ] unsigned int 
 27350 ;; Registers used:
 27351 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 27352 ;; Tracked objects:
 27353 ;;		On entry : F/0
 27354 ;;		On exit  : F/0
 27355 ;;		Unchanged: 0/0
 27356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 27357 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27360 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27361 ;;Total ram usage:        2 bytes
 27362 ;; Hardware stack levels used:    1
 27363 ;; Hardware stack levels required when called:    9
 27364 ;; This function calls:
 27365 ;;		___lwmod
 27366 ;;		_rand
 27367 ;; This function is called by:
 27368 ;;		_SearchAvailableChannel
 27369 ;;		_PrepareJoinRequestFrame
 27370 ;; This function uses a non-reentrant model
 27371 ;;
 27372                           
 27373                           	psect	text140
 27374  007312                     __ptext140:
 27375                           	opt stack 0
 27376  007312                     _Random:
 27377                           	opt stack 17
 27378                           
 27379                           ; BSR set to: 0
 27380                           ;lorawan.c: 1118: return (rand () % max);
 27381                           
 27382                           ; BSR set to: 0
 27383                           ;incstack = 0
 27384  007312  EC97  F034         	call	_rand	;wreg free
 27385  007316  C070  F072         	movff	?_rand,___lwmod@dividend
 27386  00731A  C071  F073         	movff	?_rand+1,___lwmod@dividend+1
 27387  00731E  C077  F074         	movff	Random@max,___lwmod@divisor
 27388  007322  C078  F075         	movff	Random@max+1,___lwmod@divisor+1
 27389  007326  ECA4  F036         	call	___lwmod	;wreg free
 27390  00732A  C072  F077         	movff	?___lwmod,?_Random
 27391  00732E  C073  F078         	movff	?___lwmod+1,?_Random+1
 27392                           
 27393                           ; BSR set to: 0
 27394  007332  0012               	return		;funcret
 27395  007334                     __end_of_Random:
 27396                           	opt stack 0
 27397                           tosu	equ	0xFFF
 27398                           tosh	equ	0xFFE
 27399                           tosl	equ	0xFFD
 27400                           pclath	equ	0xFFA
 27401                           tblptru	equ	0xFF8
 27402                           tblptrh	equ	0xFF7
 27403                           tblptrl	equ	0xFF6
 27404                           tablat	equ	0xFF5
 27405                           prodh	equ	0xFF4
 27406                           prodl	equ	0xFF3
 27407                           intcon	equ	0xFF2
 27408                           intcon2	equ	0xFF1
 27409                           intcon3	equ	0xFF0
 27410                           indf0	equ	0xFEF
 27411                           postinc0	equ	0xFEE
 27412                           fsr0h	equ	0xFEA
 27413                           fsr0l	equ	0xFE9
 27414                           wreg	equ	0xFE8
 27415                           postinc1	equ	0xFE6
 27416                           postdec1	equ	0xFE5
 27417                           plusw1	equ	0xFE3
 27418                           fsr1h	equ	0xFE2
 27419                           fsr1l	equ	0xFE1
 27420                           indf2	equ	0xFDF
 27421                           postinc2	equ	0xFDE
 27422                           postdec2	equ	0xFDD
 27423                           plusw2	equ	0xFDB
 27424                           fsr2h	equ	0xFDA
 27425                           fsr2l	equ	0xFD9
 27426                           status	equ	0xFD8
 27427                           
 27428 ;; *************** function _rand *****************
 27429 ;; Defined at:
 27430 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\rand.c"
 27431 ;; Parameters:    Size  Location     Type
 27432 ;;		None
 27433 ;; Auto vars:     Size  Location     Type
 27434 ;;		None
 27435 ;; Return value:  Size  Location     Type
 27436 ;;                  2   16[BANK0 ] int 
 27437 ;; Registers used:
 27438 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 27439 ;; Tracked objects:
 27440 ;;		On entry : F/0
 27441 ;;		On exit  : F/0
 27442 ;;		Unchanged: 0/0
 27443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 27444 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27447 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27448 ;;Total ram usage:        2 bytes
 27449 ;; Hardware stack levels used:    1
 27450 ;; Hardware stack levels required when called:    8
 27451 ;; This function calls:
 27452 ;;		___lmul
 27453 ;; This function is called by:
 27454 ;;		_Random
 27455 ;; This function uses a non-reentrant model
 27456 ;;
 27457                           
 27458                           	psect	text141
 27459  00692E                     __ptext141:
 27460                           	opt stack 0
 27461  00692E                     _rand:
 27462                           	opt stack 17
 27463                           
 27464                           ; BSR set to: 0
 27465                           
 27466                           ; BSR set to: 0
 27467                           ;incstack = 0
 27468  00692E  C056  F064         	movff	_randx,___lmul@multiplier
 27469  006932  C057  F065         	movff	_randx+1,___lmul@multiplier+1
 27470  006936  C058  F066         	movff	_randx+2,___lmul@multiplier+2
 27471  00693A  C059  F067         	movff	_randx+3,___lmul@multiplier+3
 27472  00693E  0E6D               	movlw	109
 27473  006940  6F68               	movwf	___lmul@multiplicand& (0+255),b
 27474  006942  0E4E               	movlw	78
 27475  006944  6F69               	movwf	(___lmul@multiplicand+1)& (0+255),b
 27476  006946  0EC6               	movlw	198
 27477  006948  6F6A               	movwf	(___lmul@multiplicand+2)& (0+255),b
 27478  00694A  0E41               	movlw	65
 27479  00694C  6F6B               	movwf	(___lmul@multiplicand+3)& (0+255),b
 27480  00694E  EC79  F02E         	call	___lmul	;wreg free
 27481  006952  C064  F056         	movff	?___lmul,_randx
 27482  006956  C065  F057         	movff	?___lmul+1,_randx+1
 27483  00695A  C066  F058         	movff	?___lmul+2,_randx+2
 27484  00695E  C067  F059         	movff	?___lmul+3,_randx+3
 27485                           
 27486                           ; BSR set to: 0
 27487  006962  0E39               	movlw	57
 27488  006964  2656               	addwf	_randx,f,c
 27489  006966  0E30               	movlw	48
 27490  006968  2257               	addwfc	_randx+1,f,c
 27491  00696A  0E00               	movlw	0
 27492  00696C  2258               	addwfc	_randx+2,f,c
 27493  00696E  2259               	addwfc	_randx+3,f,c
 27494                           
 27495                           ; BSR set to: 0
 27496  006970  5058               	movf	_randx+2,w,c
 27497  006972  6F70               	movwf	?_rand& (0+255),b
 27498  006974  0E7F               	movlw	127
 27499  006976  1459               	andwf	_randx+3,w,c
 27500  006978  6F71               	movwf	(?_rand+1)& (0+255),b
 27501                           
 27502                           ; BSR set to: 0
 27503  00697A  0012               	return		;funcret
 27504  00697C                     __end_of_rand:
 27505                           	opt stack 0
 27506                           tosu	equ	0xFFF
 27507                           tosh	equ	0xFFE
 27508                           tosl	equ	0xFFD
 27509                           pclath	equ	0xFFA
 27510                           tblptru	equ	0xFF8
 27511                           tblptrh	equ	0xFF7
 27512                           tblptrl	equ	0xFF6
 27513                           tablat	equ	0xFF5
 27514                           prodh	equ	0xFF4
 27515                           prodl	equ	0xFF3
 27516                           intcon	equ	0xFF2
 27517                           intcon2	equ	0xFF1
 27518                           intcon3	equ	0xFF0
 27519                           indf0	equ	0xFEF
 27520                           postinc0	equ	0xFEE
 27521                           fsr0h	equ	0xFEA
 27522                           fsr0l	equ	0xFE9
 27523                           wreg	equ	0xFE8
 27524                           postinc1	equ	0xFE6
 27525                           postdec1	equ	0xFE5
 27526                           plusw1	equ	0xFE3
 27527                           fsr1h	equ	0xFE2
 27528                           fsr1l	equ	0xFE1
 27529                           indf2	equ	0xFDF
 27530                           postinc2	equ	0xFDE
 27531                           postdec2	equ	0xFDD
 27532                           plusw2	equ	0xFDB
 27533                           fsr2h	equ	0xFDA
 27534                           fsr2l	equ	0xFD9
 27535                           status	equ	0xFD8
 27536                           
 27537 ;; *************** function ___lmul *****************
 27538 ;; Defined at:
 27539 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
 27540 ;; Parameters:    Size  Location     Type
 27541 ;;  multiplier      4    4[BANK0 ] unsigned long 
 27542 ;;  multiplicand    4    8[BANK0 ] unsigned long 
 27543 ;; Auto vars:     Size  Location     Type
 27544 ;;  product         4   12[BANK0 ] unsigned long 
 27545 ;; Return value:  Size  Location     Type
 27546 ;;                  4    4[BANK0 ] unsigned long 
 27547 ;; Registers used:
 27548 ;;		wreg, status,2, status,0, prodl, prodh
 27549 ;; Tracked objects:
 27550 ;;		On entry : F/0
 27551 ;;		On exit  : F/0
 27552 ;;		Unchanged: 0/0
 27553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 27554 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27555 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27557 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27558 ;;Total ram usage:       12 bytes
 27559 ;; Hardware stack levels used:    1
 27560 ;; Hardware stack levels required when called:    7
 27561 ;; This function calls:
 27562 ;;		Nothing
 27563 ;; This function is called by:
 27564 ;;		_RADIO_WriteConfiguration
 27565 ;;		_ExecuteNewChannel
 27566 ;;		_ExecuteRxParamSetupReq
 27567 ;;		_UpdateCfList
 27568 ;;		_rand
 27569 ;; This function uses a non-reentrant model
 27570 ;;
 27571                           
 27572                           	psect	text142
 27573  005CF2                     __ptext142:
 27574                           	opt stack 0
 27575  005CF2                     ___lmul:
 27576                           	opt stack 17
 27577                           
 27578                           ; BSR set to: 0
 27579                           
 27580                           ; BSR set to: 0
 27581                           ;incstack = 0
 27582  005CF2  5164               	movf	___lmul@multiplier& (0+255),w,b
 27583  005CF4  0368               	mulwf	___lmul@multiplicand& (0+255),b
 27584  005CF6  CFF3 F06C          	movff	prodl,___lmul@product
 27585  005CFA  CFF4 F06D          	movff	prodh,___lmul@product+1
 27586  005CFE  6B6E               	clrf	(___lmul@product+2)& (0+255),b
 27587  005D00  6B6F               	clrf	(___lmul@product+3)& (0+255),b
 27588  005D02  5164               	movf	___lmul@multiplier& (0+255),w,b
 27589  005D04  0369               	mulwf	(___lmul@multiplicand+1)& (0+255),b
 27590  005D06  50F3               	movf	prodl,w,c
 27591  005D08  276D               	addwf	(___lmul@product+1)& (0+255),f,b
 27592  005D0A  50F4               	movf	prodh,w,c
 27593  005D0C  236E               	addwfc	(___lmul@product+2)& (0+255),f,b
 27594  005D0E  0E00               	movlw	0
 27595  005D10  236F               	addwfc	(___lmul@product+3)& (0+255),f,b
 27596  005D12  5165               	movf	(___lmul@multiplier+1)& (0+255),w,b
 27597  005D14  0368               	mulwf	___lmul@multiplicand& (0+255),b
 27598  005D16  50F3               	movf	prodl,w,c
 27599  005D18  276D               	addwf	(___lmul@product+1)& (0+255),f,b
 27600  005D1A  50F4               	movf	prodh,w,c
 27601  005D1C  236E               	addwfc	(___lmul@product+2)& (0+255),f,b
 27602  005D1E  0E00               	movlw	0
 27603  005D20  236F               	addwfc	(___lmul@product+3)& (0+255),f,b
 27604  005D22  5164               	movf	___lmul@multiplier& (0+255),w,b
 27605  005D24  036A               	mulwf	(___lmul@multiplicand+2)& (0+255),b
 27606  005D26  50F3               	movf	prodl,w,c
 27607  005D28  276E               	addwf	(___lmul@product+2)& (0+255),f,b
 27608  005D2A  50F4               	movf	prodh,w,c
 27609  005D2C  236F               	addwfc	(___lmul@product+3)& (0+255),f,b
 27610  005D2E  5165               	movf	(___lmul@multiplier+1)& (0+255),w,b
 27611  005D30  0369               	mulwf	(___lmul@multiplicand+1)& (0+255),b
 27612  005D32  50F3               	movf	prodl,w,c
 27613  005D34  276E               	addwf	(___lmul@product+2)& (0+255),f,b
 27614  005D36  50F4               	movf	prodh,w,c
 27615  005D38  236F               	addwfc	(___lmul@product+3)& (0+255),f,b
 27616  005D3A  5166               	movf	(___lmul@multiplier+2)& (0+255),w,b
 27617  005D3C  0368               	mulwf	___lmul@multiplicand& (0+255),b
 27618  005D3E  50F3               	movf	prodl,w,c
 27619  005D40  276E               	addwf	(___lmul@product+2)& (0+255),f,b
 27620  005D42  50F4               	movf	prodh,w,c
 27621  005D44  236F               	addwfc	(___lmul@product+3)& (0+255),f,b
 27622  005D46  516B               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 27623  005D48  0364               	mulwf	___lmul@multiplier& (0+255),b
 27624  005D4A  50F3               	movf	prodl,w,c
 27625  005D4C  276F               	addwf	(___lmul@product+3)& (0+255),f,b
 27626  005D4E  5165               	movf	(___lmul@multiplier+1)& (0+255),w,b
 27627  005D50  036A               	mulwf	(___lmul@multiplicand+2)& (0+255),b
 27628  005D52  50F3               	movf	prodl,w,c
 27629  005D54  276F               	addwf	(___lmul@product+3)& (0+255),f,b
 27630  005D56  5166               	movf	(___lmul@multiplier+2)& (0+255),w,b
 27631  005D58  0369               	mulwf	(___lmul@multiplicand+1)& (0+255),b
 27632  005D5A  50F3               	movf	prodl,w,c
 27633  005D5C  276F               	addwf	(___lmul@product+3)& (0+255),f,b
 27634  005D5E  5167               	movf	(___lmul@multiplier+3)& (0+255),w,b
 27635  005D60  0368               	mulwf	___lmul@multiplicand& (0+255),b
 27636  005D62  50F3               	movf	prodl,w,c
 27637  005D64  276F               	addwf	(___lmul@product+3)& (0+255),f,b
 27638                           
 27639                           ; BSR set to: 0
 27640  005D66  C06C  F064         	movff	___lmul@product,?___lmul
 27641  005D6A  C06D  F065         	movff	___lmul@product+1,?___lmul+1
 27642  005D6E  C06E  F066         	movff	___lmul@product+2,?___lmul+2
 27643  005D72  C06F  F067         	movff	___lmul@product+3,?___lmul+3
 27644                           
 27645                           ; BSR set to: 0
 27646  005D76  0012               	return		;funcret
 27647  005D78                     __end_of___lmul:
 27648                           	opt stack 0
 27649                           tosu	equ	0xFFF
 27650                           tosh	equ	0xFFE
 27651                           tosl	equ	0xFFD
 27652                           pclath	equ	0xFFA
 27653                           tblptru	equ	0xFF8
 27654                           tblptrh	equ	0xFF7
 27655                           tblptrl	equ	0xFF6
 27656                           tablat	equ	0xFF5
 27657                           prodh	equ	0xFF4
 27658                           prodl	equ	0xFF3
 27659                           intcon	equ	0xFF2
 27660                           intcon2	equ	0xFF1
 27661                           intcon3	equ	0xFF0
 27662                           indf0	equ	0xFEF
 27663                           postinc0	equ	0xFEE
 27664                           fsr0h	equ	0xFEA
 27665                           fsr0l	equ	0xFE9
 27666                           wreg	equ	0xFE8
 27667                           postinc1	equ	0xFE6
 27668                           postdec1	equ	0xFE5
 27669                           plusw1	equ	0xFE3
 27670                           fsr1h	equ	0xFE2
 27671                           fsr1l	equ	0xFE1
 27672                           indf2	equ	0xFDF
 27673                           postinc2	equ	0xFDE
 27674                           postdec2	equ	0xFDD
 27675                           plusw2	equ	0xFDB
 27676                           fsr2h	equ	0xFDA
 27677                           fsr2l	equ	0xFD9
 27678                           status	equ	0xFD8
 27679                           
 27680 ;; *************** function ___lwmod *****************
 27681 ;; Defined at:
 27682 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
 27683 ;; Parameters:    Size  Location     Type
 27684 ;;  dividend        2   18[BANK0 ] unsigned int 
 27685 ;;  divisor         2   20[BANK0 ] unsigned int 
 27686 ;; Auto vars:     Size  Location     Type
 27687 ;;  counter         1   22[BANK0 ] unsigned char 
 27688 ;; Return value:  Size  Location     Type
 27689 ;;                  2   18[BANK0 ] unsigned int 
 27690 ;; Registers used:
 27691 ;;		wreg, status,2, status,0
 27692 ;; Tracked objects:
 27693 ;;		On entry : F/0
 27694 ;;		On exit  : F/0
 27695 ;;		Unchanged: 0/0
 27696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 27697 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27698 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27700 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27701 ;;Total ram usage:        5 bytes
 27702 ;; Hardware stack levels used:    1
 27703 ;; Hardware stack levels required when called:    7
 27704 ;; This function calls:
 27705 ;;		Nothing
 27706 ;; This function is called by:
 27707 ;;		_Random
 27708 ;; This function uses a non-reentrant model
 27709 ;;
 27710                           
 27711                           	psect	text143
 27712  006D48                     __ptext143:
 27713                           	opt stack 0
 27714  006D48                     ___lwmod:
 27715                           	opt stack 18
 27716                           
 27717                           ; BSR set to: 0
 27718                           
 27719                           ; BSR set to: 0
 27720                           ;incstack = 0
 27721  006D48  5174               	movf	___lwmod@divisor& (0+255),w,b
 27722  006D4A  1175               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 27723  006D4C  E017               	bz	l2983
 27724                           
 27725                           ; BSR set to: 0
 27726  006D4E  0E01               	movlw	1
 27727  006D50  6F76               	movwf	___lwmod@counter& (0+255),b
 27728  006D52  D004               	goto	l12148
 27729  006D54                     l12146:
 27730                           
 27731                           ; BSR set to: 0
 27732  006D54  90D8               	bcf	status,0,c
 27733  006D56  3774               	rlcf	___lwmod@divisor& (0+255),f,b
 27734  006D58  3775               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 27735  006D5A  2B76               	incf	___lwmod@counter& (0+255),f,b
 27736  006D5C                     l12148:
 27737                           
 27738                           ; BSR set to: 0
 27739  006D5C  AF75               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 27740  006D5E  D7FA               	goto	l12146
 27741  006D60                     l12150:
 27742                           
 27743                           ; BSR set to: 0
 27744  006D60  5174               	movf	___lwmod@divisor& (0+255),w,b
 27745  006D62  5D72               	subwf	___lwmod@dividend& (0+255),w,b
 27746  006D64  5175               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27747  006D66  5973               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 27748  006D68  E304               	bnc	l12154
 27749                           
 27750                           ; BSR set to: 0
 27751  006D6A  5174               	movf	___lwmod@divisor& (0+255),w,b
 27752  006D6C  5F72               	subwf	___lwmod@dividend& (0+255),f,b
 27753  006D6E  5175               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27754  006D70  5B73               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 27755  006D72                     l12154:
 27756                           
 27757                           ; BSR set to: 0
 27758  006D72  90D8               	bcf	status,0,c
 27759  006D74  3375               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 27760  006D76  3374               	rrcf	___lwmod@divisor& (0+255),f,b
 27761                           
 27762                           ; BSR set to: 0
 27763  006D78  2F76               	decfsz	___lwmod@counter& (0+255),f,b
 27764  006D7A  D7F2               	goto	l12150
 27765  006D7C                     l2983:
 27766                           
 27767                           ; BSR set to: 0
 27768  006D7C  C072  F072         	movff	___lwmod@dividend,?___lwmod
 27769  006D80  C073  F073         	movff	___lwmod@dividend+1,?___lwmod+1
 27770                           
 27771                           ; BSR set to: 0
 27772  006D84  0012               	return		;funcret
 27773  006D86                     __end_of___lwmod:
 27774                           	opt stack 0
 27775                           tosu	equ	0xFFF
 27776                           tosh	equ	0xFFE
 27777                           tosl	equ	0xFFD
 27778                           pclath	equ	0xFFA
 27779                           tblptru	equ	0xFF8
 27780                           tblptrh	equ	0xFF7
 27781                           tblptrl	equ	0xFF6
 27782                           tablat	equ	0xFF5
 27783                           prodh	equ	0xFF4
 27784                           prodl	equ	0xFF3
 27785                           intcon	equ	0xFF2
 27786                           intcon2	equ	0xFF1
 27787                           intcon3	equ	0xFF0
 27788                           indf0	equ	0xFEF
 27789                           postinc0	equ	0xFEE
 27790                           fsr0h	equ	0xFEA
 27791                           fsr0l	equ	0xFE9
 27792                           wreg	equ	0xFE8
 27793                           postinc1	equ	0xFE6
 27794                           postdec1	equ	0xFE5
 27795                           plusw1	equ	0xFE3
 27796                           fsr1h	equ	0xFE2
 27797                           fsr1l	equ	0xFE1
 27798                           indf2	equ	0xFDF
 27799                           postinc2	equ	0xFDE
 27800                           postdec2	equ	0xFDD
 27801                           plusw2	equ	0xFDB
 27802                           fsr2h	equ	0xFDA
 27803                           fsr2l	equ	0xFD9
 27804                           status	equ	0xFD8
 27805                           
 27806 ;; *************** function _ComputeMic *****************
 27807 ;; Defined at:
 27808 ;;		line 2194 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 27809 ;; Parameters:    Size  Location     Type
 27810 ;;  key             2  122[BANK0 ] PTR unsigned char 
 27811 ;;		 -> loRa.activationParameters(105), loRa(245), 
 27812 ;;  buffer          2  124[BANK0 ] PTR unsigned char 
 27813 ;;		 -> LORAWAN_RxDone@hdr(2), macBuffer(271), radioBuffer(271), 
 27814 ;;  bufferLength    1  126[BANK0 ] unsigned char 
 27815 ;; Auto vars:     Size  Location     Type
 27816 ;;  mic             4  127[BANK0 ] unsigned long 
 27817 ;; Return value:  Size  Location     Type
 27818 ;;                  4  122[BANK0 ] unsigned long 
 27819 ;; Registers used:
 27820 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27821 ;; Tracked objects:
 27822 ;;		On entry : F/0
 27823 ;;		On exit  : F/0
 27824 ;;		Unchanged: 0/0
 27825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 27826 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27827 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27829 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27830 ;;Total ram usage:        9 bytes
 27831 ;; Hardware stack levels used:    1
 27832 ;; Hardware stack levels required when called:   12
 27833 ;; This function calls:
 27834 ;;		_AESCmac
 27835 ;;		_memcpy
 27836 ;; This function is called by:
 27837 ;;		_LORAWAN_RxDone
 27838 ;;		_PrepareJoinRequestFrame
 27839 ;; This function uses a non-reentrant model
 27840 ;;
 27841                           
 27842                           	psect	text144
 27843  00683C                     __ptext144:
 27844                           	opt stack 0
 27845  00683C                     _ComputeMic:
 27846                           	opt stack 14
 27847                           
 27848                           ; BSR set to: 0
 27849                           ;lorawan.c: 2196: uint32_t mic = 0;
 27850                           
 27851                           ; BSR set to: 0
 27852                           ;incstack = 0
 27853  00683C  6BDF               	clrf	ComputeMic@mic& (0+255),b
 27854  00683E  6BE0               	clrf	(ComputeMic@mic+1)& (0+255),b
 27855  006840  6BE1               	clrf	(ComputeMic@mic+2)& (0+255),b
 27856  006842  6BE2               	clrf	(ComputeMic@mic+3)& (0+255),b
 27857                           
 27858                           ; BSR set to: 0
 27859                           ;lorawan.c: 2198: AESCmac(key, aesBuffer, buffer, bufferLength);
 27860  006844  C0DA  F0CC         	movff	ComputeMic@key,AESCmac@key
 27861  006848  C0DB  F0CD         	movff	ComputeMic@key+1,AESCmac@key+1
 27862  00684C  0EAB               	movlw	low _aesBuffer
 27863  00684E  6FCE               	movwf	AESCmac@output& (0+255),b
 27864  006850  0E01               	movlw	high _aesBuffer
 27865  006852  6FCF               	movwf	(AESCmac@output+1)& (0+255),b
 27866  006854  C0DC  F0D0         	movff	ComputeMic@buffer,AESCmac@input
 27867  006858  C0DD  F0D1         	movff	ComputeMic@buffer+1,AESCmac@input+1
 27868  00685C  C0DE  F0D2         	movff	ComputeMic@bufferLength,AESCmac@size
 27869  006860  EC15  F00C         	call	_AESCmac	;wreg free
 27870                           
 27871                           ; BSR set to: 0
 27872                           ;lorawan.c: 2200: memcpy(&mic, aesBuffer, sizeof( mic ));
 27873  006864  0EDF               	movlw	low ComputeMic@mic
 27874  006866  6F64               	movwf	memcpy@d1& (0+255),b
 27875  006868  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 27876  00686A  0EAB               	movlw	low _aesBuffer
 27877  00686C  6F66               	movwf	memcpy@s1& (0+255),b
 27878  00686E  0E01               	movlw	high _aesBuffer
 27879  006870  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 27880  006872  6B69               	clrf	(memcpy@n+1)& (0+255),b
 27881  006874  0E04               	movlw	4
 27882  006876  6F68               	movwf	memcpy@n& (0+255),b
 27883  006878  ECCA  F033         	call	_memcpy	;wreg free
 27884                           
 27885                           ; BSR set to: 0
 27886                           ;lorawan.c: 2202: return mic;
 27887  00687C  C0DF  F0DA         	movff	ComputeMic@mic,?_ComputeMic
 27888  006880  C0E0  F0DB         	movff	ComputeMic@mic+1,?_ComputeMic+1
 27889  006884  C0E1  F0DC         	movff	ComputeMic@mic+2,?_ComputeMic+2
 27890  006888  C0E2  F0DD         	movff	ComputeMic@mic+3,?_ComputeMic+3
 27891                           
 27892                           ; BSR set to: 0
 27893  00688C  0012               	return		;funcret
 27894  00688E                     __end_of_ComputeMic:
 27895                           	opt stack 0
 27896                           tosu	equ	0xFFF
 27897                           tosh	equ	0xFFE
 27898                           tosl	equ	0xFFD
 27899                           pclath	equ	0xFFA
 27900                           tblptru	equ	0xFF8
 27901                           tblptrh	equ	0xFF7
 27902                           tblptrl	equ	0xFF6
 27903                           tablat	equ	0xFF5
 27904                           prodh	equ	0xFF4
 27905                           prodl	equ	0xFF3
 27906                           intcon	equ	0xFF2
 27907                           intcon2	equ	0xFF1
 27908                           intcon3	equ	0xFF0
 27909                           indf0	equ	0xFEF
 27910                           postinc0	equ	0xFEE
 27911                           fsr0h	equ	0xFEA
 27912                           fsr0l	equ	0xFE9
 27913                           wreg	equ	0xFE8
 27914                           postinc1	equ	0xFE6
 27915                           postdec1	equ	0xFE5
 27916                           plusw1	equ	0xFE3
 27917                           fsr1h	equ	0xFE2
 27918                           fsr1l	equ	0xFE1
 27919                           indf2	equ	0xFDF
 27920                           postinc2	equ	0xFDE
 27921                           postdec2	equ	0xFDD
 27922                           plusw2	equ	0xFDB
 27923                           fsr2h	equ	0xFDA
 27924                           fsr2l	equ	0xFD9
 27925                           status	equ	0xFD8
 27926                           
 27927 ;; *************** function _AESCmac *****************
 27928 ;; Defined at:
 27929 ;;		line 41 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 27930 ;; Parameters:    Size  Location     Type
 27931 ;;  key             2  108[BANK0 ] PTR unsigned char 
 27932 ;;		 -> loRa.activationParameters(105), loRa(245), 
 27933 ;;  output          2  110[BANK0 ] PTR unsigned char 
 27934 ;;		 -> aesBuffer(16), 
 27935 ;;  input           2  112[BANK0 ] PTR unsigned char 
 27936 ;;		 -> LORAWAN_RxDone@hdr(2), macBuffer(271), radioBuffer(271), 
 27937 ;;  size            1  114[BANK0 ] unsigned char 
 27938 ;; Auto vars:     Size  Location     Type
 27939 ;;  x              16   80[BANK1 ] unsigned char [16]
 27940 ;;  y              16   64[BANK1 ] unsigned char [16]
 27941 ;;  padded         16   48[BANK1 ] unsigned char [16]
 27942 ;;  mLast          16   32[BANK1 ] unsigned char [16]
 27943 ;;  k1             16   16[BANK1 ] unsigned char [16]
 27944 ;;  k2             16    0[BANK1 ] unsigned char [16]
 27945 ;;  ptr             2   96[BANK1 ] PTR unsigned char 
 27946 ;;		 -> LORAWAN_RxDone@hdr(2), macBuffer(271), radioBuffer(271), NULL(0), 
 27947 ;;  i               1  101[BANK1 ] unsigned char 
 27948 ;;  j               1  100[BANK1 ] unsigned char 
 27949 ;;  n               1   99[BANK1 ] unsigned char 
 27950 ;;  flag            1   98[BANK1 ] unsigned char 
 27951 ;; Return value:  Size  Location     Type
 27952 ;;                  1    wreg      void 
 27953 ;; Registers used:
 27954 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27955 ;; Tracked objects:
 27956 ;;		On entry : F/0
 27957 ;;		On exit  : F/0
 27958 ;;		Unchanged: 0/0
 27959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 27960 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27961 ;;      Locals:         0       0     102       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27962 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27963 ;;      Totals:         0      14     102       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27964 ;;Total ram usage:      116 bytes
 27965 ;; Hardware stack levels used:    1
 27966 ;; Hardware stack levels required when called:   11
 27967 ;; This function calls:
 27968 ;;		_AESEncodeLoRa
 27969 ;;		_GenerateSubkey
 27970 ;;		_memcpy
 27971 ;;		_memset
 27972 ;; This function is called by:
 27973 ;;		_LORAWAN_RxDone
 27974 ;;		_AssemblePacket
 27975 ;;		_ComputeMic
 27976 ;; This function uses a non-reentrant model
 27977 ;;
 27978                           
 27979                           	psect	text145
 27980  00182A                     __ptext145:
 27981                           	opt stack 0
 27982  00182A                     _AESCmac:
 27983                           	opt stack 16
 27984                           
 27985                           ; BSR set to: 0
 27986                           
 27987                           ; BSR set to: 0
 27988                           ;incstack = 0
 27989  00182A  0101               	movlb	1	; () banked
 27990  00182C  6B65               	clrf	AESCmac@i& (0+255),b
 27991  00182E  6B64               	clrf	AESCmac@j& (0+255),b
 27992                           
 27993                           ;lorawan_aes_cmac.c: 44: bool flag = 0;
 27994  001830  6B62               	clrf	AESCmac@flag& (0+255),b
 27995                           
 27996                           ;lorawan_aes_cmac.c: 45: uint8_t k1[16], k2[16];
 27997                           ;lorawan_aes_cmac.c: 46: uint8_t x[16], y[16], mLast[16], padded[16];
 27998                           ;lorawan_aes_cmac.c: 47: uint8_t *ptr = (0);
 27999  001832  6B60               	clrf	AESCmac@ptr& (0+255),b
 28000  001834  6B61               	clrf	(AESCmac@ptr+1)& (0+255),b
 28001                           
 28002                           ; BSR set to: 1
 28003                           ;lorawan_aes_cmac.c: 49: GenerateSubkey(key, k1, k2);
 28004  001836  C0CC  F0A4         	movff	AESCmac@key,GenerateSubkey@key
 28005  00183A  C0CD  F0A5         	movff	AESCmac@key+1,GenerateSubkey@key+1
 28006  00183E  0E10               	movlw	low AESCmac@k1
 28007  001840  0100               	movlb	0	; () banked
 28008  001842  6FA6               	movwf	GenerateSubkey@k1& (0+255),b
 28009  001844  0E01               	movlw	high AESCmac@k1
 28010  001846  6FA7               	movwf	(GenerateSubkey@k1+1)& (0+255),b
 28011  001848  0E00               	movlw	low AESCmac@k2
 28012  00184A  6FA8               	movwf	GenerateSubkey@k2& (0+255),b
 28013  00184C  0E01               	movlw	high AESCmac@k2
 28014  00184E  6FA9               	movwf	(GenerateSubkey@k2+1)& (0+255),b
 28015  001850  EC5B  F024         	call	_GenerateSubkey	;wreg free
 28016                           
 28017                           ; BSR set to: 0
 28018                           ;lorawan_aes_cmac.c: 51: n = (size + 15) >> (4);
 28019  001854  51D2               	movf	AESCmac@size& (0+255),w,b
 28020  001856  6FD3               	movwf	??_AESCmac& (0+255),b
 28021  001858  6BD4               	clrf	(??_AESCmac+1)& (0+255),b
 28022  00185A  0E0F               	movlw	15
 28023  00185C  27D3               	addwf	??_AESCmac& (0+255),f,b
 28024  00185E  0E00               	movlw	0
 28025  001860  23D4               	addwfc	(??_AESCmac+1)& (0+255),f,b
 28026  001862  0E04               	movlw	4
 28027  001864  6FD5               	movwf	(??_AESCmac+2)& (0+255),b
 28028  001866                     u14185:
 28029  001866  35D4               	rlcf	(??_AESCmac+1)& (0+255),w,b
 28030  001868  33D4               	rrcf	(??_AESCmac+1)& (0+255),f,b
 28031  00186A  33D3               	rrcf	??_AESCmac& (0+255),f,b
 28032  00186C  2FD5               	decfsz	(??_AESCmac+2)& (0+255),f,b
 28033  00186E  D7FB               	goto	u14185
 28034  001870  51D3               	movf	??_AESCmac& (0+255),w,b
 28035  001872  0101               	movlb	1	; () banked
 28036  001874  6F63               	movwf	AESCmac@n& (0+255),b
 28037                           
 28038                           ; BSR set to: 1
 28039                           ;lorawan_aes_cmac.c: 52: if (n == 0)
 28040  001876  5163               	movf	AESCmac@n& (0+255),w,b
 28041  001878  E104               	bnz	l12774
 28042                           
 28043                           ; BSR set to: 1
 28044                           ;lorawan_aes_cmac.c: 53: {
 28045                           ;lorawan_aes_cmac.c: 54: n = 1;
 28046  00187A  0E01               	movlw	1
 28047  00187C  6F63               	movwf	AESCmac@n& (0+255),b
 28048                           
 28049                           ; BSR set to: 1
 28050                           ;lorawan_aes_cmac.c: 55: flag = 0;
 28051  00187E  6B62               	clrf	AESCmac@flag& (0+255),b
 28052                           
 28053                           ;lorawan_aes_cmac.c: 56: }
 28054  001880  D00A               	goto	l1403
 28055  001882                     l12774:
 28056                           
 28057                           ; BSR set to: 1
 28058                           ;lorawan_aes_cmac.c: 57: else
 28059                           ;lorawan_aes_cmac.c: 58: {
 28060                           ;lorawan_aes_cmac.c: 59: flag = !(size % 16);
 28061  001882  C0D2  F0D3         	movff	AESCmac@size,??_AESCmac
 28062  001886  0E0F               	movlw	15
 28063  001888  0100               	movlb	0	; () banked
 28064  00188A  17D3               	andwf	??_AESCmac& (0+255),f,b
 28065  00188C  0E01               	movlw	1
 28066  00188E  A4D8               	btfss	status,2,c
 28067  001890  0E00               	movlw	0
 28068  001892  0101               	movlb	1	; () banked
 28069  001894  6F62               	movwf	AESCmac@flag& (0+255),b
 28070  001896                     l1403:
 28071                           
 28072                           ; BSR set to: 1
 28073                           ;lorawan_aes_cmac.c: 60: }
 28074                           ;lorawan_aes_cmac.c: 62: if ( flag == 1 )
 28075  001896  0562               	decf	AESCmac@flag& (0+255),w,b
 28076  001898  E141               	bnz	l12788
 28077                           
 28078                           ; BSR set to: 1
 28079                           ;lorawan_aes_cmac.c: 63: {
 28080                           ;lorawan_aes_cmac.c: 64: j = 0;
 28081  00189A  6B64               	clrf	AESCmac@j& (0+255),b
 28082                           
 28083                           ; BSR set to: 1
 28084                           ;lorawan_aes_cmac.c: 65: for (i=((n-1) << (4)); i<(n << (4)); i++)
 28085  00189C  5163               	movf	AESCmac@n& (0+255),w,b
 28086  00189E  0D10               	mullw	16
 28087  0018A0  50F3               	movf	prodl,w,c
 28088  0018A2  0FF0               	addlw	240
 28089  0018A4  6F65               	movwf	AESCmac@i& (0+255),b
 28090  0018A6  D01E               	goto	l12786
 28091  0018A8                     l12780:
 28092                           
 28093                           ; BSR set to: 0
 28094                           ;lorawan_aes_cmac.c: 66: {
 28095                           ;lorawan_aes_cmac.c: 67: mLast[j] = input[i] ^ k1[j];
 28096  0018A8  0E20               	movlw	low AESCmac@mLast
 28097  0018AA  0101               	movlb	1	; () banked
 28098  0018AC  2564               	addwf	AESCmac@j& (0+255),w,b
 28099  0018AE  6ED9               	movwf	fsr2l,c
 28100  0018B0  6ADA               	clrf	fsr2h,c
 28101  0018B2  0E01               	movlw	high AESCmac@mLast
 28102  0018B4  22DA               	addwfc	fsr2h,f,c
 28103  0018B6  0E10               	movlw	low AESCmac@k1
 28104  0018B8  2564               	addwf	AESCmac@j& (0+255),w,b
 28105  0018BA  6EE9               	movwf	fsr0l,c
 28106  0018BC  6AEA               	clrf	fsr0h,c
 28107  0018BE  0E01               	movlw	high AESCmac@k1
 28108  0018C0  22EA               	addwfc	fsr0h,f,c
 28109  0018C2  50EF               	movf	indf0,w,c
 28110  0018C4  0100               	movlb	0	; () banked
 28111  0018C6  6FD3               	movwf	??_AESCmac& (0+255),b
 28112  0018C8  0101               	movlb	1	; () banked
 28113  0018CA  5165               	movf	AESCmac@i& (0+255),w,b
 28114  0018CC  0100               	movlb	0	; () banked
 28115  0018CE  25D0               	addwf	AESCmac@input& (0+255),w,b
 28116  0018D0  6EE9               	movwf	fsr0l,c
 28117  0018D2  0E00               	movlw	0
 28118  0018D4  21D1               	addwfc	(AESCmac@input+1)& (0+255),w,b
 28119  0018D6  6EEA               	movwf	fsr0h,c
 28120  0018D8  50EF               	movf	indf0,w,c
 28121  0018DA  19D3               	xorwf	??_AESCmac& (0+255),w,b
 28122  0018DC  6EDF               	movwf	indf2,c
 28123                           
 28124                           ; BSR set to: 0
 28125                           ;lorawan_aes_cmac.c: 68: j++;
 28126  0018DE  0101               	movlb	1	; () banked
 28127  0018E0  2B64               	incf	AESCmac@j& (0+255),f,b
 28128                           
 28129                           ; BSR set to: 1
 28130  0018E2  2B65               	incf	AESCmac@i& (0+255),f,b
 28131  0018E4                     l12786:
 28132                           
 28133                           ; BSR set to: 1
 28134  0018E4  5163               	movf	AESCmac@n& (0+255),w,b
 28135  0018E6  0100               	movlb	0	; () banked
 28136  0018E8  6FD3               	movwf	??_AESCmac& (0+255),b
 28137  0018EA  6BD4               	clrf	(??_AESCmac+1)& (0+255),b
 28138  0018EC  3BD3               	swapf	??_AESCmac& (0+255),f,b
 28139  0018EE  3BD4               	swapf	(??_AESCmac+1)& (0+255),f,b
 28140  0018F0  0EF0               	movlw	240
 28141  0018F2  17D4               	andwf	(??_AESCmac+1)& (0+255),f,b
 28142  0018F4  51D3               	movf	??_AESCmac& (0+255),w,b
 28143  0018F6  0B0F               	andlw	15
 28144  0018F8  13D4               	iorwf	(??_AESCmac+1)& (0+255),f,b
 28145  0018FA  0EF0               	movlw	240
 28146  0018FC  17D3               	andwf	??_AESCmac& (0+255),f,b
 28147  0018FE  0101               	movlb	1	; () banked
 28148  001900  5165               	movf	AESCmac@i& (0+255),w,b
 28149  001902  0100               	movlb	0	; () banked
 28150  001904  6FD5               	movwf	(??_AESCmac+2)& (0+255),b
 28151  001906  6BD6               	clrf	(??_AESCmac+3)& (0+255),b
 28152  001908  51D3               	movf	??_AESCmac& (0+255),w,b
 28153  00190A  5DD5               	subwf	(??_AESCmac+2)& (0+255),w,b
 28154  00190C  51D6               	movf	(??_AESCmac+3)& (0+255),w,b
 28155  00190E  0A80               	xorlw	128
 28156  001910  6FD7               	movwf	(??_AESCmac+4)& (0+255),b
 28157  001912  51D4               	movf	(??_AESCmac+1)& (0+255),w,b
 28158  001914  0A80               	xorlw	128
 28159  001916  59D7               	subwfb	(??_AESCmac+4)& (0+255),w,b
 28160  001918  E263               	bc	l12818
 28161  00191A  D7C6               	goto	l12780
 28162  00191C                     l12788:
 28163                           
 28164                           ; BSR set to: 1
 28165                           ;lorawan_aes_cmac.c: 71: else
 28166                           ;lorawan_aes_cmac.c: 72: {
 28167                           ;lorawan_aes_cmac.c: 74: ptr = &input[size - (size%16)];
 28168  00191C  0100               	movlb	0	; () banked
 28169  00191E  51D2               	movf	AESCmac@size& (0+255),w,b
 28170  001920  25D0               	addwf	AESCmac@input& (0+255),w,b
 28171  001922  6FD3               	movwf	??_AESCmac& (0+255),b
 28172  001924  0E00               	movlw	0
 28173  001926  21D1               	addwfc	(AESCmac@input+1)& (0+255),w,b
 28174  001928  6FD4               	movwf	(??_AESCmac+1)& (0+255),b
 28175  00192A  51D2               	movf	AESCmac@size& (0+255),w,b
 28176  00192C  0B0F               	andlw	15
 28177  00192E  5DD3               	subwf	??_AESCmac& (0+255),w,b
 28178  001930  0101               	movlb	1	; () banked
 28179  001932  6F60               	movwf	AESCmac@ptr& (0+255),b
 28180  001934  0100               	movlb	0	; () banked
 28181  001936  51D4               	movf	(??_AESCmac+1)& (0+255),w,b
 28182  001938  A0D8               	btfss	status,0,c
 28183  00193A  05D4               	decf	(??_AESCmac+1)& (0+255),w,b
 28184  00193C  0101               	movlb	1	; () banked
 28185  00193E  6F61               	movwf	(AESCmac@ptr+1)& (0+255),b
 28186                           
 28187                           ; BSR set to: 1
 28188                           ;lorawan_aes_cmac.c: 75: for (i=0; i<16; i++)
 28189  001940  6B65               	clrf	AESCmac@i& (0+255),b
 28190  001942                     l12794:
 28191                           
 28192                           ; BSR set to: 1
 28193                           ;lorawan_aes_cmac.c: 76: {
 28194                           ;lorawan_aes_cmac.c: 77: if ( i < (size%16) )
 28195  001942  0100               	movlb	0	; () banked
 28196  001944  51D2               	movf	AESCmac@size& (0+255),w,b
 28197  001946  0B0F               	andlw	15
 28198  001948  0101               	movlb	1	; () banked
 28199  00194A  6165               	cpfslt	AESCmac@i& (0+255),b
 28200  00194C  D00F               	goto	l12798
 28201                           
 28202                           ; BSR set to: 1
 28203                           ;lorawan_aes_cmac.c: 78: {
 28204                           ;lorawan_aes_cmac.c: 79: padded[i] = ptr[i];
 28205  00194E  5165               	movf	AESCmac@i& (0+255),w,b
 28206  001950  2560               	addwf	AESCmac@ptr& (0+255),w,b
 28207  001952  6ED9               	movwf	fsr2l,c
 28208  001954  0E00               	movlw	0
 28209  001956  2161               	addwfc	(AESCmac@ptr+1)& (0+255),w,b
 28210  001958  6EDA               	movwf	fsr2h,c
 28211  00195A  0E30               	movlw	low AESCmac@padded
 28212  00195C  2565               	addwf	AESCmac@i& (0+255),w,b
 28213  00195E  6EE9               	movwf	fsr0l,c
 28214  001960  6AEA               	clrf	fsr0h,c
 28215  001962  0E01               	movlw	high AESCmac@padded
 28216  001964  22EA               	addwfc	fsr0h,f,c
 28217  001966  CFDF FFEF          	movff	indf2,indf0
 28218                           
 28219                           ;lorawan_aes_cmac.c: 80: }
 28220  00196A  D016               	goto	l12804
 28221  00196C                     l12798:
 28222                           
 28223                           ; BSR set to: 1
 28224                           ;lorawan_aes_cmac.c: 81: else
 28225                           ;lorawan_aes_cmac.c: 82: {
 28226                           ;lorawan_aes_cmac.c: 83: if ( i == (size%16) )
 28227  00196C  0100               	movlb	0	; () banked
 28228  00196E  51D2               	movf	AESCmac@size& (0+255),w,b
 28229  001970  0B0F               	andlw	15
 28230  001972  0101               	movlb	1	; () banked
 28231  001974  1965               	xorwf	AESCmac@i& (0+255),w,b
 28232  001976  E109               	bnz	l12802
 28233                           
 28234                           ; BSR set to: 1
 28235                           ;lorawan_aes_cmac.c: 84: {
 28236                           ;lorawan_aes_cmac.c: 85: padded[i] = 0x80;
 28237  001978  0E30               	movlw	low AESCmac@padded
 28238  00197A  2565               	addwf	AESCmac@i& (0+255),w,b
 28239  00197C  6ED9               	movwf	fsr2l,c
 28240  00197E  6ADA               	clrf	fsr2h,c
 28241  001980  0E01               	movlw	high AESCmac@padded
 28242  001982  22DA               	addwfc	fsr2h,f,c
 28243  001984  0E80               	movlw	128
 28244  001986  6EDF               	movwf	indf2,c
 28245                           
 28246                           ;lorawan_aes_cmac.c: 86: }
 28247  001988  D007               	goto	l12804
 28248  00198A                     l12802:
 28249                           
 28250                           ; BSR set to: 1
 28251                           ;lorawan_aes_cmac.c: 87: else
 28252                           ;lorawan_aes_cmac.c: 88: {
 28253                           ;lorawan_aes_cmac.c: 89: padded[i] = 0x00;
 28254  00198A  0E30               	movlw	low AESCmac@padded
 28255  00198C  2565               	addwf	AESCmac@i& (0+255),w,b
 28256  00198E  6ED9               	movwf	fsr2l,c
 28257  001990  6ADA               	clrf	fsr2h,c
 28258  001992  0E01               	movlw	high AESCmac@padded
 28259  001994  22DA               	addwfc	fsr2h,f,c
 28260  001996  6ADF               	clrf	indf2,c
 28261  001998                     l12804:
 28262                           
 28263                           ; BSR set to: 1
 28264  001998  2B65               	incf	AESCmac@i& (0+255),f,b
 28265                           
 28266                           ; BSR set to: 1
 28267  00199A  0E0F               	movlw	15
 28268  00199C  6565               	cpfsgt	AESCmac@i& (0+255),b
 28269  00199E  D7D1               	goto	l12794
 28270                           
 28271                           ; BSR set to: 1
 28272                           ;lorawan_aes_cmac.c: 90: }
 28273                           ;lorawan_aes_cmac.c: 91: }
 28274                           ;lorawan_aes_cmac.c: 92: }
 28275                           ;lorawan_aes_cmac.c: 95: for (i=0; i<sizeof(mLast); i++)
 28276  0019A0  6B65               	clrf	AESCmac@i& (0+255),b
 28277  0019A2                     l12812:
 28278                           
 28279                           ; BSR set to: 1
 28280                           ;lorawan_aes_cmac.c: 96: {
 28281                           ;lorawan_aes_cmac.c: 97: mLast[i] = padded[i] ^ k2[i];
 28282  0019A2  0E20               	movlw	low AESCmac@mLast
 28283  0019A4  2565               	addwf	AESCmac@i& (0+255),w,b
 28284  0019A6  6ED9               	movwf	fsr2l,c
 28285  0019A8  6ADA               	clrf	fsr2h,c
 28286  0019AA  0E01               	movlw	high AESCmac@mLast
 28287  0019AC  22DA               	addwfc	fsr2h,f,c
 28288  0019AE  0E00               	movlw	low AESCmac@k2
 28289  0019B0  2565               	addwf	AESCmac@i& (0+255),w,b
 28290  0019B2  6EE9               	movwf	fsr0l,c
 28291  0019B4  6AEA               	clrf	fsr0h,c
 28292  0019B6  0E01               	movlw	high AESCmac@k2
 28293  0019B8  22EA               	addwfc	fsr0h,f,c
 28294  0019BA  50EF               	movf	indf0,w,c
 28295  0019BC  0100               	movlb	0	; () banked
 28296  0019BE  6FD3               	movwf	??_AESCmac& (0+255),b
 28297  0019C0  0E30               	movlw	low AESCmac@padded
 28298  0019C2  0101               	movlb	1	; () banked
 28299  0019C4  2565               	addwf	AESCmac@i& (0+255),w,b
 28300  0019C6  6EE9               	movwf	fsr0l,c
 28301  0019C8  6AEA               	clrf	fsr0h,c
 28302  0019CA  0E01               	movlw	high AESCmac@padded
 28303  0019CC  22EA               	addwfc	fsr0h,f,c
 28304  0019CE  50EF               	movf	indf0,w,c
 28305  0019D0  0100               	movlb	0	; () banked
 28306  0019D2  19D3               	xorwf	??_AESCmac& (0+255),w,b
 28307  0019D4  6EDF               	movwf	indf2,c
 28308                           
 28309                           ; BSR set to: 0
 28310  0019D6  0101               	movlb	1	; () banked
 28311  0019D8  2B65               	incf	AESCmac@i& (0+255),f,b
 28312                           
 28313                           ; BSR set to: 1
 28314  0019DA  0E0F               	movlw	15
 28315  0019DC  6565               	cpfsgt	AESCmac@i& (0+255),b
 28316  0019DE  D7E1               	goto	l12812
 28317  0019E0                     l12818:
 28318                           
 28319                           ;lorawan_aes_cmac.c: 98: }
 28320                           ;lorawan_aes_cmac.c: 99: }
 28321                           ;lorawan_aes_cmac.c: 101: memset(x, 0, sizeof(x));
 28322  0019E0  0E50               	movlw	low AESCmac@x
 28323  0019E2  0100               	movlb	0	; () banked
 28324  0019E4  6F64               	movwf	memset@p1& (0+255),b
 28325  0019E6  0E01               	movlw	high AESCmac@x
 28326  0019E8  6F65               	movwf	(memset@p1+1)& (0+255),b
 28327  0019EA  6B67               	clrf	(memset@c+1)& (0+255),b
 28328  0019EC  6B66               	clrf	memset@c& (0+255),b
 28329  0019EE  6B69               	clrf	(memset@n+1)& (0+255),b
 28330  0019F0  0E10               	movlw	16
 28331  0019F2  6F68               	movwf	memset@n& (0+255),b
 28332  0019F4  ECE0  F038         	call	_memset	;wreg free
 28333                           
 28334                           ; BSR set to: 0
 28335                           ;lorawan_aes_cmac.c: 103: for (i=0; i<(n-1); i++)
 28336  0019F8  0101               	movlb	1	; () banked
 28337  0019FA  6B65               	clrf	AESCmac@i& (0+255),b
 28338  0019FC  D051               	goto	l12836
 28339  0019FE                     l1418:
 28340                           
 28341                           ; BSR set to: 0
 28342                           ;lorawan_aes_cmac.c: 104: {
 28343                           ;lorawan_aes_cmac.c: 105: for (j=0; j<16; j++)
 28344  0019FE  0101               	movlb	1	; () banked
 28345  001A00  6B64               	clrf	AESCmac@j& (0+255),b
 28346  001A02                     l12826:
 28347                           
 28348                           ; BSR set to: 1
 28349                           ;lorawan_aes_cmac.c: 106: {
 28350                           ;lorawan_aes_cmac.c: 107: y[j] = x[j] ^ input[(i << (4))+j];
 28351  001A02  0E40               	movlw	low AESCmac@y
 28352  001A04  2564               	addwf	AESCmac@j& (0+255),w,b
 28353  001A06  6ED9               	movwf	fsr2l,c
 28354  001A08  6ADA               	clrf	fsr2h,c
 28355  001A0A  0E01               	movlw	high AESCmac@y
 28356  001A0C  22DA               	addwfc	fsr2h,f,c
 28357  001A0E  5165               	movf	AESCmac@i& (0+255),w,b
 28358  001A10  0100               	movlb	0	; () banked
 28359  001A12  6FD3               	movwf	??_AESCmac& (0+255),b
 28360  001A14  6BD4               	clrf	(??_AESCmac+1)& (0+255),b
 28361  001A16  3BD3               	swapf	??_AESCmac& (0+255),f,b
 28362  001A18  3BD4               	swapf	(??_AESCmac+1)& (0+255),f,b
 28363  001A1A  0EF0               	movlw	240
 28364  001A1C  17D4               	andwf	(??_AESCmac+1)& (0+255),f,b
 28365  001A1E  51D3               	movf	??_AESCmac& (0+255),w,b
 28366  001A20  0B0F               	andlw	15
 28367  001A22  13D4               	iorwf	(??_AESCmac+1)& (0+255),f,b
 28368  001A24  0EF0               	movlw	240
 28369  001A26  17D3               	andwf	??_AESCmac& (0+255),f,b
 28370  001A28  C0D0  F0D5         	movff	AESCmac@input,??_AESCmac+2
 28371  001A2C  C0D1  F0D6         	movff	AESCmac@input+1,??_AESCmac+3
 28372  001A30  51D3               	movf	??_AESCmac& (0+255),w,b
 28373  001A32  27D5               	addwf	(??_AESCmac+2)& (0+255),f,b
 28374  001A34  51D4               	movf	(??_AESCmac+1)& (0+255),w,b
 28375  001A36  23D6               	addwfc	(??_AESCmac+3)& (0+255),f,b
 28376  001A38  0101               	movlb	1	; () banked
 28377  001A3A  5164               	movf	AESCmac@j& (0+255),w,b
 28378  001A3C  0100               	movlb	0	; () banked
 28379  001A3E  25D5               	addwf	(??_AESCmac+2)& (0+255),w,b
 28380  001A40  6EE9               	movwf	fsr0l,c
 28381  001A42  0E00               	movlw	0
 28382  001A44  21D6               	addwfc	(??_AESCmac+3)& (0+255),w,b
 28383  001A46  6EEA               	movwf	fsr0h,c
 28384  001A48  50EF               	movf	indf0,w,c
 28385  001A4A  6FD7               	movwf	(??_AESCmac+4)& (0+255),b
 28386  001A4C  0E50               	movlw	low AESCmac@x
 28387  001A4E  0101               	movlb	1	; () banked
 28388  001A50  2564               	addwf	AESCmac@j& (0+255),w,b
 28389  001A52  6EE9               	movwf	fsr0l,c
 28390  001A54  6AEA               	clrf	fsr0h,c
 28391  001A56  0E01               	movlw	high AESCmac@x
 28392  001A58  22EA               	addwfc	fsr0h,f,c
 28393  001A5A  50EF               	movf	indf0,w,c
 28394  001A5C  0100               	movlb	0	; () banked
 28395  001A5E  19D7               	xorwf	(??_AESCmac+4)& (0+255),w,b
 28396  001A60  6EDF               	movwf	indf2,c
 28397                           
 28398                           ; BSR set to: 0
 28399  001A62  0101               	movlb	1	; () banked
 28400  001A64  2B64               	incf	AESCmac@j& (0+255),f,b
 28401                           
 28402                           ; BSR set to: 1
 28403  001A66  0E0F               	movlw	15
 28404  001A68  6564               	cpfsgt	AESCmac@j& (0+255),b
 28405  001A6A  D7CB               	goto	l12826
 28406                           
 28407                           ; BSR set to: 1
 28408                           ;lorawan_aes_cmac.c: 108: }
 28409                           ;lorawan_aes_cmac.c: 109: memcpy(x, y, sizeof(y));
 28410  001A6C  0E50               	movlw	low AESCmac@x
 28411  001A6E  0100               	movlb	0	; () banked
 28412  001A70  6F64               	movwf	memcpy@d1& (0+255),b
 28413  001A72  0E01               	movlw	high AESCmac@x
 28414  001A74  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 28415  001A76  0E40               	movlw	low AESCmac@y
 28416  001A78  6F66               	movwf	memcpy@s1& (0+255),b
 28417  001A7A  0E01               	movlw	high AESCmac@y
 28418  001A7C  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 28419  001A7E  6B69               	clrf	(memcpy@n+1)& (0+255),b
 28420  001A80  0E10               	movlw	16
 28421  001A82  6F68               	movwf	memcpy@n& (0+255),b
 28422  001A84  ECCA  F033         	call	_memcpy	;wreg free
 28423                           
 28424                           ;lorawan_aes_cmac.c: 110: AESEncodeLoRa(x,key);
 28425  001A88  0E50               	movlw	low AESCmac@x
 28426  001A8A  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 28427  001A8C  0E01               	movlw	high AESCmac@x
 28428  001A8E  6F91               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 28429  001A90  C0CC  F092         	movff	AESCmac@key,AESEncodeLoRa@key
 28430  001A94  C0CD  F093         	movff	AESCmac@key+1,AESEncodeLoRa@key+1
 28431  001A98  EC09  F039         	call	_AESEncodeLoRa	;wreg free
 28432                           
 28433                           ; BSR set to: 0
 28434  001A9C  0101               	movlb	1	; () banked
 28435  001A9E  2B65               	incf	AESCmac@i& (0+255),f,b
 28436  001AA0                     l12836:
 28437                           
 28438                           ; BSR set to: 1
 28439  001AA0  0100               	movlb	0	; () banked
 28440  001AA2  69D3               	setf	??_AESCmac& (0+255),b
 28441  001AA4  69D4               	setf	(??_AESCmac+1)& (0+255),b
 28442  001AA6  0101               	movlb	1	; () banked
 28443  001AA8  5163               	movf	AESCmac@n& (0+255),w,b
 28444  001AAA  0100               	movlb	0	; () banked
 28445  001AAC  6FD5               	movwf	(??_AESCmac+2)& (0+255),b
 28446  001AAE  6BD6               	clrf	(??_AESCmac+3)& (0+255),b
 28447  001AB0  51D3               	movf	??_AESCmac& (0+255),w,b
 28448  001AB2  27D5               	addwf	(??_AESCmac+2)& (0+255),f,b
 28449  001AB4  51D4               	movf	(??_AESCmac+1)& (0+255),w,b
 28450  001AB6  23D6               	addwfc	(??_AESCmac+3)& (0+255),f,b
 28451  001AB8  0101               	movlb	1	; () banked
 28452  001ABA  5165               	movf	AESCmac@i& (0+255),w,b
 28453  001ABC  0100               	movlb	0	; () banked
 28454  001ABE  6FD7               	movwf	(??_AESCmac+4)& (0+255),b
 28455  001AC0  6BD8               	clrf	(??_AESCmac+5)& (0+255),b
 28456  001AC2  51D5               	movf	(??_AESCmac+2)& (0+255),w,b
 28457  001AC4  5DD7               	subwf	(??_AESCmac+4)& (0+255),w,b
 28458  001AC6  51D8               	movf	(??_AESCmac+5)& (0+255),w,b
 28459  001AC8  0A80               	xorlw	128
 28460  001ACA  6FD9               	movwf	(??_AESCmac+6)& (0+255),b
 28461  001ACC  51D6               	movf	(??_AESCmac+3)& (0+255),w,b
 28462  001ACE  0A80               	xorlw	128
 28463  001AD0  59D9               	subwfb	(??_AESCmac+6)& (0+255),w,b
 28464  001AD2  E395               	bnc	l1418
 28465                           
 28466                           ; BSR set to: 0
 28467                           ;lorawan_aes_cmac.c: 111: }
 28468                           ;lorawan_aes_cmac.c: 113: for (i=0; i<sizeof(x); i++)
 28469  001AD4  0101               	movlb	1	; () banked
 28470  001AD6  6B65               	clrf	AESCmac@i& (0+255),b
 28471  001AD8                     l12842:
 28472                           
 28473                           ; BSR set to: 1
 28474                           ;lorawan_aes_cmac.c: 114: {
 28475                           ;lorawan_aes_cmac.c: 115: y[i] = x[i] ^ mLast[i];
 28476  001AD8  0E40               	movlw	low AESCmac@y
 28477  001ADA  2565               	addwf	AESCmac@i& (0+255),w,b
 28478  001ADC  6ED9               	movwf	fsr2l,c
 28479  001ADE  6ADA               	clrf	fsr2h,c
 28480  001AE0  0E01               	movlw	high AESCmac@y
 28481  001AE2  22DA               	addwfc	fsr2h,f,c
 28482  001AE4  0E20               	movlw	low AESCmac@mLast
 28483  001AE6  2565               	addwf	AESCmac@i& (0+255),w,b
 28484  001AE8  6EE9               	movwf	fsr0l,c
 28485  001AEA  6AEA               	clrf	fsr0h,c
 28486  001AEC  0E01               	movlw	high AESCmac@mLast
 28487  001AEE  22EA               	addwfc	fsr0h,f,c
 28488  001AF0  50EF               	movf	indf0,w,c
 28489  001AF2  0100               	movlb	0	; () banked
 28490  001AF4  6FD3               	movwf	??_AESCmac& (0+255),b
 28491  001AF6  0E50               	movlw	low AESCmac@x
 28492  001AF8  0101               	movlb	1	; () banked
 28493  001AFA  2565               	addwf	AESCmac@i& (0+255),w,b
 28494  001AFC  6EE9               	movwf	fsr0l,c
 28495  001AFE  6AEA               	clrf	fsr0h,c
 28496  001B00  0E01               	movlw	high AESCmac@x
 28497  001B02  22EA               	addwfc	fsr0h,f,c
 28498  001B04  50EF               	movf	indf0,w,c
 28499  001B06  0100               	movlb	0	; () banked
 28500  001B08  19D3               	xorwf	??_AESCmac& (0+255),w,b
 28501  001B0A  6EDF               	movwf	indf2,c
 28502                           
 28503                           ; BSR set to: 0
 28504  001B0C  0101               	movlb	1	; () banked
 28505  001B0E  2B65               	incf	AESCmac@i& (0+255),f,b
 28506                           
 28507                           ; BSR set to: 1
 28508  001B10  0E0F               	movlw	15
 28509  001B12  6565               	cpfsgt	AESCmac@i& (0+255),b
 28510  001B14  D7E1               	goto	l12842
 28511                           
 28512                           ; BSR set to: 1
 28513                           ;lorawan_aes_cmac.c: 116: }
 28514                           ;lorawan_aes_cmac.c: 118: AESEncodeLoRa(y, key);
 28515  001B16  0E40               	movlw	low AESCmac@y
 28516  001B18  0100               	movlb	0	; () banked
 28517  001B1A  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 28518  001B1C  0E01               	movlw	high AESCmac@y
 28519  001B1E  6F91               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 28520  001B20  C0CC  F092         	movff	AESCmac@key,AESEncodeLoRa@key
 28521  001B24  C0CD  F093         	movff	AESCmac@key+1,AESEncodeLoRa@key+1
 28522  001B28  EC09  F039         	call	_AESEncodeLoRa	;wreg free
 28523                           
 28524                           ;lorawan_aes_cmac.c: 120: memcpy(output, y, sizeof(y));
 28525  001B2C  C0CE  F064         	movff	AESCmac@output,memcpy@d1
 28526  001B30  C0CF  F065         	movff	AESCmac@output+1,memcpy@d1+1
 28527  001B34  0E40               	movlw	low AESCmac@y
 28528  001B36  6F66               	movwf	memcpy@s1& (0+255),b
 28529  001B38  0E01               	movlw	high AESCmac@y
 28530  001B3A  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 28531  001B3C  6B69               	clrf	(memcpy@n+1)& (0+255),b
 28532  001B3E  0E10               	movlw	16
 28533  001B40  6F68               	movwf	memcpy@n& (0+255),b
 28534  001B42  EFCA  F033         	goto	_memcpy	;wreg free
 28535  001B46                     __end_of_AESCmac:
 28536                           	opt stack 0
 28537                           tosu	equ	0xFFF
 28538                           tosh	equ	0xFFE
 28539                           tosl	equ	0xFFD
 28540                           pclath	equ	0xFFA
 28541                           tblptru	equ	0xFF8
 28542                           tblptrh	equ	0xFF7
 28543                           tblptrl	equ	0xFF6
 28544                           tablat	equ	0xFF5
 28545                           prodh	equ	0xFF4
 28546                           prodl	equ	0xFF3
 28547                           intcon	equ	0xFF2
 28548                           intcon2	equ	0xFF1
 28549                           intcon3	equ	0xFF0
 28550                           indf0	equ	0xFEF
 28551                           postinc0	equ	0xFEE
 28552                           fsr0h	equ	0xFEA
 28553                           fsr0l	equ	0xFE9
 28554                           wreg	equ	0xFE8
 28555                           postinc1	equ	0xFE6
 28556                           postdec1	equ	0xFE5
 28557                           plusw1	equ	0xFE3
 28558                           fsr1h	equ	0xFE2
 28559                           fsr1l	equ	0xFE1
 28560                           indf2	equ	0xFDF
 28561                           postinc2	equ	0xFDE
 28562                           postdec2	equ	0xFDD
 28563                           plusw2	equ	0xFDB
 28564                           fsr2h	equ	0xFDA
 28565                           fsr2l	equ	0xFD9
 28566                           status	equ	0xFD8
 28567                           
 28568 ;; *************** function _GenerateSubkey *****************
 28569 ;; Defined at:
 28570 ;;		line 124 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 28571 ;; Parameters:    Size  Location     Type
 28572 ;;  key             2   68[BANK0 ] PTR unsigned char 
 28573 ;;		 -> loRa.activationParameters(105), loRa(245), 
 28574 ;;  k1              2   70[BANK0 ] PTR unsigned char 
 28575 ;;		 -> AESCmac@k1(16), 
 28576 ;;  k2              2   72[BANK0 ] PTR unsigned char 
 28577 ;;		 -> AESCmac@k2(16), 
 28578 ;; Auto vars:     Size  Location     Type
 28579 ;;  l              16   91[BANK0 ] unsigned char [16]
 28580 ;;  const_Rb       16   75[BANK0 ] unsigned char [16]
 28581 ;;  i               1  107[BANK0 ] unsigned char 
 28582 ;; Return value:  Size  Location     Type
 28583 ;;                  1    wreg      void 
 28584 ;; Registers used:
 28585 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 28586 ;; Tracked objects:
 28587 ;;		On entry : F/0
 28588 ;;		On exit  : F/0
 28589 ;;		Unchanged: 0/0
 28590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 28591 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28592 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28593 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28594 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28595 ;;Total ram usage:       40 bytes
 28596 ;; Hardware stack levels used:    1
 28597 ;; Hardware stack levels required when called:   10
 28598 ;; This function calls:
 28599 ;;		_AESEncodeLoRa
 28600 ;;		_FillSubKey
 28601 ;;		_memset
 28602 ;; This function is called by:
 28603 ;;		_AESCmac
 28604 ;; This function uses a non-reentrant model
 28605 ;;
 28606                           
 28607                           	psect	text146
 28608  0048B6                     __ptext146:
 28609                           	opt stack 0
 28610  0048B6                     _GenerateSubkey:
 28611                           	opt stack 16
 28612                           
 28613                           ; BSR set to: 0
 28614                           ;lorawan_aes_cmac.c: 127: uint8_t l[16];
 28615                           ;lorawan_aes_cmac.c: 128: uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x
      +                          00, 0x00,
 28616                           ;lorawan_aes_cmac.c: 129: 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87};
 28617                           
 28618                           ; BSR set to: 0
 28619                           
 28620                           ; BSR set to: 0
 28621                           ;incstack = 0
 28622  0048B6  EE21  F0BD         	lfsr	2,GenerateSubkey@F18817
 28623  0048BA  EE00  F0AB         	lfsr	0,GenerateSubkey@const_Rb
 28624  0048BE  0E0F               	movlw	15
 28625  0048C0                     u13621:
 28626  0048C0  CFDB FFEB          	movff	plusw2,plusw0
 28627  0048C4  06E8               	decf	wreg,f,c
 28628  0048C6  E2FC               	bc	u13621
 28629                           
 28630                           ; BSR set to: 0
 28631                           ;lorawan_aes_cmac.c: 132: memset(l, 0, sizeof(l));
 28632  0048C8  0EBB               	movlw	low GenerateSubkey@l
 28633  0048CA  6F64               	movwf	memset@p1& (0+255),b
 28634  0048CC  6B65               	clrf	(memset@p1+1)& (0+255),b
 28635  0048CE  6B67               	clrf	(memset@c+1)& (0+255),b
 28636  0048D0  6B66               	clrf	memset@c& (0+255),b
 28637  0048D2  6B69               	clrf	(memset@n+1)& (0+255),b
 28638  0048D4  0E10               	movlw	16
 28639  0048D6  6F68               	movwf	memset@n& (0+255),b
 28640  0048D8  ECE0  F038         	call	_memset	;wreg free
 28641                           
 28642                           ; BSR set to: 0
 28643                           ;lorawan_aes_cmac.c: 134: AESEncodeLoRa(l, key);
 28644  0048DC  0EBB               	movlw	low GenerateSubkey@l
 28645  0048DE  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 28646  0048E0  6B91               	clrf	(AESEncodeLoRa@block+1)& (0+255),b
 28647  0048E2  C0A4  F092         	movff	GenerateSubkey@key,AESEncodeLoRa@key
 28648  0048E6  C0A5  F093         	movff	GenerateSubkey@key+1,AESEncodeLoRa@key+1
 28649  0048EA  EC09  F039         	call	_AESEncodeLoRa	;wreg free
 28650                           
 28651                           ; BSR set to: 0
 28652                           ;lorawan_aes_cmac.c: 137: if ( (l[0] & 0x80) == 0x00 )
 28653  0048EE  BFBB               	btfsc	GenerateSubkey@l& (0+255),7,b
 28654  0048F0  D00C               	goto	l12416
 28655                           
 28656                           ; BSR set to: 0
 28657                           ;lorawan_aes_cmac.c: 138: {
 28658                           ;lorawan_aes_cmac.c: 139: FillSubKey( l, k1, (sizeof(l) ) );
 28659  0048F2  0EBB               	movlw	low GenerateSubkey@l
 28660  0048F4  6F64               	movwf	FillSubKey@source& (0+255),b
 28661  0048F6  6B65               	clrf	(FillSubKey@source+1)& (0+255),b
 28662  0048F8  C0A6  F066         	movff	GenerateSubkey@k1,FillSubKey@key
 28663  0048FC  C0A7  F067         	movff	GenerateSubkey@k1+1,FillSubKey@key+1
 28664  004900  0E10               	movlw	16
 28665  004902  6F68               	movwf	FillSubKey@size& (0+255),b
 28666  004904  EC30  F035         	call	_FillSubKey	;wreg free
 28667                           
 28668                           ;lorawan_aes_cmac.c: 140: }
 28669  004908  D01E               	goto	l12430
 28670  00490A                     l12416:
 28671                           
 28672                           ; BSR set to: 0
 28673                           ;lorawan_aes_cmac.c: 141: else
 28674                           ;lorawan_aes_cmac.c: 142: {
 28675                           ;lorawan_aes_cmac.c: 143: FillSubKey( l, k1, (sizeof(l) ) );
 28676  00490A  0EBB               	movlw	low GenerateSubkey@l
 28677  00490C  6F64               	movwf	FillSubKey@source& (0+255),b
 28678  00490E  6B65               	clrf	(FillSubKey@source+1)& (0+255),b
 28679  004910  C0A6  F066         	movff	GenerateSubkey@k1,FillSubKey@key
 28680  004914  C0A7  F067         	movff	GenerateSubkey@k1+1,FillSubKey@key+1
 28681  004918  0E10               	movlw	16
 28682  00491A  6F68               	movwf	FillSubKey@size& (0+255),b
 28683  00491C  EC30  F035         	call	_FillSubKey	;wreg free
 28684                           
 28685                           ; BSR set to: 0
 28686                           ;lorawan_aes_cmac.c: 145: for (i=0; i<sizeof(l); i++)
 28687  004920  6BCB               	clrf	GenerateSubkey@i& (0+255),b
 28688  004922                     l12424:
 28689                           
 28690                           ; BSR set to: 0
 28691                           ;lorawan_aes_cmac.c: 146: {
 28692                           ;lorawan_aes_cmac.c: 147: k1[i] ^= const_Rb[i];
 28693  004922  51CB               	movf	GenerateSubkey@i& (0+255),w,b
 28694  004924  0FAB               	addlw	low GenerateSubkey@const_Rb
 28695  004926  6ED9               	movwf	fsr2l,c
 28696  004928  6ADA               	clrf	fsr2h,c
 28697  00492A  50DF               	movf	indf2,w,c
 28698  00492C  6FAA               	movwf	??_GenerateSubkey& (0+255),b
 28699  00492E  51CB               	movf	GenerateSubkey@i& (0+255),w,b
 28700  004930  25A6               	addwf	GenerateSubkey@k1& (0+255),w,b
 28701  004932  6ED9               	movwf	fsr2l,c
 28702  004934  0E00               	movlw	0
 28703  004936  21A7               	addwfc	(GenerateSubkey@k1+1)& (0+255),w,b
 28704  004938  6EDA               	movwf	fsr2h,c
 28705  00493A  51AA               	movf	??_GenerateSubkey& (0+255),w,b
 28706  00493C  1ADF               	xorwf	indf2,f,c
 28707                           
 28708                           ; BSR set to: 0
 28709  00493E  2BCB               	incf	GenerateSubkey@i& (0+255),f,b
 28710                           
 28711                           ; BSR set to: 0
 28712  004940  0E0F               	movlw	15
 28713  004942  65CB               	cpfsgt	GenerateSubkey@i& (0+255),b
 28714  004944  D7EE               	goto	l12424
 28715  004946                     l12430:
 28716                           
 28717                           ; BSR set to: 0
 28718                           ;lorawan_aes_cmac.c: 148: }
 28719                           ;lorawan_aes_cmac.c: 149: }
 28720                           ;lorawan_aes_cmac.c: 152: if ( (k1[0] & 0x80) == 0x00 )
 28721  004946  C0A6  FFD9         	movff	GenerateSubkey@k1,fsr2l
 28722  00494A  C0A7  FFDA         	movff	GenerateSubkey@k1+1,fsr2h
 28723  00494E  BEDF               	btfsc	indf2,7,c
 28724  004950  D00C               	goto	l12434
 28725                           
 28726                           ; BSR set to: 0
 28727                           ;lorawan_aes_cmac.c: 153: {
 28728                           ;lorawan_aes_cmac.c: 154: FillSubKey( k1, k2, (sizeof(l)) );
 28729  004952  C0A6  F064         	movff	GenerateSubkey@k1,FillSubKey@source
 28730  004956  C0A7  F065         	movff	GenerateSubkey@k1+1,FillSubKey@source+1
 28731  00495A  C0A8  F066         	movff	GenerateSubkey@k2,FillSubKey@key
 28732  00495E  C0A9  F067         	movff	GenerateSubkey@k2+1,FillSubKey@key+1
 28733  004962  0E10               	movlw	16
 28734  004964  6F68               	movwf	FillSubKey@size& (0+255),b
 28735  004966  EF30  F035         	goto	_FillSubKey	;wreg free
 28736  00496A                     l12434:
 28737                           
 28738                           ; BSR set to: 0
 28739                           ;lorawan_aes_cmac.c: 156: else
 28740                           ;lorawan_aes_cmac.c: 157: {
 28741                           ;lorawan_aes_cmac.c: 158: FillSubKey( k1, k2, (sizeof(l) ) );
 28742  00496A  C0A6  F064         	movff	GenerateSubkey@k1,FillSubKey@source
 28743  00496E  C0A7  F065         	movff	GenerateSubkey@k1+1,FillSubKey@source+1
 28744  004972  C0A8  F066         	movff	GenerateSubkey@k2,FillSubKey@key
 28745  004976  C0A9  F067         	movff	GenerateSubkey@k2+1,FillSubKey@key+1
 28746  00497A  0E10               	movlw	16
 28747  00497C  6F68               	movwf	FillSubKey@size& (0+255),b
 28748  00497E  EC30  F035         	call	_FillSubKey	;wreg free
 28749                           
 28750                           ; BSR set to: 0
 28751                           ;lorawan_aes_cmac.c: 160: for (i=0; i<sizeof(l); i++)
 28752  004982  6BCB               	clrf	GenerateSubkey@i& (0+255),b
 28753  004984                     l12442:
 28754                           
 28755                           ; BSR set to: 0
 28756                           ;lorawan_aes_cmac.c: 161: {
 28757                           ;lorawan_aes_cmac.c: 162: k2[i] = k2[i] ^ const_Rb[i];
 28758  004984  51CB               	movf	GenerateSubkey@i& (0+255),w,b
 28759  004986  25A8               	addwf	GenerateSubkey@k2& (0+255),w,b
 28760  004988  6ED9               	movwf	fsr2l,c
 28761  00498A  0E00               	movlw	0
 28762  00498C  21A9               	addwfc	(GenerateSubkey@k2+1)& (0+255),w,b
 28763  00498E  6EDA               	movwf	fsr2h,c
 28764  004990  51CB               	movf	GenerateSubkey@i& (0+255),w,b
 28765  004992  0FAB               	addlw	low GenerateSubkey@const_Rb
 28766  004994  6EE9               	movwf	fsr0l,c
 28767  004996  6AEA               	clrf	fsr0h,c
 28768  004998  50EF               	movf	indf0,w,c
 28769  00499A  6FAA               	movwf	??_GenerateSubkey& (0+255),b
 28770  00499C  51CB               	movf	GenerateSubkey@i& (0+255),w,b
 28771  00499E  25A8               	addwf	GenerateSubkey@k2& (0+255),w,b
 28772  0049A0  6EE9               	movwf	fsr0l,c
 28773  0049A2  0E00               	movlw	0
 28774  0049A4  21A9               	addwfc	(GenerateSubkey@k2+1)& (0+255),w,b
 28775  0049A6  6EEA               	movwf	fsr0h,c
 28776  0049A8  50EF               	movf	indf0,w,c
 28777  0049AA  19AA               	xorwf	??_GenerateSubkey& (0+255),w,b
 28778  0049AC  6EDF               	movwf	indf2,c
 28779                           
 28780                           ; BSR set to: 0
 28781  0049AE  2BCB               	incf	GenerateSubkey@i& (0+255),f,b
 28782                           
 28783                           ; BSR set to: 0
 28784  0049B0  0E0F               	movlw	15
 28785  0049B2  65CB               	cpfsgt	GenerateSubkey@i& (0+255),b
 28786  0049B4  D7E7               	goto	l12442
 28787  0049B6  0C0F               	retlw	15
 28788  0049B8                     __end_of_GenerateSubkey:
 28789                           	opt stack 0
 28790                           tosu	equ	0xFFF
 28791                           tosh	equ	0xFFE
 28792                           tosl	equ	0xFFD
 28793                           pclath	equ	0xFFA
 28794                           tblptru	equ	0xFF8
 28795                           tblptrh	equ	0xFF7
 28796                           tblptrl	equ	0xFF6
 28797                           tablat	equ	0xFF5
 28798                           prodh	equ	0xFF4
 28799                           prodl	equ	0xFF3
 28800                           intcon	equ	0xFF2
 28801                           intcon2	equ	0xFF1
 28802                           intcon3	equ	0xFF0
 28803                           indf0	equ	0xFEF
 28804                           postinc0	equ	0xFEE
 28805                           plusw0	equ	0xFEB
 28806                           fsr0h	equ	0xFEA
 28807                           fsr0l	equ	0xFE9
 28808                           wreg	equ	0xFE8
 28809                           postinc1	equ	0xFE6
 28810                           postdec1	equ	0xFE5
 28811                           plusw1	equ	0xFE3
 28812                           fsr1h	equ	0xFE2
 28813                           fsr1l	equ	0xFE1
 28814                           indf2	equ	0xFDF
 28815                           postinc2	equ	0xFDE
 28816                           postdec2	equ	0xFDD
 28817                           plusw2	equ	0xFDB
 28818                           fsr2h	equ	0xFDA
 28819                           fsr2l	equ	0xFD9
 28820                           status	equ	0xFD8
 28821                           
 28822 ;; *************** function _FillSubKey *****************
 28823 ;; Defined at:
 28824 ;;		line 167 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 28825 ;; Parameters:    Size  Location     Type
 28826 ;;  source          2    4[BANK0 ] PTR unsigned char 
 28827 ;;		 -> GenerateSubkey@l(16), AESCmac@k1(16), 
 28828 ;;  key             2    6[BANK0 ] PTR unsigned char 
 28829 ;;		 -> AESCmac@k2(16), AESCmac@k1(16), 
 28830 ;;  size            1    8[BANK0 ] unsigned char 
 28831 ;; Auto vars:     Size  Location     Type
 28832 ;;  i               1   11[BANK0 ] unsigned char 
 28833 ;;  carry           1   10[BANK0 ] unsigned char 
 28834 ;; Return value:  Size  Location     Type
 28835 ;;                  1    wreg      void 
 28836 ;; Registers used:
 28837 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
 28838 ;; Tracked objects:
 28839 ;;		On entry : F/0
 28840 ;;		On exit  : F/0
 28841 ;;		Unchanged: 0/0
 28842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 28843 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28844 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28845 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28846 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28847 ;;Total ram usage:        8 bytes
 28848 ;; Hardware stack levels used:    1
 28849 ;; Hardware stack levels required when called:    7
 28850 ;; This function calls:
 28851 ;;		Nothing
 28852 ;; This function is called by:
 28853 ;;		_GenerateSubkey
 28854 ;; This function uses a non-reentrant model
 28855 ;;
 28856                           
 28857                           	psect	text147
 28858  006A60                     __ptext147:
 28859                           	opt stack 0
 28860  006A60                     _FillSubKey:
 28861                           	opt stack 18
 28862                           
 28863                           ; BSR set to: 0
 28864                           ;lorawan_aes_cmac.c: 169: uint8_t i = 0;
 28865                           
 28866                           ; BSR set to: 0
 28867                           ;incstack = 0
 28868  006A60  6B6B               	clrf	FillSubKey@i& (0+255),b
 28869                           
 28870                           ;lorawan_aes_cmac.c: 170: uint8_t carry = 0;
 28871  006A62  6B6A               	clrf	FillSubKey@carry& (0+255),b
 28872                           
 28873                           ;lorawan_aes_cmac.c: 172: i=size;
 28874  006A64  C068  F06B         	movff	FillSubKey@size,FillSubKey@i
 28875                           
 28876                           ;lorawan_aes_cmac.c: 174: while(i--)
 28877  006A68  D01C               	goto	l12132
 28878  006A6A                     l12128:
 28879                           
 28880                           ; BSR set to: 0
 28881                           ;lorawan_aes_cmac.c: 175: {
 28882                           ;lorawan_aes_cmac.c: 176: key[i] = (source[i] << (1)) | carry;
 28883  006A6A  516B               	movf	FillSubKey@i& (0+255),w,b
 28884  006A6C  2566               	addwf	FillSubKey@key& (0+255),w,b
 28885  006A6E  6ED9               	movwf	fsr2l,c
 28886  006A70  0E00               	movlw	0
 28887  006A72  2167               	addwfc	(FillSubKey@key+1)& (0+255),w,b
 28888  006A74  6EDA               	movwf	fsr2h,c
 28889  006A76  516B               	movf	FillSubKey@i& (0+255),w,b
 28890  006A78  2564               	addwf	FillSubKey@source& (0+255),w,b
 28891  006A7A  6EE9               	movwf	fsr0l,c
 28892  006A7C  0E00               	movlw	0
 28893  006A7E  2165               	addwfc	(FillSubKey@source+1)& (0+255),w,b
 28894  006A80  6EEA               	movwf	fsr0h,c
 28895  006A82  50EF               	movf	indf0,w,c
 28896  006A84  6F69               	movwf	??_FillSubKey& (0+255),b
 28897  006A86  90D8               	bcf	status,0,c
 28898  006A88  3569               	rlcf	??_FillSubKey& (0+255),w,b
 28899  006A8A  116A               	iorwf	FillSubKey@carry& (0+255),w,b
 28900  006A8C  6EDF               	movwf	indf2,c
 28901                           
 28902                           ; BSR set to: 0
 28903                           ;lorawan_aes_cmac.c: 177: carry = !!(source[i] & 0x80);
 28904  006A8E  516B               	movf	FillSubKey@i& (0+255),w,b
 28905  006A90  2564               	addwf	FillSubKey@source& (0+255),w,b
 28906  006A92  6ED9               	movwf	fsr2l,c
 28907  006A94  0E00               	movlw	0
 28908  006A96  2165               	addwfc	(FillSubKey@source+1)& (0+255),w,b
 28909  006A98  6EDA               	movwf	fsr2h,c
 28910  006A9A  0E01               	movlw	1
 28911  006A9C  AEDF               	btfss	indf2,7,c
 28912  006A9E  0E00               	movlw	0
 28913  006AA0  6F6A               	movwf	FillSubKey@carry& (0+255),b
 28914  006AA2                     l12132:
 28915                           
 28916                           ; BSR set to: 0
 28917  006AA2  076B               	decf	FillSubKey@i& (0+255),f,b
 28918  006AA4  296B               	incf	FillSubKey@i& (0+255),w,b
 28919  006AA6  E1E1               	bnz	l12128
 28920                           
 28921                           ; BSR set to: 0
 28922  006AA8  0012               	return		;funcret
 28923  006AAA                     __end_of_FillSubKey:
 28924                           	opt stack 0
 28925                           tosu	equ	0xFFF
 28926                           tosh	equ	0xFFE
 28927                           tosl	equ	0xFFD
 28928                           pclath	equ	0xFFA
 28929                           tblptru	equ	0xFF8
 28930                           tblptrh	equ	0xFF7
 28931                           tblptrl	equ	0xFF6
 28932                           tablat	equ	0xFF5
 28933                           prodh	equ	0xFF4
 28934                           prodl	equ	0xFF3
 28935                           intcon	equ	0xFF2
 28936                           intcon2	equ	0xFF1
 28937                           intcon3	equ	0xFF0
 28938                           indf0	equ	0xFEF
 28939                           postinc0	equ	0xFEE
 28940                           plusw0	equ	0xFEB
 28941                           fsr0h	equ	0xFEA
 28942                           fsr0l	equ	0xFE9
 28943                           wreg	equ	0xFE8
 28944                           postinc1	equ	0xFE6
 28945                           postdec1	equ	0xFE5
 28946                           plusw1	equ	0xFE3
 28947                           fsr1h	equ	0xFE2
 28948                           fsr1l	equ	0xFE1
 28949                           indf2	equ	0xFDF
 28950                           postinc2	equ	0xFDE
 28951                           postdec2	equ	0xFDD
 28952                           plusw2	equ	0xFDB
 28953                           fsr2h	equ	0xFDA
 28954                           fsr2l	equ	0xFD9
 28955                           status	equ	0xFD8
 28956                           
 28957 ;; *************** function _AESEncodeLoRa *****************
 28958 ;; Defined at:
 28959 ;;		line 34 in file "mcc_generated_files/LoRaWAN/lorawan_aes.c"
 28960 ;; Parameters:    Size  Location     Type
 28961 ;;  block           2   48[BANK0 ] PTR unsigned char 
 28962 ;;		 -> aesBuffer(16), LORAWAN_RxDone@hdr(2), GenerateSubkey@l(16), AESCmac@y(16), 
 28963 ;;		 -> AESCmac@x(16), loRa.activationParameters(105), radioBuffer(271), loRa(245), 
 28964 ;;  key             2   50[BANK0 ] PTR unsigned char 
 28965 ;;		 -> loRa.activationParameters(105), loRa(245), 
 28966 ;; Auto vars:     Size  Location     Type
 28967 ;;  useKey         16   52[BANK0 ] unsigned char [16]
 28968 ;; Return value:  Size  Location     Type
 28969 ;;                  1    wreg      void 
 28970 ;; Registers used:
 28971 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 28972 ;; Tracked objects:
 28973 ;;		On entry : F/0
 28974 ;;		On exit  : F/0
 28975 ;;		Unchanged: 0/0
 28976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 28977 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28978 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28980 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28981 ;;Total ram usage:       20 bytes
 28982 ;; Hardware stack levels used:    1
 28983 ;; Hardware stack levels required when called:    9
 28984 ;; This function calls:
 28985 ;;		_AESEncode
 28986 ;;		_memcpy
 28987 ;; This function is called by:
 28988 ;;		_AESCmac
 28989 ;;		_GenerateSubkey
 28990 ;;		_LORAWAN_RxDone
 28991 ;;		_ComputeSessionKeys
 28992 ;;		_EncryptFRMPayload
 28993 ;; This function uses a non-reentrant model
 28994 ;;
 28995                           
 28996                           	psect	text148
 28997  007212                     __ptext148:
 28998                           	opt stack 0
 28999  007212                     _AESEncodeLoRa:
 29000                           	opt stack 17
 29001                           
 29002                           ; BSR set to: 0
 29003                           ;lorawan_aes.c: 36: uint8_t useKey[16];
 29004                           ;lorawan_aes.c: 37: memcpy(useKey, key, sizeof(useKey));
 29005                           
 29006                           ; BSR set to: 0
 29007                           ;incstack = 0
 29008  007212  0E94               	movlw	low AESEncodeLoRa@useKey
 29009  007214  6F64               	movwf	memcpy@d1& (0+255),b
 29010  007216  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 29011  007218  C092  F066         	movff	AESEncodeLoRa@key,memcpy@s1
 29012  00721C  C093  F067         	movff	AESEncodeLoRa@key+1,memcpy@s1+1
 29013  007220  6B69               	clrf	(memcpy@n+1)& (0+255),b
 29014  007222  0E10               	movlw	16
 29015  007224  6F68               	movwf	memcpy@n& (0+255),b
 29016  007226  ECCA  F033         	call	_memcpy	;wreg free
 29017                           
 29018                           ;lorawan_aes.c: 38: AESEncode(block, useKey);
 29019  00722A  C090  F06A         	movff	AESEncodeLoRa@block,AESEncode@block
 29020  00722E  C091  F06B         	movff	AESEncodeLoRa@block+1,AESEncode@block+1
 29021  007232  0E94               	movlw	low AESEncodeLoRa@useKey
 29022  007234  6F6C               	movwf	AESEncode@masterKey& (0+255),b
 29023  007236  EF9B  F010         	goto	_AESEncode	;wreg free
 29024  00723A                     __end_of_AESEncodeLoRa:
 29025                           	opt stack 0
 29026                           tosu	equ	0xFFF
 29027                           tosh	equ	0xFFE
 29028                           tosl	equ	0xFFD
 29029                           pclath	equ	0xFFA
 29030                           tblptru	equ	0xFF8
 29031                           tblptrh	equ	0xFF7
 29032                           tblptrl	equ	0xFF6
 29033                           tablat	equ	0xFF5
 29034                           prodh	equ	0xFF4
 29035                           prodl	equ	0xFF3
 29036                           intcon	equ	0xFF2
 29037                           intcon2	equ	0xFF1
 29038                           intcon3	equ	0xFF0
 29039                           indf0	equ	0xFEF
 29040                           postinc0	equ	0xFEE
 29041                           plusw0	equ	0xFEB
 29042                           fsr0h	equ	0xFEA
 29043                           fsr0l	equ	0xFE9
 29044                           wreg	equ	0xFE8
 29045                           postinc1	equ	0xFE6
 29046                           postdec1	equ	0xFE5
 29047                           plusw1	equ	0xFE3
 29048                           fsr1h	equ	0xFE2
 29049                           fsr1l	equ	0xFE1
 29050                           indf2	equ	0xFDF
 29051                           postinc2	equ	0xFDE
 29052                           postdec2	equ	0xFDD
 29053                           plusw2	equ	0xFDB
 29054                           fsr2h	equ	0xFDA
 29055                           fsr2l	equ	0xFD9
 29056                           status	equ	0xFD8
 29057                           
 29058 ;; *************** function _AESEncode *****************
 29059 ;; Defined at:
 29060 ;;		line 236 in file "mcc_generated_files/LoRaWAN/AES.c"
 29061 ;; Parameters:    Size  Location     Type
 29062 ;;  block           2   10[BANK0 ] PTR unsigned char 
 29063 ;;		 -> aesBuffer(16), LORAWAN_RxDone@hdr(2), GenerateSubkey@l(16), AESCmac@y(16), 
 29064 ;;		 -> AESCmac@x(16), loRa.activationParameters(105), radioBuffer(271), loRa(245), 
 29065 ;;  masterKey       1   12[BANK0 ] PTR unsigned char 
 29066 ;;		 -> AESEncodeLoRa@useKey(16), 
 29067 ;; Auto vars:     Size  Location     Type
 29068 ;;  aux3            1   46[BANK0 ] unsigned char 
 29069 ;;  aux1            1   45[BANK0 ] unsigned char 
 29070 ;;  aux2            1   44[BANK0 ] unsigned char 
 29071 ;;  aux             1   43[BANK0 ] unsigned char 
 29072 ;;  key            16   21[BANK0 ] unsigned char [16]
 29073 ;;  i               1   47[BANK0 ] unsigned char 
 29074 ;; Return value:  Size  Location     Type
 29075 ;;                  1    wreg      void 
 29076 ;; Registers used:
 29077 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 29078 ;; Tracked objects:
 29079 ;;		On entry : F/0
 29080 ;;		On exit  : F/0
 29081 ;;		Unchanged: 0/0
 29082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 29083 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29084 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29085 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29086 ;;      Totals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29087 ;;Total ram usage:       38 bytes
 29088 ;; Hardware stack levels used:    1
 29089 ;; Hardware stack levels required when called:    8
 29090 ;; This function calls:
 29091 ;;		_EncKeySchedule
 29092 ;;		_EncodeShiftRow
 29093 ;; This function is called by:
 29094 ;;		_AESEncodeLoRa
 29095 ;; This function uses a non-reentrant model
 29096 ;;
 29097                           
 29098                           	psect	text149
 29099  002136                     __ptext149:
 29100                           	opt stack 0
 29101  002136                     _AESEncode:
 29102                           	opt stack 17
 29103                           
 29104                           ; BSR set to: 0
 29105                           ;AES.c: 238: unsigned char i;
 29106                           ;AES.c: 240: unsigned char key[16];
 29107                           ;AES.c: 242: for (i = 0; i < 16; i++)
 29108                           
 29109                           ; BSR set to: 0
 29110                           ;incstack = 0
 29111  002136  6B8F               	clrf	AESEncode@i& (0+255),b
 29112  002138                     l11732:
 29113                           
 29114                           ; BSR set to: 0
 29115                           ;AES.c: 243: {
 29116                           ;AES.c: 244: key[i] = masterKey[i];
 29117  002138  516C               	movf	AESEncode@masterKey& (0+255),w,b
 29118  00213A  258F               	addwf	AESEncode@i& (0+255),w,b
 29119  00213C  6ED9               	movwf	fsr2l,c
 29120  00213E  6ADA               	clrf	fsr2h,c
 29121  002140  518F               	movf	AESEncode@i& (0+255),w,b
 29122  002142  0F75               	addlw	low AESEncode@key
 29123  002144  6EE9               	movwf	fsr0l,c
 29124  002146  6AEA               	clrf	fsr0h,c
 29125  002148  CFDF FFEF          	movff	indf2,indf0
 29126                           
 29127                           ; BSR set to: 0
 29128  00214C  2B8F               	incf	AESEncode@i& (0+255),f,b
 29129                           
 29130                           ; BSR set to: 0
 29131  00214E  0E0F               	movlw	15
 29132  002150  658F               	cpfsgt	AESEncode@i& (0+255),b
 29133  002152  D7F2               	goto	l11732
 29134                           
 29135                           ; BSR set to: 0
 29136                           ;AES.c: 245: }
 29137                           ;AES.c: 248: _roundCounter = 10;
 29138  002154  0E0A               	movlw	10
 29139  002156  6E47               	movwf	__roundCounter,c
 29140                           
 29141                           ;AES.c: 250: _rcon = 0x01;
 29142  002158  0E01               	movlw	1
 29143  00215A  6E46               	movwf	__rcon,c
 29144                           
 29145                           ; BSR set to: 0
 29146                           ;AES.c: 253: for(i=0;i<16;i++)
 29147  00215C  6B8F               	clrf	AESEncode@i& (0+255),b
 29148  00215E                     l11746:
 29149                           
 29150                           ; BSR set to: 0
 29151                           ;AES.c: 254: {
 29152                           ;AES.c: 255: block[i] ^= key[i];
 29153  00215E  518F               	movf	AESEncode@i& (0+255),w,b
 29154  002160  0F75               	addlw	low AESEncode@key
 29155  002162  6ED9               	movwf	fsr2l,c
 29156  002164  6ADA               	clrf	fsr2h,c
 29157  002166  50DF               	movf	indf2,w,c
 29158  002168  6F6D               	movwf	??_AESEncode& (0+255),b
 29159  00216A  518F               	movf	AESEncode@i& (0+255),w,b
 29160  00216C  256A               	addwf	AESEncode@block& (0+255),w,b
 29161  00216E  6ED9               	movwf	fsr2l,c
 29162  002170  0E00               	movlw	0
 29163  002172  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29164  002174  6EDA               	movwf	fsr2h,c
 29165  002176  516D               	movf	??_AESEncode& (0+255),w,b
 29166  002178  1ADF               	xorwf	indf2,f,c
 29167                           
 29168                           ; BSR set to: 0
 29169  00217A  2B8F               	incf	AESEncode@i& (0+255),f,b
 29170                           
 29171                           ; BSR set to: 0
 29172  00217C  0E0F               	movlw	15
 29173  00217E  658F               	cpfsgt	AESEncode@i& (0+255),b
 29174  002180  D7EE               	goto	l11746
 29175  002182                     l2475:
 29176                           
 29177                           ; BSR set to: 0
 29178                           ;AES.c: 259: {
 29179                           ;AES.c: 261: for(i=0;i<16;i++)
 29180  002182  6B8F               	clrf	AESEncode@i& (0+255),b
 29181  002184                     l11756:
 29182                           
 29183                           ; BSR set to: 0
 29184                           ;AES.c: 262: {
 29185                           ;AES.c: 263: block[i]=STable[block[i]];
 29186  002184  518F               	movf	AESEncode@i& (0+255),w,b
 29187  002186  256A               	addwf	AESEncode@block& (0+255),w,b
 29188  002188  6ED9               	movwf	fsr2l,c
 29189  00218A  0E00               	movlw	0
 29190  00218C  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29191  00218E  6EDA               	movwf	fsr2h,c
 29192  002190  50DF               	movf	indf2,w,c
 29193  002192  6F6D               	movwf	??_AESEncode& (0+255),b
 29194  002194  6B6E               	clrf	(??_AESEncode+1)& (0+255),b
 29195  002196  0E6D               	movlw	low _STable
 29196  002198  256D               	addwf	??_AESEncode& (0+255),w,b
 29197  00219A  6EF6               	movwf	tblptrl,c
 29198  00219C  0E7E               	movlw	high _STable
 29199  00219E  216E               	addwfc	(??_AESEncode+1)& (0+255),w,b
 29200  0021A0  6EF7               	movwf	tblptrh,c
 29201  0021A2                     	if	0	;There are less than 3 active tblptr bytes
 29202  0021A2                     	endif
 29203  0021A2  518F               	movf	AESEncode@i& (0+255),w,b
 29204  0021A4  256A               	addwf	AESEncode@block& (0+255),w,b
 29205  0021A6  6ED9               	movwf	fsr2l,c
 29206  0021A8  0E00               	movlw	0
 29207  0021AA  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29208  0021AC  6EDA               	movwf	fsr2h,c
 29209  0021AE  0008               	tblrd		*
 29210  0021B0  CFF5 FFDF          	movff	tablat,indf2
 29211                           
 29212                           ; BSR set to: 0
 29213  0021B4  2B8F               	incf	AESEncode@i& (0+255),f,b
 29214                           
 29215                           ; BSR set to: 0
 29216  0021B6  0E0F               	movlw	15
 29217  0021B8  658F               	cpfsgt	AESEncode@i& (0+255),b
 29218  0021BA  D7E4               	goto	l11756
 29219                           
 29220                           ; BSR set to: 0
 29221                           ;AES.c: 264: }
 29222                           ;AES.c: 267: EncodeShiftRow(block);
 29223  0021BC  C06A  F064         	movff	AESEncode@block,EncodeShiftRow@stateTable
 29224  0021C0  C06B  F065         	movff	AESEncode@block+1,EncodeShiftRow@stateTable+1
 29225  0021C4  ECB5  F01E         	call	_EncodeShiftRow	;wreg free
 29226                           
 29227                           ; BSR set to: 0
 29228                           ;AES.c: 270: if(_roundCounter != 1)
 29229  0021C8  0447               	decf	__roundCounter,w,c
 29230  0021CA  E101 D111          	bz	l11804
 29231                           
 29232                           ; BSR set to: 0
 29233                           ;AES.c: 271: {
 29234                           ;AES.c: 272: unsigned char aux,aux1,aux2,aux3;
 29235                           ;AES.c: 274: for(i=0;i<16;i+=4)
 29236  0021CE  6B8F               	clrf	AESEncode@i& (0+255),b
 29237  0021D0                     l11772:
 29238                           
 29239                           ; BSR set to: 0
 29240                           ;AES.c: 275: {
 29241                           ;AES.c: 276: aux1= block[i+0] ^ block[i+1];
 29242  0021D0  518F               	movf	AESEncode@i& (0+255),w,b
 29243  0021D2  256A               	addwf	AESEncode@block& (0+255),w,b
 29244  0021D4  6F6D               	movwf	??_AESEncode& (0+255),b
 29245  0021D6  0E00               	movlw	0
 29246  0021D8  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29247  0021DA  6F6E               	movwf	(??_AESEncode+1)& (0+255),b
 29248  0021DC  296D               	incf	??_AESEncode& (0+255),w,b
 29249  0021DE  6ED9               	movwf	fsr2l,c
 29250  0021E0  0E00               	movlw	0
 29251  0021E2  216E               	addwfc	(??_AESEncode+1)& (0+255),w,b
 29252  0021E4  6EDA               	movwf	fsr2h,c
 29253  0021E6  50DF               	movf	indf2,w,c
 29254  0021E8  6F6F               	movwf	(??_AESEncode+2)& (0+255),b
 29255  0021EA  518F               	movf	AESEncode@i& (0+255),w,b
 29256  0021EC  256A               	addwf	AESEncode@block& (0+255),w,b
 29257  0021EE  6ED9               	movwf	fsr2l,c
 29258  0021F0  0E00               	movlw	0
 29259  0021F2  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29260  0021F4  6EDA               	movwf	fsr2h,c
 29261  0021F6  50DF               	movf	indf2,w,c
 29262  0021F8  196F               	xorwf	(??_AESEncode+2)& (0+255),w,b
 29263  0021FA  6F8D               	movwf	AESEncode@aux1& (0+255),b
 29264                           
 29265                           ;AES.c: 277: aux3= block[i+2]^block[i+3];
 29266  0021FC  518F               	movf	AESEncode@i& (0+255),w,b
 29267  0021FE  256A               	addwf	AESEncode@block& (0+255),w,b
 29268  002200  6F6D               	movwf	??_AESEncode& (0+255),b
 29269  002202  0E00               	movlw	0
 29270  002204  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29271  002206  6F6E               	movwf	(??_AESEncode+1)& (0+255),b
 29272  002208  0E03               	movlw	3
 29273  00220A  256D               	addwf	??_AESEncode& (0+255),w,b
 29274  00220C  6ED9               	movwf	fsr2l,c
 29275  00220E  0E00               	movlw	0
 29276  002210  216E               	addwfc	(??_AESEncode+1)& (0+255),w,b
 29277  002212  6EDA               	movwf	fsr2h,c
 29278  002214  50DF               	movf	indf2,w,c
 29279  002216  6F6F               	movwf	(??_AESEncode+2)& (0+255),b
 29280  002218  518F               	movf	AESEncode@i& (0+255),w,b
 29281  00221A  256A               	addwf	AESEncode@block& (0+255),w,b
 29282  00221C  6F70               	movwf	(??_AESEncode+3)& (0+255),b
 29283  00221E  0E00               	movlw	0
 29284  002220  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29285  002222  6F71               	movwf	(??_AESEncode+4)& (0+255),b
 29286  002224  0E02               	movlw	2
 29287  002226  2570               	addwf	(??_AESEncode+3)& (0+255),w,b
 29288  002228  6ED9               	movwf	fsr2l,c
 29289  00222A  0E00               	movlw	0
 29290  00222C  2171               	addwfc	(??_AESEncode+4)& (0+255),w,b
 29291  00222E  6EDA               	movwf	fsr2h,c
 29292  002230  50DF               	movf	indf2,w,c
 29293  002232  196F               	xorwf	(??_AESEncode+2)& (0+255),w,b
 29294  002234  6F8E               	movwf	AESEncode@aux3& (0+255),b
 29295                           
 29296                           ; BSR set to: 0
 29297                           ;AES.c: 278: aux = aux1 ^ aux3;
 29298  002236  198D               	xorwf	AESEncode@aux1& (0+255),w,b
 29299  002238  6F8B               	movwf	AESEncode@aux& (0+255),b
 29300                           
 29301                           ; BSR set to: 0
 29302                           ;AES.c: 279: aux2= block[i+2]^block[i+1];
 29303  00223A  518F               	movf	AESEncode@i& (0+255),w,b
 29304  00223C  256A               	addwf	AESEncode@block& (0+255),w,b
 29305  00223E  6F6D               	movwf	??_AESEncode& (0+255),b
 29306  002240  0E00               	movlw	0
 29307  002242  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29308  002244  6F6E               	movwf	(??_AESEncode+1)& (0+255),b
 29309  002246  296D               	incf	??_AESEncode& (0+255),w,b
 29310  002248  6ED9               	movwf	fsr2l,c
 29311  00224A  0E00               	movlw	0
 29312  00224C  216E               	addwfc	(??_AESEncode+1)& (0+255),w,b
 29313  00224E  6EDA               	movwf	fsr2h,c
 29314  002250  50DF               	movf	indf2,w,c
 29315  002252  6F6F               	movwf	(??_AESEncode+2)& (0+255),b
 29316  002254  518F               	movf	AESEncode@i& (0+255),w,b
 29317  002256  256A               	addwf	AESEncode@block& (0+255),w,b
 29318  002258  6F70               	movwf	(??_AESEncode+3)& (0+255),b
 29319  00225A  0E00               	movlw	0
 29320  00225C  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29321  00225E  6F71               	movwf	(??_AESEncode+4)& (0+255),b
 29322  002260  0E02               	movlw	2
 29323  002262  2570               	addwf	(??_AESEncode+3)& (0+255),w,b
 29324  002264  6ED9               	movwf	fsr2l,c
 29325  002266  0E00               	movlw	0
 29326  002268  2171               	addwfc	(??_AESEncode+4)& (0+255),w,b
 29327  00226A  6EDA               	movwf	fsr2h,c
 29328  00226C  50DF               	movf	indf2,w,c
 29329  00226E  196F               	xorwf	(??_AESEncode+2)& (0+255),w,b
 29330  002270  6F8C               	movwf	AESEncode@aux2& (0+255),b
 29331                           
 29332                           ;AES.c: 281: aux1 = (((aux1)<0x80)?(aux1)<<1:(((aux1)<<1)^0x1b) );
 29333  002272  0E7F               	movlw	127
 29334  002274  658D               	cpfsgt	AESEncode@aux1& (0+255),b
 29335  002276  D00C               	goto	l11780
 29336                           
 29337                           ; BSR set to: 0
 29338  002278  0E1B               	movlw	27
 29339  00227A  C08D  F06D         	movff	AESEncode@aux1,??_AESEncode
 29340  00227E  6B6E               	clrf	(??_AESEncode+1)& (0+255),b
 29341  002280  90D8               	bcf	status,0,c
 29342  002282  376D               	rlcf	??_AESEncode& (0+255),f,b
 29343  002284  376E               	rlcf	(??_AESEncode+1)& (0+255),f,b
 29344  002286  196D               	xorwf	??_AESEncode& (0+255),w,b
 29345  002288  6F85               	movwf	_AESEncode$3598& (0+255),b
 29346  00228A  516E               	movf	(??_AESEncode+1)& (0+255),w,b
 29347  00228C  6F86               	movwf	(_AESEncode$3598+1)& (0+255),b
 29348  00228E  D005               	goto	l11782
 29349  002290                     l11780:
 29350                           
 29351                           ; BSR set to: 0
 29352  002290  90D8               	bcf	status,0,c
 29353  002292  358D               	rlcf	AESEncode@aux1& (0+255),w,b
 29354  002294  6F85               	movwf	_AESEncode$3598& (0+255),b
 29355  002296  6B86               	clrf	(_AESEncode$3598+1)& (0+255),b
 29356  002298  3786               	rlcf	(_AESEncode$3598+1)& (0+255),f,b
 29357  00229A                     l11782:
 29358                           
 29359                           ; BSR set to: 0
 29360  00229A  C085  F08D         	movff	_AESEncode$3598,AESEncode@aux1
 29361                           
 29362                           ;AES.c: 282: aux2 = (((aux2)<0x80)?(aux2)<<1:(((aux2)<<1)^0x1b) );
 29363  00229E  0E7F               	movlw	127
 29364  0022A0  658C               	cpfsgt	AESEncode@aux2& (0+255),b
 29365  0022A2  D00C               	goto	l11786
 29366                           
 29367                           ; BSR set to: 0
 29368  0022A4  0E1B               	movlw	27
 29369  0022A6  C08C  F06D         	movff	AESEncode@aux2,??_AESEncode
 29370  0022AA  6B6E               	clrf	(??_AESEncode+1)& (0+255),b
 29371  0022AC  90D8               	bcf	status,0,c
 29372  0022AE  376D               	rlcf	??_AESEncode& (0+255),f,b
 29373  0022B0  376E               	rlcf	(??_AESEncode+1)& (0+255),f,b
 29374  0022B2  196D               	xorwf	??_AESEncode& (0+255),w,b
 29375  0022B4  6F87               	movwf	_AESEncode$3599& (0+255),b
 29376  0022B6  516E               	movf	(??_AESEncode+1)& (0+255),w,b
 29377  0022B8  6F88               	movwf	(_AESEncode$3599+1)& (0+255),b
 29378  0022BA  D005               	goto	l11788
 29379  0022BC                     l11786:
 29380                           
 29381                           ; BSR set to: 0
 29382  0022BC  90D8               	bcf	status,0,c
 29383  0022BE  358C               	rlcf	AESEncode@aux2& (0+255),w,b
 29384  0022C0  6F87               	movwf	_AESEncode$3599& (0+255),b
 29385  0022C2  6B88               	clrf	(_AESEncode$3599+1)& (0+255),b
 29386  0022C4  3788               	rlcf	(_AESEncode$3599+1)& (0+255),f,b
 29387  0022C6                     l11788:
 29388                           
 29389                           ; BSR set to: 0
 29390  0022C6  C087  F08C         	movff	_AESEncode$3599,AESEncode@aux2
 29391                           
 29392                           ;AES.c: 283: aux3 = (((aux3)<0x80)?(aux3)<<1:(((aux3)<<1)^0x1b) );
 29393  0022CA  0E7F               	movlw	127
 29394  0022CC  658E               	cpfsgt	AESEncode@aux3& (0+255),b
 29395  0022CE  D00C               	goto	l11792
 29396                           
 29397                           ; BSR set to: 0
 29398  0022D0  0E1B               	movlw	27
 29399  0022D2  C08E  F06D         	movff	AESEncode@aux3,??_AESEncode
 29400  0022D6  6B6E               	clrf	(??_AESEncode+1)& (0+255),b
 29401  0022D8  90D8               	bcf	status,0,c
 29402  0022DA  376D               	rlcf	??_AESEncode& (0+255),f,b
 29403  0022DC  376E               	rlcf	(??_AESEncode+1)& (0+255),f,b
 29404  0022DE  196D               	xorwf	??_AESEncode& (0+255),w,b
 29405  0022E0  6F89               	movwf	_AESEncode$3600& (0+255),b
 29406  0022E2  516E               	movf	(??_AESEncode+1)& (0+255),w,b
 29407  0022E4  6F8A               	movwf	(_AESEncode$3600+1)& (0+255),b
 29408  0022E6  D005               	goto	l11794
 29409  0022E8                     l11792:
 29410                           
 29411                           ; BSR set to: 0
 29412  0022E8  90D8               	bcf	status,0,c
 29413  0022EA  358E               	rlcf	AESEncode@aux3& (0+255),w,b
 29414  0022EC  6F89               	movwf	_AESEncode$3600& (0+255),b
 29415  0022EE  6B8A               	clrf	(_AESEncode$3600+1)& (0+255),b
 29416  0022F0  378A               	rlcf	(_AESEncode$3600+1)& (0+255),f,b
 29417  0022F2                     l11794:
 29418                           
 29419                           ; BSR set to: 0
 29420  0022F2  C089  F08E         	movff	_AESEncode$3600,AESEncode@aux3
 29421                           
 29422                           ; BSR set to: 0
 29423                           ;AES.c: 285: block[i+0]= aux^aux1^block[i+0];
 29424  0022F6  518F               	movf	AESEncode@i& (0+255),w,b
 29425  0022F8  256A               	addwf	AESEncode@block& (0+255),w,b
 29426  0022FA  6ED9               	movwf	fsr2l,c
 29427  0022FC  0E00               	movlw	0
 29428  0022FE  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29429  002300  6EDA               	movwf	fsr2h,c
 29430  002302  518F               	movf	AESEncode@i& (0+255),w,b
 29431  002304  256A               	addwf	AESEncode@block& (0+255),w,b
 29432  002306  6EE9               	movwf	fsr0l,c
 29433  002308  0E00               	movlw	0
 29434  00230A  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29435  00230C  6EEA               	movwf	fsr0h,c
 29436  00230E  50EF               	movf	indf0,w,c
 29437  002310  198B               	xorwf	AESEncode@aux& (0+255),w,b
 29438  002312  198D               	xorwf	AESEncode@aux1& (0+255),w,b
 29439  002314  6EDF               	movwf	indf2,c
 29440                           
 29441                           ; BSR set to: 0
 29442                           ;AES.c: 286: block[i+1]= aux^aux2^block[i+1];
 29443  002316  518F               	movf	AESEncode@i& (0+255),w,b
 29444  002318  256A               	addwf	AESEncode@block& (0+255),w,b
 29445  00231A  6F6D               	movwf	??_AESEncode& (0+255),b
 29446  00231C  0E00               	movlw	0
 29447  00231E  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29448  002320  6F6E               	movwf	(??_AESEncode+1)& (0+255),b
 29449  002322  296D               	incf	??_AESEncode& (0+255),w,b
 29450  002324  6ED9               	movwf	fsr2l,c
 29451  002326  0E00               	movlw	0
 29452  002328  216E               	addwfc	(??_AESEncode+1)& (0+255),w,b
 29453  00232A  6EDA               	movwf	fsr2h,c
 29454  00232C  518F               	movf	AESEncode@i& (0+255),w,b
 29455  00232E  256A               	addwf	AESEncode@block& (0+255),w,b
 29456  002330  6F6F               	movwf	(??_AESEncode+2)& (0+255),b
 29457  002332  0E00               	movlw	0
 29458  002334  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29459  002336  6F70               	movwf	(??_AESEncode+3)& (0+255),b
 29460  002338  296F               	incf	(??_AESEncode+2)& (0+255),w,b
 29461  00233A  6EE9               	movwf	fsr0l,c
 29462  00233C  0E00               	movlw	0
 29463  00233E  2170               	addwfc	(??_AESEncode+3)& (0+255),w,b
 29464  002340  6EEA               	movwf	fsr0h,c
 29465  002342  50EF               	movf	indf0,w,c
 29466  002344  198B               	xorwf	AESEncode@aux& (0+255),w,b
 29467  002346  198C               	xorwf	AESEncode@aux2& (0+255),w,b
 29468  002348  6EDF               	movwf	indf2,c
 29469                           
 29470                           ; BSR set to: 0
 29471                           ;AES.c: 287: block[i+2]= aux^aux3^block[i+2];
 29472  00234A  518F               	movf	AESEncode@i& (0+255),w,b
 29473  00234C  256A               	addwf	AESEncode@block& (0+255),w,b
 29474  00234E  6F6D               	movwf	??_AESEncode& (0+255),b
 29475  002350  0E00               	movlw	0
 29476  002352  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29477  002354  6F6E               	movwf	(??_AESEncode+1)& (0+255),b
 29478  002356  0E02               	movlw	2
 29479  002358  256D               	addwf	??_AESEncode& (0+255),w,b
 29480  00235A  6ED9               	movwf	fsr2l,c
 29481  00235C  0E00               	movlw	0
 29482  00235E  216E               	addwfc	(??_AESEncode+1)& (0+255),w,b
 29483  002360  6EDA               	movwf	fsr2h,c
 29484  002362  518F               	movf	AESEncode@i& (0+255),w,b
 29485  002364  256A               	addwf	AESEncode@block& (0+255),w,b
 29486  002366  6F6F               	movwf	(??_AESEncode+2)& (0+255),b
 29487  002368  0E00               	movlw	0
 29488  00236A  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29489  00236C  6F70               	movwf	(??_AESEncode+3)& (0+255),b
 29490  00236E  0E02               	movlw	2
 29491  002370  256F               	addwf	(??_AESEncode+2)& (0+255),w,b
 29492  002372  6EE9               	movwf	fsr0l,c
 29493  002374  0E00               	movlw	0
 29494  002376  2170               	addwfc	(??_AESEncode+3)& (0+255),w,b
 29495  002378  6EEA               	movwf	fsr0h,c
 29496  00237A  50EF               	movf	indf0,w,c
 29497  00237C  198B               	xorwf	AESEncode@aux& (0+255),w,b
 29498  00237E  198E               	xorwf	AESEncode@aux3& (0+255),w,b
 29499  002380  6EDF               	movwf	indf2,c
 29500                           
 29501                           ; BSR set to: 0
 29502                           ;AES.c: 288: block[i+3]= block[i+0]^block[i+1]^block[i+2]^aux;
 29503  002382  518F               	movf	AESEncode@i& (0+255),w,b
 29504  002384  256A               	addwf	AESEncode@block& (0+255),w,b
 29505  002386  6F6D               	movwf	??_AESEncode& (0+255),b
 29506  002388  0E00               	movlw	0
 29507  00238A  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29508  00238C  6F6E               	movwf	(??_AESEncode+1)& (0+255),b
 29509  00238E  0E03               	movlw	3
 29510  002390  256D               	addwf	??_AESEncode& (0+255),w,b
 29511  002392  6ED9               	movwf	fsr2l,c
 29512  002394  0E00               	movlw	0
 29513  002396  216E               	addwfc	(??_AESEncode+1)& (0+255),w,b
 29514  002398  6EDA               	movwf	fsr2h,c
 29515  00239A  518F               	movf	AESEncode@i& (0+255),w,b
 29516  00239C  256A               	addwf	AESEncode@block& (0+255),w,b
 29517  00239E  6F6F               	movwf	(??_AESEncode+2)& (0+255),b
 29518  0023A0  0E00               	movlw	0
 29519  0023A2  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29520  0023A4  6F70               	movwf	(??_AESEncode+3)& (0+255),b
 29521  0023A6  0E02               	movlw	2
 29522  0023A8  256F               	addwf	(??_AESEncode+2)& (0+255),w,b
 29523  0023AA  6EE9               	movwf	fsr0l,c
 29524  0023AC  0E00               	movlw	0
 29525  0023AE  2170               	addwfc	(??_AESEncode+3)& (0+255),w,b
 29526  0023B0  6EEA               	movwf	fsr0h,c
 29527  0023B2  50EF               	movf	indf0,w,c
 29528  0023B4  6F71               	movwf	(??_AESEncode+4)& (0+255),b
 29529  0023B6  518F               	movf	AESEncode@i& (0+255),w,b
 29530  0023B8  256A               	addwf	AESEncode@block& (0+255),w,b
 29531  0023BA  6F72               	movwf	(??_AESEncode+5)& (0+255),b
 29532  0023BC  0E00               	movlw	0
 29533  0023BE  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29534  0023C0  6F73               	movwf	(??_AESEncode+6)& (0+255),b
 29535  0023C2  2972               	incf	(??_AESEncode+5)& (0+255),w,b
 29536  0023C4  6EE9               	movwf	fsr0l,c
 29537  0023C6  0E00               	movlw	0
 29538  0023C8  2173               	addwfc	(??_AESEncode+6)& (0+255),w,b
 29539  0023CA  6EEA               	movwf	fsr0h,c
 29540  0023CC  50EF               	movf	indf0,w,c
 29541  0023CE  6F74               	movwf	(??_AESEncode+7)& (0+255),b
 29542  0023D0  518F               	movf	AESEncode@i& (0+255),w,b
 29543  0023D2  256A               	addwf	AESEncode@block& (0+255),w,b
 29544  0023D4  6EE9               	movwf	fsr0l,c
 29545  0023D6  0E00               	movlw	0
 29546  0023D8  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29547  0023DA  6EEA               	movwf	fsr0h,c
 29548  0023DC  50EF               	movf	indf0,w,c
 29549  0023DE  1974               	xorwf	(??_AESEncode+7)& (0+255),w,b
 29550  0023E0  1971               	xorwf	(??_AESEncode+4)& (0+255),w,b
 29551  0023E2  198B               	xorwf	AESEncode@aux& (0+255),w,b
 29552  0023E4  6EDF               	movwf	indf2,c
 29553  0023E6  0E04               	movlw	4
 29554  0023E8  278F               	addwf	AESEncode@i& (0+255),f,b
 29555  0023EA  0E0F               	movlw	15
 29556  0023EC  658F               	cpfsgt	AESEncode@i& (0+255),b
 29557  0023EE  D6F0               	goto	l11772
 29558  0023F0                     l11804:
 29559                           
 29560                           ; BSR set to: 0
 29561                           ;AES.c: 289: }
 29562                           ;AES.c: 290: }
 29563                           ;AES.c: 292: EncKeySchedule(key);
 29564  0023F0  0E75               	movlw	low AESEncode@key
 29565  0023F2  6F64               	movwf	EncKeySchedule@key& (0+255),b
 29566  0023F4  ECE3  F014         	call	_EncKeySchedule	;wreg free
 29567                           
 29568                           ; BSR set to: 0
 29569                           ;AES.c: 294: for(i=0;i<16;i++)
 29570  0023F8  6B8F               	clrf	AESEncode@i& (0+255),b
 29571  0023FA                     l11812:
 29572                           
 29573                           ; BSR set to: 0
 29574                           ;AES.c: 295: {
 29575                           ;AES.c: 296: block[i] ^= key[i];
 29576  0023FA  518F               	movf	AESEncode@i& (0+255),w,b
 29577  0023FC  0F75               	addlw	low AESEncode@key
 29578  0023FE  6ED9               	movwf	fsr2l,c
 29579  002400  6ADA               	clrf	fsr2h,c
 29580  002402  50DF               	movf	indf2,w,c
 29581  002404  6F6D               	movwf	??_AESEncode& (0+255),b
 29582  002406  518F               	movf	AESEncode@i& (0+255),w,b
 29583  002408  256A               	addwf	AESEncode@block& (0+255),w,b
 29584  00240A  6ED9               	movwf	fsr2l,c
 29585  00240C  0E00               	movlw	0
 29586  00240E  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29587  002410  6EDA               	movwf	fsr2h,c
 29588  002412  516D               	movf	??_AESEncode& (0+255),w,b
 29589  002414  1ADF               	xorwf	indf2,f,c
 29590                           
 29591                           ; BSR set to: 0
 29592  002416  2B8F               	incf	AESEncode@i& (0+255),f,b
 29593                           
 29594                           ; BSR set to: 0
 29595  002418  0E0F               	movlw	15
 29596  00241A  658F               	cpfsgt	AESEncode@i& (0+255),b
 29597  00241C  D7EE               	goto	l11812
 29598                           
 29599                           ; BSR set to: 0
 29600                           ;AES.c: 297: }
 29601                           ;AES.c: 299: _roundCounter--;
 29602  00241E  0647               	decf	__roundCounter,f,c
 29603                           
 29604                           ; BSR set to: 0
 29605                           ;AES.c: 300: }
 29606                           ;AES.c: 301: while(_roundCounter !=0);
 29607  002420  5047               	movf	__roundCounter,w,c
 29608  002422  E001 D6AE          	bnz	l2475
 29609                           
 29610                           ; BSR set to: 0
 29611  002426  0012               	return		;funcret
 29612  002428                     __end_of_AESEncode:
 29613                           	opt stack 0
 29614                           tosu	equ	0xFFF
 29615                           tosh	equ	0xFFE
 29616                           tosl	equ	0xFFD
 29617                           pclath	equ	0xFFA
 29618                           tblptru	equ	0xFF8
 29619                           tblptrh	equ	0xFF7
 29620                           tblptrl	equ	0xFF6
 29621                           tablat	equ	0xFF5
 29622                           prodh	equ	0xFF4
 29623                           prodl	equ	0xFF3
 29624                           intcon	equ	0xFF2
 29625                           intcon2	equ	0xFF1
 29626                           intcon3	equ	0xFF0
 29627                           indf0	equ	0xFEF
 29628                           postinc0	equ	0xFEE
 29629                           plusw0	equ	0xFEB
 29630                           fsr0h	equ	0xFEA
 29631                           fsr0l	equ	0xFE9
 29632                           wreg	equ	0xFE8
 29633                           postinc1	equ	0xFE6
 29634                           postdec1	equ	0xFE5
 29635                           plusw1	equ	0xFE3
 29636                           fsr1h	equ	0xFE2
 29637                           fsr1l	equ	0xFE1
 29638                           indf2	equ	0xFDF
 29639                           postinc2	equ	0xFDE
 29640                           postdec2	equ	0xFDD
 29641                           plusw2	equ	0xFDB
 29642                           fsr2h	equ	0xFDA
 29643                           fsr2l	equ	0xFD9
 29644                           status	equ	0xFD8
 29645                           
 29646 ;; *************** function _EncodeShiftRow *****************
 29647 ;; Defined at:
 29648 ;;		line 205 in file "mcc_generated_files/LoRaWAN/AES.c"
 29649 ;; Parameters:    Size  Location     Type
 29650 ;;  stateTable      2    4[BANK0 ] PTR unsigned char 
 29651 ;;		 -> aesBuffer(16), LORAWAN_RxDone@hdr(2), GenerateSubkey@l(16), AESCmac@y(16), 
 29652 ;;		 -> AESCmac@x(16), loRa.activationParameters(105), radioBuffer(271), loRa(245), 
 29653 ;; Auto vars:     Size  Location     Type
 29654 ;;  temp            1    6[BANK0 ] unsigned char 
 29655 ;; Return value:  Size  Location     Type
 29656 ;;                  1    wreg      void 
 29657 ;; Registers used:
 29658 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
 29659 ;; Tracked objects:
 29660 ;;		On entry : F/0
 29661 ;;		On exit  : F/0
 29662 ;;		Unchanged: 0/0
 29663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 29664 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29665 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29667 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29668 ;;Total ram usage:        3 bytes
 29669 ;; Hardware stack levels used:    1
 29670 ;; Hardware stack levels required when called:    7
 29671 ;; This function calls:
 29672 ;;		Nothing
 29673 ;; This function is called by:
 29674 ;;		_AESEncode
 29675 ;; This function uses a non-reentrant model
 29676 ;;
 29677                           
 29678                           	psect	text150
 29679  003D6A                     __ptext150:
 29680                           	opt stack 0
 29681  003D6A                     _EncodeShiftRow:
 29682                           	opt stack 17
 29683                           
 29684                           ; BSR set to: 0
 29685                           ;AES.c: 207: unsigned char temp;
 29686                           ;AES.c: 212: temp=stateTable[1];
 29687                           
 29688                           ; BSR set to: 0
 29689                           ;incstack = 0
 29690  003D6A  EE20 F001          	lfsr	2,1
 29691  003D6E  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29692  003D70  26D9               	addwf	fsr2l,f,c
 29693  003D72  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29694  003D74  22DA               	addwfc	fsr2h,f,c
 29695  003D76  50DF               	movf	indf2,w,c
 29696  003D78  6F66               	movwf	EncodeShiftRow@temp& (0+255),b
 29697                           
 29698                           ; BSR set to: 0
 29699                           ;AES.c: 213: stateTable[1]=stateTable[5];
 29700  003D7A  EE20 F005          	lfsr	2,5
 29701  003D7E  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29702  003D80  26D9               	addwf	fsr2l,f,c
 29703  003D82  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29704  003D84  22DA               	addwfc	fsr2h,f,c
 29705  003D86  EE00 F001          	lfsr	0,1
 29706  003D8A  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29707  003D8C  26E9               	addwf	fsr0l,f,c
 29708  003D8E  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29709  003D90  22EA               	addwfc	fsr0h,f,c
 29710  003D92  CFDF FFEF          	movff	indf2,indf0
 29711                           
 29712                           ; BSR set to: 0
 29713                           ;AES.c: 214: stateTable[5]=stateTable[9];
 29714  003D96  EE20 F009          	lfsr	2,9
 29715  003D9A  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29716  003D9C  26D9               	addwf	fsr2l,f,c
 29717  003D9E  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29718  003DA0  22DA               	addwfc	fsr2h,f,c
 29719  003DA2  EE00 F005          	lfsr	0,5
 29720  003DA6  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29721  003DA8  26E9               	addwf	fsr0l,f,c
 29722  003DAA  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29723  003DAC  22EA               	addwfc	fsr0h,f,c
 29724  003DAE  CFDF FFEF          	movff	indf2,indf0
 29725                           
 29726                           ; BSR set to: 0
 29727                           ;AES.c: 215: stateTable[9]=stateTable[13];
 29728  003DB2  EE20 F00D          	lfsr	2,13
 29729  003DB6  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29730  003DB8  26D9               	addwf	fsr2l,f,c
 29731  003DBA  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29732  003DBC  22DA               	addwfc	fsr2h,f,c
 29733  003DBE  EE00 F009          	lfsr	0,9
 29734  003DC2  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29735  003DC4  26E9               	addwf	fsr0l,f,c
 29736  003DC6  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29737  003DC8  22EA               	addwfc	fsr0h,f,c
 29738  003DCA  CFDF FFEF          	movff	indf2,indf0
 29739                           
 29740                           ; BSR set to: 0
 29741                           ;AES.c: 216: stateTable[13]=temp;
 29742  003DCE  EE20 F00D          	lfsr	2,13
 29743  003DD2  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29744  003DD4  26D9               	addwf	fsr2l,f,c
 29745  003DD6  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29746  003DD8  22DA               	addwfc	fsr2h,f,c
 29747  003DDA  C066  FFDF         	movff	EncodeShiftRow@temp,indf2
 29748                           
 29749                           ; BSR set to: 0
 29750                           ;AES.c: 219: temp=stateTable[2];
 29751  003DDE  EE20 F002          	lfsr	2,2
 29752  003DE2  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29753  003DE4  26D9               	addwf	fsr2l,f,c
 29754  003DE6  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29755  003DE8  22DA               	addwfc	fsr2h,f,c
 29756  003DEA  50DF               	movf	indf2,w,c
 29757  003DEC  6F66               	movwf	EncodeShiftRow@temp& (0+255),b
 29758                           
 29759                           ; BSR set to: 0
 29760                           ;AES.c: 220: stateTable[2]=stateTable[10];
 29761  003DEE  EE20 F00A          	lfsr	2,10
 29762  003DF2  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29763  003DF4  26D9               	addwf	fsr2l,f,c
 29764  003DF6  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29765  003DF8  22DA               	addwfc	fsr2h,f,c
 29766  003DFA  EE00 F002          	lfsr	0,2
 29767  003DFE  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29768  003E00  26E9               	addwf	fsr0l,f,c
 29769  003E02  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29770  003E04  22EA               	addwfc	fsr0h,f,c
 29771  003E06  CFDF FFEF          	movff	indf2,indf0
 29772                           
 29773                           ;AES.c: 221: stateTable[10]=temp;
 29774  003E0A  EE20 F00A          	lfsr	2,10
 29775  003E0E  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29776  003E10  26D9               	addwf	fsr2l,f,c
 29777  003E12  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29778  003E14  22DA               	addwfc	fsr2h,f,c
 29779  003E16  C066  FFDF         	movff	EncodeShiftRow@temp,indf2
 29780                           
 29781                           ;AES.c: 222: temp=stateTable[14];
 29782  003E1A  EE20 F00E          	lfsr	2,14
 29783  003E1E  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29784  003E20  26D9               	addwf	fsr2l,f,c
 29785  003E22  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29786  003E24  22DA               	addwfc	fsr2h,f,c
 29787  003E26  50DF               	movf	indf2,w,c
 29788  003E28  6F66               	movwf	EncodeShiftRow@temp& (0+255),b
 29789                           
 29790                           ; BSR set to: 0
 29791                           ;AES.c: 223: stateTable[14]=stateTable[6];
 29792  003E2A  EE20 F006          	lfsr	2,6
 29793  003E2E  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29794  003E30  26D9               	addwf	fsr2l,f,c
 29795  003E32  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29796  003E34  22DA               	addwfc	fsr2h,f,c
 29797  003E36  EE00 F00E          	lfsr	0,14
 29798  003E3A  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29799  003E3C  26E9               	addwf	fsr0l,f,c
 29800  003E3E  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29801  003E40  22EA               	addwfc	fsr0h,f,c
 29802  003E42  CFDF FFEF          	movff	indf2,indf0
 29803                           
 29804                           ; BSR set to: 0
 29805                           ;AES.c: 224: stateTable[6]=temp;
 29806  003E46  EE20 F006          	lfsr	2,6
 29807  003E4A  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29808  003E4C  26D9               	addwf	fsr2l,f,c
 29809  003E4E  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29810  003E50  22DA               	addwfc	fsr2h,f,c
 29811  003E52  C066  FFDF         	movff	EncodeShiftRow@temp,indf2
 29812                           
 29813                           ; BSR set to: 0
 29814                           ;AES.c: 227: temp=stateTable[3];
 29815  003E56  EE20 F003          	lfsr	2,3
 29816  003E5A  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29817  003E5C  26D9               	addwf	fsr2l,f,c
 29818  003E5E  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29819  003E60  22DA               	addwfc	fsr2h,f,c
 29820  003E62  50DF               	movf	indf2,w,c
 29821  003E64  6F66               	movwf	EncodeShiftRow@temp& (0+255),b
 29822                           
 29823                           ; BSR set to: 0
 29824                           ;AES.c: 228: stateTable[3]=stateTable[15];
 29825  003E66  EE20 F00F          	lfsr	2,15
 29826  003E6A  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29827  003E6C  26D9               	addwf	fsr2l,f,c
 29828  003E6E  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29829  003E70  22DA               	addwfc	fsr2h,f,c
 29830  003E72  EE00 F003          	lfsr	0,3
 29831  003E76  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29832  003E78  26E9               	addwf	fsr0l,f,c
 29833  003E7A  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29834  003E7C  22EA               	addwfc	fsr0h,f,c
 29835  003E7E  CFDF FFEF          	movff	indf2,indf0
 29836                           
 29837                           ; BSR set to: 0
 29838                           ;AES.c: 229: stateTable[15]=stateTable[11];
 29839  003E82  EE20 F00B          	lfsr	2,11
 29840  003E86  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29841  003E88  26D9               	addwf	fsr2l,f,c
 29842  003E8A  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29843  003E8C  22DA               	addwfc	fsr2h,f,c
 29844  003E8E  EE00 F00F          	lfsr	0,15
 29845  003E92  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29846  003E94  26E9               	addwf	fsr0l,f,c
 29847  003E96  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29848  003E98  22EA               	addwfc	fsr0h,f,c
 29849  003E9A  CFDF FFEF          	movff	indf2,indf0
 29850                           
 29851                           ; BSR set to: 0
 29852                           ;AES.c: 230: stateTable[11]=stateTable[7];
 29853  003E9E  EE20 F007          	lfsr	2,7
 29854  003EA2  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29855  003EA4  26D9               	addwf	fsr2l,f,c
 29856  003EA6  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29857  003EA8  22DA               	addwfc	fsr2h,f,c
 29858  003EAA  EE00 F00B          	lfsr	0,11
 29859  003EAE  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29860  003EB0  26E9               	addwf	fsr0l,f,c
 29861  003EB2  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29862  003EB4  22EA               	addwfc	fsr0h,f,c
 29863  003EB6  CFDF FFEF          	movff	indf2,indf0
 29864                           
 29865                           ;AES.c: 231: stateTable[7]=temp;
 29866  003EBA  EE20 F007          	lfsr	2,7
 29867  003EBE  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29868  003EC0  26D9               	addwf	fsr2l,f,c
 29869  003EC2  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29870  003EC4  22DA               	addwfc	fsr2h,f,c
 29871  003EC6  C066  FFDF         	movff	EncodeShiftRow@temp,indf2
 29872                           
 29873                           ; BSR set to: 0
 29874  003ECA  0012               	return		;funcret
 29875  003ECC                     __end_of_EncodeShiftRow:
 29876                           	opt stack 0
 29877                           tosu	equ	0xFFF
 29878                           tosh	equ	0xFFE
 29879                           tosl	equ	0xFFD
 29880                           pclath	equ	0xFFA
 29881                           tblptru	equ	0xFF8
 29882                           tblptrh	equ	0xFF7
 29883                           tblptrl	equ	0xFF6
 29884                           tablat	equ	0xFF5
 29885                           prodh	equ	0xFF4
 29886                           prodl	equ	0xFF3
 29887                           intcon	equ	0xFF2
 29888                           intcon2	equ	0xFF1
 29889                           intcon3	equ	0xFF0
 29890                           indf0	equ	0xFEF
 29891                           postinc0	equ	0xFEE
 29892                           plusw0	equ	0xFEB
 29893                           fsr0h	equ	0xFEA
 29894                           fsr0l	equ	0xFE9
 29895                           wreg	equ	0xFE8
 29896                           postinc1	equ	0xFE6
 29897                           postdec1	equ	0xFE5
 29898                           plusw1	equ	0xFE3
 29899                           fsr1h	equ	0xFE2
 29900                           fsr1l	equ	0xFE1
 29901                           indf2	equ	0xFDF
 29902                           postinc2	equ	0xFDE
 29903                           postdec2	equ	0xFDD
 29904                           plusw2	equ	0xFDB
 29905                           fsr2h	equ	0xFDA
 29906                           fsr2l	equ	0xFD9
 29907                           status	equ	0xFD8
 29908                           
 29909 ;; *************** function _EncKeySchedule *****************
 29910 ;; Defined at:
 29911 ;;		line 160 in file "mcc_generated_files/LoRaWAN/AES.c"
 29912 ;; Parameters:    Size  Location     Type
 29913 ;;  key             1    4[BANK0 ] PTR unsigned char 
 29914 ;;		 -> AESEncode@key(16), 
 29915 ;; Auto vars:     Size  Location     Type
 29916 ;;		None
 29917 ;; Return value:  Size  Location     Type
 29918 ;;                  1    wreg      void 
 29919 ;; Registers used:
 29920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 29921 ;; Tracked objects:
 29922 ;;		On entry : F/0
 29923 ;;		On exit  : F/0
 29924 ;;		Unchanged: 0/0
 29925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 29926 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29927 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29928 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29929 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29930 ;;Total ram usage:        6 bytes
 29931 ;; Hardware stack levels used:    1
 29932 ;; Hardware stack levels required when called:    7
 29933 ;; This function calls:
 29934 ;;		Nothing
 29935 ;; This function is called by:
 29936 ;;		_AESEncode
 29937 ;; This function uses a non-reentrant model
 29938 ;;
 29939                           
 29940                           	psect	text151
 29941  0029C6                     __ptext151:
 29942                           	opt stack 0
 29943  0029C6                     _EncKeySchedule:
 29944                           	opt stack 17
 29945                           
 29946                           ; BSR set to: 0
 29947                           ;AES.c: 163: key[0]^=STable[key[13]];
 29948                           
 29949                           ; BSR set to: 0
 29950                           ;incstack = 0
 29951  0029C6  5164               	movf	EncKeySchedule@key& (0+255),w,b
 29952  0029C8  6ED9               	movwf	fsr2l,c
 29953  0029CA  6ADA               	clrf	fsr2h,c
 29954  0029CC  0E0D               	movlw	13
 29955  0029CE  26D9               	addwf	fsr2l,f,c
 29956  0029D0  50DF               	movf	indf2,w,c
 29957  0029D2  6F65               	movwf	??_EncKeySchedule& (0+255),b
 29958  0029D4  6B66               	clrf	(??_EncKeySchedule+1)& (0+255),b
 29959  0029D6  0E6D               	movlw	low _STable
 29960  0029D8  2565               	addwf	??_EncKeySchedule& (0+255),w,b
 29961  0029DA  6EF6               	movwf	tblptrl,c
 29962  0029DC  0E7E               	movlw	high _STable
 29963  0029DE  2166               	addwfc	(??_EncKeySchedule+1)& (0+255),w,b
 29964  0029E0  6EF7               	movwf	tblptrh,c
 29965  0029E2                     	if	0	;There are less than 3 active tblptr bytes
 29966  0029E2                     	endif
 29967  0029E2  0008               	tblrd		*
 29968  0029E4  CFF5 F067          	movff	tablat,??_EncKeySchedule+2
 29969  0029E8  5164               	movf	EncKeySchedule@key& (0+255),w,b
 29970  0029EA  6ED9               	movwf	fsr2l,c
 29971  0029EC  6ADA               	clrf	fsr2h,c
 29972  0029EE  5167               	movf	(??_EncKeySchedule+2)& (0+255),w,b
 29973  0029F0  1ADF               	xorwf	indf2,f,c
 29974                           
 29975                           ;AES.c: 164: key[1]^=STable[key[14]];
 29976  0029F2  5164               	movf	EncKeySchedule@key& (0+255),w,b
 29977  0029F4  6ED9               	movwf	fsr2l,c
 29978  0029F6  6ADA               	clrf	fsr2h,c
 29979  0029F8  0E0E               	movlw	14
 29980  0029FA  26D9               	addwf	fsr2l,f,c
 29981  0029FC  50DF               	movf	indf2,w,c
 29982  0029FE  6F65               	movwf	??_EncKeySchedule& (0+255),b
 29983  002A00  6B66               	clrf	(??_EncKeySchedule+1)& (0+255),b
 29984  002A02  0E6D               	movlw	low _STable
 29985  002A04  2565               	addwf	??_EncKeySchedule& (0+255),w,b
 29986  002A06  6EF6               	movwf	tblptrl,c
 29987  002A08  0E7E               	movlw	high _STable
 29988  002A0A  2166               	addwfc	(??_EncKeySchedule+1)& (0+255),w,b
 29989  002A0C  6EF7               	movwf	tblptrh,c
 29990  002A0E                     	if	0	;There are less than 3 active tblptr bytes
 29991  002A0E                     	endif
 29992  002A0E  0008               	tblrd		*
 29993  002A10  CFF5 F067          	movff	tablat,??_EncKeySchedule+2
 29994  002A14  5164               	movf	EncKeySchedule@key& (0+255),w,b
 29995  002A16  6ED9               	movwf	fsr2l,c
 29996  002A18  6ADA               	clrf	fsr2h,c
 29997  002A1A  2AD9               	incf	fsr2l,f,c
 29998  002A1C  5167               	movf	(??_EncKeySchedule+2)& (0+255),w,b
 29999  002A1E  1ADF               	xorwf	indf2,f,c
 30000                           
 30001                           ;AES.c: 165: key[2]^=STable[key[15]];
 30002  002A20  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30003  002A22  6ED9               	movwf	fsr2l,c
 30004  002A24  6ADA               	clrf	fsr2h,c
 30005  002A26  0E0F               	movlw	15
 30006  002A28  26D9               	addwf	fsr2l,f,c
 30007  002A2A  50DF               	movf	indf2,w,c
 30008  002A2C  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30009  002A2E  6B66               	clrf	(??_EncKeySchedule+1)& (0+255),b
 30010  002A30  0E6D               	movlw	low _STable
 30011  002A32  2565               	addwf	??_EncKeySchedule& (0+255),w,b
 30012  002A34  6EF6               	movwf	tblptrl,c
 30013  002A36  0E7E               	movlw	high _STable
 30014  002A38  2166               	addwfc	(??_EncKeySchedule+1)& (0+255),w,b
 30015  002A3A  6EF7               	movwf	tblptrh,c
 30016  002A3C                     	if	0	;There are less than 3 active tblptr bytes
 30017  002A3C                     	endif
 30018  002A3C  0008               	tblrd		*
 30019  002A3E  CFF5 F067          	movff	tablat,??_EncKeySchedule+2
 30020  002A42  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30021  002A44  6ED9               	movwf	fsr2l,c
 30022  002A46  6ADA               	clrf	fsr2h,c
 30023  002A48  0E02               	movlw	2
 30024  002A4A  26D9               	addwf	fsr2l,f,c
 30025  002A4C  5167               	movf	(??_EncKeySchedule+2)& (0+255),w,b
 30026  002A4E  1ADF               	xorwf	indf2,f,c
 30027                           
 30028                           ;AES.c: 166: key[3]^=STable[key[12]];
 30029  002A50  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30030  002A52  6ED9               	movwf	fsr2l,c
 30031  002A54  6ADA               	clrf	fsr2h,c
 30032  002A56  0E0C               	movlw	12
 30033  002A58  26D9               	addwf	fsr2l,f,c
 30034  002A5A  50DF               	movf	indf2,w,c
 30035  002A5C  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30036  002A5E  6B66               	clrf	(??_EncKeySchedule+1)& (0+255),b
 30037  002A60  0E6D               	movlw	low _STable
 30038  002A62  2565               	addwf	??_EncKeySchedule& (0+255),w,b
 30039  002A64  6EF6               	movwf	tblptrl,c
 30040  002A66  0E7E               	movlw	high _STable
 30041  002A68  2166               	addwfc	(??_EncKeySchedule+1)& (0+255),w,b
 30042  002A6A  6EF7               	movwf	tblptrh,c
 30043  002A6C                     	if	0	;There are less than 3 active tblptr bytes
 30044  002A6C                     	endif
 30045  002A6C  0008               	tblrd		*
 30046  002A6E  CFF5 F067          	movff	tablat,??_EncKeySchedule+2
 30047  002A72  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30048  002A74  6ED9               	movwf	fsr2l,c
 30049  002A76  6ADA               	clrf	fsr2h,c
 30050  002A78  0E03               	movlw	3
 30051  002A7A  26D9               	addwf	fsr2l,f,c
 30052  002A7C  5167               	movf	(??_EncKeySchedule+2)& (0+255),w,b
 30053  002A7E  1ADF               	xorwf	indf2,f,c
 30054                           
 30055                           ; BSR set to: 0
 30056                           ;AES.c: 168: key[0]^=_rcon;
 30057  002A80  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30058  002A82  6ED9               	movwf	fsr2l,c
 30059  002A84  6ADA               	clrf	fsr2h,c
 30060  002A86  5046               	movf	__rcon,w,c
 30061  002A88  1ADF               	xorwf	indf2,f,c
 30062                           
 30063                           ; BSR set to: 0
 30064                           ;AES.c: 169: _rcon = (((_rcon)<0x80)?(_rcon)<<1:(((_rcon)<<1)^0x1b) );
 30065  002A8A  0E7F               	movlw	127
 30066  002A8C  6446               	cpfsgt	__rcon,c
 30067  002A8E  D00C               	goto	l11594
 30068                           
 30069                           ; BSR set to: 0
 30070  002A90  0E1B               	movlw	27
 30071  002A92  C046  F065         	movff	__rcon,??_EncKeySchedule
 30072  002A96  6B66               	clrf	(??_EncKeySchedule+1)& (0+255),b
 30073  002A98  90D8               	bcf	status,0,c
 30074  002A9A  3765               	rlcf	??_EncKeySchedule& (0+255),f,b
 30075  002A9C  3766               	rlcf	(??_EncKeySchedule+1)& (0+255),f,b
 30076  002A9E  1965               	xorwf	??_EncKeySchedule& (0+255),w,b
 30077  002AA0  6F68               	movwf	_EncKeySchedule$3584& (0+255),b
 30078  002AA2  5166               	movf	(??_EncKeySchedule+1)& (0+255),w,b
 30079  002AA4  6F69               	movwf	(_EncKeySchedule$3584+1)& (0+255),b
 30080  002AA6  D005               	goto	l11596
 30081  002AA8                     l11594:
 30082                           
 30083                           ; BSR set to: 0
 30084  002AA8  90D8               	bcf	status,0,c
 30085  002AAA  3446               	rlcf	__rcon,w,c
 30086  002AAC  6F68               	movwf	_EncKeySchedule$3584& (0+255),b
 30087  002AAE  6B69               	clrf	(_EncKeySchedule$3584+1)& (0+255),b
 30088  002AB0  3769               	rlcf	(_EncKeySchedule$3584+1)& (0+255),f,b
 30089  002AB2                     l11596:
 30090                           
 30091                           ; BSR set to: 0
 30092  002AB2  C068  F046         	movff	_EncKeySchedule$3584,__rcon
 30093                           
 30094                           ; BSR set to: 0
 30095                           ;AES.c: 172: key[4]^=key[0];
 30096  002AB6  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30097  002AB8  6ED9               	movwf	fsr2l,c
 30098  002ABA  6ADA               	clrf	fsr2h,c
 30099  002ABC  50DF               	movf	indf2,w,c
 30100  002ABE  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30101  002AC0  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30102  002AC2  6ED9               	movwf	fsr2l,c
 30103  002AC4  6ADA               	clrf	fsr2h,c
 30104  002AC6  0E04               	movlw	4
 30105  002AC8  26D9               	addwf	fsr2l,f,c
 30106  002ACA  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30107  002ACC  1ADF               	xorwf	indf2,f,c
 30108                           
 30109                           ; BSR set to: 0
 30110                           ;AES.c: 173: key[5]^=key[1];
 30111  002ACE  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30112  002AD0  6ED9               	movwf	fsr2l,c
 30113  002AD2  6ADA               	clrf	fsr2h,c
 30114  002AD4  2AD9               	incf	fsr2l,f,c
 30115  002AD6  50DF               	movf	indf2,w,c
 30116  002AD8  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30117  002ADA  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30118  002ADC  6ED9               	movwf	fsr2l,c
 30119  002ADE  6ADA               	clrf	fsr2h,c
 30120  002AE0  0E05               	movlw	5
 30121  002AE2  26D9               	addwf	fsr2l,f,c
 30122  002AE4  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30123  002AE6  1ADF               	xorwf	indf2,f,c
 30124                           
 30125                           ; BSR set to: 0
 30126                           ;AES.c: 174: key[6]^=key[2];
 30127  002AE8  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30128  002AEA  6ED9               	movwf	fsr2l,c
 30129  002AEC  6ADA               	clrf	fsr2h,c
 30130  002AEE  0E02               	movlw	2
 30131  002AF0  26D9               	addwf	fsr2l,f,c
 30132  002AF2  50DF               	movf	indf2,w,c
 30133  002AF4  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30134  002AF6  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30135  002AF8  6ED9               	movwf	fsr2l,c
 30136  002AFA  6ADA               	clrf	fsr2h,c
 30137  002AFC  0E06               	movlw	6
 30138  002AFE  26D9               	addwf	fsr2l,f,c
 30139  002B00  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30140  002B02  1ADF               	xorwf	indf2,f,c
 30141                           
 30142                           ; BSR set to: 0
 30143                           ;AES.c: 175: key[7]^=key[3];
 30144  002B04  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30145  002B06  6ED9               	movwf	fsr2l,c
 30146  002B08  6ADA               	clrf	fsr2h,c
 30147  002B0A  0E03               	movlw	3
 30148  002B0C  26D9               	addwf	fsr2l,f,c
 30149  002B0E  50DF               	movf	indf2,w,c
 30150  002B10  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30151  002B12  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30152  002B14  6ED9               	movwf	fsr2l,c
 30153  002B16  6ADA               	clrf	fsr2h,c
 30154  002B18  0E07               	movlw	7
 30155  002B1A  26D9               	addwf	fsr2l,f,c
 30156  002B1C  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30157  002B1E  1ADF               	xorwf	indf2,f,c
 30158                           
 30159                           ; BSR set to: 0
 30160                           ;AES.c: 178: key[8]^=key[4];
 30161  002B20  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30162  002B22  6ED9               	movwf	fsr2l,c
 30163  002B24  6ADA               	clrf	fsr2h,c
 30164  002B26  0E04               	movlw	4
 30165  002B28  26D9               	addwf	fsr2l,f,c
 30166  002B2A  50DF               	movf	indf2,w,c
 30167  002B2C  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30168  002B2E  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30169  002B30  6ED9               	movwf	fsr2l,c
 30170  002B32  6ADA               	clrf	fsr2h,c
 30171  002B34  0E08               	movlw	8
 30172  002B36  26D9               	addwf	fsr2l,f,c
 30173  002B38  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30174  002B3A  1ADF               	xorwf	indf2,f,c
 30175                           
 30176                           ; BSR set to: 0
 30177                           ;AES.c: 179: key[9]^=key[5];
 30178  002B3C  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30179  002B3E  6ED9               	movwf	fsr2l,c
 30180  002B40  6ADA               	clrf	fsr2h,c
 30181  002B42  0E05               	movlw	5
 30182  002B44  26D9               	addwf	fsr2l,f,c
 30183  002B46  50DF               	movf	indf2,w,c
 30184  002B48  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30185  002B4A  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30186  002B4C  6ED9               	movwf	fsr2l,c
 30187  002B4E  6ADA               	clrf	fsr2h,c
 30188  002B50  0E09               	movlw	9
 30189  002B52  26D9               	addwf	fsr2l,f,c
 30190  002B54  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30191  002B56  1ADF               	xorwf	indf2,f,c
 30192                           
 30193                           ; BSR set to: 0
 30194                           ;AES.c: 180: key[10]^=key[6];
 30195  002B58  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30196  002B5A  6ED9               	movwf	fsr2l,c
 30197  002B5C  6ADA               	clrf	fsr2h,c
 30198  002B5E  0E06               	movlw	6
 30199  002B60  26D9               	addwf	fsr2l,f,c
 30200  002B62  50DF               	movf	indf2,w,c
 30201  002B64  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30202  002B66  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30203  002B68  6ED9               	movwf	fsr2l,c
 30204  002B6A  6ADA               	clrf	fsr2h,c
 30205  002B6C  0E0A               	movlw	10
 30206  002B6E  26D9               	addwf	fsr2l,f,c
 30207  002B70  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30208  002B72  1ADF               	xorwf	indf2,f,c
 30209                           
 30210                           ; BSR set to: 0
 30211                           ;AES.c: 181: key[11]^=key[7];
 30212  002B74  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30213  002B76  6ED9               	movwf	fsr2l,c
 30214  002B78  6ADA               	clrf	fsr2h,c
 30215  002B7A  0E07               	movlw	7
 30216  002B7C  26D9               	addwf	fsr2l,f,c
 30217  002B7E  50DF               	movf	indf2,w,c
 30218  002B80  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30219  002B82  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30220  002B84  6ED9               	movwf	fsr2l,c
 30221  002B86  6ADA               	clrf	fsr2h,c
 30222  002B88  0E0B               	movlw	11
 30223  002B8A  26D9               	addwf	fsr2l,f,c
 30224  002B8C  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30225  002B8E  1ADF               	xorwf	indf2,f,c
 30226                           
 30227                           ; BSR set to: 0
 30228                           ;AES.c: 184: key[12]^=key[8];
 30229  002B90  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30230  002B92  6ED9               	movwf	fsr2l,c
 30231  002B94  6ADA               	clrf	fsr2h,c
 30232  002B96  0E08               	movlw	8
 30233  002B98  26D9               	addwf	fsr2l,f,c
 30234  002B9A  50DF               	movf	indf2,w,c
 30235  002B9C  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30236  002B9E  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30237  002BA0  6ED9               	movwf	fsr2l,c
 30238  002BA2  6ADA               	clrf	fsr2h,c
 30239  002BA4  0E0C               	movlw	12
 30240  002BA6  26D9               	addwf	fsr2l,f,c
 30241  002BA8  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30242  002BAA  1ADF               	xorwf	indf2,f,c
 30243                           
 30244                           ; BSR set to: 0
 30245                           ;AES.c: 185: key[13]^=key[9];
 30246  002BAC  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30247  002BAE  6ED9               	movwf	fsr2l,c
 30248  002BB0  6ADA               	clrf	fsr2h,c
 30249  002BB2  0E09               	movlw	9
 30250  002BB4  26D9               	addwf	fsr2l,f,c
 30251  002BB6  50DF               	movf	indf2,w,c
 30252  002BB8  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30253  002BBA  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30254  002BBC  6ED9               	movwf	fsr2l,c
 30255  002BBE  6ADA               	clrf	fsr2h,c
 30256  002BC0  0E0D               	movlw	13
 30257  002BC2  26D9               	addwf	fsr2l,f,c
 30258  002BC4  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30259  002BC6  1ADF               	xorwf	indf2,f,c
 30260                           
 30261                           ; BSR set to: 0
 30262                           ;AES.c: 186: key[14]^=key[10];
 30263  002BC8  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30264  002BCA  6ED9               	movwf	fsr2l,c
 30265  002BCC  6ADA               	clrf	fsr2h,c
 30266  002BCE  0E0A               	movlw	10
 30267  002BD0  26D9               	addwf	fsr2l,f,c
 30268  002BD2  50DF               	movf	indf2,w,c
 30269  002BD4  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30270  002BD6  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30271  002BD8  6ED9               	movwf	fsr2l,c
 30272  002BDA  6ADA               	clrf	fsr2h,c
 30273  002BDC  0E0E               	movlw	14
 30274  002BDE  26D9               	addwf	fsr2l,f,c
 30275  002BE0  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30276  002BE2  1ADF               	xorwf	indf2,f,c
 30277                           
 30278                           ; BSR set to: 0
 30279                           ;AES.c: 187: key[15]^=key[11];
 30280  002BE4  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30281  002BE6  6ED9               	movwf	fsr2l,c
 30282  002BE8  6ADA               	clrf	fsr2h,c
 30283  002BEA  0E0B               	movlw	11
 30284  002BEC  26D9               	addwf	fsr2l,f,c
 30285  002BEE  50DF               	movf	indf2,w,c
 30286  002BF0  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30287  002BF2  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30288  002BF4  6ED9               	movwf	fsr2l,c
 30289  002BF6  6ADA               	clrf	fsr2h,c
 30290  002BF8  0E0F               	movlw	15
 30291  002BFA  26D9               	addwf	fsr2l,f,c
 30292  002BFC  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30293  002BFE  1ADF               	xorwf	indf2,f,c
 30294                           
 30295                           ; BSR set to: 0
 30296  002C00  0012               	return		;funcret
 30297  002C02                     __end_of_EncKeySchedule:
 30298                           	opt stack 0
 30299                           tosu	equ	0xFFF
 30300                           tosh	equ	0xFFE
 30301                           tosl	equ	0xFFD
 30302                           pclath	equ	0xFFA
 30303                           tblptru	equ	0xFF8
 30304                           tblptrh	equ	0xFF7
 30305                           tblptrl	equ	0xFF6
 30306                           tablat	equ	0xFF5
 30307                           prodh	equ	0xFF4
 30308                           prodl	equ	0xFF3
 30309                           intcon	equ	0xFF2
 30310                           intcon2	equ	0xFF1
 30311                           intcon3	equ	0xFF0
 30312                           indf0	equ	0xFEF
 30313                           postinc0	equ	0xFEE
 30314                           plusw0	equ	0xFEB
 30315                           fsr0h	equ	0xFEA
 30316                           fsr0l	equ	0xFE9
 30317                           wreg	equ	0xFE8
 30318                           postinc1	equ	0xFE6
 30319                           postdec1	equ	0xFE5
 30320                           plusw1	equ	0xFE3
 30321                           fsr1h	equ	0xFE2
 30322                           fsr1l	equ	0xFE1
 30323                           indf2	equ	0xFDF
 30324                           postinc2	equ	0xFDE
 30325                           postdec2	equ	0xFDD
 30326                           plusw2	equ	0xFDB
 30327                           fsr2h	equ	0xFDA
 30328                           fsr2l	equ	0xFD9
 30329                           status	equ	0xFD8
 30330                           
 30331 ;; *************** function _LORAWAN_Init *****************
 30332 ;; Defined at:
 30333 ;;		line 123 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 30334 ;; Parameters:    Size  Location     Type
 30335 ;;  RxPayload       2   68[BANK0 ] PTR FTN(PTR unsigned cha
 30336 ;;		 -> RxDataDone(1), 
 30337 ;;  RxJoinRespon    2   70[BANK0 ] PTR FTN(unsigned char ,)
 30338 ;;		 -> RxJoinResponse(1), 
 30339 ;; Auto vars:     Size  Location     Type
 30340 ;;		None
 30341 ;; Return value:  Size  Location     Type
 30342 ;;                  1    wreg      void 
 30343 ;; Registers used:
 30344 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30345 ;; Tracked objects:
 30346 ;;		On entry : F/0
 30347 ;;		On exit  : D/0
 30348 ;;		Unchanged: 0/0
 30349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 30350 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30353 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30354 ;;Total ram usage:        4 bytes
 30355 ;; Hardware stack levels used:    1
 30356 ;; Hardware stack levels required when called:   13
 30357 ;; This function calls:
 30358 ;;		_CreateAllSoftwareTimers
 30359 ;;		_LORAWAN_Reset
 30360 ;;		_RADIO_Init
 30361 ;;		_RADIO_ReadRandom
 30362 ;;		_SetCallbackSoftwareTimers
 30363 ;;		_StopAllSoftwareTimers
 30364 ;;		_srand
 30365 ;; This function is called by:
 30366 ;;		_main
 30367 ;; This function uses a non-reentrant model
 30368 ;;
 30369                           
 30370                           	psect	text152
 30371  006682                     __ptext152:
 30372                           	opt stack 0
 30373  006682                     _LORAWAN_Init:
 30374                           	opt stack 17
 30375                           
 30376                           ; BSR set to: 0
 30377                           ;lorawan_eu.c: 126: if (loRa.macInitialized == 0)
 30378                           
 30379                           ; BSR set to: 0
 30380                           ;incstack = 0
 30381  006682  0102               	movlb	2	; () banked
 30382  006684  51F0               	movf	(_loRa+240)& (0+255),w,b
 30383  006686  E108               	bnz	l15454
 30384                           
 30385                           ; BSR set to: 2
 30386                           ;lorawan_eu.c: 127: {
 30387                           ;lorawan_eu.c: 128: CreateAllSoftwareTimers ();
 30388  006688  EC47  F034         	call	_CreateAllSoftwareTimers	;wreg free
 30389                           
 30390                           ;lorawan_eu.c: 129: SetCallbackSoftwareTimers ();
 30391  00668C  ECEB  F02A         	call	_SetCallbackSoftwareTimers	;wreg free
 30392                           
 30393                           ; BSR set to: 0
 30394                           ;lorawan_eu.c: 130: loRa.macInitialized = 1;
 30395  006690  0E01               	movlw	1
 30396  006692  0102               	movlb	2	; () banked
 30397  006694  6FF0               	movwf	(_loRa+240)& (0+255),b
 30398                           
 30399                           ;lorawan_eu.c: 131: }
 30400  006696  D002               	goto	l15456
 30401  006698                     l15454:
 30402                           
 30403                           ; BSR set to: 2
 30404                           ;lorawan_eu.c: 132: else
 30405                           ;lorawan_eu.c: 133: {
 30406                           ;lorawan_eu.c: 134: StopAllSoftwareTimers ();
 30407  006698  ECBE  F034         	call	_StopAllSoftwareTimers	;wreg free
 30408  00669C                     l15456:
 30409                           
 30410                           ;lorawan_eu.c: 135: }
 30411                           ;lorawan_eu.c: 137: rxPayload.RxAppData = RxPayload;
 30412  00669C  C0A4  F16E         	movff	LORAWAN_Init@RxPayload,_rxPayload
 30413  0066A0  C0A5  F16F         	movff	LORAWAN_Init@RxPayload+1,_rxPayload+1
 30414                           
 30415                           ;lorawan_eu.c: 138: rxPayload.RxJoinResponse = RxJoinResponse;
 30416  0066A4  C0A6  F170         	movff	LORAWAN_Init@RxJoinResponse,_rxPayload+2
 30417  0066A8  C0A7  F171         	movff	LORAWAN_Init@RxJoinResponse+1,_rxPayload+3
 30418                           
 30419                           ;lorawan_eu.c: 140: RADIO_Init(&radioBuffer[16], (868100000));
 30420  0066AC  0EFF               	movlw	low (_radioBuffer+16)
 30421  0066AE  0100               	movlb	0	; () banked
 30422  0066B0  6F7D               	movwf	RADIO_Init@radioBuffer& (0+255),b
 30423  0066B2  0E05               	movlw	high (_radioBuffer+16)
 30424  0066B4  6F7E               	movwf	(RADIO_Init@radioBuffer+1)& (0+255),b
 30425  0066B6  0EA0               	movlw	160
 30426  0066B8  6F7F               	movwf	RADIO_Init@frequency& (0+255),b
 30427  0066BA  0E27               	movlw	39
 30428  0066BC  6F80               	movwf	(RADIO_Init@frequency+1)& (0+255),b
 30429  0066BE  0EBE               	movlw	190
 30430  0066C0  6F81               	movwf	(RADIO_Init@frequency+2)& (0+255),b
 30431  0066C2  0E33               	movlw	51
 30432  0066C4  6F82               	movwf	(RADIO_Init@frequency+3)& (0+255),b
 30433  0066C6  EC5C  F01C         	call	_RADIO_Init	;wreg free
 30434                           
 30435                           ; BSR set to: 1
 30436                           ;lorawan_eu.c: 142: srand (RADIO_ReadRandom ());
 30437  0066CA  EC3C  F02F         	call	_RADIO_ReadRandom	;wreg free
 30438  0066CE  C070  F075         	movff	?_RADIO_ReadRandom,srand@x
 30439  0066D2  C071  F076         	movff	?_RADIO_ReadRandom+1,srand@x+1
 30440  0066D6  EC59  F03B         	call	_srand	;wreg free
 30441                           
 30442                           ;lorawan_eu.c: 144: LORAWAN_Reset (ISM_EU868);
 30443  0066DA  0E00               	movlw	0
 30444  0066DC  EF66  F01F         	goto	_LORAWAN_Reset
 30445  0066E0                     __end_of_LORAWAN_Init:
 30446                           	opt stack 0
 30447                           tosu	equ	0xFFF
 30448                           tosh	equ	0xFFE
 30449                           tosl	equ	0xFFD
 30450                           pclath	equ	0xFFA
 30451                           tblptru	equ	0xFF8
 30452                           tblptrh	equ	0xFF7
 30453                           tblptrl	equ	0xFF6
 30454                           tablat	equ	0xFF5
 30455                           prodh	equ	0xFF4
 30456                           prodl	equ	0xFF3
 30457                           intcon	equ	0xFF2
 30458                           intcon2	equ	0xFF1
 30459                           intcon3	equ	0xFF0
 30460                           indf0	equ	0xFEF
 30461                           postinc0	equ	0xFEE
 30462                           plusw0	equ	0xFEB
 30463                           fsr0h	equ	0xFEA
 30464                           fsr0l	equ	0xFE9
 30465                           wreg	equ	0xFE8
 30466                           postinc1	equ	0xFE6
 30467                           postdec1	equ	0xFE5
 30468                           plusw1	equ	0xFE3
 30469                           fsr1h	equ	0xFE2
 30470                           fsr1l	equ	0xFE1
 30471                           indf2	equ	0xFDF
 30472                           postinc2	equ	0xFDE
 30473                           postdec2	equ	0xFDD
 30474                           plusw2	equ	0xFDB
 30475                           fsr2h	equ	0xFDA
 30476                           fsr2l	equ	0xFD9
 30477                           status	equ	0xFD8
 30478                           
 30479 ;; *************** function _srand *****************
 30480 ;; Defined at:
 30481 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\rand.c"
 30482 ;; Parameters:    Size  Location     Type
 30483 ;;  x               2   21[BANK0 ] unsigned int 
 30484 ;; Auto vars:     Size  Location     Type
 30485 ;;		None
 30486 ;; Return value:  Size  Location     Type
 30487 ;;                  1    wreg      void 
 30488 ;; Registers used:
 30489 ;;		status,2
 30490 ;; Tracked objects:
 30491 ;;		On entry : 0/1
 30492 ;;		On exit  : 0/0
 30493 ;;		Unchanged: 0/0
 30494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 30495 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30498 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30499 ;;Total ram usage:        2 bytes
 30500 ;; Hardware stack levels used:    1
 30501 ;; Hardware stack levels required when called:    7
 30502 ;; This function calls:
 30503 ;;		Nothing
 30504 ;; This function is called by:
 30505 ;;		_LORAWAN_Init
 30506 ;; This function uses a non-reentrant model
 30507 ;;
 30508                           
 30509                           	psect	text153
 30510  0076B2                     __ptext153:
 30511                           	opt stack 0
 30512  0076B2                     _srand:
 30513                           	opt stack 22
 30514                           
 30515                           ;incstack = 0
 30516  0076B2  C075  F056         	movff	srand@x,_randx
 30517  0076B6  C076  F057         	movff	srand@x+1,_randx+1
 30518  0076BA  6A58               	clrf	_randx+2,c
 30519  0076BC  6A59               	clrf	_randx+3,c
 30520  0076BE  0012               	return		;funcret
 30521  0076C0                     __end_of_srand:
 30522                           	opt stack 0
 30523                           tosu	equ	0xFFF
 30524                           tosh	equ	0xFFE
 30525                           tosl	equ	0xFFD
 30526                           pclath	equ	0xFFA
 30527                           tblptru	equ	0xFF8
 30528                           tblptrh	equ	0xFF7
 30529                           tblptrl	equ	0xFF6
 30530                           tablat	equ	0xFF5
 30531                           prodh	equ	0xFF4
 30532                           prodl	equ	0xFF3
 30533                           intcon	equ	0xFF2
 30534                           intcon2	equ	0xFF1
 30535                           intcon3	equ	0xFF0
 30536                           indf0	equ	0xFEF
 30537                           postinc0	equ	0xFEE
 30538                           plusw0	equ	0xFEB
 30539                           fsr0h	equ	0xFEA
 30540                           fsr0l	equ	0xFE9
 30541                           wreg	equ	0xFE8
 30542                           postinc1	equ	0xFE6
 30543                           postdec1	equ	0xFE5
 30544                           plusw1	equ	0xFE3
 30545                           fsr1h	equ	0xFE2
 30546                           fsr1l	equ	0xFE1
 30547                           indf2	equ	0xFDF
 30548                           postinc2	equ	0xFDE
 30549                           postdec2	equ	0xFDD
 30550                           plusw2	equ	0xFDB
 30551                           fsr2h	equ	0xFDA
 30552                           fsr2l	equ	0xFD9
 30553                           status	equ	0xFD8
 30554                           
 30555 ;; *************** function _SetCallbackSoftwareTimers *****************
 30556 ;; Defined at:
 30557 ;;		line 951 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 30558 ;; Parameters:    Size  Location     Type
 30559 ;;		None
 30560 ;; Auto vars:     Size  Location     Type
 30561 ;;		None
 30562 ;; Return value:  Size  Location     Type
 30563 ;;                  1    wreg      void 
 30564 ;; Registers used:
 30565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 30566 ;; Tracked objects:
 30567 ;;		On entry : F/2
 30568 ;;		On exit  : F/0
 30569 ;;		Unchanged: 0/0
 30570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 30571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30575 ;;Total ram usage:        0 bytes
 30576 ;; Hardware stack levels used:    1
 30577 ;; Hardware stack levels required when called:    8
 30578 ;; This function calls:
 30579 ;;		_SwTimerSetCallback
 30580 ;; This function is called by:
 30581 ;;		_LORAWAN_Init
 30582 ;; This function uses a non-reentrant model
 30583 ;;
 30584                           
 30585                           	psect	text154
 30586  0055D6                     __ptext154:
 30587                           	opt stack 0
 30588  0055D6                     _SetCallbackSoftwareTimers:
 30589                           	opt stack 21
 30590                           
 30591                           ; BSR set to: 2
 30592                           ;lorawan_eu.c: 953: SwTimerSetCallback(loRa.joinAccept1TimerId, LORAWAN_ReceiveWindow1Ca
      +                          llback, 0);
 30593                           
 30594                           ;incstack = 0
 30595  0055D6  0E52               	movlw	low _LORAWAN_ReceiveWindow1Callback
 30596  0055D8  0100               	movlb	0	; () banked
 30597  0055DA  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30598  0055DC  0E59               	movlw	high _LORAWAN_ReceiveWindow1Callback
 30599  0055DE  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30600  0055E0  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30601  0055E2  0102               	movlb	2	; () banked
 30602  0055E4  51E2               	movf	(_loRa+226)& (0+255),w,b
 30603  0055E6  EC2E  F038         	call	_SwTimerSetCallback
 30604                           
 30605                           ;lorawan_eu.c: 954: SwTimerSetCallback(loRa.joinAccept2TimerId, LORAWAN_ReceiveWindow2Ca
      +                          llback, 0);
 30606  0055EA  0E94               	movlw	low _LORAWAN_ReceiveWindow2Callback
 30607  0055EC  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30608  0055EE  0E53               	movlw	high _LORAWAN_ReceiveWindow2Callback
 30609  0055F0  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30610  0055F2  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30611  0055F4  0102               	movlb	2	; () banked
 30612  0055F6  51E3               	movf	(_loRa+227)& (0+255),w,b
 30613  0055F8  EC2E  F038         	call	_SwTimerSetCallback
 30614                           
 30615                           ;lorawan_eu.c: 955: SwTimerSetCallback(loRa.linkCheckTimerId, LORAWAN_LinkCheckCallback,
      +                           0);
 30616  0055FC  0E2A               	movlw	low _LORAWAN_LinkCheckCallback
 30617  0055FE  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30618  005600  0E40               	movlw	high _LORAWAN_LinkCheckCallback
 30619  005602  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30620  005604  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30621  005606  0102               	movlb	2	; () banked
 30622  005608  51E7               	movf	(_loRa+231)& (0+255),w,b
 30623  00560A  EC2E  F038         	call	_SwTimerSetCallback
 30624                           
 30625                           ;lorawan_eu.c: 956: SwTimerSetCallback(loRa.receiveWindow1TimerId, LORAWAN_ReceiveWindow
      +                          1Callback, 0);
 30626  00560E  0E52               	movlw	low _LORAWAN_ReceiveWindow1Callback
 30627  005610  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30628  005612  0E59               	movlw	high _LORAWAN_ReceiveWindow1Callback
 30629  005614  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30630  005616  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30631  005618  0102               	movlb	2	; () banked
 30632  00561A  51E4               	movf	(_loRa+228)& (0+255),w,b
 30633  00561C  EC2E  F038         	call	_SwTimerSetCallback
 30634                           
 30635                           ;lorawan_eu.c: 957: SwTimerSetCallback(loRa.receiveWindow2TimerId, LORAWAN_ReceiveWindow
      +                          2Callback, 0);
 30636  005620  0E94               	movlw	low _LORAWAN_ReceiveWindow2Callback
 30637  005622  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30638  005624  0E53               	movlw	high _LORAWAN_ReceiveWindow2Callback
 30639  005626  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30640  005628  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30641  00562A  0102               	movlb	2	; () banked
 30642  00562C  51E5               	movf	(_loRa+229)& (0+255),w,b
 30643  00562E  EC2E  F038         	call	_SwTimerSetCallback
 30644                           
 30645                           ;lorawan_eu.c: 958: SwTimerSetCallback(loRa.ackTimeoutTimerId, AckRetransmissionCallback
      +                          , 0);
 30646  005632  0EB8               	movlw	low _AckRetransmissionCallback
 30647  005634  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30648  005636  0E49               	movlw	high _AckRetransmissionCallback
 30649  005638  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30650  00563A  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30651  00563C  0102               	movlb	2	; () banked
 30652  00563E  51E8               	movf	(_loRa+232)& (0+255),w,b
 30653  005640  EC2E  F038         	call	_SwTimerSetCallback
 30654                           
 30655                           ;lorawan_eu.c: 959: SwTimerSetCallback(loRa.automaticReplyTimerId, AutomaticReplyCallbac
      +                          k, 0);
 30656  005644  0ED4               	movlw	low _AutomaticReplyCallback
 30657  005646  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30658  005648  0E73               	movlw	high _AutomaticReplyCallback
 30659  00564A  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30660  00564C  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30661  00564E  0102               	movlb	2	; () banked
 30662  005650  51E6               	movf	(_loRa+230)& (0+255),w,b
 30663  005652  EC2E  F038         	call	_SwTimerSetCallback
 30664                           
 30665                           ;lorawan_eu.c: 960: SwTimerSetCallback(loRa.unconfirmedRetransmisionTimerId, Unconfirmed
      +                          TransmissionCallback, 0);
 30666  005656  0EC2               	movlw	low _UnconfirmedTransmissionCallback
 30667  005658  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30668  00565A  0E61               	movlw	high _UnconfirmedTransmissionCallback
 30669  00565C  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30670  00565E  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30671  005660  0102               	movlb	2	; () banked
 30672  005662  51EA               	movf	(_loRa+234)& (0+255),w,b
 30673  005664  EC2E  F038         	call	_SwTimerSetCallback
 30674                           
 30675                           ;lorawan_eu.c: 961: SwTimerSetCallback(loRa.abpJoinTimerId, UpdateJoinSuccessState, 0);
 30676  005668  0E52               	movlw	low _UpdateJoinSuccessState
 30677  00566A  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30678  00566C  0E45               	movlw	high _UpdateJoinSuccessState
 30679  00566E  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30680  005670  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30681  005672  0102               	movlb	2	; () banked
 30682  005674  51F3               	movf	(_loRa+243)& (0+255),w,b
 30683  005676  EC2E  F038         	call	_SwTimerSetCallback
 30684                           
 30685                           ;lorawan_eu.c: 962: SwTimerSetCallback (loRa.dutyCycleTimerId, DutyCycleCallback, 0);
 30686  00567A  0E28               	movlw	low _DutyCycleCallback
 30687  00567C  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30688  00567E  0E24               	movlw	high _DutyCycleCallback
 30689  005680  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30690  005682  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30691  005684  0102               	movlb	2	; () banked
 30692  005686  51E9               	movf	(_loRa+233)& (0+255),w,b
 30693  005688  EF2E  F038         	goto	_SwTimerSetCallback
 30694  00568C                     __end_of_SetCallbackSoftwareTimers:
 30695                           	opt stack 0
 30696                           tosu	equ	0xFFF
 30697                           tosh	equ	0xFFE
 30698                           tosl	equ	0xFFD
 30699                           pclath	equ	0xFFA
 30700                           tblptru	equ	0xFF8
 30701                           tblptrh	equ	0xFF7
 30702                           tblptrl	equ	0xFF6
 30703                           tablat	equ	0xFF5
 30704                           prodh	equ	0xFF4
 30705                           prodl	equ	0xFF3
 30706                           intcon	equ	0xFF2
 30707                           intcon2	equ	0xFF1
 30708                           intcon3	equ	0xFF0
 30709                           indf0	equ	0xFEF
 30710                           postinc0	equ	0xFEE
 30711                           plusw0	equ	0xFEB
 30712                           fsr0h	equ	0xFEA
 30713                           fsr0l	equ	0xFE9
 30714                           wreg	equ	0xFE8
 30715                           postinc1	equ	0xFE6
 30716                           postdec1	equ	0xFE5
 30717                           plusw1	equ	0xFE3
 30718                           fsr1h	equ	0xFE2
 30719                           fsr1l	equ	0xFE1
 30720                           indf2	equ	0xFDF
 30721                           postinc2	equ	0xFDE
 30722                           postdec2	equ	0xFDD
 30723                           plusw2	equ	0xFDB
 30724                           fsr2h	equ	0xFDA
 30725                           fsr2l	equ	0xFD9
 30726                           status	equ	0xFD8
 30727                           
 30728 ;; *************** function _RADIO_ReadRandom *****************
 30729 ;; Defined at:
 30730 ;;		line 1367 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 30731 ;; Parameters:    Size  Location     Type
 30732 ;;		None
 30733 ;; Auto vars:     Size  Location     Type
 30734 ;;  retVal          2   18[BANK0 ] unsigned int 
 30735 ;;  i               1   20[BANK0 ] unsigned char 
 30736 ;; Return value:  Size  Location     Type
 30737 ;;                  2   16[BANK0 ] unsigned int 
 30738 ;; Registers used:
 30739 ;;		wreg, status,2, status,0, cstack
 30740 ;; Tracked objects:
 30741 ;;		On entry : F/1
 30742 ;;		On exit  : 0/0
 30743 ;;		Unchanged: 0/0
 30744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 30745 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30746 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30748 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30749 ;;Total ram usage:        5 bytes
 30750 ;; Hardware stack levels used:    1
 30751 ;; Hardware stack levels required when called:   11
 30752 ;; This function calls:
 30753 ;;		_RADIO_RegisterRead
 30754 ;;		_RADIO_RegisterWrite
 30755 ;;		_RADIO_WriteMode
 30756 ;;		_SystemBlockingWaitMs
 30757 ;; This function is called by:
 30758 ;;		_LORAWAN_Init
 30759 ;; This function uses a non-reentrant model
 30760 ;;
 30761                           
 30762                           	psect	text155
 30763  005E78                     __ptext155:
 30764                           	opt stack 0
 30765  005E78                     _RADIO_ReadRandom:
 30766                           	opt stack 18
 30767                           
 30768                           ; BSR set to: 1
 30769                           ;radio_driver_SX1276.c: 1369: uint8_t i;
 30770                           ;radio_driver_SX1276.c: 1370: uint16_t retVal;
 30771                           ;radio_driver_SX1276.c: 1371: retVal = 0;
 30772                           
 30773                           ; BSR set to: 0
 30774                           ;incstack = 0
 30775  005E78  0100               	movlb	0	; () banked
 30776  005E7A  6B72               	clrf	RADIO_ReadRandom@retVal& (0+255),b
 30777  005E7C  6B73               	clrf	(RADIO_ReadRandom@retVal+1)& (0+255),b
 30778                           
 30779                           ; BSR set to: 0
 30780                           ;radio_driver_SX1276.c: 1373: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 30781  005E7E  0E01               	movlw	1
 30782  005E80  6F69               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 30783  005E82  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 30784  005E84  0E00               	movlw	0
 30785  005E86  EC8F  F028         	call	_RADIO_WriteMode
 30786                           
 30787                           ;radio_driver_SX1276.c: 1374: RADIO_RegisterWrite(0x11, 0xFF);
 30788  005E8A  0100               	movlb	0	; () banked
 30789  005E8C  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
 30790  005E8E  0E11               	movlw	17
 30791  005E90  EC17  F03A         	call	_RADIO_RegisterWrite
 30792                           
 30793                           ;radio_driver_SX1276.c: 1375: RADIO_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
 30794  005E94  0E01               	movlw	1
 30795  005E96  0100               	movlb	0	; () banked
 30796  005E98  6F69               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 30797  005E9A  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 30798  005E9C  0E05               	movlw	5
 30799  005E9E  EC8F  F028         	call	_RADIO_WriteMode
 30800                           
 30801                           ;radio_driver_SX1276.c: 1376: for (i = 0; i < 16; i++)
 30802  005EA2  0100               	movlb	0	; () banked
 30803  005EA4  6B74               	clrf	RADIO_ReadRandom@i& (0+255),b
 30804  005EA6                     l15224:
 30805                           
 30806                           ; BSR set to: 0
 30807                           ;radio_driver_SX1276.c: 1377: {
 30808                           ;radio_driver_SX1276.c: 1378: SystemBlockingWaitMs(1);
 30809  005EA6  0E01               	movlw	1
 30810  005EA8  6F64               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 30811  005EAA  6B65               	clrf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 30812  005EAC  6B66               	clrf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 30813  005EAE  6B67               	clrf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 30814  005EB0  ECCB  F038         	call	_SystemBlockingWaitMs	;wreg free
 30815                           
 30816                           ; BSR set to: 0
 30817                           ;radio_driver_SX1276.c: 1379: retVal <<= (1);
 30818  005EB4  90D8               	bcf	status,0,c
 30819  005EB6  3772               	rlcf	RADIO_ReadRandom@retVal& (0+255),f,b
 30820  005EB8  3773               	rlcf	(RADIO_ReadRandom@retVal+1)& (0+255),f,b
 30821                           
 30822                           ; BSR set to: 0
 30823                           ;radio_driver_SX1276.c: 1380: retVal |= RADIO_RegisterRead(0x2C) & 0x01;
 30824  005EBA  0E2C               	movlw	44
 30825  005EBC  EC30  F039         	call	_RADIO_RegisterRead
 30826  005EC0  0B01               	andlw	1
 30827  005EC2  1372               	iorwf	RADIO_ReadRandom@retVal& (0+255),f,b
 30828  005EC4  2B74               	incf	RADIO_ReadRandom@i& (0+255),f,b
 30829                           
 30830                           ; BSR set to: 0
 30831  005EC6  0E0F               	movlw	15
 30832  005EC8  6574               	cpfsgt	RADIO_ReadRandom@i& (0+255),b
 30833  005ECA  D7ED               	goto	l15224
 30834                           
 30835                           ; BSR set to: 0
 30836                           ;radio_driver_SX1276.c: 1381: }
 30837                           ;radio_driver_SX1276.c: 1384: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 30838  005ECC  0E01               	movlw	1
 30839  005ECE  6F69               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 30840  005ED0  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 30841  005ED2  0E00               	movlw	0
 30842  005ED4  EC8F  F028         	call	_RADIO_WriteMode
 30843                           
 30844                           ;radio_driver_SX1276.c: 1386: RADIO_RegisterWrite(0x12, 0xFF);
 30845  005ED8  0100               	movlb	0	; () banked
 30846  005EDA  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
 30847  005EDC  0E12               	movlw	18
 30848  005EDE  EC17  F03A         	call	_RADIO_RegisterWrite
 30849                           
 30850                           ;radio_driver_SX1276.c: 1388: RADIO_RegisterWrite(0x11, 0x00);
 30851  005EE2  0100               	movlb	0	; () banked
 30852  005EE4  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 30853  005EE6  0E11               	movlw	17
 30854  005EE8  EC17  F03A         	call	_RADIO_RegisterWrite
 30855                           
 30856                           ;radio_driver_SX1276.c: 1389: return retVal;
 30857  005EEC  C072  F070         	movff	RADIO_ReadRandom@retVal,?_RADIO_ReadRandom
 30858  005EF0  C073  F071         	movff	RADIO_ReadRandom@retVal+1,?_RADIO_ReadRandom+1
 30859  005EF4  0012               	return		;funcret
 30860  005EF6                     __end_of_RADIO_ReadRandom:
 30861                           	opt stack 0
 30862                           tosu	equ	0xFFF
 30863                           tosh	equ	0xFFE
 30864                           tosl	equ	0xFFD
 30865                           pclath	equ	0xFFA
 30866                           tblptru	equ	0xFF8
 30867                           tblptrh	equ	0xFF7
 30868                           tblptrl	equ	0xFF6
 30869                           tablat	equ	0xFF5
 30870                           prodh	equ	0xFF4
 30871                           prodl	equ	0xFF3
 30872                           intcon	equ	0xFF2
 30873                           intcon2	equ	0xFF1
 30874                           intcon3	equ	0xFF0
 30875                           indf0	equ	0xFEF
 30876                           postinc0	equ	0xFEE
 30877                           plusw0	equ	0xFEB
 30878                           fsr0h	equ	0xFEA
 30879                           fsr0l	equ	0xFE9
 30880                           wreg	equ	0xFE8
 30881                           postinc1	equ	0xFE6
 30882                           postdec1	equ	0xFE5
 30883                           plusw1	equ	0xFE3
 30884                           fsr1h	equ	0xFE2
 30885                           fsr1l	equ	0xFE1
 30886                           indf2	equ	0xFDF
 30887                           postinc2	equ	0xFDE
 30888                           postdec2	equ	0xFDD
 30889                           plusw2	equ	0xFDB
 30890                           fsr2h	equ	0xFDA
 30891                           fsr2l	equ	0xFD9
 30892                           status	equ	0xFD8
 30893                           
 30894 ;; *************** function _LORAWAN_Reset *****************
 30895 ;; Defined at:
 30896 ;;		line 148 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 30897 ;; Parameters:    Size  Location     Type
 30898 ;;  ismBandNew      1    wreg     enum E18994
 30899 ;; Auto vars:     Size  Location     Type
 30900 ;;  ismBandNew      1   67[BANK0 ] enum E18994
 30901 ;; Return value:  Size  Location     Type
 30902 ;;                  1    wreg      void 
 30903 ;; Registers used:
 30904 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30905 ;; Tracked objects:
 30906 ;;		On entry : 0/1
 30907 ;;		On exit  : D/0
 30908 ;;		Unchanged: 0/0
 30909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 30910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30911 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30913 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30914 ;;Total ram usage:        1 bytes
 30915 ;; Hardware stack levels used:    1
 30916 ;; Hardware stack levels required when called:   12
 30917 ;; This function calls:
 30918 ;;		_InitDefault433Channels
 30919 ;;		_InitDefault868Channels
 30920 ;;		_LORAWAN_LinkCheckConfigure
 30921 ;;		_RADIO_Init
 30922 ;;		_RADIO_SetLoRaSyncWord
 30923 ;;		_StopAllSoftwareTimers
 30924 ;;		_UpdateMinMaxChDataRate
 30925 ;;		_memset
 30926 ;; This function is called by:
 30927 ;;		_LORAWAN_Init
 30928 ;; This function uses a non-reentrant model
 30929 ;;
 30930                           
 30931                           	psect	text156
 30932  003ECC                     __ptext156:
 30933                           	opt stack 0
 30934  003ECC                     _LORAWAN_Reset:
 30935                           	opt stack 17
 30936                           
 30937                           ;incstack = 0
 30938                           ;LORAWAN_Reset@ismBandNew stored from wreg
 30939  003ECC  0100               	movlb	0	; () banked
 30940  003ECE  6FA3               	movwf	LORAWAN_Reset@ismBandNew& (0+255),b
 30941                           
 30942                           ;lorawan_eu.c: 150: if (loRa.macInitialized == 1)
 30943  003ED0  0102               	movlb	2	; () banked
 30944  003ED2  05F0               	decf	(_loRa+240)& (0+255),w,b
 30945  003ED4  E102               	bnz	l15248
 30946                           
 30947                           ; BSR set to: 2
 30948                           ;lorawan_eu.c: 151: {
 30949                           ;lorawan_eu.c: 152: StopAllSoftwareTimers ();
 30950  003ED6  ECBE  F034         	call	_StopAllSoftwareTimers	;wreg free
 30951  003EDA                     l15248:
 30952                           
 30953                           ;lorawan_eu.c: 153: }
 30954                           ;lorawan_eu.c: 155: loRa.syncWord = 0x34;
 30955  003EDA  0E34               	movlw	52
 30956  003EDC  0102               	movlb	2	; () banked
 30957  003EDE  6FF4               	movwf	(_loRa+244)& (0+255),b
 30958                           
 30959                           ; BSR set to: 2
 30960                           ;lorawan_eu.c: 156: RADIO_SetLoRaSyncWord(loRa.syncWord);
 30961  003EE0  51F4               	movf	(_loRa+244)& (0+255),w,b
 30962  003EE2  ECB7  F03B         	call	_RADIO_SetLoRaSyncWord
 30963                           
 30964                           ;lorawan_eu.c: 158: loRa.macStatus.value = 0;
 30965  003EE6  0102               	movlb	2	; () banked
 30966  003EE8  6B02               	clrf	(_loRa+2)& (0+255),b
 30967  003EEA  6B03               	clrf	(_loRa+3)& (0+255),b
 30968  003EEC  6B04               	clrf	(_loRa+4)& (0+255),b
 30969  003EEE  6B05               	clrf	(_loRa+5)& (0+255),b
 30970                           
 30971                           ; BSR set to: 2
 30972                           ;lorawan_eu.c: 159: loRa.linkCheckMargin = 255;
 30973  003EF0  69DD               	setf	(_loRa+221)& (0+255),b
 30974                           
 30975                           ; BSR set to: 2
 30976                           ;lorawan_eu.c: 160: loRa.linkCheckGwCnt = 0;
 30977  003EF2  6BDE               	clrf	(_loRa+222)& (0+255),b
 30978                           
 30979                           ; BSR set to: 2
 30980                           ;lorawan_eu.c: 161: loRa.lastTimerValue = 0;
 30981  003EF4  6BC8               	clrf	(_loRa+200)& (0+255),b
 30982  003EF6  6BC9               	clrf	(_loRa+201)& (0+255),b
 30983  003EF8  6BCA               	clrf	(_loRa+202)& (0+255),b
 30984  003EFA  6BCB               	clrf	(_loRa+203)& (0+255),b
 30985                           
 30986                           ; BSR set to: 2
 30987                           ;lorawan_eu.c: 162: loRa.lastPacketLength = 0;
 30988  003EFC  6BD4               	clrf	(_loRa+212)& (0+255),b
 30989  003EFE  6BD5               	clrf	(_loRa+213)& (0+255),b
 30990                           
 30991                           ; BSR set to: 2
 30992                           ;lorawan_eu.c: 163: loRa.fCntDown.value = 0;
 30993  003F00  6B0A               	clrf	(_loRa+10)& (0+255),b
 30994  003F02  6B0B               	clrf	(_loRa+11)& (0+255),b
 30995  003F04  6B0C               	clrf	(_loRa+12)& (0+255),b
 30996  003F06  6B0D               	clrf	(_loRa+13)& (0+255),b
 30997                           
 30998                           ; BSR set to: 2
 30999                           ;lorawan_eu.c: 164: loRa.fCntUp.value = 0;
 31000  003F08  6B06               	clrf	(_loRa+6)& (0+255),b
 31001  003F0A  6B07               	clrf	(_loRa+7)& (0+255),b
 31002  003F0C  6B08               	clrf	(_loRa+8)& (0+255),b
 31003  003F0E  6B09               	clrf	(_loRa+9)& (0+255),b
 31004                           
 31005                           ; BSR set to: 2
 31006                           ;lorawan_eu.c: 165: loRa.devNonce = 0;
 31007  003F10  6BD2               	clrf	(_loRa+210)& (0+255),b
 31008  003F12  6BD3               	clrf	(_loRa+211)& (0+255),b
 31009                           
 31010                           ; BSR set to: 2
 31011                           ;lorawan_eu.c: 166: loRa.prescaler = 1;
 31012  003F14  6BDC               	clrf	(_loRa+220)& (0+255),b
 31013  003F16  0E01               	movlw	1
 31014  003F18  6FDB               	movwf	(_loRa+219)& (0+255),b
 31015                           
 31016                           ; BSR set to: 2
 31017                           ;lorawan_eu.c: 167: loRa.adrAckCnt = 0;
 31018  003F1A  6BD0               	clrf	(_loRa+208)& (0+255),b
 31019  003F1C  6BD1               	clrf	(_loRa+209)& (0+255),b
 31020                           
 31021                           ; BSR set to: 2
 31022                           ;lorawan_eu.c: 168: loRa.counterAdrAckDelay = 0;
 31023  003F1E  6BEE               	clrf	(_loRa+238)& (0+255),b
 31024                           
 31025                           ; BSR set to: 2
 31026                           ;lorawan_eu.c: 169: loRa.offset = 0;
 31027  003F20  6BEF               	clrf	(_loRa+239)& (0+255),b
 31028                           
 31029                           ; BSR set to: 2
 31030                           ;lorawan_eu.c: 170: loRa.lastTimerValue = 0;
 31031  003F22  6BC8               	clrf	(_loRa+200)& (0+255),b
 31032  003F24  6BC9               	clrf	(_loRa+201)& (0+255),b
 31033  003F26  6BCA               	clrf	(_loRa+202)& (0+255),b
 31034  003F28  6BCB               	clrf	(_loRa+203)& (0+255),b
 31035                           
 31036                           ; BSR set to: 2
 31037                           ;lorawan_eu.c: 173: loRa.macStatus.linkCheck = 0;
 31038  003F2A  9503               	bcf	(_loRa+3)& (0+255),2,b
 31039                           
 31040                           ; BSR set to: 2
 31041                           ;lorawan_eu.c: 176: loRa.macStatus.value = 0;
 31042  003F2C  6B02               	clrf	(_loRa+2)& (0+255),b
 31043  003F2E  6B03               	clrf	(_loRa+3)& (0+255),b
 31044  003F30  6B04               	clrf	(_loRa+4)& (0+255),b
 31045  003F32  6B05               	clrf	(_loRa+5)& (0+255),b
 31046                           
 31047                           ; BSR set to: 2
 31048                           ;lorawan_eu.c: 177: loRa.lorawanMacStatus.value = 0;
 31049  003F34  6B00               	clrf	_loRa& (0+255),b
 31050  003F36  6B01               	clrf	(_loRa+1)& (0+255),b
 31051                           
 31052                           ; BSR set to: 2
 31053                           ;lorawan_eu.c: 179: loRa.maxRepetitionsConfirmedUplink = 7;
 31054  003F38  0E07               	movlw	7
 31055  003F3A  6FD7               	movwf	(_loRa+215)& (0+255),b
 31056                           
 31057                           ; BSR set to: 2
 31058                           ;lorawan_eu.c: 180: loRa.maxRepetitionsUnconfirmedUplink = 0;
 31059  003F3C  6BD6               	clrf	(_loRa+214)& (0+255),b
 31060                           
 31061                           ; BSR set to: 2
 31062                           ;lorawan_eu.c: 181: loRa.counterRepetitionsConfirmedUplink = 1;
 31063  003F3E  0E01               	movlw	1
 31064  003F40  6FD9               	movwf	(_loRa+217)& (0+255),b
 31065                           
 31066                           ; BSR set to: 2
 31067                           ;lorawan_eu.c: 182: loRa.counterRepetitionsUnconfirmedUplink = 1;
 31068  003F42  6FD8               	movwf	(_loRa+216)& (0+255),b
 31069                           
 31070                           ; BSR set to: 2
 31071                           ;lorawan_eu.c: 184: loRa.batteryLevel = (0xFF);
 31072  003F44  69E0               	setf	(_loRa+224)& (0+255),b
 31073                           
 31074                           ; BSR set to: 2
 31075                           ;lorawan_eu.c: 186: loRa.ismBand = ismBandNew;
 31076  003F46  C0A3  F2A4         	movff	LORAWAN_Reset@ismBandNew,_loRa+164
 31077                           
 31078                           ; BSR set to: 2
 31079                           ;lorawan_eu.c: 188: loRa.deviceClass = CLASS_A;
 31080  003F4A  6B12               	clrf	(_loRa+18)& (0+255),b
 31081                           
 31082                           ; BSR set to: 2
 31083                           ;lorawan_eu.c: 191: loRa.maxChannels = 16;
 31084  003F4C  0E10               	movlw	16
 31085  003F4E  6FED               	movwf	(_loRa+237)& (0+255),b
 31086                           
 31087                           ; BSR set to: 2
 31088                           ;lorawan_eu.c: 192: if(ISM_EU868 == ismBandNew)
 31089  003F50  0100               	movlb	0	; () banked
 31090  003F52  51A3               	movf	LORAWAN_Reset@ismBandNew& (0+255),w,b
 31091  003F54  E11A               	bnz	l15310
 31092                           
 31093                           ; BSR set to: 0
 31094                           ;lorawan_eu.c: 193: {
 31095                           ;lorawan_eu.c: 194: RADIO_Init(&radioBuffer[16], (868100000));
 31096  003F56  0EFF               	movlw	low (_radioBuffer+16)
 31097  003F58  6F7D               	movwf	RADIO_Init@radioBuffer& (0+255),b
 31098  003F5A  0E05               	movlw	high (_radioBuffer+16)
 31099  003F5C  6F7E               	movwf	(RADIO_Init@radioBuffer+1)& (0+255),b
 31100  003F5E  0EA0               	movlw	160
 31101  003F60  6F7F               	movwf	RADIO_Init@frequency& (0+255),b
 31102  003F62  0E27               	movlw	39
 31103  003F64  6F80               	movwf	(RADIO_Init@frequency+1)& (0+255),b
 31104  003F66  0EBE               	movlw	190
 31105  003F68  6F81               	movwf	(RADIO_Init@frequency+2)& (0+255),b
 31106  003F6A  0E33               	movlw	51
 31107  003F6C  6F82               	movwf	(RADIO_Init@frequency+3)& (0+255),b
 31108  003F6E  EC5C  F01C         	call	_RADIO_Init	;wreg free
 31109                           
 31110                           ; BSR set to: 1
 31111                           ;lorawan_eu.c: 196: InitDefault868Channels ();
 31112  003F72  ECB6  F031         	call	_InitDefault868Channels	;wreg free
 31113                           
 31114                           ; BSR set to: 0
 31115                           ;lorawan_eu.c: 198: loRa.receiveWindow2Parameters.dataRate = (0);
 31116  003F76  0102               	movlb	2	; () banked
 31117  003F78  6B1C               	clrf	(_loRa+28)& (0+255),b
 31118                           
 31119                           ; BSR set to: 2
 31120                           ;lorawan_eu.c: 199: loRa.receiveWindow2Parameters.frequency = (869525000);
 31121  003F7A  0E08               	movlw	8
 31122  003F7C  6F18               	movwf	(_loRa+24)& (0+255),b
 31123  003F7E  0EE6               	movlw	230
 31124  003F80  6F19               	movwf	(_loRa+25)& (0+255),b
 31125  003F82  0ED3               	movlw	211
 31126  003F84  6F1A               	movwf	(_loRa+26)& (0+255),b
 31127  003F86  0E33               	movlw	51
 31128  003F88  D019               	goto	L20
 31129  003F8A                     l15310:
 31130                           
 31131                           ; BSR set to: 0
 31132                           ;lorawan_eu.c: 201: else
 31133                           ;lorawan_eu.c: 202: {
 31134                           ;lorawan_eu.c: 203: RADIO_Init(&radioBuffer[16], (433300000));
 31135  003F8A  0EFF               	movlw	low (_radioBuffer+16)
 31136  003F8C  6F7D               	movwf	RADIO_Init@radioBuffer& (0+255),b
 31137  003F8E  0E05               	movlw	high (_radioBuffer+16)
 31138  003F90  6F7E               	movwf	(RADIO_Init@radioBuffer+1)& (0+255),b
 31139  003F92  0E20               	movlw	32
 31140  003F94  6F7F               	movwf	RADIO_Init@frequency& (0+255),b
 31141  003F96  0EA2               	movlw	162
 31142  003F98  6F80               	movwf	(RADIO_Init@frequency+1)& (0+255),b
 31143  003F9A  0ED3               	movlw	211
 31144  003F9C  6F81               	movwf	(RADIO_Init@frequency+2)& (0+255),b
 31145  003F9E  0E19               	movlw	25
 31146  003FA0  6F82               	movwf	(RADIO_Init@frequency+3)& (0+255),b
 31147  003FA2  EC5C  F01C         	call	_RADIO_Init	;wreg free
 31148                           
 31149                           ; BSR set to: 1
 31150                           ;lorawan_eu.c: 205: InitDefault433Channels ();
 31151  003FA6  ECE9  F031         	call	_InitDefault433Channels	;wreg free
 31152                           
 31153                           ; BSR set to: 0
 31154                           ;lorawan_eu.c: 207: loRa.receiveWindow2Parameters.dataRate = (0);
 31155  003FAA  0102               	movlb	2	; () banked
 31156  003FAC  6B1C               	clrf	(_loRa+28)& (0+255),b
 31157                           
 31158                           ; BSR set to: 2
 31159                           ;lorawan_eu.c: 208: loRa.receiveWindow2Parameters.frequency = (434665000);
 31160  003FAE  0E28               	movlw	40
 31161  003FB0  6F18               	movwf	(_loRa+24)& (0+255),b
 31162  003FB2  0E76               	movlw	118
 31163  003FB4  6F19               	movwf	(_loRa+25)& (0+255),b
 31164  003FB6  0EE8               	movlw	232
 31165  003FB8  6F1A               	movwf	(_loRa+26)& (0+255),b
 31166  003FBA  0E19               	movlw	25
 31167  003FBC                     L20:
 31168  003FBC  6F1B               	movwf	(_loRa+27)& (0+255),b
 31169                           
 31170                           ; BSR set to: 2
 31171                           ;lorawan_eu.c: 209: }
 31172                           ;lorawan_eu.c: 211: loRa.txPower = 1;
 31173  003FBE  0E01               	movlw	1
 31174  003FC0  6FE1               	movwf	(_loRa+225)& (0+255),b
 31175                           
 31176                           ; BSR set to: 2
 31177                           ;lorawan_eu.c: 213: loRa.currentDataRate = 0;
 31178  003FC2  6BDF               	clrf	(_loRa+223)& (0+255),b
 31179                           
 31180                           ; BSR set to: 2
 31181                           ;lorawan_eu.c: 215: UpdateMinMaxChDataRate ();
 31182  003FC4  EC46  F02B         	call	_UpdateMinMaxChDataRate	;wreg free
 31183                           
 31184                           ; BSR set to: 0
 31185                           ;lorawan_eu.c: 218: loRa.macKeys.value = 0;
 31186  003FC8  0102               	movlb	2	; () banked
 31187  003FCA  6BA5               	clrf	(_loRa+165)& (0+255),b
 31188  003FCC  6BA6               	clrf	(_loRa+166)& (0+255),b
 31189                           
 31190                           ; BSR set to: 2
 31191                           ;lorawan_eu.c: 219: memset (&loRa.activationParameters, 0, sizeof(loRa.activationParamet
      +                          ers));
 31192  003FCE  0E1D               	movlw	low (_loRa+29)
 31193  003FD0  0100               	movlb	0	; () banked
 31194  003FD2  6F64               	movwf	memset@p1& (0+255),b
 31195  003FD4  0E02               	movlw	high (_loRa+29)
 31196  003FD6  6F65               	movwf	(memset@p1+1)& (0+255),b
 31197  003FD8  6B67               	clrf	(memset@c+1)& (0+255),b
 31198  003FDA  6B66               	clrf	memset@c& (0+255),b
 31199  003FDC  6B69               	clrf	(memset@n+1)& (0+255),b
 31200  003FDE  0E69               	movlw	105
 31201  003FE0  6F68               	movwf	memset@n& (0+255),b
 31202  003FE2  ECE0  F038         	call	_memset	;wreg free
 31203                           
 31204                           ; BSR set to: 0
 31205                           ;lorawan_eu.c: 222: loRa.protocolParameters.receiveDelay1 = 1000UL;
 31206  003FE6  0E03               	movlw	3
 31207  003FE8  0102               	movlb	2	; () banked
 31208  003FEA  6F95               	movwf	(_loRa+149)& (0+255),b
 31209  003FEC  0EE8               	movlw	232
 31210  003FEE  6F94               	movwf	(_loRa+148)& (0+255),b
 31211                           
 31212                           ; BSR set to: 2
 31213                           ;lorawan_eu.c: 223: loRa.protocolParameters.receiveDelay2 = 2000UL;
 31214  003FF0  0E07               	movlw	7
 31215  003FF2  6F97               	movwf	(_loRa+151)& (0+255),b
 31216  003FF4  0ED0               	movlw	208
 31217  003FF6  6F96               	movwf	(_loRa+150)& (0+255),b
 31218                           
 31219                           ; BSR set to: 2
 31220                           ;lorawan_eu.c: 224: loRa.protocolParameters.joinAcceptDelay1 = 5000UL;
 31221  003FF8  0E13               	movlw	19
 31222  003FFA  6F99               	movwf	(_loRa+153)& (0+255),b
 31223  003FFC  0E88               	movlw	136
 31224  003FFE  6F98               	movwf	(_loRa+152)& (0+255),b
 31225                           
 31226                           ; BSR set to: 2
 31227                           ;lorawan_eu.c: 225: loRa.protocolParameters.joinAcceptDelay2 = 6000UL;
 31228  004000  0E17               	movlw	23
 31229  004002  6F9B               	movwf	(_loRa+155)& (0+255),b
 31230  004004  0E70               	movlw	112
 31231  004006  6F9A               	movwf	(_loRa+154)& (0+255),b
 31232                           
 31233                           ; BSR set to: 2
 31234                           ;lorawan_eu.c: 226: loRa.protocolParameters.ackTimeout = 2000;
 31235  004008  0E07               	movlw	7
 31236  00400A  6FA1               	movwf	(_loRa+161)& (0+255),b
 31237  00400C  0ED0               	movlw	208
 31238  00400E  6FA0               	movwf	(_loRa+160)& (0+255),b
 31239                           
 31240                           ; BSR set to: 2
 31241                           ;lorawan_eu.c: 227: loRa.protocolParameters.adrAckDelay = 32;
 31242  004010  0E20               	movlw	32
 31243  004012  6FA3               	movwf	(_loRa+163)& (0+255),b
 31244                           
 31245                           ; BSR set to: 2
 31246                           ;lorawan_eu.c: 228: loRa.protocolParameters.adrAckLimit = 64;
 31247  004014  0E40               	movlw	64
 31248  004016  6FA2               	movwf	(_loRa+162)& (0+255),b
 31249                           
 31250                           ; BSR set to: 2
 31251                           ;lorawan_eu.c: 229: loRa.protocolParameters.maxFcntGap = 16384;
 31252  004018  6F9D               	movwf	(_loRa+157)& (0+255),b
 31253  00401A  6B9C               	clrf	(_loRa+156)& (0+255),b
 31254                           
 31255                           ; BSR set to: 2
 31256                           ;lorawan_eu.c: 230: loRa.protocolParameters.maxMultiFcntGap = 16384;
 31257  00401C  6F9F               	movwf	(_loRa+159)& (0+255),b
 31258  00401E  6B9E               	clrf	(_loRa+158)& (0+255),b
 31259                           
 31260                           ; BSR set to: 2
 31261                           ;lorawan_eu.c: 232: LORAWAN_LinkCheckConfigure (0);
 31262  004020  0100               	movlb	0	; () banked
 31263  004022  6B95               	clrf	(LORAWAN_LinkCheckConfigure@period+1)& (0+255),b
 31264  004024  6B94               	clrf	LORAWAN_LinkCheckConfigure@period& (0+255),b
 31265  004026  EF8E  F01B         	goto	_LORAWAN_LinkCheckConfigure	;wreg free
 31266  00402A                     __end_of_LORAWAN_Reset:
 31267                           	opt stack 0
 31268                           tosu	equ	0xFFF
 31269                           tosh	equ	0xFFE
 31270                           tosl	equ	0xFFD
 31271                           pclath	equ	0xFFA
 31272                           tblptru	equ	0xFF8
 31273                           tblptrh	equ	0xFF7
 31274                           tblptrl	equ	0xFF6
 31275                           tablat	equ	0xFF5
 31276                           prodh	equ	0xFF4
 31277                           prodl	equ	0xFF3
 31278                           intcon	equ	0xFF2
 31279                           intcon2	equ	0xFF1
 31280                           intcon3	equ	0xFF0
 31281                           indf0	equ	0xFEF
 31282                           postinc0	equ	0xFEE
 31283                           plusw0	equ	0xFEB
 31284                           fsr0h	equ	0xFEA
 31285                           fsr0l	equ	0xFE9
 31286                           wreg	equ	0xFE8
 31287                           postinc1	equ	0xFE6
 31288                           postdec1	equ	0xFE5
 31289                           plusw1	equ	0xFE3
 31290                           fsr1h	equ	0xFE2
 31291                           fsr1l	equ	0xFE1
 31292                           indf2	equ	0xFDF
 31293                           postinc2	equ	0xFDE
 31294                           postdec2	equ	0xFDD
 31295                           plusw2	equ	0xFDB
 31296                           fsr2h	equ	0xFDA
 31297                           fsr2l	equ	0xFD9
 31298                           status	equ	0xFD8
 31299                           
 31300 ;; *************** function _UpdateMinMaxChDataRate *****************
 31301 ;; Defined at:
 31302 ;;		line 1063 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 31303 ;; Parameters:    Size  Location     Type
 31304 ;;		None
 31305 ;; Auto vars:     Size  Location     Type
 31306 ;;  i               1    5[BANK0 ] unsigned char 
 31307 ;; Return value:  Size  Location     Type
 31308 ;;                  1    wreg      void 
 31309 ;; Registers used:
 31310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 31311 ;; Tracked objects:
 31312 ;;		On entry : F/2
 31313 ;;		On exit  : F/0
 31314 ;;		Unchanged: 0/0
 31315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 31316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31317 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31318 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31319 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31320 ;;Total ram usage:        2 bytes
 31321 ;; Hardware stack levels used:    1
 31322 ;; Hardware stack levels required when called:    7
 31323 ;; This function calls:
 31324 ;;		Nothing
 31325 ;; This function is called by:
 31326 ;;		_LORAWAN_Reset
 31327 ;; This function uses a non-reentrant model
 31328 ;;
 31329                           
 31330                           	psect	text157
 31331  00568C                     __ptext157:
 31332                           	opt stack 0
 31333  00568C                     _UpdateMinMaxChDataRate:
 31334                           	opt stack 21
 31335                           
 31336                           ; BSR set to: 2
 31337                           ;lorawan.c: 1065: uint8_t i;
 31338                           ;lorawan.c: 1068: loRa.minDataRate = 7;
 31339                           
 31340                           ;incstack = 0
 31341  00568C  0E07               	movlw	7
 31342  00568E  6FEB               	movwf	(_loRa+235)& (0+255),b
 31343                           
 31344                           ; BSR set to: 2
 31345                           ;lorawan.c: 1069: loRa.maxDataRate = 0;
 31346  005690  6BEC               	clrf	(_loRa+236)& (0+255),b
 31347                           
 31348                           ; BSR set to: 2
 31349                           ;lorawan.c: 1071: for (i = 0; i < loRa.maxChannels; i++)
 31350  005692  0100               	movlb	0	; () banked
 31351  005694  6B65               	clrf	UpdateMinMaxChDataRate@i& (0+255),b
 31352  005696  D04E               	goto	l14812
 31353  005698                     l14800:
 31354                           
 31355                           ; BSR set to: 0
 31356                           ;lorawan.c: 1072: {
 31357                           ;lorawan.c: 1073: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i].st
      +                          atus == 1) )
 31358  005698  5165               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 31359  00569A  0D0E               	mullw	14
 31360  00569C  0E05               	movlw	low (_Channels+5)
 31361  00569E  24F3               	addwf	prodl,w,c
 31362  0056A0  6ED9               	movwf	fsr2l,c
 31363  0056A2  0E04               	movlw	high (_Channels+5)
 31364  0056A4  20F4               	addwfc	prodh,w,c
 31365  0056A6  6EDA               	movwf	fsr2h,c
 31366  0056A8  50DF               	movf	223,w,c
 31367  0056AA  0B0F               	andlw	15
 31368  0056AC  0100               	movlb	0	; () banked
 31369  0056AE  6F64               	movwf	??_UpdateMinMaxChDataRate& (0+255),b
 31370  0056B0  0102               	movlb	2	; () banked
 31371  0056B2  51EB               	movf	(_loRa+235)& (0+255),w,b
 31372  0056B4  0100               	movlb	0	; () banked
 31373  0056B6  5D64               	subwf	??_UpdateMinMaxChDataRate& (0+255),w,b
 31374  0056B8  E216               	bc	l2044
 31375                           
 31376                           ; BSR set to: 0
 31377  0056BA  5165               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 31378  0056BC  0D0E               	mullw	14
 31379  0056BE  0E04               	movlw	low (_Channels+4)
 31380  0056C0  24F3               	addwf	prodl,w,c
 31381  0056C2  6ED9               	movwf	fsr2l,c
 31382  0056C4  0E04               	movlw	high (_Channels+4)
 31383  0056C6  20F4               	addwfc	prodh,w,c
 31384  0056C8  6EDA               	movwf	fsr2h,c
 31385  0056CA  04DE               	decf	postinc2,w,c
 31386  0056CC  E10C               	bnz	l2044
 31387                           
 31388                           ; BSR set to: 0
 31389                           ;lorawan.c: 1074: {
 31390                           ;lorawan.c: 1075: loRa.minDataRate = Channels[i].dataRange.min;
 31391  0056CE  5165               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 31392  0056D0  0D0E               	mullw	14
 31393  0056D2  0E05               	movlw	low (_Channels+5)
 31394  0056D4  24F3               	addwf	prodl,w,c
 31395  0056D6  6ED9               	movwf	fsr2l,c
 31396  0056D8  0E04               	movlw	high (_Channels+5)
 31397  0056DA  20F4               	addwfc	prodh,w,c
 31398  0056DC  6EDA               	movwf	fsr2h,c
 31399  0056DE  50DF               	movf	223,w,c
 31400  0056E0  0B0F               	andlw	15
 31401  0056E2  0102               	movlb	2	; () banked
 31402  0056E4  6FEB               	movwf	(_loRa+235)& (0+255),b
 31403  0056E6                     l2044:
 31404                           
 31405                           ;lorawan.c: 1076: }
 31406                           ;lorawan.c: 1077: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i].st
      +                          atus == 1) )
 31407  0056E6  0100               	movlb	0	; () banked
 31408  0056E8  5165               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 31409  0056EA  0D0E               	mullw	14
 31410  0056EC  0E05               	movlw	low (_Channels+5)
 31411  0056EE  24F3               	addwf	prodl,w,c
 31412  0056F0  6ED9               	movwf	fsr2l,c
 31413  0056F2  0E04               	movlw	high (_Channels+5)
 31414  0056F4  20F4               	addwfc	prodh,w,c
 31415  0056F6  6EDA               	movwf	fsr2h,c
 31416  0056F8  38DF               	swapf	223,w,c
 31417  0056FA  0B0F               	andlw	15
 31418  0056FC  0102               	movlb	2	; () banked
 31419  0056FE  61EC               	cpfslt	(_loRa+236)& (0+255),b
 31420  005700  D017               	goto	l14810
 31421                           
 31422                           ; BSR set to: 2
 31423  005702  0100               	movlb	0	; () banked
 31424  005704  5165               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 31425  005706  0D0E               	mullw	14
 31426  005708  0E04               	movlw	low (_Channels+4)
 31427  00570A  24F3               	addwf	prodl,w,c
 31428  00570C  6ED9               	movwf	fsr2l,c
 31429  00570E  0E04               	movlw	high (_Channels+4)
 31430  005710  20F4               	addwfc	prodh,w,c
 31431  005712  6EDA               	movwf	fsr2h,c
 31432  005714  04DE               	decf	postinc2,w,c
 31433  005716  E10C               	bnz	l14810
 31434                           
 31435                           ; BSR set to: 0
 31436                           ;lorawan.c: 1078: {
 31437                           ;lorawan.c: 1079: loRa.maxDataRate = Channels[i].dataRange.max;
 31438  005718  5165               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 31439  00571A  0D0E               	mullw	14
 31440  00571C  0E05               	movlw	low (_Channels+5)
 31441  00571E  24F3               	addwf	prodl,w,c
 31442  005720  6ED9               	movwf	fsr2l,c
 31443  005722  0E04               	movlw	high (_Channels+5)
 31444  005724  20F4               	addwfc	prodh,w,c
 31445  005726  6EDA               	movwf	fsr2h,c
 31446  005728  38DF               	swapf	223,w,c
 31447  00572A  0B0F               	andlw	15
 31448  00572C  0102               	movlb	2	; () banked
 31449  00572E  6FEC               	movwf	(_loRa+236)& (0+255),b
 31450  005730                     l14810:
 31451  005730  0100               	movlb	0	; () banked
 31452  005732  2B65               	incf	UpdateMinMaxChDataRate@i& (0+255),f,b
 31453  005734                     l14812:
 31454                           
 31455                           ; BSR set to: 0
 31456  005734  0102               	movlb	2	; () banked
 31457  005736  51ED               	movf	(_loRa+237)& (0+255),w,b
 31458  005738  0100               	movlb	0	; () banked
 31459  00573A  5D65               	subwf	UpdateMinMaxChDataRate@i& (0+255),w,b
 31460  00573C  E3AD               	bnc	l14800
 31461                           
 31462                           ; BSR set to: 0
 31463  00573E  0012               	return		;funcret
 31464  005740                     __end_of_UpdateMinMaxChDataRate:
 31465                           	opt stack 0
 31466                           tosu	equ	0xFFF
 31467                           tosh	equ	0xFFE
 31468                           tosl	equ	0xFFD
 31469                           pclath	equ	0xFFA
 31470                           tblptru	equ	0xFF8
 31471                           tblptrh	equ	0xFF7
 31472                           tblptrl	equ	0xFF6
 31473                           tablat	equ	0xFF5
 31474                           prodh	equ	0xFF4
 31475                           prodl	equ	0xFF3
 31476                           intcon	equ	0xFF2
 31477                           intcon2	equ	0xFF1
 31478                           intcon3	equ	0xFF0
 31479                           indf0	equ	0xFEF
 31480                           postinc0	equ	0xFEE
 31481                           plusw0	equ	0xFEB
 31482                           fsr0h	equ	0xFEA
 31483                           fsr0l	equ	0xFE9
 31484                           wreg	equ	0xFE8
 31485                           postinc1	equ	0xFE6
 31486                           postdec1	equ	0xFE5
 31487                           plusw1	equ	0xFE3
 31488                           fsr1h	equ	0xFE2
 31489                           fsr1l	equ	0xFE1
 31490                           indf2	equ	0xFDF
 31491                           postinc2	equ	0xFDE
 31492                           postdec2	equ	0xFDD
 31493                           plusw2	equ	0xFDB
 31494                           fsr2h	equ	0xFDA
 31495                           fsr2l	equ	0xFD9
 31496                           status	equ	0xFD8
 31497                           
 31498 ;; *************** function _StopAllSoftwareTimers *****************
 31499 ;; Defined at:
 31500 ;;		line 965 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 31501 ;; Parameters:    Size  Location     Type
 31502 ;;		None
 31503 ;; Auto vars:     Size  Location     Type
 31504 ;;		None
 31505 ;; Return value:  Size  Location     Type
 31506 ;;                  1    wreg      void 
 31507 ;; Registers used:
 31508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 31509 ;; Tracked objects:
 31510 ;;		On entry : F/2
 31511 ;;		On exit  : F/0
 31512 ;;		Unchanged: 0/0
 31513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 31514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31518 ;;Total ram usage:        0 bytes
 31519 ;; Hardware stack levels used:    1
 31520 ;; Hardware stack levels required when called:    8
 31521 ;; This function calls:
 31522 ;;		_SwTimerStop
 31523 ;; This function is called by:
 31524 ;;		_LORAWAN_Init
 31525 ;;		_LORAWAN_Reset
 31526 ;; This function uses a non-reentrant model
 31527 ;;
 31528                           
 31529                           	psect	text158
 31530  00697C                     __ptext158:
 31531                           	opt stack 0
 31532  00697C                     _StopAllSoftwareTimers:
 31533                           	opt stack 21
 31534                           
 31535                           ; BSR set to: 2
 31536                           ;lorawan_eu.c: 967: SwTimerStop(loRa.joinAccept1TimerId);
 31537                           
 31538                           ; BSR set to: 0
 31539                           ;incstack = 0
 31540  00697C  51E2               	movf	(_loRa+226)& (0+255),w,b
 31541  00697E  EC7F  F03A         	call	_SwTimerStop
 31542                           
 31543                           ;lorawan_eu.c: 968: SwTimerStop(loRa.joinAccept2TimerId);
 31544  006982  0102               	movlb	2	; () banked
 31545  006984  51E3               	movf	(_loRa+227)& (0+255),w,b
 31546  006986  EC7F  F03A         	call	_SwTimerStop
 31547                           
 31548                           ;lorawan_eu.c: 969: SwTimerStop(loRa.linkCheckTimerId);
 31549  00698A  0102               	movlb	2	; () banked
 31550  00698C  51E7               	movf	(_loRa+231)& (0+255),w,b
 31551  00698E  EC7F  F03A         	call	_SwTimerStop
 31552                           
 31553                           ;lorawan_eu.c: 970: SwTimerStop(loRa.receiveWindow1TimerId);
 31554  006992  0102               	movlb	2	; () banked
 31555  006994  51E4               	movf	(_loRa+228)& (0+255),w,b
 31556  006996  EC7F  F03A         	call	_SwTimerStop
 31557                           
 31558                           ;lorawan_eu.c: 971: SwTimerStop(loRa.receiveWindow2TimerId);
 31559  00699A  0102               	movlb	2	; () banked
 31560  00699C  51E5               	movf	(_loRa+229)& (0+255),w,b
 31561  00699E  EC7F  F03A         	call	_SwTimerStop
 31562                           
 31563                           ;lorawan_eu.c: 972: SwTimerStop(loRa.ackTimeoutTimerId);
 31564  0069A2  0102               	movlb	2	; () banked
 31565  0069A4  51E8               	movf	(_loRa+232)& (0+255),w,b
 31566  0069A6  EC7F  F03A         	call	_SwTimerStop
 31567                           
 31568                           ;lorawan_eu.c: 973: SwTimerStop(loRa.automaticReplyTimerId);
 31569  0069AA  0102               	movlb	2	; () banked
 31570  0069AC  51E6               	movf	(_loRa+230)& (0+255),w,b
 31571  0069AE  EC7F  F03A         	call	_SwTimerStop
 31572                           
 31573                           ;lorawan_eu.c: 974: SwTimerStop(loRa.unconfirmedRetransmisionTimerId);
 31574  0069B2  0102               	movlb	2	; () banked
 31575  0069B4  51EA               	movf	(_loRa+234)& (0+255),w,b
 31576  0069B6  EC7F  F03A         	call	_SwTimerStop
 31577                           
 31578                           ;lorawan_eu.c: 975: SwTimerStop(loRa.abpJoinTimerId);
 31579  0069BA  0102               	movlb	2	; () banked
 31580  0069BC  51F3               	movf	(_loRa+243)& (0+255),w,b
 31581  0069BE  EC7F  F03A         	call	_SwTimerStop
 31582                           
 31583                           ;lorawan_eu.c: 976: SwTimerStop(loRa.dutyCycleTimerId);
 31584  0069C2  0102               	movlb	2	; () banked
 31585  0069C4  51E9               	movf	(_loRa+233)& (0+255),w,b
 31586  0069C6  EF7F  F03A         	goto	_SwTimerStop
 31587  0069CA                     __end_of_StopAllSoftwareTimers:
 31588                           	opt stack 0
 31589                           tosu	equ	0xFFF
 31590                           tosh	equ	0xFFE
 31591                           tosl	equ	0xFFD
 31592                           pclath	equ	0xFFA
 31593                           tblptru	equ	0xFF8
 31594                           tblptrh	equ	0xFF7
 31595                           tblptrl	equ	0xFF6
 31596                           tablat	equ	0xFF5
 31597                           prodh	equ	0xFF4
 31598                           prodl	equ	0xFF3
 31599                           intcon	equ	0xFF2
 31600                           intcon2	equ	0xFF1
 31601                           intcon3	equ	0xFF0
 31602                           indf0	equ	0xFEF
 31603                           postinc0	equ	0xFEE
 31604                           plusw0	equ	0xFEB
 31605                           fsr0h	equ	0xFEA
 31606                           fsr0l	equ	0xFE9
 31607                           wreg	equ	0xFE8
 31608                           postinc1	equ	0xFE6
 31609                           postdec1	equ	0xFE5
 31610                           plusw1	equ	0xFE3
 31611                           fsr1h	equ	0xFE2
 31612                           fsr1l	equ	0xFE1
 31613                           indf2	equ	0xFDF
 31614                           postinc2	equ	0xFDE
 31615                           postdec2	equ	0xFDD
 31616                           plusw2	equ	0xFDB
 31617                           fsr2h	equ	0xFDA
 31618                           fsr2l	equ	0xFD9
 31619                           status	equ	0xFD8
 31620                           
 31621 ;; *************** function _RADIO_SetLoRaSyncWord *****************
 31622 ;; Defined at:
 31623 ;;		line 522 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 31624 ;; Parameters:    Size  Location     Type
 31625 ;;  syncWord        1    wreg     unsigned char 
 31626 ;; Auto vars:     Size  Location     Type
 31627 ;;  syncWord        1    4[BANK0 ] unsigned char 
 31628 ;; Return value:  Size  Location     Type
 31629 ;;                  1    wreg      void 
 31630 ;; Registers used:
 31631 ;;		wreg
 31632 ;; Tracked objects:
 31633 ;;		On entry : F/2
 31634 ;;		On exit  : 0/0
 31635 ;;		Unchanged: 0/0
 31636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 31637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31638 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31640 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31641 ;;Total ram usage:        1 bytes
 31642 ;; Hardware stack levels used:    1
 31643 ;; Hardware stack levels required when called:    7
 31644 ;; This function calls:
 31645 ;;		Nothing
 31646 ;; This function is called by:
 31647 ;;		_LORAWAN_Reset
 31648 ;;		_ConfigureRadio
 31649 ;; This function uses a non-reentrant model
 31650 ;;
 31651                           
 31652                           	psect	text159
 31653  00776E                     __ptext159:
 31654                           	opt stack 0
 31655  00776E                     _RADIO_SetLoRaSyncWord:
 31656                           	opt stack 18
 31657                           
 31658                           ; BSR set to: 0
 31659                           ;incstack = 0
 31660                           ;RADIO_SetLoRaSyncWord@syncWord stored from wreg
 31661  00776E  0100               	movlb	0	; () banked
 31662  007770  6F64               	movwf	RADIO_SetLoRaSyncWord@syncWord& (0+255),b
 31663                           
 31664                           ;radio_driver_SX1276.c: 525: RadioConfiguration.syncWordLoRa = syncWord;
 31665  007772  C064  F183         	movff	RADIO_SetLoRaSyncWord@syncWord,_RadioConfiguration+14
 31666  007776  0012               	return		;funcret
 31667  007778                     __end_of_RADIO_SetLoRaSyncWord:
 31668                           	opt stack 0
 31669                           tosu	equ	0xFFF
 31670                           tosh	equ	0xFFE
 31671                           tosl	equ	0xFFD
 31672                           pclath	equ	0xFFA
 31673                           tblptru	equ	0xFF8
 31674                           tblptrh	equ	0xFF7
 31675                           tblptrl	equ	0xFF6
 31676                           tablat	equ	0xFF5
 31677                           prodh	equ	0xFF4
 31678                           prodl	equ	0xFF3
 31679                           intcon	equ	0xFF2
 31680                           intcon2	equ	0xFF1
 31681                           intcon3	equ	0xFF0
 31682                           indf0	equ	0xFEF
 31683                           postinc0	equ	0xFEE
 31684                           plusw0	equ	0xFEB
 31685                           fsr0h	equ	0xFEA
 31686                           fsr0l	equ	0xFE9
 31687                           wreg	equ	0xFE8
 31688                           postinc1	equ	0xFE6
 31689                           postdec1	equ	0xFE5
 31690                           plusw1	equ	0xFE3
 31691                           fsr1h	equ	0xFE2
 31692                           fsr1l	equ	0xFE1
 31693                           indf2	equ	0xFDF
 31694                           postinc2	equ	0xFDE
 31695                           postdec2	equ	0xFDD
 31696                           plusw2	equ	0xFDB
 31697                           fsr2h	equ	0xFDA
 31698                           fsr2l	equ	0xFD9
 31699                           status	equ	0xFD8
 31700                           
 31701 ;; *************** function _RADIO_Init *****************
 31702 ;; Defined at:
 31703 ;;		line 422 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 31704 ;; Parameters:    Size  Location     Type
 31705 ;;  radioBuffer     2   29[BANK0 ] PTR unsigned char 
 31706 ;;		 -> radioBuffer(271), 
 31707 ;;  frequency       4   31[BANK0 ] unsigned long 
 31708 ;; Auto vars:     Size  Location     Type
 31709 ;;		None
 31710 ;; Return value:  Size  Location     Type
 31711 ;;                  1    wreg      void 
 31712 ;; Registers used:
 31713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 31714 ;; Tracked objects:
 31715 ;;		On entry : F/0
 31716 ;;		On exit  : F/1
 31717 ;;		Unchanged: 0/0
 31718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 31719 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31721 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31722 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31723 ;;Total ram usage:        7 bytes
 31724 ;; Hardware stack levels used:    1
 31725 ;; Hardware stack levels required when called:   11
 31726 ;; This function calls:
 31727 ;;		_RADIO_RegisterRead
 31728 ;;		_RADIO_RegisterWrite
 31729 ;;		_RADIO_Reset
 31730 ;;		_RADIO_WriteFrequency
 31731 ;;		_RADIO_WriteMode
 31732 ;;		_SwTimerCreate
 31733 ;;		_SwTimerSetCallback
 31734 ;;		_SwTimerStop
 31735 ;; This function is called by:
 31736 ;;		_LORAWAN_Init
 31737 ;;		_LORAWAN_Reset
 31738 ;; This function uses a non-reentrant model
 31739 ;;
 31740                           
 31741                           	psect	text160
 31742  0038B8                     __ptext160:
 31743                           	opt stack 0
 31744  0038B8                     _RADIO_Init:
 31745                           	opt stack 18
 31746                           
 31747                           ; BSR set to: 0
 31748                           ;radio_driver_SX1276.c: 424: RadioConfiguration.frequency = frequency;
 31749                           
 31750                           ;incstack = 0
 31751  0038B8  C07F  F175         	movff	RADIO_Init@frequency,_RadioConfiguration
 31752  0038BC  C080  F176         	movff	RADIO_Init@frequency+1,_RadioConfiguration+1
 31753  0038C0  C081  F177         	movff	RADIO_Init@frequency+2,_RadioConfiguration+2
 31754  0038C4  C082  F178         	movff	RADIO_Init@frequency+3,_RadioConfiguration+3
 31755                           
 31756                           ; BSR set to: 0
 31757                           ;radio_driver_SX1276.c: 425: RadioConfiguration.frequencyDeviation = 25000;
 31758  0038C8  0EA8               	movlw	168
 31759  0038CA  0101               	movlb	1	; () banked
 31760  0038CC  6F79               	movwf	(_RadioConfiguration+4)& (0+255),b
 31761  0038CE  0E61               	movlw	97
 31762  0038D0  6F7A               	movwf	(_RadioConfiguration+5)& (0+255),b
 31763  0038D2  6B7B               	clrf	(_RadioConfiguration+6)& (0+255),b
 31764  0038D4  6B7C               	clrf	(_RadioConfiguration+7)& (0+255),b
 31765                           
 31766                           ;radio_driver_SX1276.c: 426: RadioConfiguration.bitRate = 50000;
 31767  0038D6  0E50               	movlw	80
 31768  0038D8  6F7D               	movwf	(_RadioConfiguration+8)& (0+255),b
 31769  0038DA  0EC3               	movlw	195
 31770  0038DC  6F7E               	movwf	(_RadioConfiguration+9)& (0+255),b
 31771  0038DE  6B7F               	clrf	(_RadioConfiguration+10)& (0+255),b
 31772  0038E0  6B80               	clrf	(_RadioConfiguration+11)& (0+255),b
 31773                           
 31774                           ;radio_driver_SX1276.c: 427: RadioConfiguration.modulation = MODULATION_LORA;
 31775  0038E2  0E01               	movlw	1
 31776  0038E4  6F8D               	movwf	(_RadioConfiguration+24)& (0+255),b
 31777                           
 31778                           ;radio_driver_SX1276.c: 428: RadioConfiguration.bandWidth = BW_125KHZ;
 31779  0038E6  0E07               	movlw	7
 31780  0038E8  6F8F               	movwf	(_RadioConfiguration+26)& (0+255),b
 31781                           
 31782                           ;radio_driver_SX1276.c: 429: RadioConfiguration.outputPower = 1;
 31783  0038EA  0E01               	movlw	1
 31784  0038EC  6F90               	movwf	(_RadioConfiguration+27)& (0+255),b
 31785                           
 31786                           ;radio_driver_SX1276.c: 430: RadioConfiguration.errorCodingRate = CR_4_5;
 31787  0038EE  6F96               	movwf	(_RadioConfiguration+33)& (0+255),b
 31788                           
 31789                           ; BSR set to: 1
 31790                           ;radio_driver_SX1276.c: 431: RadioConfiguration.implicitHeaderMode = 0;
 31791  0038F0  6B97               	clrf	(_RadioConfiguration+34)& (0+255),b
 31792                           
 31793                           ;radio_driver_SX1276.c: 432: RadioConfiguration.preambleLen = 8;
 31794  0038F2  6B82               	clrf	(_RadioConfiguration+13)& (0+255),b
 31795  0038F4  0E08               	movlw	8
 31796  0038F6  6F81               	movwf	(_RadioConfiguration+12)& (0+255),b
 31797                           
 31798                           ;radio_driver_SX1276.c: 433: RadioConfiguration.dataRate = SF_12;
 31799  0038F8  0E0C               	movlw	12
 31800  0038FA  6F8E               	movwf	(_RadioConfiguration+25)& (0+255),b
 31801                           
 31802                           ;radio_driver_SX1276.c: 434: RadioConfiguration.crcOn = 1;
 31803  0038FC  0E01               	movlw	1
 31804  0038FE  6F91               	movwf	(_RadioConfiguration+28)& (0+255),b
 31805                           
 31806                           ; BSR set to: 1
 31807                           ;radio_driver_SX1276.c: 435: RadioConfiguration.paBoost = 0;
 31808  003900  6B92               	clrf	(_RadioConfiguration+29)& (0+255),b
 31809                           
 31810                           ; BSR set to: 1
 31811                           ;radio_driver_SX1276.c: 436: RadioConfiguration.iqInverted = 0;
 31812  003902  6B95               	clrf	(_RadioConfiguration+32)& (0+255),b
 31813                           
 31814                           ;radio_driver_SX1276.c: 437: RadioConfiguration.syncWord[0] = 0xC1;
 31815  003904  0EC1               	movlw	193
 31816  003906  6F84               	movwf	(_RadioConfiguration+15)& (0+255),b
 31817                           
 31818                           ;radio_driver_SX1276.c: 438: RadioConfiguration.syncWord[1] = 0x94;
 31819  003908  0E94               	movlw	148
 31820  00390A  6F85               	movwf	(_RadioConfiguration+16)& (0+255),b
 31821                           
 31822                           ;radio_driver_SX1276.c: 439: RadioConfiguration.syncWord[2] = 0xC1;
 31823  00390C  0EC1               	movlw	193
 31824  00390E  6F86               	movwf	(_RadioConfiguration+17)& (0+255),b
 31825                           
 31826                           ;radio_driver_SX1276.c: 440: RadioConfiguration.syncWordLen = 3;
 31827  003910  0E03               	movlw	3
 31828  003912  6F8C               	movwf	(_RadioConfiguration+23)& (0+255),b
 31829                           
 31830                           ;radio_driver_SX1276.c: 441: RadioConfiguration.syncWordLoRa = 0x34;
 31831  003914  0E34               	movlw	52
 31832  003916  6F83               	movwf	(_RadioConfiguration+14)& (0+255),b
 31833                           
 31834                           ; BSR set to: 1
 31835                           ;radio_driver_SX1276.c: 442: RadioConfiguration.flags = 0;
 31836  003918  6B98               	clrf	(_RadioConfiguration+35)& (0+255),b
 31837                           
 31838                           ; BSR set to: 1
 31839                           ;radio_driver_SX1276.c: 443: RadioConfiguration.dataBufferLen = 0;
 31840  00391A  6B99               	clrf	(_RadioConfiguration+36)& (0+255),b
 31841                           
 31842                           ; BSR set to: 1
 31843                           ;radio_driver_SX1276.c: 444: RadioConfiguration.dataBuffer = radioBuffer;
 31844  00391C  C07D  F19A         	movff	RADIO_Init@radioBuffer,_RadioConfiguration+37
 31845  003920  C07E  F19B         	movff	RADIO_Init@radioBuffer+1,_RadioConfiguration+38
 31846                           
 31847                           ; BSR set to: 1
 31848                           ;radio_driver_SX1276.c: 445: RadioConfiguration.frequencyHopPeriod = 0;
 31849  003924  6B93               	clrf	(_RadioConfiguration+30)& (0+255),b
 31850  003926  6B94               	clrf	(_RadioConfiguration+31)& (0+255),b
 31851                           
 31852                           ; BSR set to: 1
 31853                           ;radio_driver_SX1276.c: 446: RadioConfiguration.packetSNR = -128;
 31854  003928  0E80               	movlw	128
 31855  00392A  6FA7               	movwf	(_RadioConfiguration+50)& (0+255),b
 31856                           
 31857                           ; BSR set to: 1
 31858                           ;radio_driver_SX1276.c: 447: RadioConfiguration.watchdogTimerTimeout = ((uint32_t)15000)
      +                          ;
 31859  00392C  0E98               	movlw	152
 31860  00392E  6F9F               	movwf	(_RadioConfiguration+42)& (0+255),b
 31861  003930  0E3A               	movlw	58
 31862  003932  6FA0               	movwf	(_RadioConfiguration+43)& (0+255),b
 31863  003934  6BA1               	clrf	(_RadioConfiguration+44)& (0+255),b
 31864  003936  6BA2               	clrf	(_RadioConfiguration+45)& (0+255),b
 31865                           
 31866                           ; BSR set to: 1
 31867                           ;radio_driver_SX1276.c: 448: RadioConfiguration.fskDataShaping = FSK_SHAPING_GAUSS_BT_0_
      +                          5;
 31868  003938  0E02               	movlw	2
 31869  00393A  6FA8               	movwf	(_RadioConfiguration+51)& (0+255),b
 31870                           
 31871                           ; BSR set to: 1
 31872                           ;radio_driver_SX1276.c: 449: RadioConfiguration.rxBw = FSKBW_50_0KHZ;
 31873  00393C  0E0B               	movlw	11
 31874  00393E  6FA9               	movwf	(_RadioConfiguration+52)& (0+255),b
 31875                           
 31876                           ; BSR set to: 1
 31877                           ;radio_driver_SX1276.c: 450: RadioConfiguration.afcBw = FSKBW_83_3KHZ;
 31878  003940  0E12               	movlw	18
 31879  003942  6FAA               	movwf	(_RadioConfiguration+53)& (0+255),b
 31880                           
 31881                           ; BSR set to: 1
 31882                           ;radio_driver_SX1276.c: 451: RadioConfiguration.fhssNextFrequency = (0);
 31883  003944  6BA4               	clrf	(_RadioConfiguration+47)& (0+255),b
 31884  003946  6BA5               	clrf	(_RadioConfiguration+48)& (0+255),b
 31885                           
 31886                           ; BSR set to: 1
 31887                           ;radio_driver_SX1276.c: 456: if (0 == RadioConfiguration.initialized)
 31888  003948  51A3               	movf	(_RadioConfiguration+46)& (0+255),w,b
 31889  00394A  E123               	bnz	l14564
 31890                           
 31891                           ; BSR set to: 1
 31892                           ;radio_driver_SX1276.c: 457: {
 31893                           ;radio_driver_SX1276.c: 460: RadioConfiguration.timeOnAirTimerId = SwTimerCreate();
 31894  00394C  ECA9  F030         	call	_SwTimerCreate	;wreg free
 31895  003950  0101               	movlb	1	; () banked
 31896  003952  6F9C               	movwf	(_RadioConfiguration+39)& (0+255),b
 31897                           
 31898                           ;radio_driver_SX1276.c: 461: RadioConfiguration.fskRxWindowTimerId = SwTimerCreate();
 31899  003954  ECA9  F030         	call	_SwTimerCreate	;wreg free
 31900  003958  0101               	movlb	1	; () banked
 31901  00395A  6F9D               	movwf	(_RadioConfiguration+40)& (0+255),b
 31902                           
 31903                           ;radio_driver_SX1276.c: 462: RadioConfiguration.watchdogTimerId = SwTimerCreate();
 31904  00395C  ECA9  F030         	call	_SwTimerCreate	;wreg free
 31905  003960  0101               	movlb	1	; () banked
 31906  003962  6F9E               	movwf	(_RadioConfiguration+41)& (0+255),b
 31907                           
 31908                           ;radio_driver_SX1276.c: 463: SwTimerSetCallback(RadioConfiguration.fskRxWindowTimerId, R
      +                          ADIO_RxFSKTimeout, 0);
 31909  003964  0E5A               	movlw	low _RADIO_RxFSKTimeout
 31910  003966  0100               	movlb	0	; () banked
 31911  003968  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 31912  00396A  0E6F               	movlw	high _RADIO_RxFSKTimeout
 31913  00396C  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 31914  00396E  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 31915  003970  0101               	movlb	1	; () banked
 31916  003972  519D               	movf	(_RadioConfiguration+40)& (0+255),w,b
 31917  003974  EC2E  F038         	call	_SwTimerSetCallback
 31918                           
 31919                           ;radio_driver_SX1276.c: 464: SwTimerSetCallback(RadioConfiguration.watchdogTimerId, RADI
      +                          O_WatchdogTimeout, 0);
 31920  003978  0EC2               	movlw	low _RADIO_WatchdogTimeout
 31921  00397A  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 31922  00397C  0E6B               	movlw	high _RADIO_WatchdogTimeout
 31923  00397E  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 31924  003980  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 31925  003982  0101               	movlb	1	; () banked
 31926  003984  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 31927  003986  EC2E  F038         	call	_SwTimerSetCallback
 31928                           
 31929                           ; BSR set to: 0
 31930                           ;radio_driver_SX1276.c: 465: RadioConfiguration.initialized = 1;
 31931  00398A  0E01               	movlw	1
 31932  00398C  0101               	movlb	1	; () banked
 31933  00398E  6FA3               	movwf	(_RadioConfiguration+46)& (0+255),b
 31934                           
 31935                           ;radio_driver_SX1276.c: 466: }
 31936  003990  D00B               	goto	l14566
 31937  003992                     l14564:
 31938                           
 31939                           ; BSR set to: 1
 31940                           ;radio_driver_SX1276.c: 467: else
 31941                           ;radio_driver_SX1276.c: 468: {
 31942                           ;radio_driver_SX1276.c: 469: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 31943  003992  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 31944  003994  EC7F  F03A         	call	_SwTimerStop
 31945                           
 31946                           ;radio_driver_SX1276.c: 470: SwTimerStop(RadioConfiguration.fskRxWindowTimerId);
 31947  003998  0101               	movlb	1	; () banked
 31948  00399A  519D               	movf	(_RadioConfiguration+40)& (0+255),w,b
 31949  00399C  EC7F  F03A         	call	_SwTimerStop
 31950                           
 31951                           ;radio_driver_SX1276.c: 471: SwTimerStop(RadioConfiguration.watchdogTimerId);
 31952  0039A0  0101               	movlb	1	; () banked
 31953  0039A2  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 31954  0039A4  EC7F  F03A         	call	_SwTimerStop
 31955  0039A8                     l14566:
 31956                           
 31957                           ;radio_driver_SX1276.c: 472: }
 31958                           ;radio_driver_SX1276.c: 474: RADIO_Reset();
 31959  0039A8  ECE2  F037         	call	_RADIO_Reset	;wreg free
 31960                           
 31961                           ;radio_driver_SX1276.c: 479: RADIO_WriteMode(MODE_STANDBY, MODULATION_FSK, 1);
 31962  0039AC  0E00               	movlw	0
 31963  0039AE  0100               	movlb	0	; () banked
 31964  0039B0  6F69               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 31965  0039B2  0E01               	movlw	1
 31966  0039B4  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 31967  0039B6  EC8F  F028         	call	_RADIO_WriteMode
 31968                           
 31969                           ;radio_driver_SX1276.c: 482: RADIO_WriteFrequency(RadioConfiguration.frequency);
 31970  0039BA  C175  F071         	movff	_RadioConfiguration,RADIO_WriteFrequency@frequency
 31971  0039BE  C176  F072         	movff	_RadioConfiguration+1,RADIO_WriteFrequency@frequency+1
 31972  0039C2  C177  F073         	movff	_RadioConfiguration+2,RADIO_WriteFrequency@frequency+2
 31973  0039C6  C178  F074         	movff	_RadioConfiguration+3,RADIO_WriteFrequency@frequency+3
 31974  0039CA  EC21  F028         	call	_RADIO_WriteFrequency	;wreg free
 31975                           
 31976                           ;radio_driver_SX1276.c: 486: RADIO_RegisterWrite(0x3B, 0x42);
 31977  0039CE  0E42               	movlw	66
 31978  0039D0  0100               	movlb	0	; () banked
 31979  0039D2  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31980  0039D4  0E3B               	movlw	59
 31981  0039D6  EC17  F03A         	call	_RADIO_RegisterWrite
 31982  0039DA                     l14574:
 31983  0039DA  0E3B               	movlw	59
 31984  0039DC  EC30  F039         	call	_RADIO_RegisterRead
 31985  0039E0  6F83               	movwf	??_RADIO_Init& (0+255),b
 31986  0039E2  BB83               	btfsc	??_RADIO_Init& (0+255),5,b
 31987  0039E4  D7FA               	goto	l14574
 31988                           
 31989                           ; BSR set to: 0
 31990                           ;radio_driver_SX1276.c: 493: RADIO_RegisterWrite(0x0C, 0x23);
 31991  0039E6  0E23               	movlw	35
 31992  0039E8  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 31993  0039EA  0E0C               	movlw	12
 31994  0039EC  EC17  F03A         	call	_RADIO_RegisterWrite
 31995                           
 31996                           ;radio_driver_SX1276.c: 496: RADIO_RegisterWrite(0x0D, 0x1E);
 31997  0039F0  0E1E               	movlw	30
 31998  0039F2  0100               	movlb	0	; () banked
 31999  0039F4  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 32000  0039F6  0E0D               	movlw	13
 32001  0039F8  EC17  F03A         	call	_RADIO_RegisterWrite
 32002                           
 32003                           ;radio_driver_SX1276.c: 500: RADIO_RegisterWrite(0x1F, 0xAA);
 32004  0039FC  0EAA               	movlw	170
 32005  0039FE  0100               	movlb	0	; () banked
 32006  003A00  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 32007  003A02  0E1F               	movlw	31
 32008  003A04  EC17  F03A         	call	_RADIO_RegisterWrite
 32009                           
 32010                           ;radio_driver_SX1276.c: 504: RADIO_RegisterWrite(0x35, 0x8F);
 32011  003A08  0E8F               	movlw	143
 32012  003A0A  0100               	movlb	0	; () banked
 32013  003A0C  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 32014  003A0E  0E35               	movlw	53
 32015  003A10  EC17  F03A         	call	_RADIO_RegisterWrite
 32016                           
 32017                           ;radio_driver_SX1276.c: 507: RADIO_RegisterWrite(0x32, 0xFF);
 32018  003A14  0100               	movlb	0	; () banked
 32019  003A16  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
 32020  003A18  0E32               	movlw	50
 32021  003A1A  EC17  F03A         	call	_RADIO_RegisterWrite
 32022                           
 32023                           ;radio_driver_SX1276.c: 510: RADIO_RegisterWrite(0x31, 1 << (6));
 32024  003A1E  0E40               	movlw	64
 32025  003A20  0100               	movlb	0	; () banked
 32026  003A22  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 32027  003A24  0E31               	movlw	49
 32028  003A26  EC17  F03A         	call	_RADIO_RegisterWrite
 32029                           
 32030                           ;radio_driver_SX1276.c: 513: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 32031  003A2A  0E01               	movlw	1
 32032  003A2C  0100               	movlb	0	; () banked
 32033  003A2E  6F69               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 32034  003A30  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 32035  003A32  0E00               	movlw	0
 32036  003A34  EC8F  F028         	call	_RADIO_WriteMode
 32037                           
 32038                           ;radio_driver_SX1276.c: 517: RADIO_RegisterWrite(0x23, 0xFF);
 32039  003A38  0100               	movlb	0	; () banked
 32040  003A3A  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
 32041  003A3C  0E23               	movlw	35
 32042  003A3E  EC17  F03A         	call	_RADIO_RegisterWrite
 32043                           
 32044                           ;radio_driver_SX1276.c: 519: RadioConfiguration.regVersion = RADIO_RegisterRead(0x42);
 32045  003A42  0E42               	movlw	66
 32046  003A44  EC30  F039         	call	_RADIO_RegisterRead
 32047  003A48  0101               	movlb	1	; () banked
 32048  003A4A  6FA6               	movwf	(_RadioConfiguration+49)& (0+255),b
 32049                           
 32050                           ; BSR set to: 1
 32051  003A4C  0012               	return		;funcret
 32052  003A4E                     __end_of_RADIO_Init:
 32053                           	opt stack 0
 32054                           tosu	equ	0xFFF
 32055                           tosh	equ	0xFFE
 32056                           tosl	equ	0xFFD
 32057                           pclath	equ	0xFFA
 32058                           tblptru	equ	0xFF8
 32059                           tblptrh	equ	0xFF7
 32060                           tblptrl	equ	0xFF6
 32061                           tablat	equ	0xFF5
 32062                           prodh	equ	0xFF4
 32063                           prodl	equ	0xFF3
 32064                           intcon	equ	0xFF2
 32065                           intcon2	equ	0xFF1
 32066                           intcon3	equ	0xFF0
 32067                           indf0	equ	0xFEF
 32068                           postinc0	equ	0xFEE
 32069                           plusw0	equ	0xFEB
 32070                           fsr0h	equ	0xFEA
 32071                           fsr0l	equ	0xFE9
 32072                           wreg	equ	0xFE8
 32073                           postinc1	equ	0xFE6
 32074                           postdec1	equ	0xFE5
 32075                           plusw1	equ	0xFE3
 32076                           fsr1h	equ	0xFE2
 32077                           fsr1l	equ	0xFE1
 32078                           indf2	equ	0xFDF
 32079                           postinc2	equ	0xFDE
 32080                           postdec2	equ	0xFDD
 32081                           plusw2	equ	0xFDB
 32082                           fsr2h	equ	0xFDA
 32083                           fsr2l	equ	0xFD9
 32084                           status	equ	0xFD8
 32085                           
 32086 ;; *************** function _SwTimerSetCallback *****************
 32087 ;; Defined at:
 32088 ;;		line 180 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 32089 ;; Parameters:    Size  Location     Type
 32090 ;;  timerId         1    wreg     unsigned char 
 32091 ;;  callback        2    4[BANK0 ] PTR FTN(unsigned char ,)
 32092 ;;		 -> DutyCycleCallback(1), UpdateJoinSuccessState(1), UnconfirmedTransmissionCallback(1), AutomaticReplyCallback(1), 
 32093 ;;		 -> AckRetransmissionCallback(1), LORAWAN_LinkCheckCallback(1), LORAWAN_ReceiveWindow1Callback(1), LORAWAN_ReceiveWi
      +ndow2Callback(1), 
 32094 ;;		 -> RADIO_WatchdogTimeout(1), RADIO_RxFSKTimeout(1), 
 32095 ;;  callbackPara    1    6[BANK0 ] unsigned char 
 32096 ;; Auto vars:     Size  Location     Type
 32097 ;;  timerId         1    7[BANK0 ] unsigned char 
 32098 ;; Return value:  Size  Location     Type
 32099 ;;                  1    wreg      void 
 32100 ;; Registers used:
 32101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 32102 ;; Tracked objects:
 32103 ;;		On entry : C/2
 32104 ;;		On exit  : F/0
 32105 ;;		Unchanged: 0/0
 32106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 32107 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32108 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32110 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32111 ;;Total ram usage:        4 bytes
 32112 ;; Hardware stack levels used:    1
 32113 ;; Hardware stack levels required when called:    7
 32114 ;; This function calls:
 32115 ;;		Nothing
 32116 ;; This function is called by:
 32117 ;;		_RADIO_Init
 32118 ;;		_SetCallbackSoftwareTimers
 32119 ;; This function uses a non-reentrant model
 32120 ;;
 32121                           
 32122                           	psect	text161
 32123  00705C                     __ptext161:
 32124                           	opt stack 0
 32125  00705C                     _SwTimerSetCallback:
 32126                           	opt stack 21
 32127                           
 32128                           ; BSR set to: 1
 32129                           ;incstack = 0
 32130                           ;SwTimerSetCallback@timerId stored from wreg
 32131  00705C  0100               	movlb	0	; () banked
 32132  00705E  6F67               	movwf	SwTimerSetCallback@timerId& (0+255),b
 32133                           
 32134                           ;sw_timer.c: 182: swTimers[timerId].callback = callback;
 32135  007060  5167               	movf	SwTimerSetCallback@timerId& (0+255),w,b
 32136  007062  0D08               	mullw	8
 32137  007064  0E06               	movlw	low (_swTimers+6)
 32138  007066  24F3               	addwf	prodl,w,c
 32139  007068  6ED9               	movwf	fsr2l,c
 32140  00706A  0E03               	movlw	high (_swTimers+6)
 32141  00706C  20F4               	addwfc	prodh,w,c
 32142  00706E  6EDA               	movwf	fsr2h,c
 32143  007070  C064  FFDE         	movff	SwTimerSetCallback@callback,postinc2	;volatile
 32144  007074  C065  FFDD         	movff	SwTimerSetCallback@callback+1,postdec2	;volatile
 32145                           
 32146                           ;sw_timer.c: 183: swTimers[timerId].callbackParameter = callbackParameter;
 32147  007078  5167               	movf	SwTimerSetCallback@timerId& (0+255),w,b
 32148  00707A  0D08               	mullw	8
 32149  00707C  0E05               	movlw	low (_swTimers+5)
 32150  00707E  24F3               	addwf	prodl,w,c
 32151  007080  6ED9               	movwf	fsr2l,c
 32152  007082  0E03               	movlw	high (_swTimers+5)
 32153  007084  20F4               	addwfc	prodh,w,c
 32154  007086  6EDA               	movwf	fsr2h,c
 32155  007088  C066  FFDF         	movff	SwTimerSetCallback@callbackParameter,indf2
 32156                           
 32157                           ; BSR set to: 0
 32158  00708C  0012               	return		;funcret
 32159  00708E                     __end_of_SwTimerSetCallback:
 32160                           	opt stack 0
 32161                           tosu	equ	0xFFF
 32162                           tosh	equ	0xFFE
 32163                           tosl	equ	0xFFD
 32164                           pclath	equ	0xFFA
 32165                           tblptru	equ	0xFF8
 32166                           tblptrh	equ	0xFF7
 32167                           tblptrl	equ	0xFF6
 32168                           tablat	equ	0xFF5
 32169                           prodh	equ	0xFF4
 32170                           prodl	equ	0xFF3
 32171                           intcon	equ	0xFF2
 32172                           intcon2	equ	0xFF1
 32173                           intcon3	equ	0xFF0
 32174                           indf0	equ	0xFEF
 32175                           postinc0	equ	0xFEE
 32176                           plusw0	equ	0xFEB
 32177                           fsr0h	equ	0xFEA
 32178                           fsr0l	equ	0xFE9
 32179                           wreg	equ	0xFE8
 32180                           postinc1	equ	0xFE6
 32181                           postdec1	equ	0xFE5
 32182                           plusw1	equ	0xFE3
 32183                           fsr1h	equ	0xFE2
 32184                           fsr1l	equ	0xFE1
 32185                           indf2	equ	0xFDF
 32186                           postinc2	equ	0xFDE
 32187                           postdec2	equ	0xFDD
 32188                           plusw2	equ	0xFDB
 32189                           fsr2h	equ	0xFDA
 32190                           fsr2l	equ	0xFD9
 32191                           status	equ	0xFD8
 32192                           
 32193 ;; *************** function _RADIO_WriteMode *****************
 32194 ;; Defined at:
 32195 ;;		line 147 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 32196 ;; Parameters:    Size  Location     Type
 32197 ;;  newMode         1    wreg     enum E19430
 32198 ;;  newModulatio    1    9[BANK0 ] enum E18698
 32199 ;;  blocking        1   10[BANK0 ] unsigned char 
 32200 ;; Auto vars:     Size  Location     Type
 32201 ;;  newMode         1   14[BANK0 ] enum E19430
 32202 ;;  opMode          1   15[BANK0 ] unsigned char 
 32203 ;;  currentMode     1   13[BANK0 ] enum E19430
 32204 ;;  dioMapping      1   12[BANK0 ] unsigned char 
 32205 ;;  currentModul    1   11[BANK0 ] enum E18698
 32206 ;; Return value:  Size  Location     Type
 32207 ;;                  1    wreg      void 
 32208 ;; Registers used:
 32209 ;;		wreg, status,2, status,0, cstack
 32210 ;; Tracked objects:
 32211 ;;		On entry : F/0
 32212 ;;		On exit  : 0/0
 32213 ;;		Unchanged: 0/0
 32214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 32215 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32216 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32218 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32219 ;;Total ram usage:        7 bytes
 32220 ;; Hardware stack levels used:    1
 32221 ;; Hardware stack levels required when called:   10
 32222 ;; This function calls:
 32223 ;;		_HALDIO5PinValue
 32224 ;;		_RADIO_RegisterRead
 32225 ;;		_RADIO_RegisterWrite
 32226 ;;		_SystemBlockingWaitMs
 32227 ;; This function is called by:
 32228 ;;		_RADIO_Init
 32229 ;;		_RADIO_WriteConfiguration
 32230 ;;		_RADIO_Transmit
 32231 ;;		_RADIO_ReceiveStart
 32232 ;;		_RADIO_ReceiveStop
 32233 ;;		_RADIO_RxDone
 32234 ;;		_RADIO_FSKPayloadReady
 32235 ;;		_RADIO_RxTimeout
 32236 ;;		_RADIO_TxDone
 32237 ;;		_RADIO_FSKPacketSent
 32238 ;;		_RADIO_ReadRandom
 32239 ;;		_RADIO_RxFSKTimeout
 32240 ;;		_RADIO_WatchdogTimeout
 32241 ;; This function uses a non-reentrant model
 32242 ;;
 32243                           
 32244                           	psect	text162
 32245  00511E                     __ptext162:
 32246                           	opt stack 0
 32247  00511E                     _RADIO_WriteMode:
 32248                           	opt stack 17
 32249                           
 32250                           ; BSR set to: 0
 32251                           ;incstack = 0
 32252                           ;RADIO_WriteMode@newMode stored from wreg
 32253  00511E  6F6E               	movwf	RADIO_WriteMode@newMode& (0+255),b
 32254                           
 32255                           ;radio_driver_SX1276.c: 149: uint8_t opMode;
 32256                           ;radio_driver_SX1276.c: 150: uint8_t dioMapping;
 32257                           ;radio_driver_SX1276.c: 151: RadioModulation_t currentModulation;
 32258                           ;radio_driver_SX1276.c: 152: RadioMode_t currentMode;
 32259                           ;radio_driver_SX1276.c: 154: if ((MODULATION_FSK == newModulation) &&
 32260                           ;radio_driver_SX1276.c: 155: ((MODE_RXSINGLE == newMode) || (MODE_CAD == newMode)))
 32261  005120  0100               	movlb	0	; () banked
 32262  005122  5169               	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 32263  005124  E108               	bnz	l11904
 32264                           
 32265                           ; BSR set to: 0
 32266  005126  0E06               	movlw	6
 32267  005128  196E               	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 32268  00512A  B4D8               	btfsc	status,2,c
 32269  00512C  0012               	return	
 32270                           
 32271                           ; BSR set to: 0
 32272  00512E  0E07               	movlw	7
 32273  005130  196E               	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 32274  005132  E101               	bnz	l11904
 32275  005134  0012               	return	
 32276  005136                     l11904:
 32277                           
 32278                           ; BSR set to: 0
 32279                           ;radio_driver_SX1276.c: 159: }
 32280                           ;radio_driver_SX1276.c: 162: newMode &= 0x07;
 32281  005136  0E07               	movlw	7
 32282  005138  176E               	andwf	RADIO_WriteMode@newMode& (0+255),f,b
 32283                           
 32284                           ;radio_driver_SX1276.c: 163: newModulation &= 0x01;
 32285  00513A  0E01               	movlw	1
 32286  00513C  1769               	andwf	RADIO_WriteMode@newModulation& (0+255),f,b
 32287                           
 32288                           ; BSR set to: 0
 32289                           ;radio_driver_SX1276.c: 165: opMode = RADIO_RegisterRead(0x01);
 32290  00513E  EC30  F039         	call	_RADIO_RegisterRead
 32291  005142  6F6F               	movwf	RADIO_WriteMode@opMode& (0+255),b
 32292                           
 32293                           ; BSR set to: 0
 32294                           ;radio_driver_SX1276.c: 167: if ((opMode & 0x80) != 0)
 32295  005144  AF6F               	btfss	RADIO_WriteMode@opMode& (0+255),7,b
 32296  005146  D003               	goto	l354
 32297                           
 32298                           ; BSR set to: 0
 32299                           ;radio_driver_SX1276.c: 168: {
 32300                           ;radio_driver_SX1276.c: 169: currentModulation = MODULATION_LORA;
 32301  005148  0E01               	movlw	1
 32302  00514A  6F6B               	movwf	RADIO_WriteMode@currentModulation& (0+255),b
 32303                           
 32304                           ;radio_driver_SX1276.c: 170: }
 32305  00514C  D001               	goto	l11912
 32306  00514E                     l354:
 32307                           
 32308                           ; BSR set to: 0
 32309                           ;radio_driver_SX1276.c: 171: else
 32310                           ;radio_driver_SX1276.c: 172: {
 32311                           ;radio_driver_SX1276.c: 173: currentModulation = MODULATION_FSK;
 32312  00514E  6B6B               	clrf	RADIO_WriteMode@currentModulation& (0+255),b
 32313  005150                     l11912:
 32314                           
 32315                           ; BSR set to: 0
 32316                           ;radio_driver_SX1276.c: 174: }
 32317                           ;radio_driver_SX1276.c: 176: currentMode = opMode & 0x07;
 32318  005150  516F               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 32319  005152  0B07               	andlw	7
 32320  005154  6F6D               	movwf	RADIO_WriteMode@currentMode& (0+255),b
 32321                           
 32322                           ;radio_driver_SX1276.c: 180: if (newModulation != currentModulation)
 32323  005156  516B               	movf	RADIO_WriteMode@currentModulation& (0+255),w,b
 32324  005158  1969               	xorwf	RADIO_WriteMode@newModulation& (0+255),w,b
 32325  00515A  E018               	bz	l11928
 32326                           
 32327                           ; BSR set to: 0
 32328                           ;radio_driver_SX1276.c: 181: {
 32329                           ;radio_driver_SX1276.c: 183: if (MODE_SLEEP != currentMode)
 32330  00515C  516D               	movf	RADIO_WriteMode@currentMode& (0+255),w,b
 32331  00515E  E008               	bz	l11920
 32332                           
 32333                           ; BSR set to: 0
 32334                           ;radio_driver_SX1276.c: 184: {
 32335                           ;radio_driver_SX1276.c: 186: RADIO_RegisterWrite(0x01, opMode & (~0x07));
 32336  005160  516F               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 32337  005162  0BF8               	andlw	248
 32338  005164  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 32339  005166  0E01               	movlw	1
 32340  005168  EC17  F03A         	call	_RADIO_RegisterWrite
 32341                           
 32342                           ;radio_driver_SX1276.c: 187: currentMode = MODE_SLEEP;
 32343  00516C  0100               	movlb	0	; () banked
 32344  00516E  6B6D               	clrf	RADIO_WriteMode@currentMode& (0+255),b
 32345  005170                     l11920:
 32346                           
 32347                           ; BSR set to: 0
 32348                           ;radio_driver_SX1276.c: 188: }
 32349                           ;radio_driver_SX1276.c: 190: if (MODULATION_FSK == newModulation)
 32350  005170  5169               	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 32351  005172  E103               	bnz	l11924
 32352                           
 32353                           ; BSR set to: 0
 32354                           ;radio_driver_SX1276.c: 191: {
 32355                           ;radio_driver_SX1276.c: 193: opMode = opMode & (~0x87);
 32356  005174  0E78               	movlw	120
 32357  005176  176F               	andwf	RADIO_WriteMode@opMode& (0+255),f,b
 32358                           
 32359                           ;radio_driver_SX1276.c: 194: }
 32360  005178  D004               	goto	l11926
 32361  00517A                     l11924:
 32362                           
 32363                           ; BSR set to: 0
 32364                           ;radio_driver_SX1276.c: 195: else
 32365                           ;radio_driver_SX1276.c: 196: {
 32366                           ;radio_driver_SX1276.c: 198: opMode = 0x80 | (opMode & (~0x87));
 32367  00517A  516F               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 32368  00517C  0B78               	andlw	120
 32369  00517E  0980               	iorlw	128
 32370  005180  6F6F               	movwf	RADIO_WriteMode@opMode& (0+255),b
 32371  005182                     l11926:
 32372                           
 32373                           ; BSR set to: 0
 32374                           ;radio_driver_SX1276.c: 199: }
 32375                           ;radio_driver_SX1276.c: 200: RADIO_RegisterWrite(0x01, opMode);
 32376  005182  C06F  F066         	movff	RADIO_WriteMode@opMode,RADIO_RegisterWrite@value
 32377  005186  0E01               	movlw	1
 32378  005188  EC17  F03A         	call	_RADIO_RegisterWrite
 32379  00518C                     l11928:
 32380                           
 32381                           ;radio_driver_SX1276.c: 201: }
 32382                           ;radio_driver_SX1276.c: 207: if (newMode != currentMode)
 32383  00518C  0100               	movlb	0	; () banked
 32384  00518E  516D               	movf	RADIO_WriteMode@currentMode& (0+255),w,b
 32385  005190  196E               	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 32386  005192  B4D8               	btfsc	status,2,c
 32387  005194  0012               	return	
 32388                           
 32389                           ; BSR set to: 0
 32390                           ;radio_driver_SX1276.c: 208: {
 32391                           ;radio_driver_SX1276.c: 211: if ((MODE_SLEEP != newMode) && (1 == blocking))
 32392  005196  516E               	movf	RADIO_WriteMode@newMode& (0+255),w,b
 32393  005198  E012               	bz	l11944
 32394                           
 32395                           ; BSR set to: 0
 32396  00519A  056A               	decf	RADIO_WriteMode@blocking& (0+255),w,b
 32397  00519C  E110               	bnz	l11944
 32398                           
 32399                           ; BSR set to: 0
 32400                           ;radio_driver_SX1276.c: 212: {
 32401                           ;radio_driver_SX1276.c: 213: dioMapping = RADIO_RegisterRead(0x41);
 32402  00519E  0E41               	movlw	65
 32403  0051A0  EC30  F039         	call	_RADIO_RegisterRead
 32404  0051A4  6F6C               	movwf	RADIO_WriteMode@dioMapping& (0+255),b
 32405                           
 32406                           ; BSR set to: 0
 32407                           ;radio_driver_SX1276.c: 214: if (MODULATION_FSK == newModulation)
 32408  0051A6  5169               	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 32409  0051A8  E103               	bnz	l11940
 32410                           
 32411                           ; BSR set to: 0
 32412                           ;radio_driver_SX1276.c: 215: {
 32413                           ;radio_driver_SX1276.c: 217: dioMapping |= 0x30;
 32414  0051AA  0E30               	movlw	48
 32415  0051AC  136C               	iorwf	RADIO_WriteMode@dioMapping& (0+255),f,b
 32416                           
 32417                           ;radio_driver_SX1276.c: 218: }
 32418  0051AE  D002               	goto	l11942
 32419  0051B0                     l11940:
 32420                           
 32421                           ; BSR set to: 0
 32422                           ;radio_driver_SX1276.c: 219: else
 32423                           ;radio_driver_SX1276.c: 220: {
 32424                           ;radio_driver_SX1276.c: 222: dioMapping &= ~0x30;
 32425  0051B0  0ECF               	movlw	207
 32426  0051B2  176C               	andwf	RADIO_WriteMode@dioMapping& (0+255),f,b
 32427  0051B4                     l11942:
 32428                           
 32429                           ; BSR set to: 0
 32430                           ;radio_driver_SX1276.c: 223: }
 32431                           ;radio_driver_SX1276.c: 224: RADIO_RegisterWrite(0x41, dioMapping);
 32432  0051B4  C06C  F066         	movff	RADIO_WriteMode@dioMapping,RADIO_RegisterWrite@value
 32433  0051B8  0E41               	movlw	65
 32434  0051BA  EC17  F03A         	call	_RADIO_RegisterWrite
 32435  0051BE                     l11944:
 32436                           
 32437                           ;radio_driver_SX1276.c: 225: }
 32438                           ;radio_driver_SX1276.c: 228: opMode &= ~0x07;
 32439  0051BE  0EF8               	movlw	248
 32440  0051C0  0100               	movlb	0	; () banked
 32441  0051C2  176F               	andwf	RADIO_WriteMode@opMode& (0+255),f,b
 32442                           
 32443                           ; BSR set to: 0
 32444                           ;radio_driver_SX1276.c: 229: opMode |= newMode;
 32445  0051C4  516E               	movf	RADIO_WriteMode@newMode& (0+255),w,b
 32446  0051C6  136F               	iorwf	RADIO_WriteMode@opMode& (0+255),f,b
 32447                           
 32448                           ; BSR set to: 0
 32449                           ;radio_driver_SX1276.c: 230: RADIO_RegisterWrite(0x01, opMode);
 32450  0051C8  C06F  F066         	movff	RADIO_WriteMode@opMode,RADIO_RegisterWrite@value
 32451  0051CC  0E01               	movlw	1
 32452  0051CE  EC17  F03A         	call	_RADIO_RegisterWrite
 32453                           
 32454                           ;radio_driver_SX1276.c: 233: if (1 == blocking)
 32455  0051D2  0100               	movlb	0	; () banked
 32456  0051D4  056A               	decf	RADIO_WriteMode@blocking& (0+255),w,b
 32457  0051D6  A4D8               	btfss	status,2,c
 32458  0051D8  0012               	return	
 32459                           
 32460                           ; BSR set to: 0
 32461                           ;radio_driver_SX1276.c: 234: {
 32462                           ;radio_driver_SX1276.c: 235: if (MODE_SLEEP != newMode)
 32463  0051DA  516E               	movf	RADIO_WriteMode@newMode& (0+255),w,b
 32464  0051DC  E005               	bz	l11956
 32465  0051DE                     l11954:
 32466  0051DE  ECEF  F03B         	call	_HALDIO5PinValue	;wreg free
 32467  0051E2  0900               	iorlw	0
 32468  0051E4  E0FC               	bz	l11954
 32469  0051E6  0012               	return	
 32470  0051E8                     l11956:
 32471                           
 32472                           ; BSR set to: 0
 32473                           ;radio_driver_SX1276.c: 240: else
 32474                           ;radio_driver_SX1276.c: 241: {
 32475                           ;radio_driver_SX1276.c: 242: SystemBlockingWaitMs(1);
 32476  0051E8  0E01               	movlw	1
 32477  0051EA  6F64               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 32478  0051EC  6B65               	clrf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 32479  0051EE  6B66               	clrf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 32480  0051F0  6B67               	clrf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 32481  0051F2  EFCB  F038         	goto	_SystemBlockingWaitMs	;wreg free
 32482  0051F6                     __end_of_RADIO_WriteMode:
 32483                           	opt stack 0
 32484                           tosu	equ	0xFFF
 32485                           tosh	equ	0xFFE
 32486                           tosl	equ	0xFFD
 32487                           pclath	equ	0xFFA
 32488                           tblptru	equ	0xFF8
 32489                           tblptrh	equ	0xFF7
 32490                           tblptrl	equ	0xFF6
 32491                           tablat	equ	0xFF5
 32492                           prodh	equ	0xFF4
 32493                           prodl	equ	0xFF3
 32494                           intcon	equ	0xFF2
 32495                           intcon2	equ	0xFF1
 32496                           intcon3	equ	0xFF0
 32497                           indf0	equ	0xFEF
 32498                           postinc0	equ	0xFEE
 32499                           plusw0	equ	0xFEB
 32500                           fsr0h	equ	0xFEA
 32501                           fsr0l	equ	0xFE9
 32502                           wreg	equ	0xFE8
 32503                           postinc1	equ	0xFE6
 32504                           postdec1	equ	0xFE5
 32505                           plusw1	equ	0xFE3
 32506                           fsr1h	equ	0xFE2
 32507                           fsr1l	equ	0xFE1
 32508                           indf2	equ	0xFDF
 32509                           postinc2	equ	0xFDE
 32510                           postdec2	equ	0xFDD
 32511                           plusw2	equ	0xFDB
 32512                           fsr2h	equ	0xFDA
 32513                           fsr2l	equ	0xFD9
 32514                           status	equ	0xFD8
 32515                           
 32516 ;; *************** function _RADIO_RegisterRead *****************
 32517 ;; Defined at:
 32518 ;;		line 134 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 32519 ;; Parameters:    Size  Location     Type
 32520 ;;  reg             1    wreg     unsigned char 
 32521 ;; Auto vars:     Size  Location     Type
 32522 ;;  reg             1    6[BANK0 ] unsigned char 
 32523 ;;  readValue       1    7[BANK0 ] unsigned char 
 32524 ;; Return value:  Size  Location     Type
 32525 ;;                  1    wreg      unsigned char 
 32526 ;; Registers used:
 32527 ;;		wreg, status,2, status,0, cstack
 32528 ;; Tracked objects:
 32529 ;;		On entry : 0/0
 32530 ;;		On exit  : F/0
 32531 ;;		Unchanged: 0/0
 32532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 32533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32534 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32536 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32537 ;;Total ram usage:        2 bytes
 32538 ;; Hardware stack levels used:    1
 32539 ;; Hardware stack levels required when called:    9
 32540 ;; This function calls:
 32541 ;;		_HALSPICSAssert
 32542 ;;		_HALSPICSDeassert
 32543 ;;		_HALSPISend
 32544 ;; This function is called by:
 32545 ;;		_RADIO_WriteMode
 32546 ;;		_RADIO_WritePower
 32547 ;;		_RADIO_Init
 32548 ;;		_RADIO_WriteConfiguration
 32549 ;;		_RADIO_Transmit
 32550 ;;		_RADIO_RxDone
 32551 ;;		_RADIO_FSKPayloadReady
 32552 ;;		_RADIO_FSKPacketSent
 32553 ;;		_RADIO_FHSSChangeChannel
 32554 ;;		_RADIO_DIO0
 32555 ;;		_RADIO_DIO1
 32556 ;;		_RADIO_DIO2
 32557 ;;		_RADIO_DIO3
 32558 ;;		_RADIO_DIO4
 32559 ;;		_RADIO_DIO5
 32560 ;;		_RADIO_ReadRandom
 32561 ;;		_RADIO_RxFSKTimeout
 32562 ;; This function uses a non-reentrant model
 32563 ;;
 32564                           
 32565                           	psect	text163
 32566  007260                     __ptext163:
 32567                           	opt stack 0
 32568  007260                     _RADIO_RegisterRead:
 32569                           	opt stack 17
 32570                           
 32571                           ;incstack = 0
 32572                           ;RADIO_RegisterRead@reg stored from wreg
 32573  007260  0100               	movlb	0	; () banked
 32574  007262  6F66               	movwf	RADIO_RegisterRead@reg& (0+255),b
 32575                           
 32576                           ;radio_driver_SX1276.c: 136: uint8_t readValue;
 32577                           ;radio_driver_SX1276.c: 137: reg &= 0x7F;
 32578  007264  9F66               	bcf	RADIO_RegisterRead@reg& (0+255),7,b
 32579                           
 32580                           ; BSR set to: 0
 32581                           ;radio_driver_SX1276.c: 138: HALSPICSAssert();
 32582  007266  EC01  F03C         	call	_HALSPICSAssert	;wreg free
 32583                           
 32584                           ;radio_driver_SX1276.c: 139: HALSPISend(reg);
 32585  00726A  0100               	movlb	0	; () banked
 32586  00726C  5166               	movf	RADIO_RegisterRead@reg& (0+255),w,b
 32587  00726E  ECBC  F03B         	call	_HALSPISend
 32588                           
 32589                           ;radio_driver_SX1276.c: 140: readValue = HALSPISend(0xFF);
 32590  007272  0EFF               	movlw	255
 32591  007274  ECBC  F03B         	call	_HALSPISend
 32592  007278  0100               	movlb	0	; () banked
 32593  00727A  6F67               	movwf	RADIO_RegisterRead@readValue& (0+255),b
 32594                           
 32595                           ; BSR set to: 0
 32596                           ;radio_driver_SX1276.c: 141: HALSPICSDeassert();
 32597  00727C  ECFF  F03B         	call	_HALSPICSDeassert	;wreg free
 32598                           
 32599                           ;radio_driver_SX1276.c: 142: return readValue;
 32600  007280  0100               	movlb	0	; () banked
 32601  007282  5167               	movf	RADIO_RegisterRead@readValue& (0+255),w,b
 32602                           
 32603                           ; BSR set to: 0
 32604  007284  0012               	return		;funcret
 32605  007286                     __end_of_RADIO_RegisterRead:
 32606                           	opt stack 0
 32607                           tosu	equ	0xFFF
 32608                           tosh	equ	0xFFE
 32609                           tosl	equ	0xFFD
 32610                           pclath	equ	0xFFA
 32611                           tblptru	equ	0xFF8
 32612                           tblptrh	equ	0xFF7
 32613                           tblptrl	equ	0xFF6
 32614                           tablat	equ	0xFF5
 32615                           prodh	equ	0xFF4
 32616                           prodl	equ	0xFF3
 32617                           intcon	equ	0xFF2
 32618                           intcon2	equ	0xFF1
 32619                           intcon3	equ	0xFF0
 32620                           indf0	equ	0xFEF
 32621                           postinc0	equ	0xFEE
 32622                           plusw0	equ	0xFEB
 32623                           fsr0h	equ	0xFEA
 32624                           fsr0l	equ	0xFE9
 32625                           wreg	equ	0xFE8
 32626                           postinc1	equ	0xFE6
 32627                           postdec1	equ	0xFE5
 32628                           plusw1	equ	0xFE3
 32629                           fsr1h	equ	0xFE2
 32630                           fsr1l	equ	0xFE1
 32631                           indf2	equ	0xFDF
 32632                           postinc2	equ	0xFDE
 32633                           postdec2	equ	0xFDD
 32634                           plusw2	equ	0xFDB
 32635                           fsr2h	equ	0xFDA
 32636                           fsr2l	equ	0xFD9
 32637                           status	equ	0xFD8
 32638                           
 32639 ;; *************** function _HALDIO5PinValue *****************
 32640 ;; Defined at:
 32641 ;;		line 95 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 32642 ;; Parameters:    Size  Location     Type
 32643 ;;		None
 32644 ;; Auto vars:     Size  Location     Type
 32645 ;;		None
 32646 ;; Return value:  Size  Location     Type
 32647 ;;                  1    wreg      unsigned char 
 32648 ;; Registers used:
 32649 ;;		wreg
 32650 ;; Tracked objects:
 32651 ;;		On entry : 0/0
 32652 ;;		On exit  : 0/0
 32653 ;;		Unchanged: 0/0
 32654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 32655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32658 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32659 ;;Total ram usage:        0 bytes
 32660 ;; Hardware stack levels used:    1
 32661 ;; Hardware stack levels required when called:    7
 32662 ;; This function calls:
 32663 ;;		Nothing
 32664 ;; This function is called by:
 32665 ;;		_RADIO_WriteMode
 32666 ;; This function uses a non-reentrant model
 32667 ;;
 32668                           
 32669                           	psect	text164
 32670  0077DE                     __ptext164:
 32671                           	opt stack 0
 32672  0077DE                     _HALDIO5PinValue:
 32673                           	opt stack 19
 32674                           
 32675                           ;radio_driver_hal.c: 97: return PORTBbits.RB0;
 32676                           
 32677                           ; BSR set to: 0
 32678                           ;incstack = 0
 32679  0077DE  B081               	btfsc	3969,0,c	;volatile
 32680  0077E0  0C01               	retlw	1
 32681  0077E2  0C00               	retlw	0	;funcret
 32682  0077E4                     __end_of_HALDIO5PinValue:
 32683                           	opt stack 0
 32684                           tosu	equ	0xFFF
 32685                           tosh	equ	0xFFE
 32686                           tosl	equ	0xFFD
 32687                           pclath	equ	0xFFA
 32688                           tblptru	equ	0xFF8
 32689                           tblptrh	equ	0xFF7
 32690                           tblptrl	equ	0xFF6
 32691                           tablat	equ	0xFF5
 32692                           prodh	equ	0xFF4
 32693                           prodl	equ	0xFF3
 32694                           intcon	equ	0xFF2
 32695                           intcon2	equ	0xFF1
 32696                           intcon3	equ	0xFF0
 32697                           indf0	equ	0xFEF
 32698                           postinc0	equ	0xFEE
 32699                           plusw0	equ	0xFEB
 32700                           fsr0h	equ	0xFEA
 32701                           fsr0l	equ	0xFE9
 32702                           wreg	equ	0xFE8
 32703                           postinc1	equ	0xFE6
 32704                           postdec1	equ	0xFE5
 32705                           plusw1	equ	0xFE3
 32706                           fsr1h	equ	0xFE2
 32707                           fsr1l	equ	0xFE1
 32708                           indf2	equ	0xFDF
 32709                           postinc2	equ	0xFDE
 32710                           postdec2	equ	0xFDD
 32711                           plusw2	equ	0xFDB
 32712                           fsr2h	equ	0xFDA
 32713                           fsr2l	equ	0xFD9
 32714                           status	equ	0xFD8
 32715                           
 32716 ;; *************** function _RADIO_WriteFrequency *****************
 32717 ;; Defined at:
 32718 ;;		line 262 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 32719 ;; Parameters:    Size  Location     Type
 32720 ;;  frequency       4   17[BANK0 ] unsigned long 
 32721 ;; Auto vars:     Size  Location     Type
 32722 ;;  num             4   25[BANK0 ] unsigned long 
 32723 ;;  num_mod         4   21[BANK0 ] unsigned long 
 32724 ;; Return value:  Size  Location     Type
 32725 ;;                  1    wreg      void 
 32726 ;; Registers used:
 32727 ;;		wreg, status,2, status,0, cstack
 32728 ;; Tracked objects:
 32729 ;;		On entry : 0/0
 32730 ;;		On exit  : 0/0
 32731 ;;		Unchanged: 0/0
 32732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 32733 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32734 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32736 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32737 ;;Total ram usage:       12 bytes
 32738 ;; Hardware stack levels used:    1
 32739 ;; Hardware stack levels required when called:   10
 32740 ;; This function calls:
 32741 ;;		_RADIO_RegisterWrite
 32742 ;;		___lldiv
 32743 ;;		___llmod
 32744 ;; This function is called by:
 32745 ;;		_RADIO_Init
 32746 ;;		_RADIO_WriteConfiguration
 32747 ;;		_RADIO_FHSSChangeChannel
 32748 ;; This function uses a non-reentrant model
 32749 ;;
 32750                           
 32751                           	psect	text165
 32752  005042                     __ptext165:
 32753                           	opt stack 0
 32754  005042                     _RADIO_WriteFrequency:
 32755                           	opt stack 16
 32756                           
 32757                           ;radio_driver_SX1276.c: 264: uint32_t num, num_mod;
 32758                           ;radio_driver_SX1276.c: 272: num = frequency / 15625;
 32759                           
 32760                           ;incstack = 0
 32761  005042  C071  F064         	movff	RADIO_WriteFrequency@frequency,___lldiv@dividend
 32762  005046  C072  F065         	movff	RADIO_WriteFrequency@frequency+1,___lldiv@dividend+1
 32763  00504A  C073  F066         	movff	RADIO_WriteFrequency@frequency+2,___lldiv@dividend+2
 32764  00504E  C074  F067         	movff	RADIO_WriteFrequency@frequency+3,___lldiv@dividend+3
 32765  005052  0E09               	movlw	9
 32766  005054  0100               	movlb	0	; () banked
 32767  005056  6F68               	movwf	___lldiv@divisor& (0+255),b
 32768  005058  0E3D               	movlw	61
 32769  00505A  6F69               	movwf	(___lldiv@divisor+1)& (0+255),b
 32770  00505C  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 32771  00505E  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 32772  005060  EC35  F030         	call	___lldiv	;wreg free
 32773  005064  C064  F079         	movff	?___lldiv,RADIO_WriteFrequency@num
 32774  005068  C065  F07A         	movff	?___lldiv+1,RADIO_WriteFrequency@num+1
 32775  00506C  C066  F07B         	movff	?___lldiv+2,RADIO_WriteFrequency@num+2
 32776  005070  C067  F07C         	movff	?___lldiv+3,RADIO_WriteFrequency@num+3
 32777                           
 32778                           ;radio_driver_SX1276.c: 273: num_mod = frequency % 15625;
 32779  005074  C071  F064         	movff	RADIO_WriteFrequency@frequency,___llmod@dividend
 32780  005078  C072  F065         	movff	RADIO_WriteFrequency@frequency+1,___llmod@dividend+1
 32781  00507C  C073  F066         	movff	RADIO_WriteFrequency@frequency+2,___llmod@dividend+2
 32782  005080  C074  F067         	movff	RADIO_WriteFrequency@frequency+3,___llmod@dividend+3
 32783  005084  0E09               	movlw	9
 32784  005086  6F68               	movwf	___llmod@divisor& (0+255),b
 32785  005088  0E3D               	movlw	61
 32786  00508A  6F69               	movwf	(___llmod@divisor+1)& (0+255),b
 32787  00508C  6B6A               	clrf	(___llmod@divisor+2)& (0+255),b
 32788  00508E  6B6B               	clrf	(___llmod@divisor+3)& (0+255),b
 32789  005090  ECB1  F032         	call	___llmod	;wreg free
 32790  005094  C064  F075         	movff	?___llmod,RADIO_WriteFrequency@num_mod
 32791  005098  C065  F076         	movff	?___llmod+1,RADIO_WriteFrequency@num_mod+1
 32792  00509C  C066  F077         	movff	?___llmod+2,RADIO_WriteFrequency@num_mod+2
 32793  0050A0  C067  F078         	movff	?___llmod+3,RADIO_WriteFrequency@num_mod+3
 32794                           
 32795                           ; BSR set to: 0
 32796                           ;radio_driver_SX1276.c: 277: num <<= (8);
 32797  0050A4  C07B  F07C         	movff	RADIO_WriteFrequency@num+2,RADIO_WriteFrequency@num+3
 32798  0050A8  C07A  F07B         	movff	RADIO_WriteFrequency@num+1,RADIO_WriteFrequency@num+2
 32799  0050AC  C079  F07A         	movff	RADIO_WriteFrequency@num,RADIO_WriteFrequency@num+1
 32800  0050B0  6B79               	clrf	RADIO_WriteFrequency@num& (0+255),b
 32801                           
 32802                           ; BSR set to: 0
 32803                           ;radio_driver_SX1276.c: 278: num_mod <<= (8);
 32804  0050B2  C077  F078         	movff	RADIO_WriteFrequency@num_mod+2,RADIO_WriteFrequency@num_mod+3
 32805  0050B6  C076  F077         	movff	RADIO_WriteFrequency@num_mod+1,RADIO_WriteFrequency@num_mod+2
 32806  0050BA  C075  F076         	movff	RADIO_WriteFrequency@num_mod,RADIO_WriteFrequency@num_mod+1
 32807  0050BE  6B75               	clrf	RADIO_WriteFrequency@num_mod& (0+255),b
 32808                           
 32809                           ;radio_driver_SX1276.c: 282: num_mod = num_mod / 15625;
 32810  0050C0  C075  F064         	movff	RADIO_WriteFrequency@num_mod,___lldiv@dividend
 32811  0050C4  C076  F065         	movff	RADIO_WriteFrequency@num_mod+1,___lldiv@dividend+1
 32812  0050C8  C077  F066         	movff	RADIO_WriteFrequency@num_mod+2,___lldiv@dividend+2
 32813  0050CC  C078  F067         	movff	RADIO_WriteFrequency@num_mod+3,___lldiv@dividend+3
 32814  0050D0  0E09               	movlw	9
 32815  0050D2  6F68               	movwf	___lldiv@divisor& (0+255),b
 32816  0050D4  0E3D               	movlw	61
 32817  0050D6  6F69               	movwf	(___lldiv@divisor+1)& (0+255),b
 32818  0050D8  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 32819  0050DA  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 32820  0050DC  EC35  F030         	call	___lldiv	;wreg free
 32821  0050E0  C064  F075         	movff	?___lldiv,RADIO_WriteFrequency@num_mod
 32822  0050E4  C065  F076         	movff	?___lldiv+1,RADIO_WriteFrequency@num_mod+1
 32823  0050E8  C066  F077         	movff	?___lldiv+2,RADIO_WriteFrequency@num_mod+2
 32824  0050EC  C067  F078         	movff	?___lldiv+3,RADIO_WriteFrequency@num_mod+3
 32825                           
 32826                           ; BSR set to: 0
 32827                           ;radio_driver_SX1276.c: 283: num += num_mod;
 32828  0050F0  5175               	movf	RADIO_WriteFrequency@num_mod& (0+255),w,b
 32829  0050F2  2779               	addwf	RADIO_WriteFrequency@num& (0+255),f,b
 32830  0050F4  5176               	movf	(RADIO_WriteFrequency@num_mod+1)& (0+255),w,b
 32831  0050F6  237A               	addwfc	(RADIO_WriteFrequency@num+1)& (0+255),f,b
 32832  0050F8  5177               	movf	(RADIO_WriteFrequency@num_mod+2)& (0+255),w,b
 32833  0050FA  237B               	addwfc	(RADIO_WriteFrequency@num+2)& (0+255),f,b
 32834  0050FC  5178               	movf	(RADIO_WriteFrequency@num_mod+3)& (0+255),w,b
 32835  0050FE  237C               	addwfc	(RADIO_WriteFrequency@num+3)& (0+255),f,b
 32836                           
 32837                           ; BSR set to: 0
 32838                           ;radio_driver_SX1276.c: 287: RADIO_RegisterWrite(0x06, (num >> (16)) & 0xFF);
 32839  005100  C07B  F066         	movff	RADIO_WriteFrequency@num+2,RADIO_RegisterWrite@value
 32840  005104  0E06               	movlw	6
 32841  005106  EC17  F03A         	call	_RADIO_RegisterWrite
 32842                           
 32843                           ;radio_driver_SX1276.c: 288: RADIO_RegisterWrite(0x07, (num >> (8)) & 0xFF);
 32844  00510A  C07A  F066         	movff	RADIO_WriteFrequency@num+1,RADIO_RegisterWrite@value
 32845  00510E  0E07               	movlw	7
 32846  005110  EC17  F03A         	call	_RADIO_RegisterWrite
 32847                           
 32848                           ;radio_driver_SX1276.c: 289: RADIO_RegisterWrite(0x08, num & 0xFF);
 32849  005114  C079  F066         	movff	RADIO_WriteFrequency@num,RADIO_RegisterWrite@value
 32850  005118  0E08               	movlw	8
 32851  00511A  EF17  F03A         	goto	_RADIO_RegisterWrite
 32852  00511E                     __end_of_RADIO_WriteFrequency:
 32853                           	opt stack 0
 32854                           tosu	equ	0xFFF
 32855                           tosh	equ	0xFFE
 32856                           tosl	equ	0xFFD
 32857                           pclath	equ	0xFFA
 32858                           tblptru	equ	0xFF8
 32859                           tblptrh	equ	0xFF7
 32860                           tblptrl	equ	0xFF6
 32861                           tablat	equ	0xFF5
 32862                           prodh	equ	0xFF4
 32863                           prodl	equ	0xFF3
 32864                           intcon	equ	0xFF2
 32865                           intcon2	equ	0xFF1
 32866                           intcon3	equ	0xFF0
 32867                           indf0	equ	0xFEF
 32868                           postinc0	equ	0xFEE
 32869                           plusw0	equ	0xFEB
 32870                           fsr0h	equ	0xFEA
 32871                           fsr0l	equ	0xFE9
 32872                           wreg	equ	0xFE8
 32873                           postinc1	equ	0xFE6
 32874                           postdec1	equ	0xFE5
 32875                           plusw1	equ	0xFE3
 32876                           fsr1h	equ	0xFE2
 32877                           fsr1l	equ	0xFE1
 32878                           indf2	equ	0xFDF
 32879                           postinc2	equ	0xFDE
 32880                           postdec2	equ	0xFDD
 32881                           plusw2	equ	0xFDB
 32882                           fsr2h	equ	0xFDA
 32883                           fsr2l	equ	0xFD9
 32884                           status	equ	0xFD8
 32885                           
 32886 ;; *************** function ___llmod *****************
 32887 ;; Defined at:
 32888 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
 32889 ;; Parameters:    Size  Location     Type
 32890 ;;  dividend        4    4[BANK0 ] unsigned long 
 32891 ;;  divisor         4    8[BANK0 ] unsigned long 
 32892 ;; Auto vars:     Size  Location     Type
 32893 ;;  counter         1   12[BANK0 ] unsigned char 
 32894 ;; Return value:  Size  Location     Type
 32895 ;;                  4    4[BANK0 ] unsigned long 
 32896 ;; Registers used:
 32897 ;;		wreg, status,2, status,0
 32898 ;; Tracked objects:
 32899 ;;		On entry : F/0
 32900 ;;		On exit  : F/0
 32901 ;;		Unchanged: 0/0
 32902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 32903 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32904 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32906 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32907 ;;Total ram usage:        9 bytes
 32908 ;; Hardware stack levels used:    1
 32909 ;; Hardware stack levels required when called:    7
 32910 ;; This function calls:
 32911 ;;		Nothing
 32912 ;; This function is called by:
 32913 ;;		_RADIO_WriteFrequency
 32914 ;; This function uses a non-reentrant model
 32915 ;;
 32916                           
 32917                           	psect	text166
 32918  006562                     __ptext166:
 32919                           	opt stack 0
 32920  006562                     ___llmod:
 32921                           	opt stack 18
 32922                           
 32923                           ; BSR set to: 0
 32924                           
 32925                           ;incstack = 0
 32926  006562  5168               	movf	___llmod@divisor& (0+255),w,b
 32927  006564  1169               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 32928  006566  116A               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 32929  006568  116B               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 32930  00656A  E023               	bz	l2930
 32931                           
 32932                           ; BSR set to: 0
 32933  00656C  0E01               	movlw	1
 32934  00656E  6F6C               	movwf	___llmod@counter& (0+255),b
 32935  006570  D006               	goto	l11856
 32936  006572                     l11854:
 32937                           
 32938                           ; BSR set to: 0
 32939  006572  90D8               	bcf	status,0,c
 32940  006574  3768               	rlcf	___llmod@divisor& (0+255),f,b
 32941  006576  3769               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 32942  006578  376A               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 32943  00657A  376B               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 32944  00657C  2B6C               	incf	___llmod@counter& (0+255),f,b
 32945  00657E                     l11856:
 32946                           
 32947                           ; BSR set to: 0
 32948  00657E  AF6B               	btfss	(___llmod@divisor+3)& (0+255),7,b
 32949  006580  D7F8               	goto	l11854
 32950  006582                     l11858:
 32951                           
 32952                           ; BSR set to: 0
 32953  006582  5168               	movf	___llmod@divisor& (0+255),w,b
 32954  006584  5D64               	subwf	___llmod@dividend& (0+255),w,b
 32955  006586  5169               	movf	(___llmod@divisor+1)& (0+255),w,b
 32956  006588  5965               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 32957  00658A  516A               	movf	(___llmod@divisor+2)& (0+255),w,b
 32958  00658C  5966               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 32959  00658E  516B               	movf	(___llmod@divisor+3)& (0+255),w,b
 32960  006590  5967               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 32961  006592  E308               	bnc	l11862
 32962                           
 32963                           ; BSR set to: 0
 32964  006594  5168               	movf	___llmod@divisor& (0+255),w,b
 32965  006596  5F64               	subwf	___llmod@dividend& (0+255),f,b
 32966  006598  5169               	movf	(___llmod@divisor+1)& (0+255),w,b
 32967  00659A  5B65               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 32968  00659C  516A               	movf	(___llmod@divisor+2)& (0+255),w,b
 32969  00659E  5B66               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 32970  0065A0  516B               	movf	(___llmod@divisor+3)& (0+255),w,b
 32971  0065A2  5B67               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 32972  0065A4                     l11862:
 32973                           
 32974                           ; BSR set to: 0
 32975  0065A4  90D8               	bcf	status,0,c
 32976  0065A6  336B               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 32977  0065A8  336A               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 32978  0065AA  3369               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 32979  0065AC  3368               	rrcf	___llmod@divisor& (0+255),f,b
 32980                           
 32981                           ; BSR set to: 0
 32982  0065AE  2F6C               	decfsz	___llmod@counter& (0+255),f,b
 32983  0065B0  D7E8               	goto	l11858
 32984  0065B2                     l2930:
 32985                           
 32986                           ; BSR set to: 0
 32987  0065B2  C064  F064         	movff	___llmod@dividend,?___llmod
 32988  0065B6  C065  F065         	movff	___llmod@dividend+1,?___llmod+1
 32989  0065BA  C066  F066         	movff	___llmod@dividend+2,?___llmod+2
 32990  0065BE  C067  F067         	movff	___llmod@dividend+3,?___llmod+3
 32991                           
 32992                           ; BSR set to: 0
 32993  0065C2  0012               	return		;funcret
 32994  0065C4                     __end_of___llmod:
 32995                           	opt stack 0
 32996                           tosu	equ	0xFFF
 32997                           tosh	equ	0xFFE
 32998                           tosl	equ	0xFFD
 32999                           pclath	equ	0xFFA
 33000                           tblptru	equ	0xFF8
 33001                           tblptrh	equ	0xFF7
 33002                           tblptrl	equ	0xFF6
 33003                           tablat	equ	0xFF5
 33004                           prodh	equ	0xFF4
 33005                           prodl	equ	0xFF3
 33006                           intcon	equ	0xFF2
 33007                           intcon2	equ	0xFF1
 33008                           intcon3	equ	0xFF0
 33009                           indf0	equ	0xFEF
 33010                           postinc0	equ	0xFEE
 33011                           plusw0	equ	0xFEB
 33012                           fsr0h	equ	0xFEA
 33013                           fsr0l	equ	0xFE9
 33014                           wreg	equ	0xFE8
 33015                           postinc1	equ	0xFE6
 33016                           postdec1	equ	0xFE5
 33017                           plusw1	equ	0xFE3
 33018                           fsr1h	equ	0xFE2
 33019                           fsr1l	equ	0xFE1
 33020                           indf2	equ	0xFDF
 33021                           postinc2	equ	0xFDE
 33022                           postdec2	equ	0xFDD
 33023                           plusw2	equ	0xFDB
 33024                           fsr2h	equ	0xFDA
 33025                           fsr2l	equ	0xFD9
 33026                           status	equ	0xFD8
 33027                           
 33028 ;; *************** function _RADIO_RegisterWrite *****************
 33029 ;; Defined at:
 33030 ;;		line 126 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 33031 ;; Parameters:    Size  Location     Type
 33032 ;;  reg             1    wreg     unsigned char 
 33033 ;;  value           1    6[BANK0 ] unsigned char 
 33034 ;; Auto vars:     Size  Location     Type
 33035 ;;  reg             1    7[BANK0 ] unsigned char 
 33036 ;; Return value:  Size  Location     Type
 33037 ;;                  1    wreg      void 
 33038 ;; Registers used:
 33039 ;;		wreg, status,2, status,0, cstack
 33040 ;; Tracked objects:
 33041 ;;		On entry : 0/0
 33042 ;;		On exit  : 0/0
 33043 ;;		Unchanged: 0/0
 33044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33045 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33046 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33048 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33049 ;;Total ram usage:        2 bytes
 33050 ;; Hardware stack levels used:    1
 33051 ;; Hardware stack levels required when called:    9
 33052 ;; This function calls:
 33053 ;;		_HALSPICSAssert
 33054 ;;		_HALSPICSDeassert
 33055 ;;		_HALSPISend
 33056 ;; This function is called by:
 33057 ;;		_RADIO_WriteMode
 33058 ;;		_RADIO_WriteFrequency
 33059 ;;		_RADIO_WriteFSKFrequencyDeviation
 33060 ;;		_RADIO_WriteFSKBitRate
 33061 ;;		_RADIO_WritePower
 33062 ;;		_RADIO_Init
 33063 ;;		_RADIO_WriteConfiguration
 33064 ;;		_RADIO_Transmit
 33065 ;;		_RADIO_ReceiveStart
 33066 ;;		_RADIO_RxDone
 33067 ;;		_RADIO_RxTimeout
 33068 ;;		_RADIO_TxDone
 33069 ;;		_RADIO_UnhandledInterrupt
 33070 ;;		_RADIO_FHSSChangeChannel
 33071 ;;		_RADIO_ReadRandom
 33072 ;; This function uses a non-reentrant model
 33073 ;;
 33074                           
 33075                           	psect	text167
 33076  00742E                     __ptext167:
 33077                           	opt stack 0
 33078  00742E                     _RADIO_RegisterWrite:
 33079                           	opt stack 17
 33080                           
 33081                           ; BSR set to: 0
 33082                           ;incstack = 0
 33083                           ;RADIO_RegisterWrite@reg stored from wreg
 33084  00742E  0100               	movlb	0	; () banked
 33085  007430  6F67               	movwf	RADIO_RegisterWrite@reg& (0+255),b
 33086                           
 33087                           ;radio_driver_SX1276.c: 128: HALSPICSAssert();
 33088  007432  EC01  F03C         	call	_HALSPICSAssert	;wreg free
 33089                           
 33090                           ;radio_driver_SX1276.c: 129: HALSPISend(0x80 | reg);
 33091  007436  0100               	movlb	0	; () banked
 33092  007438  5167               	movf	RADIO_RegisterWrite@reg& (0+255),w,b
 33093  00743A  0980               	iorlw	128
 33094  00743C  ECBC  F03B         	call	_HALSPISend
 33095                           
 33096                           ;radio_driver_SX1276.c: 130: HALSPISend(value);
 33097  007440  0100               	movlb	0	; () banked
 33098  007442  5166               	movf	RADIO_RegisterWrite@value& (0+255),w,b
 33099  007444  ECBC  F03B         	call	_HALSPISend
 33100                           
 33101                           ;radio_driver_SX1276.c: 131: HALSPICSDeassert();
 33102  007448  EFFF  F03B         	goto	_HALSPICSDeassert	;wreg free
 33103  00744C                     __end_of_RADIO_RegisterWrite:
 33104                           	opt stack 0
 33105                           tosu	equ	0xFFF
 33106                           tosh	equ	0xFFE
 33107                           tosl	equ	0xFFD
 33108                           pclath	equ	0xFFA
 33109                           tblptru	equ	0xFF8
 33110                           tblptrh	equ	0xFF7
 33111                           tblptrl	equ	0xFF6
 33112                           tablat	equ	0xFF5
 33113                           prodh	equ	0xFF4
 33114                           prodl	equ	0xFF3
 33115                           intcon	equ	0xFF2
 33116                           intcon2	equ	0xFF1
 33117                           intcon3	equ	0xFF0
 33118                           indf0	equ	0xFEF
 33119                           postinc0	equ	0xFEE
 33120                           plusw0	equ	0xFEB
 33121                           fsr0h	equ	0xFEA
 33122                           fsr0l	equ	0xFE9
 33123                           wreg	equ	0xFE8
 33124                           postinc1	equ	0xFE6
 33125                           postdec1	equ	0xFE5
 33126                           plusw1	equ	0xFE3
 33127                           fsr1h	equ	0xFE2
 33128                           fsr1l	equ	0xFE1
 33129                           indf2	equ	0xFDF
 33130                           postinc2	equ	0xFDE
 33131                           postdec2	equ	0xFDD
 33132                           plusw2	equ	0xFDB
 33133                           fsr2h	equ	0xFDA
 33134                           fsr2l	equ	0xFD9
 33135                           status	equ	0xFD8
 33136                           
 33137 ;; *************** function _HALSPISend *****************
 33138 ;; Defined at:
 33139 ;;		line 73 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33140 ;; Parameters:    Size  Location     Type
 33141 ;;  data            1    wreg     unsigned char 
 33142 ;; Auto vars:     Size  Location     Type
 33143 ;;  data            1    5[BANK0 ] unsigned char 
 33144 ;; Return value:  Size  Location     Type
 33145 ;;                  1    wreg      unsigned char 
 33146 ;; Registers used:
 33147 ;;		wreg, status,2, cstack
 33148 ;; Tracked objects:
 33149 ;;		On entry : 0/1
 33150 ;;		On exit  : 0/0
 33151 ;;		Unchanged: 0/0
 33152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33154 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33156 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33157 ;;Total ram usage:        1 bytes
 33158 ;; Hardware stack levels used:    1
 33159 ;; Hardware stack levels required when called:    8
 33160 ;; This function calls:
 33161 ;;		_SPI_Exchange8bit
 33162 ;; This function is called by:
 33163 ;;		_RADIO_RegisterWrite
 33164 ;;		_RADIO_RegisterRead
 33165 ;;		_RADIO_Transmit
 33166 ;;		_RADIO_RxDone
 33167 ;;		_RADIO_FSKPayloadReady
 33168 ;; This function uses a non-reentrant model
 33169 ;;
 33170                           
 33171                           	psect	text168
 33172  007778                     __ptext168:
 33173                           	opt stack 0
 33174  007778                     _HALSPISend:
 33175                           	opt stack 17
 33176                           
 33177                           ;incstack = 0
 33178                           ;HALSPISend@data stored from wreg
 33179  007778  0100               	movlb	0	; () banked
 33180  00777A  6F65               	movwf	HALSPISend@data& (0+255),b
 33181                           
 33182                           ;radio_driver_hal.c: 75: return SPI_Exchange8bit(data);
 33183  00777C  5165               	movf	HALSPISend@data& (0+255),w,b
 33184  00777E  EF3C  F03B         	goto	_SPI_Exchange8bit
 33185  007782                     __end_of_HALSPISend:
 33186                           	opt stack 0
 33187                           tosu	equ	0xFFF
 33188                           tosh	equ	0xFFE
 33189                           tosl	equ	0xFFD
 33190                           pclath	equ	0xFFA
 33191                           tblptru	equ	0xFF8
 33192                           tblptrh	equ	0xFF7
 33193                           tblptrl	equ	0xFF6
 33194                           tablat	equ	0xFF5
 33195                           prodh	equ	0xFF4
 33196                           prodl	equ	0xFF3
 33197                           intcon	equ	0xFF2
 33198                           intcon2	equ	0xFF1
 33199                           intcon3	equ	0xFF0
 33200                           indf0	equ	0xFEF
 33201                           postinc0	equ	0xFEE
 33202                           plusw0	equ	0xFEB
 33203                           fsr0h	equ	0xFEA
 33204                           fsr0l	equ	0xFE9
 33205                           wreg	equ	0xFE8
 33206                           postinc1	equ	0xFE6
 33207                           postdec1	equ	0xFE5
 33208                           plusw1	equ	0xFE3
 33209                           fsr1h	equ	0xFE2
 33210                           fsr1l	equ	0xFE1
 33211                           indf2	equ	0xFDF
 33212                           postinc2	equ	0xFDE
 33213                           postdec2	equ	0xFDD
 33214                           plusw2	equ	0xFDB
 33215                           fsr2h	equ	0xFDA
 33216                           fsr2l	equ	0xFD9
 33217                           status	equ	0xFD8
 33218                           
 33219 ;; *************** function _SPI_Exchange8bit *****************
 33220 ;; Defined at:
 33221 ;;		line 77 in file "mcc_generated_files/spi.c"
 33222 ;; Parameters:    Size  Location     Type
 33223 ;;  data            1    wreg     unsigned char 
 33224 ;; Auto vars:     Size  Location     Type
 33225 ;;  data            1    4[BANK0 ] unsigned char 
 33226 ;; Return value:  Size  Location     Type
 33227 ;;                  1    wreg      unsigned char 
 33228 ;; Registers used:
 33229 ;;		wreg, status,2
 33230 ;; Tracked objects:
 33231 ;;		On entry : F/0
 33232 ;;		On exit  : 0/0
 33233 ;;		Unchanged: 0/0
 33234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33236 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33238 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33239 ;;Total ram usage:        1 bytes
 33240 ;; Hardware stack levels used:    1
 33241 ;; Hardware stack levels required when called:    7
 33242 ;; This function calls:
 33243 ;;		Nothing
 33244 ;; This function is called by:
 33245 ;;		_HALSPISend
 33246 ;; This function uses a non-reentrant model
 33247 ;;
 33248                           
 33249                           	psect	text169
 33250  007678                     __ptext169:
 33251                           	opt stack 0
 33252  007678                     _SPI_Exchange8bit:
 33253                           	opt stack 17
 33254                           
 33255                           ;incstack = 0
 33256                           ;SPI_Exchange8bit@data stored from wreg
 33257  007678  6F64               	movwf	SPI_Exchange8bit@data& (0+255),b
 33258                           
 33259                           ;spi.c: 80: SSPCON1bits.WCOL = 0;
 33260  00767A  9EC6               	bcf	4038,7,c	;volatile
 33261                           
 33262                           ;spi.c: 82: SSPBUF = data;
 33263  00767C  C064  FFC9         	movff	SPI_Exchange8bit@data,4041	;volatile
 33264  007680                     l789:
 33265  007680  A0C7               	btfss	4039,0,c	;volatile
 33266  007682  D7FE               	goto	l789
 33267                           
 33268                           ;spi.c: 86: }
 33269                           ;spi.c: 88: return (SSPBUF);
 33270  007684  50C9               	movf	4041,w,c	;volatile
 33271  007686  0012               	return		;funcret
 33272  007688                     __end_of_SPI_Exchange8bit:
 33273                           	opt stack 0
 33274                           tosu	equ	0xFFF
 33275                           tosh	equ	0xFFE
 33276                           tosl	equ	0xFFD
 33277                           pclath	equ	0xFFA
 33278                           tblptru	equ	0xFF8
 33279                           tblptrh	equ	0xFF7
 33280                           tblptrl	equ	0xFF6
 33281                           tablat	equ	0xFF5
 33282                           prodh	equ	0xFF4
 33283                           prodl	equ	0xFF3
 33284                           intcon	equ	0xFF2
 33285                           intcon2	equ	0xFF1
 33286                           intcon3	equ	0xFF0
 33287                           indf0	equ	0xFEF
 33288                           postinc0	equ	0xFEE
 33289                           plusw0	equ	0xFEB
 33290                           fsr0h	equ	0xFEA
 33291                           fsr0l	equ	0xFE9
 33292                           wreg	equ	0xFE8
 33293                           postinc1	equ	0xFE6
 33294                           postdec1	equ	0xFE5
 33295                           plusw1	equ	0xFE3
 33296                           fsr1h	equ	0xFE2
 33297                           fsr1l	equ	0xFE1
 33298                           indf2	equ	0xFDF
 33299                           postinc2	equ	0xFDE
 33300                           postdec2	equ	0xFDD
 33301                           plusw2	equ	0xFDB
 33302                           fsr2h	equ	0xFDA
 33303                           fsr2l	equ	0xFD9
 33304                           status	equ	0xFD8
 33305                           
 33306 ;; *************** function _HALSPICSDeassert *****************
 33307 ;; Defined at:
 33308 ;;		line 68 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33309 ;; Parameters:    Size  Location     Type
 33310 ;;		None
 33311 ;; Auto vars:     Size  Location     Type
 33312 ;;		None
 33313 ;; Return value:  Size  Location     Type
 33314 ;;                  1    wreg      void 
 33315 ;; Registers used:
 33316 ;;		None
 33317 ;; Tracked objects:
 33318 ;;		On entry : 0/0
 33319 ;;		On exit  : 0/0
 33320 ;;		Unchanged: 0/0
 33321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33326 ;;Total ram usage:        0 bytes
 33327 ;; Hardware stack levels used:    1
 33328 ;; Hardware stack levels required when called:    7
 33329 ;; This function calls:
 33330 ;;		Nothing
 33331 ;; This function is called by:
 33332 ;;		_RADIO_RegisterWrite
 33333 ;;		_RADIO_RegisterRead
 33334 ;;		_RADIO_Transmit
 33335 ;;		_RADIO_RxDone
 33336 ;;		_RADIO_FSKPayloadReady
 33337 ;; This function uses a non-reentrant model
 33338 ;;
 33339                           
 33340                           	psect	text170
 33341  0077FE                     __ptext170:
 33342                           	opt stack 0
 33343  0077FE                     _HALSPICSDeassert:
 33344                           	opt stack 18
 33345                           
 33346                           ;incstack = 0
 33347                           ;radio_driver_hal.c: 70: do { LATD3 = 1; } while(0);
 33348  0077FE  868C               	bsf	3980,3,c	;volatile
 33349  007800  0012               	return		;funcret
 33350  007802                     __end_of_HALSPICSDeassert:
 33351                           	opt stack 0
 33352                           tosu	equ	0xFFF
 33353                           tosh	equ	0xFFE
 33354                           tosl	equ	0xFFD
 33355                           pclath	equ	0xFFA
 33356                           tblptru	equ	0xFF8
 33357                           tblptrh	equ	0xFF7
 33358                           tblptrl	equ	0xFF6
 33359                           tablat	equ	0xFF5
 33360                           prodh	equ	0xFF4
 33361                           prodl	equ	0xFF3
 33362                           intcon	equ	0xFF2
 33363                           intcon2	equ	0xFF1
 33364                           intcon3	equ	0xFF0
 33365                           indf0	equ	0xFEF
 33366                           postinc0	equ	0xFEE
 33367                           plusw0	equ	0xFEB
 33368                           fsr0h	equ	0xFEA
 33369                           fsr0l	equ	0xFE9
 33370                           wreg	equ	0xFE8
 33371                           postinc1	equ	0xFE6
 33372                           postdec1	equ	0xFE5
 33373                           plusw1	equ	0xFE3
 33374                           fsr1h	equ	0xFE2
 33375                           fsr1l	equ	0xFE1
 33376                           indf2	equ	0xFDF
 33377                           postinc2	equ	0xFDE
 33378                           postdec2	equ	0xFDD
 33379                           plusw2	equ	0xFDB
 33380                           fsr2h	equ	0xFDA
 33381                           fsr2l	equ	0xFD9
 33382                           status	equ	0xFD8
 33383                           
 33384 ;; *************** function _HALSPICSAssert *****************
 33385 ;; Defined at:
 33386 ;;		line 63 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33387 ;; Parameters:    Size  Location     Type
 33388 ;;		None
 33389 ;; Auto vars:     Size  Location     Type
 33390 ;;		None
 33391 ;; Return value:  Size  Location     Type
 33392 ;;                  1    wreg      void 
 33393 ;; Registers used:
 33394 ;;		None
 33395 ;; Tracked objects:
 33396 ;;		On entry : 0/1
 33397 ;;		On exit  : 0/0
 33398 ;;		Unchanged: 0/0
 33399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33404 ;;Total ram usage:        0 bytes
 33405 ;; Hardware stack levels used:    1
 33406 ;; Hardware stack levels required when called:    7
 33407 ;; This function calls:
 33408 ;;		Nothing
 33409 ;; This function is called by:
 33410 ;;		_RADIO_RegisterWrite
 33411 ;;		_RADIO_RegisterRead
 33412 ;;		_RADIO_Transmit
 33413 ;;		_RADIO_RxDone
 33414 ;;		_RADIO_FSKPayloadReady
 33415 ;; This function uses a non-reentrant model
 33416 ;;
 33417                           
 33418                           	psect	text171
 33419  007802                     __ptext171:
 33420                           	opt stack 0
 33421  007802                     _HALSPICSAssert:
 33422                           	opt stack 18
 33423                           
 33424                           ;incstack = 0
 33425                           ;radio_driver_hal.c: 65: do { LATD3 = 0; } while(0);
 33426  007802  968C               	bcf	3980,3,c	;volatile
 33427  007804  0012               	return		;funcret
 33428  007806                     __end_of_HALSPICSAssert:
 33429                           	opt stack 0
 33430                           tosu	equ	0xFFF
 33431                           tosh	equ	0xFFE
 33432                           tosl	equ	0xFFD
 33433                           pclath	equ	0xFFA
 33434                           tblptru	equ	0xFF8
 33435                           tblptrh	equ	0xFF7
 33436                           tblptrl	equ	0xFF6
 33437                           tablat	equ	0xFF5
 33438                           prodh	equ	0xFF4
 33439                           prodl	equ	0xFF3
 33440                           intcon	equ	0xFF2
 33441                           intcon2	equ	0xFF1
 33442                           intcon3	equ	0xFF0
 33443                           indf0	equ	0xFEF
 33444                           postinc0	equ	0xFEE
 33445                           plusw0	equ	0xFEB
 33446                           fsr0h	equ	0xFEA
 33447                           fsr0l	equ	0xFE9
 33448                           wreg	equ	0xFE8
 33449                           postinc1	equ	0xFE6
 33450                           postdec1	equ	0xFE5
 33451                           plusw1	equ	0xFE3
 33452                           fsr1h	equ	0xFE2
 33453                           fsr1l	equ	0xFE1
 33454                           indf2	equ	0xFDF
 33455                           postinc2	equ	0xFDE
 33456                           postdec2	equ	0xFDD
 33457                           plusw2	equ	0xFDB
 33458                           fsr2h	equ	0xFDA
 33459                           fsr2l	equ	0xFD9
 33460                           status	equ	0xFD8
 33461                           
 33462 ;; *************** function _RADIO_Reset *****************
 33463 ;; Defined at:
 33464 ;;		line 249 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 33465 ;; Parameters:    Size  Location     Type
 33466 ;;		None
 33467 ;; Auto vars:     Size  Location     Type
 33468 ;;		None
 33469 ;; Return value:  Size  Location     Type
 33470 ;;                  1    wreg      void 
 33471 ;; Registers used:
 33472 ;;		wreg, status,2, status,0, cstack
 33473 ;; Tracked objects:
 33474 ;;		On entry : E/1
 33475 ;;		On exit  : E/0
 33476 ;;		Unchanged: 0/0
 33477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33482 ;;Total ram usage:        0 bytes
 33483 ;; Hardware stack levels used:    1
 33484 ;; Hardware stack levels required when called:    8
 33485 ;; This function calls:
 33486 ;;		_HALResetPinMakeInput
 33487 ;;		_HALResetPinMakeOutput
 33488 ;;		_HALResetPinOutputValue
 33489 ;;		_SystemBlockingWaitMs
 33490 ;; This function is called by:
 33491 ;;		_RADIO_Init
 33492 ;; This function uses a non-reentrant model
 33493 ;;
 33494                           
 33495                           	psect	text172
 33496  006FC4                     __ptext172:
 33497                           	opt stack 0
 33498  006FC4                     _RADIO_Reset:
 33499                           	opt stack 20
 33500                           
 33501                           ;radio_driver_SX1276.c: 251: HALResetPinMakeOutput();
 33502                           
 33503                           ;incstack = 0
 33504  006FC4  EC03  F03C         	call	_HALResetPinMakeOutput	;wreg free
 33505                           
 33506                           ;radio_driver_SX1276.c: 252: HALResetPinOutputValue(0);
 33507  006FC8  0E00               	movlw	0
 33508  006FCA  EC29  F03B         	call	_HALResetPinOutputValue
 33509                           
 33510                           ; BSR set to: 0
 33511                           ;radio_driver_SX1276.c: 253: SystemBlockingWaitMs(1);
 33512  006FCE  0E01               	movlw	1
 33513  006FD0  6F64               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 33514  006FD2  6B65               	clrf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 33515  006FD4  6B66               	clrf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 33516  006FD6  6B67               	clrf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 33517  006FD8  ECCB  F038         	call	_SystemBlockingWaitMs	;wreg free
 33518                           
 33519                           ;radio_driver_SX1276.c: 254: HALResetPinMakeInput();
 33520  006FDC  EC05  F03C         	call	_HALResetPinMakeInput	;wreg free
 33521                           
 33522                           ; BSR set to: 0
 33523                           ;radio_driver_SX1276.c: 255: SystemBlockingWaitMs(10);
 33524  006FE0  0E0A               	movlw	10
 33525  006FE2  6F64               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 33526  006FE4  6B65               	clrf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 33527  006FE6  6B66               	clrf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 33528  006FE8  6B67               	clrf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 33529  006FEA  ECCB  F038         	call	_SystemBlockingWaitMs	;wreg free
 33530                           
 33531                           ; BSR set to: 0
 33532                           ;radio_driver_SX1276.c: 257: HALResetPinOutputValue(1);
 33533  006FEE  0E01               	movlw	1
 33534  006FF0  EC29  F03B         	call	_HALResetPinOutputValue
 33535                           
 33536                           ;radio_driver_SX1276.c: 258: HALResetPinMakeOutput();
 33537  006FF4  EF03  F03C         	goto	_HALResetPinMakeOutput	;wreg free
 33538  006FF8                     __end_of_RADIO_Reset:
 33539                           	opt stack 0
 33540                           tosu	equ	0xFFF
 33541                           tosh	equ	0xFFE
 33542                           tosl	equ	0xFFD
 33543                           pclath	equ	0xFFA
 33544                           tblptru	equ	0xFF8
 33545                           tblptrh	equ	0xFF7
 33546                           tblptrl	equ	0xFF6
 33547                           tablat	equ	0xFF5
 33548                           prodh	equ	0xFF4
 33549                           prodl	equ	0xFF3
 33550                           intcon	equ	0xFF2
 33551                           intcon2	equ	0xFF1
 33552                           intcon3	equ	0xFF0
 33553                           indf0	equ	0xFEF
 33554                           postinc0	equ	0xFEE
 33555                           plusw0	equ	0xFEB
 33556                           fsr0h	equ	0xFEA
 33557                           fsr0l	equ	0xFE9
 33558                           wreg	equ	0xFE8
 33559                           postinc1	equ	0xFE6
 33560                           postdec1	equ	0xFE5
 33561                           plusw1	equ	0xFE3
 33562                           fsr1h	equ	0xFE2
 33563                           fsr1l	equ	0xFE1
 33564                           indf2	equ	0xFDF
 33565                           postinc2	equ	0xFDE
 33566                           postdec2	equ	0xFDD
 33567                           plusw2	equ	0xFDB
 33568                           fsr2h	equ	0xFDA
 33569                           fsr2l	equ	0xFD9
 33570                           status	equ	0xFD8
 33571                           
 33572 ;; *************** function _SystemBlockingWaitMs *****************
 33573 ;; Defined at:
 33574 ;;		line 145 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 33575 ;; Parameters:    Size  Location     Type
 33576 ;;  ms              4    4[BANK0 ] unsigned long 
 33577 ;; Auto vars:     Size  Location     Type
 33578 ;;		None
 33579 ;; Return value:  Size  Location     Type
 33580 ;;                  1    wreg      void 
 33581 ;; Registers used:
 33582 ;;		wreg, status,2, status,0
 33583 ;; Tracked objects:
 33584 ;;		On entry : F/0
 33585 ;;		On exit  : F/0
 33586 ;;		Unchanged: 0/0
 33587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33588 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33590 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33591 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33592 ;;Total ram usage:        5 bytes
 33593 ;; Hardware stack levels used:    1
 33594 ;; Hardware stack levels required when called:    7
 33595 ;; This function calls:
 33596 ;;		Nothing
 33597 ;; This function is called by:
 33598 ;;		_RADIO_WriteMode
 33599 ;;		_RADIO_Reset
 33600 ;;		_RADIO_ReadRandom
 33601 ;; This function uses a non-reentrant model
 33602 ;;
 33603                           
 33604                           	psect	text173
 33605  007196                     __ptext173:
 33606                           	opt stack 0
 33607  007196                     _SystemBlockingWaitMs:
 33608                           	opt stack 19
 33609                           
 33610                           ; BSR set to: 0
 33611                           ;sw_timer.c: 147: while (ms > 0)
 33612                           
 33613                           ;incstack = 0
 33614  007196  D00E               	goto	l11688
 33615  007198                     l11684:
 33616                           
 33617                           ; BSR set to: 0
 33618                           ;sw_timer.c: 148: {
 33619                           ;sw_timer.c: 149: _delay((unsigned long)((1)*(16000000/4000.0)));
 33620  007198  0E06               	movlw	6
 33621  00719A  6F68               	movwf	??_SystemBlockingWaitMs& (0+255),b
 33622  00719C  0E30               	movlw	48
 33623  00719E                     u19827:
 33624  00719E  2EE8               	decfsz	wreg,f,c
 33625  0071A0  D7FE               	goto	u19827
 33626  0071A2  2F68               	decfsz	??_SystemBlockingWaitMs& (0+255),f,b
 33627  0071A4  D7FC               	goto	u19827
 33628  0071A6  D000               	nop2	
 33629                           
 33630                           ;sw_timer.c: 150: ms--;
 33631  0071A8  0100               	movlb	0	; () banked
 33632  0071AA  0764               	decf	SystemBlockingWaitMs@ms& (0+255),f,b
 33633  0071AC  0E00               	movlw	0
 33634  0071AE  5B65               	subwfb	(SystemBlockingWaitMs@ms+1)& (0+255),f,b
 33635  0071B0  5B66               	subwfb	(SystemBlockingWaitMs@ms+2)& (0+255),f,b
 33636  0071B2  5B67               	subwfb	(SystemBlockingWaitMs@ms+3)& (0+255),f,b
 33637  0071B4                     l11688:
 33638                           
 33639                           ; BSR set to: 0
 33640  0071B4  5164               	movf	SystemBlockingWaitMs@ms& (0+255),w,b
 33641  0071B6  1165               	iorwf	(SystemBlockingWaitMs@ms+1)& (0+255),w,b
 33642  0071B8  1166               	iorwf	(SystemBlockingWaitMs@ms+2)& (0+255),w,b
 33643  0071BA  1167               	iorwf	(SystemBlockingWaitMs@ms+3)& (0+255),w,b
 33644  0071BC  E1ED               	bnz	l11684
 33645                           
 33646                           ; BSR set to: 0
 33647  0071BE  0012               	return		;funcret
 33648  0071C0                     __end_of_SystemBlockingWaitMs:
 33649                           	opt stack 0
 33650                           tosu	equ	0xFFF
 33651                           tosh	equ	0xFFE
 33652                           tosl	equ	0xFFD
 33653                           pclath	equ	0xFFA
 33654                           tblptru	equ	0xFF8
 33655                           tblptrh	equ	0xFF7
 33656                           tblptrl	equ	0xFF6
 33657                           tablat	equ	0xFF5
 33658                           prodh	equ	0xFF4
 33659                           prodl	equ	0xFF3
 33660                           intcon	equ	0xFF2
 33661                           intcon2	equ	0xFF1
 33662                           intcon3	equ	0xFF0
 33663                           indf0	equ	0xFEF
 33664                           postinc0	equ	0xFEE
 33665                           plusw0	equ	0xFEB
 33666                           fsr0h	equ	0xFEA
 33667                           fsr0l	equ	0xFE9
 33668                           wreg	equ	0xFE8
 33669                           postinc1	equ	0xFE6
 33670                           postdec1	equ	0xFE5
 33671                           plusw1	equ	0xFE3
 33672                           fsr1h	equ	0xFE2
 33673                           fsr1l	equ	0xFE1
 33674                           indf2	equ	0xFDF
 33675                           postinc2	equ	0xFDE
 33676                           postdec2	equ	0xFDD
 33677                           plusw2	equ	0xFDB
 33678                           fsr2h	equ	0xFDA
 33679                           fsr2l	equ	0xFD9
 33680                           status	equ	0xFD8
 33681                           
 33682 ;; *************** function _HALResetPinOutputValue *****************
 33683 ;; Defined at:
 33684 ;;		line 55 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33685 ;; Parameters:    Size  Location     Type
 33686 ;;  value           1    wreg     unsigned char 
 33687 ;; Auto vars:     Size  Location     Type
 33688 ;;  value           1    4[BANK0 ] unsigned char 
 33689 ;; Return value:  Size  Location     Type
 33690 ;;                  1    wreg      void 
 33691 ;; Registers used:
 33692 ;;		wreg, status,2, status,0
 33693 ;; Tracked objects:
 33694 ;;		On entry : E/1
 33695 ;;		On exit  : F/0
 33696 ;;		Unchanged: 0/0
 33697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33699 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33701 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33702 ;;Total ram usage:        1 bytes
 33703 ;; Hardware stack levels used:    1
 33704 ;; Hardware stack levels required when called:    7
 33705 ;; This function calls:
 33706 ;;		Nothing
 33707 ;; This function is called by:
 33708 ;;		_RADIO_Reset
 33709 ;; This function uses a non-reentrant model
 33710 ;;
 33711                           
 33712                           	psect	text174
 33713  007652                     __ptext174:
 33714                           	opt stack 0
 33715  007652                     _HALResetPinOutputValue:
 33716                           	opt stack 20
 33717                           
 33718                           ; BSR set to: 0
 33719                           ;incstack = 0
 33720                           ;HALResetPinOutputValue@value stored from wreg
 33721  007652  0100               	movlb	0	; () banked
 33722  007654  6F64               	movwf	HALResetPinOutputValue@value& (0+255),b
 33723                           
 33724                           ;radio_driver_hal.c: 57: if (value == 0)
 33725  007656  5164               	movf	HALResetPinOutputValue@value& (0+255),w,b
 33726  007658  E102               	bnz	l13540
 33727                           
 33728                           ; BSR set to: 0
 33729                           
 33730                           ;radio_driver_hal.c: 58: do { LATC2 = 0; } while(0);
 33731  00765A  948B               	bcf	3979,2,c	;volatile
 33732  00765C  0012               	return	
 33733  00765E                     l13540:
 33734                           
 33735                           ; BSR set to: 0
 33736                           ;radio_driver_hal.c: 59: else if (value == 1)
 33737  00765E  0564               	decf	HALResetPinOutputValue@value& (0+255),w,b
 33738  007660  B4D8               	btfsc	status,2,c
 33739                           
 33740                           ; BSR set to: 0
 33741                           
 33742                           ;radio_driver_hal.c: 60: do { LATC2 = 1; } while(0);
 33743  007662  848B               	bsf	3979,2,c	;volatile
 33744                           
 33745                           ; BSR set to: 0
 33746  007664  0012               	return		;funcret
 33747  007666                     __end_of_HALResetPinOutputValue:
 33748                           	opt stack 0
 33749                           tosu	equ	0xFFF
 33750                           tosh	equ	0xFFE
 33751                           tosl	equ	0xFFD
 33752                           pclath	equ	0xFFA
 33753                           tblptru	equ	0xFF8
 33754                           tblptrh	equ	0xFF7
 33755                           tblptrl	equ	0xFF6
 33756                           tablat	equ	0xFF5
 33757                           prodh	equ	0xFF4
 33758                           prodl	equ	0xFF3
 33759                           intcon	equ	0xFF2
 33760                           intcon2	equ	0xFF1
 33761                           intcon3	equ	0xFF0
 33762                           indf0	equ	0xFEF
 33763                           postinc0	equ	0xFEE
 33764                           plusw0	equ	0xFEB
 33765                           fsr0h	equ	0xFEA
 33766                           fsr0l	equ	0xFE9
 33767                           wreg	equ	0xFE8
 33768                           postinc1	equ	0xFE6
 33769                           postdec1	equ	0xFE5
 33770                           plusw1	equ	0xFE3
 33771                           fsr1h	equ	0xFE2
 33772                           fsr1l	equ	0xFE1
 33773                           indf2	equ	0xFDF
 33774                           postinc2	equ	0xFDE
 33775                           postdec2	equ	0xFDD
 33776                           plusw2	equ	0xFDB
 33777                           fsr2h	equ	0xFDA
 33778                           fsr2l	equ	0xFD9
 33779                           status	equ	0xFD8
 33780                           
 33781 ;; *************** function _HALResetPinMakeOutput *****************
 33782 ;; Defined at:
 33783 ;;		line 45 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33784 ;; Parameters:    Size  Location     Type
 33785 ;;		None
 33786 ;; Auto vars:     Size  Location     Type
 33787 ;;		None
 33788 ;; Return value:  Size  Location     Type
 33789 ;;                  1    wreg      void 
 33790 ;; Registers used:
 33791 ;;		None
 33792 ;; Tracked objects:
 33793 ;;		On entry : E/1
 33794 ;;		On exit  : E/0
 33795 ;;		Unchanged: E/0
 33796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33801 ;;Total ram usage:        0 bytes
 33802 ;; Hardware stack levels used:    1
 33803 ;; Hardware stack levels required when called:    7
 33804 ;; This function calls:
 33805 ;;		Nothing
 33806 ;; This function is called by:
 33807 ;;		_RADIO_Reset
 33808 ;; This function uses a non-reentrant model
 33809 ;;
 33810                           
 33811                           	psect	text175
 33812  007806                     __ptext175:
 33813                           	opt stack 0
 33814  007806                     _HALResetPinMakeOutput:
 33815                           	opt stack 20
 33816                           
 33817                           ; BSR set to: 0
 33818                           ;incstack = 0
 33819                           ;radio_driver_hal.c: 47: do { TRISC2 = 0; } while(0);
 33820  007806  9494               	bcf	3988,2,c	;volatile
 33821  007808  0012               	return		;funcret
 33822  00780A                     __end_of_HALResetPinMakeOutput:
 33823                           	opt stack 0
 33824                           tosu	equ	0xFFF
 33825                           tosh	equ	0xFFE
 33826                           tosl	equ	0xFFD
 33827                           pclath	equ	0xFFA
 33828                           tblptru	equ	0xFF8
 33829                           tblptrh	equ	0xFF7
 33830                           tblptrl	equ	0xFF6
 33831                           tablat	equ	0xFF5
 33832                           prodh	equ	0xFF4
 33833                           prodl	equ	0xFF3
 33834                           intcon	equ	0xFF2
 33835                           intcon2	equ	0xFF1
 33836                           intcon3	equ	0xFF0
 33837                           indf0	equ	0xFEF
 33838                           postinc0	equ	0xFEE
 33839                           plusw0	equ	0xFEB
 33840                           fsr0h	equ	0xFEA
 33841                           fsr0l	equ	0xFE9
 33842                           wreg	equ	0xFE8
 33843                           postinc1	equ	0xFE6
 33844                           postdec1	equ	0xFE5
 33845                           plusw1	equ	0xFE3
 33846                           fsr1h	equ	0xFE2
 33847                           fsr1l	equ	0xFE1
 33848                           indf2	equ	0xFDF
 33849                           postinc2	equ	0xFDE
 33850                           postdec2	equ	0xFDD
 33851                           plusw2	equ	0xFDB
 33852                           fsr2h	equ	0xFDA
 33853                           fsr2l	equ	0xFD9
 33854                           status	equ	0xFD8
 33855                           
 33856 ;; *************** function _HALResetPinMakeInput *****************
 33857 ;; Defined at:
 33858 ;;		line 50 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33859 ;; Parameters:    Size  Location     Type
 33860 ;;		None
 33861 ;; Auto vars:     Size  Location     Type
 33862 ;;		None
 33863 ;; Return value:  Size  Location     Type
 33864 ;;                  1    wreg      void 
 33865 ;; Registers used:
 33866 ;;		None
 33867 ;; Tracked objects:
 33868 ;;		On entry : F/0
 33869 ;;		On exit  : F/0
 33870 ;;		Unchanged: F/0
 33871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33876 ;;Total ram usage:        0 bytes
 33877 ;; Hardware stack levels used:    1
 33878 ;; Hardware stack levels required when called:    7
 33879 ;; This function calls:
 33880 ;;		Nothing
 33881 ;; This function is called by:
 33882 ;;		_RADIO_Reset
 33883 ;; This function uses a non-reentrant model
 33884 ;;
 33885                           
 33886                           	psect	text176
 33887  00780A                     __ptext176:
 33888                           	opt stack 0
 33889  00780A                     _HALResetPinMakeInput:
 33890                           	opt stack 20
 33891                           
 33892                           ; BSR set to: 0
 33893                           
 33894                           ;incstack = 0
 33895                           ;radio_driver_hal.c: 52: do { TRISC2 = 1; } while(0);
 33896  00780A  8494               	bsf	3988,2,c	;volatile
 33897                           
 33898                           ; BSR set to: 0
 33899  00780C  0012               	return		;funcret
 33900  00780E                     __end_of_HALResetPinMakeInput:
 33901                           	opt stack 0
 33902                           tosu	equ	0xFFF
 33903                           tosh	equ	0xFFE
 33904                           tosl	equ	0xFFD
 33905                           pclath	equ	0xFFA
 33906                           tblptru	equ	0xFF8
 33907                           tblptrh	equ	0xFF7
 33908                           tblptrl	equ	0xFF6
 33909                           tablat	equ	0xFF5
 33910                           prodh	equ	0xFF4
 33911                           prodl	equ	0xFF3
 33912                           intcon	equ	0xFF2
 33913                           intcon2	equ	0xFF1
 33914                           intcon3	equ	0xFF0
 33915                           indf0	equ	0xFEF
 33916                           postinc0	equ	0xFEE
 33917                           plusw0	equ	0xFEB
 33918                           fsr0h	equ	0xFEA
 33919                           fsr0l	equ	0xFE9
 33920                           wreg	equ	0xFE8
 33921                           postinc1	equ	0xFE6
 33922                           postdec1	equ	0xFE5
 33923                           plusw1	equ	0xFE3
 33924                           fsr1h	equ	0xFE2
 33925                           fsr1l	equ	0xFE1
 33926                           indf2	equ	0xFDF
 33927                           postinc2	equ	0xFDE
 33928                           postdec2	equ	0xFDD
 33929                           plusw2	equ	0xFDB
 33930                           fsr2h	equ	0xFDA
 33931                           fsr2l	equ	0xFD9
 33932                           status	equ	0xFD8
 33933                           
 33934 ;; *************** function _LORAWAN_LinkCheckConfigure *****************
 33935 ;; Defined at:
 33936 ;;		line 755 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 33937 ;; Parameters:    Size  Location     Type
 33938 ;;  period          2   52[BANK0 ] unsigned int 
 33939 ;; Auto vars:     Size  Location     Type
 33940 ;;  iCtr            1   66[BANK0 ] unsigned char 
 33941 ;; Return value:  Size  Location     Type
 33942 ;;                  1    wreg      void 
 33943 ;; Registers used:
 33944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 33945 ;; Tracked objects:
 33946 ;;		On entry : F/0
 33947 ;;		On exit  : D/0
 33948 ;;		Unchanged: 0/0
 33949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33950 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33951 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33952 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33953 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33954 ;;Total ram usage:       15 bytes
 33955 ;; Hardware stack levels used:    1
 33956 ;; Hardware stack levels required when called:   11
 33957 ;; This function calls:
 33958 ;;		_SwTimerSetTimeout
 33959 ;;		_SwTimerStart
 33960 ;;		_SwTimerStop
 33961 ;;		___lldiv
 33962 ;; This function is called by:
 33963 ;;		_LORAWAN_Reset
 33964 ;; This function uses a non-reentrant model
 33965 ;;
 33966                           
 33967                           	psect	text177
 33968  00371C                     __ptext177:
 33969                           	opt stack 0
 33970  00371C                     _LORAWAN_LinkCheckConfigure:
 33971                           	opt stack 17
 33972                           
 33973                           ; BSR set to: 0
 33974                           ;lorawan.c: 757: uint8_t iCtr;
 33975                           ;lorawan.c: 759: loRa.periodForLinkCheck = period * 1000UL;
 33976                           
 33977                           ; BSR set to: 0
 33978                           ;incstack = 0
 33979  00371C  5194               	movf	LORAWAN_LinkCheckConfigure@period& (0+255),w,b
 33980  00371E  6F96               	movwf	??_LORAWAN_LinkCheckConfigure& (0+255),b
 33981  003720  5195               	movf	(LORAWAN_LinkCheckConfigure@period+1)& (0+255),w,b
 33982  003722  6F97               	movwf	(??_LORAWAN_LinkCheckConfigure+1)& (0+255),b
 33983  003724  6B98               	clrf	(??_LORAWAN_LinkCheckConfigure+2)& (0+255),b
 33984  003726  6B99               	clrf	(??_LORAWAN_LinkCheckConfigure+3)& (0+255),b
 33985  003728  0EE8               	movlw	232
 33986  00372A  0396               	mulwf	??_LORAWAN_LinkCheckConfigure& (0+255),b
 33987  00372C  CFF3 F09A          	movff	prodl,??_LORAWAN_LinkCheckConfigure+4
 33988  003730  CFF4 F09B          	movff	prodh,??_LORAWAN_LinkCheckConfigure+5
 33989  003734  6B9C               	clrf	(??_LORAWAN_LinkCheckConfigure+6)& (0+255),b
 33990  003736  6B9D               	clrf	(??_LORAWAN_LinkCheckConfigure+7)& (0+255),b
 33991  003738  0397               	mulwf	(??_LORAWAN_LinkCheckConfigure+1)& (0+255),b
 33992  00373A  50F3               	movf	prodl,w,c
 33993  00373C  279B               	addwf	(??_LORAWAN_LinkCheckConfigure+5)& (0+255),f,b
 33994  00373E  50F4               	movf	prodh,w,c
 33995  003740  239C               	addwfc	(??_LORAWAN_LinkCheckConfigure+6)& (0+255),f,b
 33996  003742  0E00               	movlw	0
 33997  003744  239D               	addwfc	(??_LORAWAN_LinkCheckConfigure+7)& (0+255),f,b
 33998  003746  0E03               	movlw	3
 33999  003748  0396               	mulwf	??_LORAWAN_LinkCheckConfigure& (0+255),b
 34000  00374A  50F3               	movf	prodl,w,c
 34001  00374C  279B               	addwf	(??_LORAWAN_LinkCheckConfigure+5)& (0+255),f,b
 34002  00374E  50F4               	movf	prodh,w,c
 34003  003750  239C               	addwfc	(??_LORAWAN_LinkCheckConfigure+6)& (0+255),f,b
 34004  003752  0E00               	movlw	0
 34005  003754  239D               	addwfc	(??_LORAWAN_LinkCheckConfigure+7)& (0+255),f,b
 34006  003756  0EE8               	movlw	232
 34007  003758  0398               	mulwf	(??_LORAWAN_LinkCheckConfigure+2)& (0+255),b
 34008  00375A  50F3               	movf	prodl,w,c
 34009  00375C  279C               	addwf	(??_LORAWAN_LinkCheckConfigure+6)& (0+255),f,b
 34010  00375E  50F4               	movf	prodh,w,c
 34011  003760  239D               	addwfc	(??_LORAWAN_LinkCheckConfigure+7)& (0+255),f,b
 34012  003762  0E03               	movlw	3
 34013  003764  0397               	mulwf	(??_LORAWAN_LinkCheckConfigure+1)& (0+255),b
 34014  003766  50F3               	movf	prodl,w,c
 34015  003768  279C               	addwf	(??_LORAWAN_LinkCheckConfigure+6)& (0+255),f,b
 34016  00376A  50F4               	movf	prodh,w,c
 34017  00376C  239D               	addwfc	(??_LORAWAN_LinkCheckConfigure+7)& (0+255),f,b
 34018  00376E  0E00               	movlw	0
 34019  003770  0396               	mulwf	??_LORAWAN_LinkCheckConfigure& (0+255),b
 34020  003772  50F3               	movf	prodl,w,c
 34021  003774  279C               	addwf	(??_LORAWAN_LinkCheckConfigure+6)& (0+255),f,b
 34022  003776  50F4               	movf	prodh,w,c
 34023  003778  239D               	addwfc	(??_LORAWAN_LinkCheckConfigure+7)& (0+255),f,b
 34024  00377A  0EE8               	movlw	232
 34025  00377C  0399               	mulwf	(??_LORAWAN_LinkCheckConfigure+3)& (0+255),b
 34026  00377E  50F3               	movf	prodl,w,c
 34027  003780  279D               	addwf	(??_LORAWAN_LinkCheckConfigure+7)& (0+255),f,b
 34028  003782  0E03               	movlw	3
 34029  003784  0398               	mulwf	(??_LORAWAN_LinkCheckConfigure+2)& (0+255),b
 34030  003786  50F3               	movf	prodl,w,c
 34031  003788  279D               	addwf	(??_LORAWAN_LinkCheckConfigure+7)& (0+255),f,b
 34032  00378A  0E00               	movlw	0
 34033  00378C  0397               	mulwf	(??_LORAWAN_LinkCheckConfigure+1)& (0+255),b
 34034  00378E  50F3               	movf	prodl,w,c
 34035  003790  279D               	addwf	(??_LORAWAN_LinkCheckConfigure+7)& (0+255),f,b
 34036  003792  0E00               	movlw	0
 34037  003794  0396               	mulwf	??_LORAWAN_LinkCheckConfigure& (0+255),b
 34038  003796  50F3               	movf	prodl,w,c
 34039  003798  279D               	addwf	(??_LORAWAN_LinkCheckConfigure+7)& (0+255),f,b
 34040  00379A  C09A  F2CC         	movff	??_LORAWAN_LinkCheckConfigure+4,_loRa+204
 34041  00379E  C09B  F2CD         	movff	??_LORAWAN_LinkCheckConfigure+5,_loRa+205
 34042  0037A2  C09C  F2CE         	movff	??_LORAWAN_LinkCheckConfigure+6,_loRa+206
 34043  0037A6  C09D  F2CF         	movff	??_LORAWAN_LinkCheckConfigure+7,_loRa+207
 34044                           
 34045                           ; BSR set to: 0
 34046                           ;lorawan.c: 761: if (period == 0)
 34047  0037AA  5194               	movf	LORAWAN_LinkCheckConfigure@period& (0+255),w,b
 34048  0037AC  1195               	iorwf	(LORAWAN_LinkCheckConfigure@period+1)& (0+255),w,b
 34049  0037AE  E127               	bnz	l1942
 34050                           
 34051                           ; BSR set to: 0
 34052                           ;lorawan.c: 762: {
 34053                           ;lorawan.c: 763: SwTimerStop(loRa.linkCheckTimerId);
 34054  0037B0  0102               	movlb	2	; () banked
 34055  0037B2  51E7               	movf	(_loRa+231)& (0+255),w,b
 34056  0037B4  EC7F  F03A         	call	_SwTimerStop
 34057                           
 34058                           ; BSR set to: 0
 34059                           ;lorawan.c: 764: loRa.macStatus.linkCheck = 0;
 34060  0037B8  0102               	movlb	2	; () banked
 34061  0037BA  9503               	bcf	(_loRa+3)& (0+255),2,b
 34062                           
 34063                           ; BSR set to: 2
 34064                           ;lorawan.c: 765: for(iCtr = 0; iCtr < loRa.crtMacCmdIndex; iCtr ++)
 34065  0037BC  0100               	movlb	0	; () banked
 34066  0037BE  6BA2               	clrf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),b
 34067  0037C0  D018               	goto	l14832
 34068  0037C2                     l14824:
 34069                           
 34070                           ; BSR set to: 0
 34071                           ;lorawan.c: 766: {
 34072                           ;lorawan.c: 767: if(loRa.macCommands[iCtr].receivedCid == LINK_CHECK_CID)
 34073  0037C2  51A2               	movf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 34074  0037C4  0D02               	mullw	2
 34075  0037C6  0EA8               	movlw	low (_loRa+168)
 34076  0037C8  24F3               	addwf	prodl,w,c
 34077  0037CA  6ED9               	movwf	fsr2l,c
 34078  0037CC  0E02               	movlw	high (_loRa+168)
 34079  0037CE  20F4               	addwfc	prodh,w,c
 34080  0037D0  6EDA               	movwf	fsr2h,c
 34081  0037D2  0E02               	movlw	2
 34082  0037D4  18DE               	xorwf	postinc2,w,c
 34083  0037D6  E10B               	bnz	l14830
 34084                           
 34085                           ; BSR set to: 0
 34086                           ;lorawan.c: 768: {
 34087                           ;lorawan.c: 771: loRa.macCommands[iCtr].receivedCid = 0xFF;
 34088  0037D8  51A2               	movf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 34089  0037DA  0D02               	mullw	2
 34090  0037DC  0EA8               	movlw	low (_loRa+168)
 34091  0037DE  24F3               	addwf	prodl,w,c
 34092  0037E0  6ED9               	movwf	fsr2l,c
 34093  0037E2  0E02               	movlw	high (_loRa+168)
 34094  0037E4  20F4               	addwfc	prodh,w,c
 34095  0037E6  6EDA               	movwf	fsr2h,c
 34096  0037E8  68DF               	setf	indf2,c
 34097                           
 34098                           ; BSR set to: 0
 34099                           ;lorawan.c: 772: loRa.crtMacCmdIndex --;
 34100  0037EA  0102               	movlb	2	; () banked
 34101  0037EC  07A7               	decf	(_loRa+167)& (0+255),f,b
 34102  0037EE                     l14830:
 34103  0037EE  0100               	movlb	0	; () banked
 34104  0037F0  2BA2               	incf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),f,b
 34105  0037F2                     l14832:
 34106                           
 34107                           ; BSR set to: 0
 34108  0037F2  0102               	movlb	2	; () banked
 34109  0037F4  51A7               	movf	(_loRa+167)& (0+255),w,b
 34110  0037F6  0100               	movlb	0	; () banked
 34111  0037F8  5DA2               	subwf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 34112  0037FA  E3E3               	bnc	l14824
 34113  0037FC  0012               	return	
 34114  0037FE                     l1942:
 34115                           
 34116                           ; BSR set to: 0
 34117                           ;lorawan.c: 776: else
 34118                           ;lorawan.c: 777: {
 34119                           ;lorawan.c: 778: loRa.macStatus.linkCheck = 1;
 34120  0037FE  0102               	movlb	2	; () banked
 34121  003800  8503               	bsf	(_loRa+3)& (0+255),2,b
 34122                           
 34123                           ;lorawan.c: 781: if (loRa.macStatus.networkJoined == 1)
 34124  003802  A902               	btfss	(_loRa+2)& (0+255),4,b
 34125  003804  0012               	return	
 34126                           
 34127                           ; BSR set to: 2
 34128                           ;lorawan.c: 782: {
 34129                           ;lorawan.c: 783: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 0
      +                          x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32_
      +                          t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
 34130  003806  51CF               	movf	(_loRa+207)& (0+255),w,b
 34131  003808  E106               	bnz	u17560
 34132  00380A  29CC               	incf	(_loRa+204)& (0+255),w,b
 34133  00380C  0EFF               	movlw	255
 34134  00380E  59CD               	subwfb	(_loRa+205)& (0+255),w,b
 34135  003810  0E0F               	movlw	15
 34136  003812  59CE               	subwfb	(_loRa+206)& (0+255),w,b
 34137  003814  E319               	bnc	l14838
 34138  003816                     u17560:
 34139                           
 34140                           ; BSR set to: 2
 34141  003816  C2CC  F064         	movff	_loRa+204,___lldiv@dividend
 34142  00381A  C2CD  F065         	movff	_loRa+205,___lldiv@dividend+1
 34143  00381E  C2CE  F066         	movff	_loRa+206,___lldiv@dividend+2
 34144  003822  C2CF  F067         	movff	_loRa+207,___lldiv@dividend+3
 34145  003826  0E7D               	movlw	125
 34146  003828  0100               	movlb	0	; () banked
 34147  00382A  6F68               	movwf	___lldiv@divisor& (0+255),b
 34148  00382C  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 34149  00382E  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 34150  003830  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 34151  003832  EC35  F030         	call	___lldiv	;wreg free
 34152  003836  0E0C               	movlw	12
 34153  003838                     u17575:
 34154  003838  90D8               	bcf	status,0,c
 34155  00383A  3764               	rlcf	?___lldiv& (0+255),f,b
 34156  00383C  3765               	rlcf	(?___lldiv+1)& (0+255),f,b
 34157  00383E  3766               	rlcf	(?___lldiv+2)& (0+255),f,b
 34158  003840  3767               	rlcf	(?___lldiv+3)& (0+255),f,b
 34159  003842  2EE8               	decfsz	wreg,f,c
 34160  003844  D7F9               	goto	u17575
 34161  003846  D020               	goto	L21
 34162  003848                     l14838:
 34163                           
 34164                           ; BSR set to: 2
 34165  003848  C2CC  F096         	movff	_loRa+204,??_LORAWAN_LinkCheckConfigure
 34166  00384C  C2CD  F097         	movff	_loRa+205,??_LORAWAN_LinkCheckConfigure+1
 34167  003850  C2CE  F098         	movff	_loRa+206,??_LORAWAN_LinkCheckConfigure+2
 34168  003854  C2CF  F099         	movff	_loRa+207,??_LORAWAN_LinkCheckConfigure+3
 34169  003858  0E0C               	movlw	12
 34170  00385A                     u17585:
 34171  00385A  90D8               	bcf	status,0,c
 34172  00385C  0100               	movlb	0	; () banked
 34173  00385E  3796               	rlcf	??_LORAWAN_LinkCheckConfigure& (0+255),f,b
 34174  003860  3797               	rlcf	(??_LORAWAN_LinkCheckConfigure+1)& (0+255),f,b
 34175  003862  3798               	rlcf	(??_LORAWAN_LinkCheckConfigure+2)& (0+255),f,b
 34176  003864  3799               	rlcf	(??_LORAWAN_LinkCheckConfigure+3)& (0+255),f,b
 34177  003866  2EE8               	decfsz	wreg,f,c
 34178  003868  D7F8               	goto	u17585
 34179  00386A  C096  F064         	movff	??_LORAWAN_LinkCheckConfigure,___lldiv@dividend
 34180  00386E  C097  F065         	movff	??_LORAWAN_LinkCheckConfigure+1,___lldiv@dividend+1
 34181  003872  C098  F066         	movff	??_LORAWAN_LinkCheckConfigure+2,___lldiv@dividend+2
 34182  003876  C099  F067         	movff	??_LORAWAN_LinkCheckConfigure+3,___lldiv@dividend+3
 34183  00387A  0E7D               	movlw	125
 34184  00387C  6F68               	movwf	___lldiv@divisor& (0+255),b
 34185  00387E  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 34186  003880  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 34187  003882  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 34188  003884  EC35  F030         	call	___lldiv	;wreg free
 34189  003888                     L21:
 34190  003888  C064  F09E         	movff	?___lldiv,_LORAWAN_LinkCheckConfigure$2993
 34191  00388C  C065  F09F         	movff	?___lldiv+1,_LORAWAN_LinkCheckConfigure$2993+1
 34192  003890  C066  F0A0         	movff	?___lldiv+2,_LORAWAN_LinkCheckConfigure$2993+2
 34193  003894  C067  F0A1         	movff	?___lldiv+3,_LORAWAN_LinkCheckConfigure$2993+3
 34194                           
 34195                           ; BSR set to: 0
 34196  003898  C09E  F071         	movff	_LORAWAN_LinkCheckConfigure$2993,SwTimerSetTimeout@timeout
 34197  00389C  C09F  F072         	movff	_LORAWAN_LinkCheckConfigure$2993+1,SwTimerSetTimeout@timeout+1
 34198  0038A0  C0A0  F073         	movff	_LORAWAN_LinkCheckConfigure$2993+2,SwTimerSetTimeout@timeout+2
 34199  0038A4  C0A1  F074         	movff	_LORAWAN_LinkCheckConfigure$2993+3,SwTimerSetTimeout@timeout+3
 34200  0038A8  0102               	movlb	2	; () banked
 34201  0038AA  51E7               	movf	(_loRa+231)& (0+255),w,b
 34202  0038AC  EC44  F036         	call	_SwTimerSetTimeout
 34203                           
 34204                           ; BSR set to: 0
 34205                           ;lorawan.c: 784: SwTimerStart(loRa.linkCheckTimerId);
 34206  0038B0  0102               	movlb	2	; () banked
 34207  0038B2  51E7               	movf	(_loRa+231)& (0+255),w,b
 34208  0038B4  EF35  F02E         	goto	_SwTimerStart
 34209  0038B8                     __end_of_LORAWAN_LinkCheckConfigure:
 34210                           	opt stack 0
 34211                           tosu	equ	0xFFF
 34212                           tosh	equ	0xFFE
 34213                           tosl	equ	0xFFD
 34214                           pclath	equ	0xFFA
 34215                           tblptru	equ	0xFF8
 34216                           tblptrh	equ	0xFF7
 34217                           tblptrl	equ	0xFF6
 34218                           tablat	equ	0xFF5
 34219                           prodh	equ	0xFF4
 34220                           prodl	equ	0xFF3
 34221                           intcon	equ	0xFF2
 34222                           intcon2	equ	0xFF1
 34223                           intcon3	equ	0xFF0
 34224                           indf0	equ	0xFEF
 34225                           postinc0	equ	0xFEE
 34226                           plusw0	equ	0xFEB
 34227                           fsr0h	equ	0xFEA
 34228                           fsr0l	equ	0xFE9
 34229                           wreg	equ	0xFE8
 34230                           postinc1	equ	0xFE6
 34231                           postdec1	equ	0xFE5
 34232                           plusw1	equ	0xFE3
 34233                           fsr1h	equ	0xFE2
 34234                           fsr1l	equ	0xFE1
 34235                           indf2	equ	0xFDF
 34236                           postinc2	equ	0xFDE
 34237                           postdec2	equ	0xFDD
 34238                           plusw2	equ	0xFDB
 34239                           fsr2h	equ	0xFDA
 34240                           fsr2l	equ	0xFD9
 34241                           status	equ	0xFD8
 34242                           
 34243 ;; *************** function ___lldiv *****************
 34244 ;; Defined at:
 34245 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
 34246 ;; Parameters:    Size  Location     Type
 34247 ;;  dividend        4    4[BANK0 ] unsigned long 
 34248 ;;  divisor         4    8[BANK0 ] unsigned long 
 34249 ;; Auto vars:     Size  Location     Type
 34250 ;;  quotient        4   12[BANK0 ] unsigned long 
 34251 ;;  counter         1   16[BANK0 ] unsigned char 
 34252 ;; Return value:  Size  Location     Type
 34253 ;;                  4    4[BANK0 ] unsigned long 
 34254 ;; Registers used:
 34255 ;;		wreg, status,2, status,0
 34256 ;; Tracked objects:
 34257 ;;		On entry : F/0
 34258 ;;		On exit  : F/0
 34259 ;;		Unchanged: 0/0
 34260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 34261 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34262 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34264 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34265 ;;Total ram usage:       13 bytes
 34266 ;; Hardware stack levels used:    1
 34267 ;; Hardware stack levels required when called:    7
 34268 ;; This function calls:
 34269 ;;		Nothing
 34270 ;; This function is called by:
 34271 ;;		_RADIO_WriteFrequency
 34272 ;;		_RADIO_WriteFSKFrequencyDeviation
 34273 ;;		_RADIO_WriteFSKBitRate
 34274 ;;		_RADIO_Transmit
 34275 ;;		_RADIO_ReceiveStart
 34276 ;;		_LORAWAN_TxDone
 34277 ;;		_LORAWAN_RxTimeout
 34278 ;;		_StartReTxTimer
 34279 ;;		_DutyCycleCallback
 34280 ;;		_LORAWAN_LinkCheckConfigure
 34281 ;;		_LORAWAN_LinkCheckCallback
 34282 ;;		_UpdateRetransmissionAckTimeoutState
 34283 ;;		_UpdateJoinSuccessState
 34284 ;; This function uses a non-reentrant model
 34285 ;;
 34286                           
 34287                           	psect	text178
 34288  00606A                     __ptext178:
 34289                           	opt stack 0
 34290  00606A                     ___lldiv:
 34291                           	opt stack 20
 34292                           
 34293                           ; BSR set to: 0
 34294                           
 34295                           ;incstack = 0
 34296  00606A  6B6C               	clrf	___lldiv@quotient& (0+255),b
 34297  00606C  6B6D               	clrf	(___lldiv@quotient+1)& (0+255),b
 34298  00606E  6B6E               	clrf	(___lldiv@quotient+2)& (0+255),b
 34299  006070  6B6F               	clrf	(___lldiv@quotient+3)& (0+255),b
 34300                           
 34301                           ; BSR set to: 0
 34302  006072  5168               	movf	___lldiv@divisor& (0+255),w,b
 34303  006074  1169               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 34304  006076  116A               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 34305  006078  116B               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 34306  00607A  E029               	bz	l2920
 34307                           
 34308                           ; BSR set to: 0
 34309  00607C  0E01               	movlw	1
 34310  00607E  6F70               	movwf	___lldiv@counter& (0+255),b
 34311  006080  D006               	goto	l11836
 34312  006082                     l11834:
 34313                           
 34314                           ; BSR set to: 0
 34315  006082  90D8               	bcf	status,0,c
 34316  006084  3768               	rlcf	___lldiv@divisor& (0+255),f,b
 34317  006086  3769               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 34318  006088  376A               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 34319  00608A  376B               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 34320  00608C  2B70               	incf	___lldiv@counter& (0+255),f,b
 34321  00608E                     l11836:
 34322                           
 34323                           ; BSR set to: 0
 34324  00608E  AF6B               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 34325  006090  D7F8               	goto	l11834
 34326  006092                     l11838:
 34327                           
 34328                           ; BSR set to: 0
 34329  006092  90D8               	bcf	status,0,c
 34330  006094  376C               	rlcf	___lldiv@quotient& (0+255),f,b
 34331  006096  376D               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 34332  006098  376E               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 34333  00609A  376F               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 34334                           
 34335                           ; BSR set to: 0
 34336  00609C  5168               	movf	___lldiv@divisor& (0+255),w,b
 34337  00609E  5D64               	subwf	___lldiv@dividend& (0+255),w,b
 34338  0060A0  5169               	movf	(___lldiv@divisor+1)& (0+255),w,b
 34339  0060A2  5965               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 34340  0060A4  516A               	movf	(___lldiv@divisor+2)& (0+255),w,b
 34341  0060A6  5966               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 34342  0060A8  516B               	movf	(___lldiv@divisor+3)& (0+255),w,b
 34343  0060AA  5967               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 34344  0060AC  E309               	bnc	l11846
 34345                           
 34346                           ; BSR set to: 0
 34347  0060AE  5168               	movf	___lldiv@divisor& (0+255),w,b
 34348  0060B0  5F64               	subwf	___lldiv@dividend& (0+255),f,b
 34349  0060B2  5169               	movf	(___lldiv@divisor+1)& (0+255),w,b
 34350  0060B4  5B65               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 34351  0060B6  516A               	movf	(___lldiv@divisor+2)& (0+255),w,b
 34352  0060B8  5B66               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 34353  0060BA  516B               	movf	(___lldiv@divisor+3)& (0+255),w,b
 34354  0060BC  5B67               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 34355                           
 34356                           ; BSR set to: 0
 34357  0060BE  816C               	bsf	___lldiv@quotient& (0+255),0,b
 34358  0060C0                     l11846:
 34359                           
 34360                           ; BSR set to: 0
 34361  0060C0  90D8               	bcf	status,0,c
 34362  0060C2  336B               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 34363  0060C4  336A               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 34364  0060C6  3369               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 34365  0060C8  3368               	rrcf	___lldiv@divisor& (0+255),f,b
 34366                           
 34367                           ; BSR set to: 0
 34368  0060CA  2F70               	decfsz	___lldiv@counter& (0+255),f,b
 34369  0060CC  D7E2               	goto	l11838
 34370  0060CE                     l2920:
 34371                           
 34372                           ; BSR set to: 0
 34373  0060CE  C06C  F064         	movff	___lldiv@quotient,?___lldiv
 34374  0060D2  C06D  F065         	movff	___lldiv@quotient+1,?___lldiv+1
 34375  0060D6  C06E  F066         	movff	___lldiv@quotient+2,?___lldiv+2
 34376  0060DA  C06F  F067         	movff	___lldiv@quotient+3,?___lldiv+3
 34377                           
 34378                           ; BSR set to: 0
 34379  0060DE  0012               	return		;funcret
 34380  0060E0                     __end_of___lldiv:
 34381                           	opt stack 0
 34382                           tosu	equ	0xFFF
 34383                           tosh	equ	0xFFE
 34384                           tosl	equ	0xFFD
 34385                           pclath	equ	0xFFA
 34386                           tblptru	equ	0xFF8
 34387                           tblptrh	equ	0xFF7
 34388                           tblptrl	equ	0xFF6
 34389                           tablat	equ	0xFF5
 34390                           prodh	equ	0xFF4
 34391                           prodl	equ	0xFF3
 34392                           intcon	equ	0xFF2
 34393                           intcon2	equ	0xFF1
 34394                           intcon3	equ	0xFF0
 34395                           indf0	equ	0xFEF
 34396                           postinc0	equ	0xFEE
 34397                           plusw0	equ	0xFEB
 34398                           fsr0h	equ	0xFEA
 34399                           fsr0l	equ	0xFE9
 34400                           wreg	equ	0xFE8
 34401                           postinc1	equ	0xFE6
 34402                           postdec1	equ	0xFE5
 34403                           plusw1	equ	0xFE3
 34404                           fsr1h	equ	0xFE2
 34405                           fsr1l	equ	0xFE1
 34406                           indf2	equ	0xFDF
 34407                           postinc2	equ	0xFDE
 34408                           postdec2	equ	0xFDD
 34409                           plusw2	equ	0xFDB
 34410                           fsr2h	equ	0xFDA
 34411                           fsr2l	equ	0xFD9
 34412                           status	equ	0xFD8
 34413                           
 34414 ;; *************** function _SwTimerStop *****************
 34415 ;; Defined at:
 34416 ;;		line 233 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34417 ;; Parameters:    Size  Location     Type
 34418 ;;  timerId         1    wreg     unsigned char 
 34419 ;; Auto vars:     Size  Location     Type
 34420 ;;  timerId         1    4[BANK0 ] unsigned char 
 34421 ;; Return value:  Size  Location     Type
 34422 ;;                  1    wreg      void 
 34423 ;; Registers used:
 34424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 34425 ;; Tracked objects:
 34426 ;;		On entry : C/1
 34427 ;;		On exit  : F/0
 34428 ;;		Unchanged: 0/0
 34429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 34430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34431 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34433 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34434 ;;Total ram usage:        1 bytes
 34435 ;; Hardware stack levels used:    1
 34436 ;; Hardware stack levels required when called:    7
 34437 ;; This function calls:
 34438 ;;		Nothing
 34439 ;; This function is called by:
 34440 ;;		_RADIO_Init
 34441 ;;		_RADIO_Transmit
 34442 ;;		_RADIO_RxDone
 34443 ;;		_RADIO_FSKPayloadReady
 34444 ;;		_RADIO_RxTimeout
 34445 ;;		_RADIO_TxDone
 34446 ;;		_RADIO_FSKPacketSent
 34447 ;;		_RADIO_RxFSKTimeout
 34448 ;;		_LORAWAN_TxDone
 34449 ;;		_StopAllSoftwareTimers
 34450 ;;		_LORAWAN_LinkCheckConfigure
 34451 ;;		_LORAWAN_RxDone
 34452 ;; This function uses a non-reentrant model
 34453 ;;
 34454                           
 34455                           	psect	text179
 34456  0074FE                     __ptext179:
 34457                           	opt stack 0
 34458  0074FE                     _SwTimerStop:
 34459                           	opt stack 20
 34460                           
 34461                           ; BSR set to: 0
 34462                           ;incstack = 0
 34463                           ;SwTimerStop@timerId stored from wreg
 34464  0074FE  0100               	movlb	0	; () banked
 34465  007500  6F64               	movwf	SwTimerStop@timerId& (0+255),b
 34466                           
 34467                           ;sw_timer.c: 235: (INTCONbits.GIE = 0);
 34468  007502  9EF2               	bcf	intcon,7,c	;volatile
 34469                           
 34470                           ;sw_timer.c: 236: swTimers[timerId].running = 0;
 34471  007504  5164               	movf	SwTimerStop@timerId& (0+255),w,b
 34472  007506  0D08               	mullw	8
 34473  007508  0E04               	movlw	low (_swTimers+4)
 34474  00750A  24F3               	addwf	prodl,w,c
 34475  00750C  6ED9               	movwf	fsr2l,c
 34476  00750E  0E03               	movlw	high (_swTimers+4)
 34477  007510  20F4               	addwfc	prodh,w,c
 34478  007512  6EDA               	movwf	fsr2h,c
 34479  007514  6ADF               	clrf	indf2,c
 34480                           
 34481                           ; BSR set to: 0
 34482                           ;sw_timer.c: 237: (INTCONbits.GIE = 1);
 34483  007516  8EF2               	bsf	intcon,7,c	;volatile
 34484                           
 34485                           ; BSR set to: 0
 34486  007518  0C00               	retlw	0	;funcret
 34487  00751A                     __end_of_SwTimerStop:
 34488                           	opt stack 0
 34489                           tosu	equ	0xFFF
 34490                           tosh	equ	0xFFE
 34491                           tosl	equ	0xFFD
 34492                           pclath	equ	0xFFA
 34493                           tblptru	equ	0xFF8
 34494                           tblptrh	equ	0xFF7
 34495                           tblptrl	equ	0xFF6
 34496                           tablat	equ	0xFF5
 34497                           prodh	equ	0xFF4
 34498                           prodl	equ	0xFF3
 34499                           intcon	equ	0xFF2
 34500                           intcon2	equ	0xFF1
 34501                           intcon3	equ	0xFF0
 34502                           indf0	equ	0xFEF
 34503                           postinc0	equ	0xFEE
 34504                           plusw0	equ	0xFEB
 34505                           fsr0h	equ	0xFEA
 34506                           fsr0l	equ	0xFE9
 34507                           wreg	equ	0xFE8
 34508                           postinc1	equ	0xFE6
 34509                           postdec1	equ	0xFE5
 34510                           plusw1	equ	0xFE3
 34511                           fsr1h	equ	0xFE2
 34512                           fsr1l	equ	0xFE1
 34513                           indf2	equ	0xFDF
 34514                           postinc2	equ	0xFDE
 34515                           postdec2	equ	0xFDD
 34516                           plusw2	equ	0xFDB
 34517                           fsr2h	equ	0xFDA
 34518                           fsr2l	equ	0xFD9
 34519                           status	equ	0xFD8
 34520                           
 34521 ;; *************** function _SwTimerStart *****************
 34522 ;; Defined at:
 34523 ;;		line 218 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34524 ;; Parameters:    Size  Location     Type
 34525 ;;  timerId         1    wreg     unsigned char 
 34526 ;; Auto vars:     Size  Location     Type
 34527 ;;  timerId         1   51[BANK0 ] unsigned char 
 34528 ;;  ticksRemaini    4   47[BANK0 ] unsigned long 
 34529 ;; Return value:  Size  Location     Type
 34530 ;;                  1    wreg      void 
 34531 ;; Registers used:
 34532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34533 ;; Tracked objects:
 34534 ;;		On entry : C/2
 34535 ;;		On exit  : F/0
 34536 ;;		Unchanged: 0/0
 34537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 34538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34539 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34540 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34541 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34542 ;;Total ram usage:        9 bytes
 34543 ;; Hardware stack levels used:    1
 34544 ;; Hardware stack levels required when called:   10
 34545 ;; This function calls:
 34546 ;;		_SwTimersInterrupt
 34547 ;;		_TMR_OverrideRemaining
 34548 ;; This function is called by:
 34549 ;;		_RADIO_Transmit
 34550 ;;		_RADIO_ReceiveStart
 34551 ;;		_LORAWAN_TxDone
 34552 ;;		_LORAWAN_RxTimeout
 34553 ;;		_StartReTxTimer
 34554 ;;		_DutyCycleCallback
 34555 ;;		_LORAWAN_Join
 34556 ;;		_LORAWAN_LinkCheckConfigure
 34557 ;;		_LORAWAN_LinkCheckCallback
 34558 ;;		_UpdateRetransmissionAckTimeoutState
 34559 ;;		_UpdateJoinSuccessState
 34560 ;; This function uses a non-reentrant model
 34561 ;;
 34562                           
 34563                           	psect	text180
 34564  005C6A                     __ptext180:
 34565                           	opt stack 0
 34566  005C6A                     _SwTimerStart:
 34567                           	opt stack 17
 34568                           
 34569                           ; BSR set to: 0
 34570                           ;incstack = 0
 34571                           ;SwTimerStart@timerId stored from wreg
 34572  005C6A  0100               	movlb	0	; () banked
 34573  005C6C  6F93               	movwf	SwTimerStart@timerId& (0+255),b
 34574                           
 34575                           ;sw_timer.c: 220: uint32_t ticksRemaining;
 34576                           ;sw_timer.c: 222: (INTCONbits.GIE = 0);
 34577  005C6E  9EF2               	bcf	intcon,7,c	;volatile
 34578                           
 34579                           ;sw_timer.c: 223: ticksRemaining = SwTimersInterrupt();
 34580  005C70  ECD5  F025         	call	_SwTimersInterrupt	;wreg free
 34581  005C74  C07A  F08F         	movff	?_SwTimersInterrupt,SwTimerStart@ticksRemaining
 34582  005C78  C07B  F090         	movff	?_SwTimersInterrupt+1,SwTimerStart@ticksRemaining+1
 34583  005C7C  C07C  F091         	movff	?_SwTimersInterrupt+2,SwTimerStart@ticksRemaining+2
 34584  005C80  C07D  F092         	movff	?_SwTimersInterrupt+3,SwTimerStart@ticksRemaining+3
 34585                           
 34586                           ; BSR set to: 0
 34587                           ;sw_timer.c: 224: if (swTimers[timerId].ticksRemaining < ticksRemaining)
 34588  005C84  5193               	movf	SwTimerStart@timerId& (0+255),w,b
 34589  005C86  0D08               	mullw	8
 34590  005C88  0E00               	movlw	low _swTimers
 34591  005C8A  24F3               	addwf	prodl,w,c
 34592  005C8C  6ED9               	movwf	fsr2l,c
 34593  005C8E  0E03               	movlw	high _swTimers
 34594  005C90  20F4               	addwfc	prodh,w,c
 34595  005C92  6EDA               	movwf	fsr2h,c
 34596  005C94  518F               	movf	SwTimerStart@ticksRemaining& (0+255),w,b
 34597  005C96  5CDE               	subwf	postinc2,w,c
 34598  005C98  5190               	movf	(SwTimerStart@ticksRemaining+1)& (0+255),w,b
 34599  005C9A  58DE               	subwfb	postinc2,w,c
 34600  005C9C  5191               	movf	(SwTimerStart@ticksRemaining+2)& (0+255),w,b
 34601  005C9E  58DE               	subwfb	postinc2,w,c
 34602  005CA0  5192               	movf	(SwTimerStart@ticksRemaining+3)& (0+255),w,b
 34603  005CA2  58DE               	subwfb	postinc2,w,c
 34604  005CA4  E210               	bc	l12172
 34605                           
 34606                           ; BSR set to: 0
 34607                           ;sw_timer.c: 225: {
 34608                           ;sw_timer.c: 226: ticksRemaining = swTimers[timerId].ticksRemaining;
 34609  005CA6  5193               	movf	SwTimerStart@timerId& (0+255),w,b
 34610  005CA8  0D08               	mullw	8
 34611  005CAA  0E00               	movlw	low _swTimers
 34612  005CAC  24F3               	addwf	prodl,w,c
 34613  005CAE  6ED9               	movwf	fsr2l,c
 34614  005CB0  0E03               	movlw	high _swTimers
 34615  005CB2  20F4               	addwfc	prodh,w,c
 34616  005CB4  6EDA               	movwf	fsr2h,c
 34617  005CB6  CFDE F08F          	movff	postinc2,SwTimerStart@ticksRemaining
 34618  005CBA  CFDE F090          	movff	postinc2,SwTimerStart@ticksRemaining+1
 34619  005CBE  CFDE F091          	movff	postinc2,SwTimerStart@ticksRemaining+2
 34620  005CC2  CFDE F092          	movff	postinc2,SwTimerStart@ticksRemaining+3
 34621  005CC6                     l12172:
 34622                           
 34623                           ; BSR set to: 0
 34624                           ;sw_timer.c: 227: }
 34625                           ;sw_timer.c: 228: TMR_OverrideRemaining(ticksRemaining);
 34626  005CC6  C08F  F06C         	movff	SwTimerStart@ticksRemaining,TMR_OverrideRemaining@ticksRemaining
 34627  005CCA  C090  F06D         	movff	SwTimerStart@ticksRemaining+1,TMR_OverrideRemaining@ticksRemaining+1
 34628  005CCE  C091  F06E         	movff	SwTimerStart@ticksRemaining+2,TMR_OverrideRemaining@ticksRemaining+2
 34629  005CD2  C092  F06F         	movff	SwTimerStart@ticksRemaining+3,TMR_OverrideRemaining@ticksRemaining+3
 34630  005CD6  ECF7  F02F         	call	_TMR_OverrideRemaining	;wreg free
 34631                           
 34632                           ; BSR set to: 0
 34633                           ;sw_timer.c: 229: swTimers[timerId].running = 1;
 34634  005CDA  5193               	movf	SwTimerStart@timerId& (0+255),w,b
 34635  005CDC  0D08               	mullw	8
 34636  005CDE  0E04               	movlw	low (_swTimers+4)
 34637  005CE0  24F3               	addwf	prodl,w,c
 34638  005CE2  6ED9               	movwf	fsr2l,c
 34639  005CE4  0E03               	movlw	high (_swTimers+4)
 34640  005CE6  20F4               	addwfc	prodh,w,c
 34641  005CE8  6EDA               	movwf	fsr2h,c
 34642  005CEA  0E01               	movlw	1
 34643  005CEC  6EDF               	movwf	indf2,c
 34644                           
 34645                           ; BSR set to: 0
 34646                           ;sw_timer.c: 230: (INTCONbits.GIE = 1);
 34647  005CEE  8EF2               	bsf	intcon,7,c	;volatile
 34648                           
 34649                           ; BSR set to: 0
 34650  005CF0  0C01               	retlw	1	;funcret
 34651  005CF2                     __end_of_SwTimerStart:
 34652                           	opt stack 0
 34653                           tosu	equ	0xFFF
 34654                           tosh	equ	0xFFE
 34655                           tosl	equ	0xFFD
 34656                           pclath	equ	0xFFA
 34657                           tblptru	equ	0xFF8
 34658                           tblptrh	equ	0xFF7
 34659                           tblptrl	equ	0xFF6
 34660                           tablat	equ	0xFF5
 34661                           prodh	equ	0xFF4
 34662                           prodl	equ	0xFF3
 34663                           intcon	equ	0xFF2
 34664                           intcon2	equ	0xFF1
 34665                           intcon3	equ	0xFF0
 34666                           indf0	equ	0xFEF
 34667                           postinc0	equ	0xFEE
 34668                           plusw0	equ	0xFEB
 34669                           fsr0h	equ	0xFEA
 34670                           fsr0l	equ	0xFE9
 34671                           wreg	equ	0xFE8
 34672                           postinc1	equ	0xFE6
 34673                           postdec1	equ	0xFE5
 34674                           plusw1	equ	0xFE3
 34675                           fsr1h	equ	0xFE2
 34676                           fsr1l	equ	0xFE1
 34677                           indf2	equ	0xFDF
 34678                           postinc2	equ	0xFDE
 34679                           postdec2	equ	0xFDD
 34680                           plusw2	equ	0xFDB
 34681                           fsr2h	equ	0xFDA
 34682                           fsr2l	equ	0xFD9
 34683                           status	equ	0xFD8
 34684                           
 34685 ;; *************** function _TMR_OverrideRemaining *****************
 34686 ;; Defined at:
 34687 ;;		line 65 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34688 ;; Parameters:    Size  Location     Type
 34689 ;;  ticksRemaini    4   12[BANK0 ] unsigned long 
 34690 ;; Auto vars:     Size  Location     Type
 34691 ;;  oldReloadVal    2   20[BANK0 ] unsigned int 
 34692 ;;  tmrVal          2   18[BANK0 ] unsigned int 
 34693 ;; Return value:  Size  Location     Type
 34694 ;;                  1    wreg      void 
 34695 ;; Registers used:
 34696 ;;		wreg, status,2, status,0, cstack
 34697 ;; Tracked objects:
 34698 ;;		On entry : F/0
 34699 ;;		On exit  : F/0
 34700 ;;		Unchanged: 0/0
 34701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 34702 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34703 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34704 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34705 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34706 ;;Total ram usage:       10 bytes
 34707 ;; Hardware stack levels used:    1
 34708 ;; Hardware stack levels required when called:    9
 34709 ;; This function calls:
 34710 ;;		_TMR_SwapTimer
 34711 ;; This function is called by:
 34712 ;;		_SwTimerStart
 34713 ;; This function uses a non-reentrant model
 34714 ;;
 34715                           
 34716                           	psect	text181
 34717  005FEE                     __ptext181:
 34718                           	opt stack 0
 34719  005FEE                     _TMR_OverrideRemaining:
 34720                           	opt stack 17
 34721                           
 34722                           ; BSR set to: 0
 34723                           ;sw_timer.c: 67: uint16_t tmrVal;
 34724                           ;sw_timer.c: 68: uint16_t oldReloadVal;
 34725                           ;sw_timer.c: 71: if (ticksToScheduledInterrupt > 10)
 34726                           
 34727                           ; BSR set to: 0
 34728                           ;incstack = 0
 34729  005FEE  505D               	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 34730  005FF0  105C               	iorwf	_ticksToScheduledInterrupt+2,w,c	;volatile
 34731  005FF2  105B               	iorwf	_ticksToScheduledInterrupt+1,w,c	;volatile
 34732  005FF4  E104               	bnz	u12760
 34733  005FF6  0E0B               	movlw	11
 34734  005FF8  5C5A               	subwf	_ticksToScheduledInterrupt,w,c	;volatile
 34735  005FFA  A0D8               	btfss	status,0,c
 34736  005FFC  0012               	return	
 34737  005FFE                     u12760:
 34738                           
 34739                           ; BSR set to: 0
 34740                           ;sw_timer.c: 72: {
 34741                           ;sw_timer.c: 73: if (ticksRemaining < ticksToScheduledInterrupt)
 34742  005FFE  505A               	movf	_ticksToScheduledInterrupt,w,c	;volatile
 34743  006000  5D6C               	subwf	TMR_OverrideRemaining@ticksRemaining& (0+255),w,b
 34744  006002  505B               	movf	_ticksToScheduledInterrupt+1,w,c	;volatile
 34745  006004  596D               	subwfb	(TMR_OverrideRemaining@ticksRemaining+1)& (0+255),w,b
 34746  006006  505C               	movf	_ticksToScheduledInterrupt+2,w,c	;volatile
 34747  006008  596E               	subwfb	(TMR_OverrideRemaining@ticksRemaining+2)& (0+255),w,b
 34748  00600A  505D               	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 34749  00600C  596F               	subwfb	(TMR_OverrideRemaining@ticksRemaining+3)& (0+255),w,b
 34750  00600E  B0D8               	btfsc	status,0,c
 34751  006010  0012               	return	
 34752                           
 34753                           ; BSR set to: 0
 34754                           ;sw_timer.c: 74: {
 34755                           ;sw_timer.c: 75: ticksToScheduledInterrupt = ticksRemaining;
 34756  006012  C06C  F05A         	movff	TMR_OverrideRemaining@ticksRemaining,_ticksToScheduledInterrupt	;volatile
 34757  006016  C06D  F05B         	movff	TMR_OverrideRemaining@ticksRemaining+1,_ticksToScheduledInterrupt+1	;volatile
 34758  00601A  C06E  F05C         	movff	TMR_OverrideRemaining@ticksRemaining+2,_ticksToScheduledInterrupt+2	;volatile
 34759  00601E  C06F  F05D         	movff	TMR_OverrideRemaining@ticksRemaining+3,_ticksToScheduledInterrupt+3	;volatile
 34760                           
 34761                           ;sw_timer.c: 76: oldReloadVal = reloadVal;
 34762  006022  C044  F074         	movff	_reloadVal,TMR_OverrideRemaining@oldReloadVal	;volatile
 34763  006026  C045  F075         	movff	_reloadVal+1,TMR_OverrideRemaining@oldReloadVal+1	;volatile
 34764                           
 34765                           ; BSR set to: 0
 34766                           ;sw_timer.c: 78: reloadVal = ((uint32_t)0x10000) - ticksRemaining;
 34767  00602A  516C               	movf	TMR_OverrideRemaining@ticksRemaining& (0+255),w,b
 34768  00602C  0800               	sublw	0
 34769  00602E  6E44               	movwf	_reloadVal,c	;volatile
 34770  006030  516D               	movf	(TMR_OverrideRemaining@ticksRemaining+1)& (0+255),w,b
 34771  006032  A0D8               	btfss	status,0,c
 34772  006034  2AE8               	incf	wreg,f,c
 34773  006036  0800               	sublw	0
 34774  006038  6E45               	movwf	_reloadVal+1,c	;volatile
 34775                           
 34776                           ; BSR set to: 0
 34777                           ;sw_timer.c: 79: tmrVal = TMR_SwapTimer(reloadVal);
 34778  00603A  C044  F06A         	movff	_reloadVal,TMR_SwapTimer@timerVal	;volatile
 34779  00603E  C045  F06B         	movff	_reloadVal+1,TMR_SwapTimer@timerVal+1	;volatile
 34780  006042  ECC3  F036         	call	_TMR_SwapTimer	;wreg free
 34781  006046  C06A  F072         	movff	?_TMR_SwapTimer,TMR_OverrideRemaining@tmrVal
 34782  00604A  C06B  F073         	movff	?_TMR_SwapTimer+1,TMR_OverrideRemaining@tmrVal+1
 34783                           
 34784                           ; BSR set to: 0
 34785                           ;sw_timer.c: 80: ticksAdded += tmrVal - oldReloadVal;
 34786  00604E  5174               	movf	TMR_OverrideRemaining@oldReloadVal& (0+255),w,b
 34787  006050  5D72               	subwf	TMR_OverrideRemaining@tmrVal& (0+255),w,b
 34788  006052  6F70               	movwf	??_TMR_OverrideRemaining& (0+255),b
 34789  006054  5175               	movf	(TMR_OverrideRemaining@oldReloadVal+1)& (0+255),w,b
 34790  006056  5973               	subwfb	(TMR_OverrideRemaining@tmrVal+1)& (0+255),w,b
 34791  006058  6F71               	movwf	(??_TMR_OverrideRemaining+1)& (0+255),b
 34792  00605A  5170               	movf	??_TMR_OverrideRemaining& (0+255),w,b
 34793  00605C  2638               	addwf	_ticksAdded,f,c	;volatile
 34794  00605E  5171               	movf	(??_TMR_OverrideRemaining+1)& (0+255),w,b
 34795  006060  2239               	addwfc	_ticksAdded+1,f,c	;volatile
 34796  006062  0E00               	movlw	0
 34797  006064  223A               	addwfc	_ticksAdded+2,f,c	;volatile
 34798  006066  223B               	addwfc	_ticksAdded+3,f,c	;volatile
 34799                           
 34800                           ; BSR set to: 0
 34801  006068  0C00               	retlw	0	;funcret
 34802  00606A                     __end_of_TMR_OverrideRemaining:
 34803                           	opt stack 0
 34804                           tosu	equ	0xFFF
 34805                           tosh	equ	0xFFE
 34806                           tosl	equ	0xFFD
 34807                           pclath	equ	0xFFA
 34808                           tblptru	equ	0xFF8
 34809                           tblptrh	equ	0xFF7
 34810                           tblptrl	equ	0xFF6
 34811                           tablat	equ	0xFF5
 34812                           prodh	equ	0xFF4
 34813                           prodl	equ	0xFF3
 34814                           intcon	equ	0xFF2
 34815                           intcon2	equ	0xFF1
 34816                           intcon3	equ	0xFF0
 34817                           indf0	equ	0xFEF
 34818                           postinc0	equ	0xFEE
 34819                           plusw0	equ	0xFEB
 34820                           fsr0h	equ	0xFEA
 34821                           fsr0l	equ	0xFE9
 34822                           wreg	equ	0xFE8
 34823                           postinc1	equ	0xFE6
 34824                           postdec1	equ	0xFE5
 34825                           plusw1	equ	0xFE3
 34826                           fsr1h	equ	0xFE2
 34827                           fsr1l	equ	0xFE1
 34828                           indf2	equ	0xFDF
 34829                           postinc2	equ	0xFDE
 34830                           postdec2	equ	0xFDD
 34831                           plusw2	equ	0xFDB
 34832                           fsr2h	equ	0xFDA
 34833                           fsr2l	equ	0xFD9
 34834                           status	equ	0xFD8
 34835                           
 34836 ;; *************** function _TMR_SwapTimer *****************
 34837 ;; Defined at:
 34838 ;;		line 112 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34839 ;; Parameters:    Size  Location     Type
 34840 ;;  timerVal        2   10[BANK0 ] unsigned int 
 34841 ;; Auto vars:     Size  Location     Type
 34842 ;;		None
 34843 ;; Return value:  Size  Location     Type
 34844 ;;                  2   10[BANK0 ] unsigned int 
 34845 ;; Registers used:
 34846 ;;		wreg, status,2, status,0, cstack
 34847 ;; Tracked objects:
 34848 ;;		On entry : F/0
 34849 ;;		On exit  : F/0
 34850 ;;		Unchanged: 0/0
 34851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 34852 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34855 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34856 ;;Total ram usage:        2 bytes
 34857 ;; Hardware stack levels used:    1
 34858 ;; Hardware stack levels required when called:    8
 34859 ;; This function calls:
 34860 ;;		_TMR1_ReadTimer
 34861 ;;		_TMR1_WriteTimer
 34862 ;; This function is called by:
 34863 ;;		_TMR_OverrideRemaining
 34864 ;; This function uses a non-reentrant model
 34865 ;;
 34866                           
 34867                           	psect	text182
 34868  006D86                     __ptext182:
 34869                           	opt stack 0
 34870  006D86                     _TMR_SwapTimer:
 34871                           	opt stack 17
 34872                           
 34873                           ; BSR set to: 0
 34874                           ;sw_timer.c: 114: static uint16_t oldVal;
 34875                           ;sw_timer.c: 115: static uint16_t retVal;
 34876                           ;sw_timer.c: 117: oldVal = TMR1_ReadTimer();
 34877                           
 34878                           ; BSR set to: 0
 34879                           ;incstack = 0
 34880  006D86  ECCA  F039         	call	_TMR1_ReadTimer	;wreg free
 34881  006D8A  C064  F040         	movff	?_TMR1_ReadTimer,TMR_SwapTimer@oldVal
 34882  006D8E  C065  F041         	movff	?_TMR1_ReadTimer+1,TMR_SwapTimer@oldVal+1
 34883  006D92                     l11650:
 34884                           
 34885                           ; BSR set to: 0
 34886  006D92  ECCA  F039         	call	_TMR1_ReadTimer	;wreg free
 34887  006D96  5040               	movf	TMR_SwapTimer@oldVal,w,c
 34888  006D98  1964               	xorwf	?_TMR1_ReadTimer& (0+255),w,b
 34889  006D9A  E103               	bnz	u12540
 34890  006D9C  5041               	movf	TMR_SwapTimer@oldVal+1,w,c
 34891  006D9E  1965               	xorwf	(?_TMR1_ReadTimer+1)& (0+255),w,b
 34892  006DA0  E0F8               	bz	l11650
 34893  006DA2                     u12540:
 34894                           
 34895                           ; BSR set to: 0
 34896                           ;sw_timer.c: 125: TMR1_WriteTimer(timerVal);
 34897  006DA2  C06A  F064         	movff	TMR_SwapTimer@timerVal,TMR1_WriteTimer@timerVal
 34898  006DA6  C06B  F065         	movff	TMR_SwapTimer@timerVal+1,TMR1_WriteTimer@timerVal+1
 34899  006DAA  EC8D  F03A         	call	_TMR1_WriteTimer	;wreg free
 34900                           
 34901                           ; BSR set to: 0
 34902                           ;sw_timer.c: 128: oldVal++;
 34903  006DAE  4A40               	infsnz	TMR_SwapTimer@oldVal,f,c
 34904  006DB0  2A41               	incf	TMR_SwapTimer@oldVal+1,f,c
 34905                           
 34906                           ; BSR set to: 0
 34907                           ;sw_timer.c: 130: retVal = oldVal;
 34908  006DB2  C040  F042         	movff	TMR_SwapTimer@oldVal,TMR_SwapTimer@retVal
 34909  006DB6  C041  F043         	movff	TMR_SwapTimer@oldVal+1,TMR_SwapTimer@retVal+1
 34910                           
 34911                           ; BSR set to: 0
 34912                           ;sw_timer.c: 132: return retVal;
 34913  006DBA  C042  F06A         	movff	TMR_SwapTimer@retVal,?_TMR_SwapTimer
 34914  006DBE  C043  F06B         	movff	TMR_SwapTimer@retVal+1,?_TMR_SwapTimer+1
 34915                           
 34916                           ; BSR set to: 0
 34917  006DC2  0012               	return		;funcret
 34918  006DC4                     __end_of_TMR_SwapTimer:
 34919                           	opt stack 0
 34920                           tosu	equ	0xFFF
 34921                           tosh	equ	0xFFE
 34922                           tosl	equ	0xFFD
 34923                           pclath	equ	0xFFA
 34924                           tblptru	equ	0xFF8
 34925                           tblptrh	equ	0xFF7
 34926                           tblptrl	equ	0xFF6
 34927                           tablat	equ	0xFF5
 34928                           prodh	equ	0xFF4
 34929                           prodl	equ	0xFF3
 34930                           intcon	equ	0xFF2
 34931                           intcon2	equ	0xFF1
 34932                           intcon3	equ	0xFF0
 34933                           indf0	equ	0xFEF
 34934                           postinc0	equ	0xFEE
 34935                           plusw0	equ	0xFEB
 34936                           fsr0h	equ	0xFEA
 34937                           fsr0l	equ	0xFE9
 34938                           wreg	equ	0xFE8
 34939                           postinc1	equ	0xFE6
 34940                           postdec1	equ	0xFE5
 34941                           plusw1	equ	0xFE3
 34942                           fsr1h	equ	0xFE2
 34943                           fsr1l	equ	0xFE1
 34944                           indf2	equ	0xFDF
 34945                           postinc2	equ	0xFDE
 34946                           postdec2	equ	0xFDD
 34947                           plusw2	equ	0xFDB
 34948                           fsr2h	equ	0xFDA
 34949                           fsr2l	equ	0xFD9
 34950                           status	equ	0xFD8
 34951                           
 34952 ;; *************** function _TMR1_WriteTimer *****************
 34953 ;; Defined at:
 34954 ;;		line 116 in file "mcc_generated_files/tmr1.c"
 34955 ;; Parameters:    Size  Location     Type
 34956 ;;  timerVal        2    4[BANK0 ] unsigned int 
 34957 ;; Auto vars:     Size  Location     Type
 34958 ;;		None
 34959 ;; Return value:  Size  Location     Type
 34960 ;;                  1    wreg      void 
 34961 ;; Registers used:
 34962 ;;		None
 34963 ;; Tracked objects:
 34964 ;;		On entry : F/0
 34965 ;;		On exit  : F/0
 34966 ;;		Unchanged: F/0
 34967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 34968 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34971 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34972 ;;Total ram usage:        2 bytes
 34973 ;; Hardware stack levels used:    1
 34974 ;; Hardware stack levels required when called:    7
 34975 ;; This function calls:
 34976 ;;		Nothing
 34977 ;; This function is called by:
 34978 ;;		_TMR_SwapTimer
 34979 ;; This function uses a non-reentrant model
 34980 ;;
 34981                           
 34982                           	psect	text183
 34983  00751A                     __ptext183:
 34984                           	opt stack 0
 34985  00751A                     _TMR1_WriteTimer:
 34986                           	opt stack 17
 34987                           
 34988                           ; BSR set to: 0
 34989                           ;tmr1.c: 118: if (T1CONbits.nT1SYNC == 1)
 34990                           
 34991                           ; BSR set to: 0
 34992                           ;incstack = 0
 34993  00751A  A4CD               	btfss	4045,2,c	;volatile
 34994  00751C  D007               	goto	l1362
 34995                           
 34996                           ; BSR set to: 0
 34997                           ;tmr1.c: 119: {
 34998                           ;tmr1.c: 121: T1CONbits.TMR1ON = 0;
 34999  00751E  90CD               	bcf	4045,0,c	;volatile
 35000                           
 35001                           ;tmr1.c: 124: TMR1H = (timerVal >> 8);
 35002  007520  C065  FFCF         	movff	TMR1_WriteTimer@timerVal+1,4047	;volatile
 35003                           
 35004                           ;tmr1.c: 125: TMR1L = timerVal;
 35005  007524  C064  FFCE         	movff	TMR1_WriteTimer@timerVal,4046	;volatile
 35006                           
 35007                           ;tmr1.c: 128: T1CONbits.TMR1ON =1;
 35008  007528  80CD               	bsf	4045,0,c	;volatile
 35009                           
 35010                           ;tmr1.c: 129: }
 35011  00752A  0012               	return	
 35012  00752C                     l1362:
 35013                           
 35014                           ; BSR set to: 0
 35015                           ;tmr1.c: 130: else
 35016                           ;tmr1.c: 131: {
 35017                           ;tmr1.c: 133: TMR1H = (timerVal >> 8);
 35018  00752C  C065  FFCF         	movff	TMR1_WriteTimer@timerVal+1,4047	;volatile
 35019                           
 35020                           ;tmr1.c: 134: TMR1L = timerVal;
 35021  007530  C064  FFCE         	movff	TMR1_WriteTimer@timerVal,4046	;volatile
 35022                           
 35023                           ; BSR set to: 0
 35024  007534  0012               	return		;funcret
 35025  007536                     __end_of_TMR1_WriteTimer:
 35026                           	opt stack 0
 35027                           tosu	equ	0xFFF
 35028                           tosh	equ	0xFFE
 35029                           tosl	equ	0xFFD
 35030                           pclath	equ	0xFFA
 35031                           tblptru	equ	0xFF8
 35032                           tblptrh	equ	0xFF7
 35033                           tblptrl	equ	0xFF6
 35034                           tablat	equ	0xFF5
 35035                           prodh	equ	0xFF4
 35036                           prodl	equ	0xFF3
 35037                           intcon	equ	0xFF2
 35038                           intcon2	equ	0xFF1
 35039                           intcon3	equ	0xFF0
 35040                           indf0	equ	0xFEF
 35041                           postinc0	equ	0xFEE
 35042                           plusw0	equ	0xFEB
 35043                           fsr0h	equ	0xFEA
 35044                           fsr0l	equ	0xFE9
 35045                           wreg	equ	0xFE8
 35046                           postinc1	equ	0xFE6
 35047                           postdec1	equ	0xFE5
 35048                           plusw1	equ	0xFE3
 35049                           fsr1h	equ	0xFE2
 35050                           fsr1l	equ	0xFE1
 35051                           indf2	equ	0xFDF
 35052                           postinc2	equ	0xFDE
 35053                           postdec2	equ	0xFDD
 35054                           plusw2	equ	0xFDB
 35055                           fsr2h	equ	0xFDA
 35056                           fsr2l	equ	0xFD9
 35057                           status	equ	0xFD8
 35058                           
 35059 ;; *************** function _SwTimersInterrupt *****************
 35060 ;; Defined at:
 35061 ;;		line 287 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 35062 ;; Parameters:    Size  Location     Type
 35063 ;;		None
 35064 ;; Auto vars:     Size  Location     Type
 35065 ;;  ticksToNextT    4   38[BANK0 ] unsigned long 
 35066 ;;  timeElapsed     4   34[BANK0 ] unsigned long 
 35067 ;;  i               1   42[BANK0 ] unsigned char 
 35068 ;; Return value:  Size  Location     Type
 35069 ;;                  4   26[BANK0 ] unsigned long 
 35070 ;; Registers used:
 35071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 35072 ;; Tracked objects:
 35073 ;;		On entry : 0/0
 35074 ;;		On exit  : F/0
 35075 ;;		Unchanged: 0/0
 35076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 35077 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35078 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35079 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35080 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35081 ;;Total ram usage:       17 bytes
 35082 ;; Hardware stack levels used:    1
 35083 ;; Hardware stack levels required when called:    9
 35084 ;; This function calls:
 35085 ;;		_TMR_GetDeltaTime
 35086 ;; This function is called by:
 35087 ;;		_SwTimerReadValue
 35088 ;;		_SwTimerStart
 35089 ;; This function uses a non-reentrant model
 35090 ;;
 35091                           
 35092                           	psect	text184
 35093  004BAA                     __ptext184:
 35094                           	opt stack 0
 35095  004BAA                     _SwTimersInterrupt:
 35096                           	opt stack 17
 35097                           
 35098                           ;sw_timer.c: 289: uint8_t i;
 35099                           ;sw_timer.c: 290: uint32_t timeElapsed;
 35100                           ;sw_timer.c: 291: uint32_t ticksToNextTimerEvent = 0xFFFFFFFF;
 35101                           
 35102                           ; BSR set to: 0
 35103                           ;incstack = 0
 35104  004BAA  0100               	movlb	0	; () banked
 35105  004BAC  6986               	setf	SwTimersInterrupt@ticksToNextTimerEvent& (0+255),b
 35106  004BAE  6987               	setf	(SwTimersInterrupt@ticksToNextTimerEvent+1)& (0+255),b
 35107  004BB0  6988               	setf	(SwTimersInterrupt@ticksToNextTimerEvent+2)& (0+255),b
 35108  004BB2  6989               	setf	(SwTimersInterrupt@ticksToNextTimerEvent+3)& (0+255),b
 35109                           
 35110                           ; BSR set to: 0
 35111                           ;sw_timer.c: 295: timeElapsed = TMR_GetDeltaTime();
 35112  004BB4  ECC5  F026         	call	_TMR_GetDeltaTime	;wreg free
 35113  004BB8  C06A  F082         	movff	?_TMR_GetDeltaTime,SwTimersInterrupt@timeElapsed
 35114  004BBC  C06B  F083         	movff	?_TMR_GetDeltaTime+1,SwTimersInterrupt@timeElapsed+1
 35115  004BC0  C06C  F084         	movff	?_TMR_GetDeltaTime+2,SwTimersInterrupt@timeElapsed+2
 35116  004BC4  C06D  F085         	movff	?_TMR_GetDeltaTime+3,SwTimersInterrupt@timeElapsed+3
 35117                           
 35118                           ; BSR set to: 0
 35119                           ;sw_timer.c: 297: for (i = 0; i < allocatedTimers; i++)
 35120  004BC8  6B8A               	clrf	SwTimersInterrupt@i& (0+255),b
 35121  004BCA  D05A               	goto	l11896
 35122  004BCC                     l11884:
 35123                           
 35124                           ; BSR set to: 0
 35125                           ;sw_timer.c: 298: {
 35126                           ;sw_timer.c: 301: if (swTimers[i].running == 1)
 35127  004BCC  518A               	movf	SwTimersInterrupt@i& (0+255),w,b
 35128  004BCE  0D08               	mullw	8
 35129  004BD0  0E04               	movlw	low (_swTimers+4)
 35130  004BD2  24F3               	addwf	prodl,w,c
 35131  004BD4  6ED9               	movwf	fsr2l,c
 35132  004BD6  0E03               	movlw	high (_swTimers+4)
 35133  004BD8  20F4               	addwfc	prodh,w,c
 35134  004BDA  6EDA               	movwf	fsr2h,c
 35135  004BDC  04DE               	decf	postinc2,w,c
 35136  004BDE  E14F               	bnz	l11894
 35137                           
 35138                           ; BSR set to: 0
 35139                           ;sw_timer.c: 302: {
 35140                           ;sw_timer.c: 303: if (swTimers[i].ticksRemaining <= timeElapsed)
 35141  004BE0  518A               	movf	SwTimersInterrupt@i& (0+255),w,b
 35142  004BE2  0D08               	mullw	8
 35143  004BE4  0E00               	movlw	low _swTimers
 35144  004BE6  24F3               	addwf	prodl,w,c
 35145  004BE8  6ED9               	movwf	fsr2l,c
 35146  004BEA  0E03               	movlw	high _swTimers
 35147  004BEC  20F4               	addwfc	prodh,w,c
 35148  004BEE  6EDA               	movwf	fsr2h,c
 35149  004BF0  50DE               	movf	postinc2,w,c
 35150  004BF2  5D82               	subwf	SwTimersInterrupt@timeElapsed& (0+255),w,b
 35151  004BF4  50DE               	movf	postinc2,w,c
 35152  004BF6  5983               	subwfb	(SwTimersInterrupt@timeElapsed+1)& (0+255),w,b
 35153  004BF8  50DE               	movf	postinc2,w,c
 35154  004BFA  5984               	subwfb	(SwTimersInterrupt@timeElapsed+2)& (0+255),w,b
 35155  004BFC  50DE               	movf	postinc2,w,c
 35156  004BFE  5985               	subwfb	(SwTimersInterrupt@timeElapsed+3)& (0+255),w,b
 35157  004C00  E30D               	bnc	l11890
 35158                           
 35159                           ; BSR set to: 0
 35160                           ;sw_timer.c: 304: {
 35161                           ;sw_timer.c: 305: swTimers[i].ticksRemaining = 0;
 35162  004C02  518A               	movf	SwTimersInterrupt@i& (0+255),w,b
 35163  004C04  0D08               	mullw	8
 35164  004C06  0E00               	movlw	low _swTimers
 35165  004C08  24F3               	addwf	prodl,w,c
 35166  004C0A  6ED9               	movwf	fsr2l,c
 35167  004C0C  0E03               	movlw	high _swTimers
 35168  004C0E  20F4               	addwfc	prodh,w,c
 35169  004C10  6EDA               	movwf	fsr2h,c
 35170  004C12  6ADE               	clrf	postinc2,c
 35171  004C14  6ADE               	clrf	postinc2,c
 35172  004C16  6ADE               	clrf	postinc2,c
 35173  004C18  6ADD               	clrf	postdec2,c
 35174                           
 35175                           ;sw_timer.c: 306: }
 35176  004C1A  D031               	goto	l11894
 35177  004C1C                     l11890:
 35178                           
 35179                           ; BSR set to: 0
 35180                           ;sw_timer.c: 307: else
 35181                           ;sw_timer.c: 308: {
 35182                           ;sw_timer.c: 309: swTimers[i].ticksRemaining -= timeElapsed;
 35183  004C1C  518A               	movf	SwTimersInterrupt@i& (0+255),w,b
 35184  004C1E  0D08               	mullw	8
 35185  004C20  0E00               	movlw	low _swTimers
 35186  004C22  24F3               	addwf	prodl,w,c
 35187  004C24  6ED9               	movwf	fsr2l,c
 35188  004C26  0E03               	movlw	high _swTimers
 35189  004C28  20F4               	addwfc	prodh,w,c
 35190  004C2A  6EDA               	movwf	fsr2h,c
 35191  004C2C  5182               	movf	SwTimersInterrupt@timeElapsed& (0+255),w,b
 35192  004C2E  5EDE               	subwf	postinc2,f,c
 35193  004C30  5183               	movf	(SwTimersInterrupt@timeElapsed+1)& (0+255),w,b
 35194  004C32  5ADE               	subwfb	postinc2,f,c
 35195  004C34  5184               	movf	(SwTimersInterrupt@timeElapsed+2)& (0+255),w,b
 35196  004C36  5ADE               	subwfb	postinc2,f,c
 35197  004C38  5185               	movf	(SwTimersInterrupt@timeElapsed+3)& (0+255),w,b
 35198  004C3A  5ADE               	subwfb	postinc2,f,c
 35199                           
 35200                           ;sw_timer.c: 312: if (swTimers[i].ticksRemaining < ticksToNextTimerEvent)
 35201  004C3C  518A               	movf	SwTimersInterrupt@i& (0+255),w,b
 35202  004C3E  0D08               	mullw	8
 35203  004C40  0E00               	movlw	low _swTimers
 35204  004C42  24F3               	addwf	prodl,w,c
 35205  004C44  6ED9               	movwf	fsr2l,c
 35206  004C46  0E03               	movlw	high _swTimers
 35207  004C48  20F4               	addwfc	prodh,w,c
 35208  004C4A  6EDA               	movwf	fsr2h,c
 35209  004C4C  5186               	movf	SwTimersInterrupt@ticksToNextTimerEvent& (0+255),w,b
 35210  004C4E  5CDE               	subwf	postinc2,w,c
 35211  004C50  5187               	movf	(SwTimersInterrupt@ticksToNextTimerEvent+1)& (0+255),w,b
 35212  004C52  58DE               	subwfb	postinc2,w,c
 35213  004C54  5188               	movf	(SwTimersInterrupt@ticksToNextTimerEvent+2)& (0+255),w,b
 35214  004C56  58DE               	subwfb	postinc2,w,c
 35215  004C58  5189               	movf	(SwTimersInterrupt@ticksToNextTimerEvent+3)& (0+255),w,b
 35216  004C5A  58DE               	subwfb	postinc2,w,c
 35217  004C5C  E210               	bc	l11894
 35218                           
 35219                           ; BSR set to: 0
 35220                           ;sw_timer.c: 313: {
 35221                           ;sw_timer.c: 314: ticksToNextTimerEvent = swTimers[i].ticksRemaining;
 35222  004C5E  518A               	movf	SwTimersInterrupt@i& (0+255),w,b
 35223  004C60  0D08               	mullw	8
 35224  004C62  0E00               	movlw	low _swTimers
 35225  004C64  24F3               	addwf	prodl,w,c
 35226  004C66  6ED9               	movwf	fsr2l,c
 35227  004C68  0E03               	movlw	high _swTimers
 35228  004C6A  20F4               	addwfc	prodh,w,c
 35229  004C6C  6EDA               	movwf	fsr2h,c
 35230  004C6E  CFDE F086          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent
 35231  004C72  CFDE F087          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+1
 35232  004C76  CFDE F088          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+2
 35233  004C7A  CFDE F089          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+3
 35234  004C7E                     l11894:
 35235                           
 35236                           ; BSR set to: 0
 35237  004C7E  2B8A               	incf	SwTimersInterrupt@i& (0+255),f,b
 35238  004C80                     l11896:
 35239                           
 35240                           ; BSR set to: 0
 35241  004C80  0101               	movlb	1	; () banked
 35242  004C82  5173               	movf	_allocatedTimers& (0+255),w,b	;volatile
 35243  004C84  0100               	movlb	0	; () banked
 35244  004C86  5D8A               	subwf	SwTimersInterrupt@i& (0+255),w,b
 35245  004C88  E3A1               	bnc	l11884
 35246                           
 35247                           ; BSR set to: 0
 35248                           ;sw_timer.c: 315: }
 35249                           ;sw_timer.c: 316: }
 35250                           ;sw_timer.c: 317: }
 35251                           ;sw_timer.c: 318: }
 35252                           ;sw_timer.c: 320: return ticksToNextTimerEvent;
 35253  004C8A  C086  F07A         	movff	SwTimersInterrupt@ticksToNextTimerEvent,?_SwTimersInterrupt
 35254  004C8E  C087  F07B         	movff	SwTimersInterrupt@ticksToNextTimerEvent+1,?_SwTimersInterrupt+1
 35255  004C92  C088  F07C         	movff	SwTimersInterrupt@ticksToNextTimerEvent+2,?_SwTimersInterrupt+2
 35256  004C96  C089  F07D         	movff	SwTimersInterrupt@ticksToNextTimerEvent+3,?_SwTimersInterrupt+3
 35257                           
 35258                           ; BSR set to: 0
 35259  004C9A  0012               	return		;funcret
 35260  004C9C                     __end_of_SwTimersInterrupt:
 35261                           	opt stack 0
 35262                           tosu	equ	0xFFF
 35263                           tosh	equ	0xFFE
 35264                           tosl	equ	0xFFD
 35265                           pclath	equ	0xFFA
 35266                           tblptru	equ	0xFF8
 35267                           tblptrh	equ	0xFF7
 35268                           tblptrl	equ	0xFF6
 35269                           tablat	equ	0xFF5
 35270                           prodh	equ	0xFF4
 35271                           prodl	equ	0xFF3
 35272                           intcon	equ	0xFF2
 35273                           intcon2	equ	0xFF1
 35274                           intcon3	equ	0xFF0
 35275                           indf0	equ	0xFEF
 35276                           postinc0	equ	0xFEE
 35277                           plusw0	equ	0xFEB
 35278                           fsr0h	equ	0xFEA
 35279                           fsr0l	equ	0xFE9
 35280                           wreg	equ	0xFE8
 35281                           postinc1	equ	0xFE6
 35282                           postdec1	equ	0xFE5
 35283                           plusw1	equ	0xFE3
 35284                           fsr1h	equ	0xFE2
 35285                           fsr1l	equ	0xFE1
 35286                           indf2	equ	0xFDF
 35287                           postinc2	equ	0xFDE
 35288                           postdec2	equ	0xFDD
 35289                           plusw2	equ	0xFDB
 35290                           fsr2h	equ	0xFDA
 35291                           fsr2l	equ	0xFD9
 35292                           status	equ	0xFD8
 35293                           
 35294 ;; *************** function _TMR_GetDeltaTime *****************
 35295 ;; Defined at:
 35296 ;;		line 88 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 35297 ;; Parameters:    Size  Location     Type
 35298 ;;		None
 35299 ;; Auto vars:     Size  Location     Type
 35300 ;;		None
 35301 ;; Return value:  Size  Location     Type
 35302 ;;                  4   10[BANK0 ] unsigned long 
 35303 ;; Registers used:
 35304 ;;		wreg, status,2, status,0, cstack
 35305 ;; Tracked objects:
 35306 ;;		On entry : F/0
 35307 ;;		On exit  : F/0
 35308 ;;		Unchanged: 0/0
 35309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 35310 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35312 ;;      Temps:          0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35313 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35314 ;;Total ram usage:       16 bytes
 35315 ;; Hardware stack levels used:    1
 35316 ;; Hardware stack levels required when called:    8
 35317 ;; This function calls:
 35318 ;;		_TMR1_ReadTimer
 35319 ;; This function is called by:
 35320 ;;		_SwTimersInterrupt
 35321 ;; This function uses a non-reentrant model
 35322 ;;
 35323                           
 35324                           	psect	text185
 35325  004D8A                     __ptext185:
 35326                           	opt stack 0
 35327  004D8A                     _TMR_GetDeltaTime:
 35328                           	opt stack 17
 35329                           
 35330                           ; BSR set to: 0
 35331                           ;sw_timer.c: 90: static uint32_t retVal;
 35332                           ;sw_timer.c: 91: static uint16_t tmrVal;
 35333                           ;sw_timer.c: 93: tmrVal = TMR1_ReadTimer();
 35334                           
 35335                           ; BSR set to: 0
 35336                           ;incstack = 0
 35337  004D8A  ECCA  F039         	call	_TMR1_ReadTimer	;wreg free
 35338  004D8E  C064  F03E         	movff	?_TMR1_ReadTimer,TMR_GetDeltaTime@tmrVal
 35339  004D92  C065  F03F         	movff	?_TMR1_ReadTimer+1,TMR_GetDeltaTime@tmrVal+1
 35340                           
 35341                           ; BSR set to: 0
 35342                           ;sw_timer.c: 95: if (timerOverflow == 1)
 35343  004D96  0449               	decf	_timerOverflow,w,c	;volatile
 35344  004D98  E13D               	bnz	l11676
 35345                           
 35346                           ; BSR set to: 0
 35347                           ;sw_timer.c: 96: {
 35348                           ;sw_timer.c: 97: timerOverflow = 0;
 35349  004D9A  6A49               	clrf	_timerOverflow,c	;volatile
 35350                           
 35351                           ; BSR set to: 0
 35352                           ;sw_timer.c: 98: retVal = ((uint32_t)0x10000) - reloadVal + tmrVal - ticksAccounted + ti
      +                          cksAdded;
 35353  004D9C  5044               	movf	_reloadVal,w,c	;volatile
 35354  004D9E  5C3E               	subwf	TMR_GetDeltaTime@tmrVal,w,c
 35355  004DA0  6F6E               	movwf	??_TMR_GetDeltaTime& (0+255),b
 35356  004DA2  5045               	movf	_reloadVal+1,w,c	;volatile
 35357  004DA4  583F               	subwfb	TMR_GetDeltaTime@tmrVal+1,w,c
 35358  004DA6  6F6F               	movwf	(??_TMR_GetDeltaTime+1)& (0+255),b
 35359  004DA8  6B70               	clrf	(??_TMR_GetDeltaTime+2)& (0+255),b
 35360  004DAA  A0D8               	btfss	status,0,c
 35361  004DAC  0770               	decf	(??_TMR_GetDeltaTime+2)& (0+255),f,b
 35362  004DAE  5170               	movf	(??_TMR_GetDeltaTime+2)& (0+255),w,b
 35363  004DB0  6F71               	movwf	(??_TMR_GetDeltaTime+3)& (0+255),b
 35364  004DB2  5034               	movf	_ticksAccounted,w,c	;volatile
 35365  004DB4  5D6E               	subwf	??_TMR_GetDeltaTime& (0+255),w,b
 35366  004DB6  6F72               	movwf	(??_TMR_GetDeltaTime+4)& (0+255),b
 35367  004DB8  5035               	movf	_ticksAccounted+1,w,c	;volatile
 35368  004DBA  596F               	subwfb	(??_TMR_GetDeltaTime+1)& (0+255),w,b
 35369  004DBC  6F73               	movwf	(??_TMR_GetDeltaTime+5)& (0+255),b
 35370  004DBE  5036               	movf	_ticksAccounted+2,w,c	;volatile
 35371  004DC0  5970               	subwfb	(??_TMR_GetDeltaTime+2)& (0+255),w,b
 35372  004DC2  6F74               	movwf	(??_TMR_GetDeltaTime+6)& (0+255),b
 35373  004DC4  5037               	movf	_ticksAccounted+3,w,c	;volatile
 35374  004DC6  5971               	subwfb	(??_TMR_GetDeltaTime+3)& (0+255),w,b
 35375  004DC8  6F75               	movwf	(??_TMR_GetDeltaTime+7)& (0+255),b
 35376  004DCA  5038               	movf	_ticksAdded,w,c	;volatile
 35377  004DCC  2572               	addwf	(??_TMR_GetDeltaTime+4)& (0+255),w,b
 35378  004DCE  6F76               	movwf	(??_TMR_GetDeltaTime+8)& (0+255),b
 35379  004DD0  5039               	movf	_ticksAdded+1,w,c	;volatile
 35380  004DD2  2173               	addwfc	(??_TMR_GetDeltaTime+5)& (0+255),w,b
 35381  004DD4  6F77               	movwf	(??_TMR_GetDeltaTime+9)& (0+255),b
 35382  004DD6  503A               	movf	_ticksAdded+2,w,c	;volatile
 35383  004DD8  2174               	addwfc	(??_TMR_GetDeltaTime+6)& (0+255),w,b
 35384  004DDA  6F78               	movwf	(??_TMR_GetDeltaTime+10)& (0+255),b
 35385  004DDC  503B               	movf	_ticksAdded+3,w,c	;volatile
 35386  004DDE  2175               	addwfc	(??_TMR_GetDeltaTime+7)& (0+255),w,b
 35387  004DE0  6F79               	movwf	(??_TMR_GetDeltaTime+11)& (0+255),b
 35388  004DE2  0E00               	movlw	0
 35389  004DE4  2576               	addwf	(??_TMR_GetDeltaTime+8)& (0+255),w,b
 35390  004DE6  6E30               	movwf	TMR_GetDeltaTime@retVal,c
 35391  004DE8  0E00               	movlw	0
 35392  004DEA  2177               	addwfc	(??_TMR_GetDeltaTime+9)& (0+255),w,b
 35393  004DEC  6E31               	movwf	TMR_GetDeltaTime@retVal+1,c
 35394  004DEE  0E01               	movlw	1
 35395  004DF0  2178               	addwfc	(??_TMR_GetDeltaTime+10)& (0+255),w,b
 35396  004DF2  6E32               	movwf	TMR_GetDeltaTime@retVal+2,c
 35397  004DF4  0E00               	movlw	0
 35398  004DF6  2179               	addwfc	(??_TMR_GetDeltaTime+11)& (0+255),w,b
 35399  004DF8  6E33               	movwf	TMR_GetDeltaTime@retVal+3,c
 35400                           
 35401                           ; BSR set to: 0
 35402                           ;sw_timer.c: 99: ticksAccounted = tmrVal;
 35403  004DFA  C03E  F034         	movff	TMR_GetDeltaTime@tmrVal,_ticksAccounted	;volatile
 35404  004DFE  C03F  F035         	movff	TMR_GetDeltaTime@tmrVal+1,_ticksAccounted+1	;volatile
 35405  004E02  6A36               	clrf	_ticksAccounted+2,c	;volatile
 35406  004E04  6A37               	clrf	_ticksAccounted+3,c	;volatile
 35407                           
 35408                           ; BSR set to: 0
 35409                           ;sw_timer.c: 100: ticksAdded = 0;
 35410  004E06  6A38               	clrf	_ticksAdded,c	;volatile
 35411  004E08  6A39               	clrf	_ticksAdded+1,c	;volatile
 35412  004E0A  6A3A               	clrf	_ticksAdded+2,c	;volatile
 35413  004E0C  6A3B               	clrf	_ticksAdded+3,c	;volatile
 35414                           
 35415                           ; BSR set to: 0
 35416                           ;sw_timer.c: 101: reloadVal = 0;
 35417  004E0E  6A44               	clrf	_reloadVal,c	;volatile
 35418  004E10  6A45               	clrf	_reloadVal+1,c	;volatile
 35419                           
 35420                           ;sw_timer.c: 102: }
 35421  004E12  D028               	goto	l11678
 35422  004E14                     l11676:
 35423                           
 35424                           ; BSR set to: 0
 35425                           ;sw_timer.c: 103: else
 35426                           ;sw_timer.c: 104: {
 35427                           ;sw_timer.c: 105: retVal = tmrVal - reloadVal - ticksAccounted + ticksAdded;
 35428  004E14  5044               	movf	_reloadVal,w,c	;volatile
 35429  004E16  5C3E               	subwf	TMR_GetDeltaTime@tmrVal,w,c
 35430  004E18  6F6E               	movwf	??_TMR_GetDeltaTime& (0+255),b
 35431  004E1A  5045               	movf	_reloadVal+1,w,c	;volatile
 35432  004E1C  583F               	subwfb	TMR_GetDeltaTime@tmrVal+1,w,c
 35433  004E1E  6F6F               	movwf	(??_TMR_GetDeltaTime+1)& (0+255),b
 35434  004E20  6B70               	clrf	(??_TMR_GetDeltaTime+2)& (0+255),b
 35435  004E22  6B71               	clrf	(??_TMR_GetDeltaTime+3)& (0+255),b
 35436  004E24  5034               	movf	_ticksAccounted,w,c	;volatile
 35437  004E26  5D6E               	subwf	??_TMR_GetDeltaTime& (0+255),w,b
 35438  004E28  6F72               	movwf	(??_TMR_GetDeltaTime+4)& (0+255),b
 35439  004E2A  5035               	movf	_ticksAccounted+1,w,c	;volatile
 35440  004E2C  596F               	subwfb	(??_TMR_GetDeltaTime+1)& (0+255),w,b
 35441  004E2E  6F73               	movwf	(??_TMR_GetDeltaTime+5)& (0+255),b
 35442  004E30  5036               	movf	_ticksAccounted+2,w,c	;volatile
 35443  004E32  5970               	subwfb	(??_TMR_GetDeltaTime+2)& (0+255),w,b
 35444  004E34  6F74               	movwf	(??_TMR_GetDeltaTime+6)& (0+255),b
 35445  004E36  5037               	movf	_ticksAccounted+3,w,c	;volatile
 35446  004E38  5971               	subwfb	(??_TMR_GetDeltaTime+3)& (0+255),w,b
 35447  004E3A  6F75               	movwf	(??_TMR_GetDeltaTime+7)& (0+255),b
 35448  004E3C  5038               	movf	_ticksAdded,w,c	;volatile
 35449  004E3E  2572               	addwf	(??_TMR_GetDeltaTime+4)& (0+255),w,b
 35450  004E40  6E30               	movwf	TMR_GetDeltaTime@retVal,c
 35451  004E42  5039               	movf	_ticksAdded+1,w,c	;volatile
 35452  004E44  2173               	addwfc	(??_TMR_GetDeltaTime+5)& (0+255),w,b
 35453  004E46  6E31               	movwf	TMR_GetDeltaTime@retVal+1,c
 35454  004E48  503A               	movf	_ticksAdded+2,w,c	;volatile
 35455  004E4A  2174               	addwfc	(??_TMR_GetDeltaTime+6)& (0+255),w,b
 35456  004E4C  6E32               	movwf	TMR_GetDeltaTime@retVal+2,c
 35457  004E4E  503B               	movf	_ticksAdded+3,w,c	;volatile
 35458  004E50  2175               	addwfc	(??_TMR_GetDeltaTime+7)& (0+255),w,b
 35459  004E52  6E33               	movwf	TMR_GetDeltaTime@retVal+3,c
 35460                           
 35461                           ;sw_timer.c: 106: ticksAccounted += retVal;
 35462  004E54  5030               	movf	TMR_GetDeltaTime@retVal,w,c
 35463  004E56  2634               	addwf	_ticksAccounted,f,c	;volatile
 35464  004E58  5031               	movf	TMR_GetDeltaTime@retVal+1,w,c
 35465  004E5A  2235               	addwfc	_ticksAccounted+1,f,c	;volatile
 35466  004E5C  5032               	movf	TMR_GetDeltaTime@retVal+2,w,c
 35467  004E5E  2236               	addwfc	_ticksAccounted+2,f,c	;volatile
 35468  004E60  5033               	movf	TMR_GetDeltaTime@retVal+3,w,c
 35469  004E62  2237               	addwfc	_ticksAccounted+3,f,c	;volatile
 35470  004E64                     l11678:
 35471                           
 35472                           ; BSR set to: 0
 35473                           ;sw_timer.c: 107: }
 35474                           ;sw_timer.c: 109: return retVal;
 35475  004E64  C030  F06A         	movff	TMR_GetDeltaTime@retVal,?_TMR_GetDeltaTime
 35476  004E68  C031  F06B         	movff	TMR_GetDeltaTime@retVal+1,?_TMR_GetDeltaTime+1
 35477  004E6C  C032  F06C         	movff	TMR_GetDeltaTime@retVal+2,?_TMR_GetDeltaTime+2
 35478  004E70  C033  F06D         	movff	TMR_GetDeltaTime@retVal+3,?_TMR_GetDeltaTime+3
 35479                           
 35480                           ; BSR set to: 0
 35481  004E74  0012               	return		;funcret
 35482  004E76                     __end_of_TMR_GetDeltaTime:
 35483                           	opt stack 0
 35484                           tosu	equ	0xFFF
 35485                           tosh	equ	0xFFE
 35486                           tosl	equ	0xFFD
 35487                           pclath	equ	0xFFA
 35488                           tblptru	equ	0xFF8
 35489                           tblptrh	equ	0xFF7
 35490                           tblptrl	equ	0xFF6
 35491                           tablat	equ	0xFF5
 35492                           prodh	equ	0xFF4
 35493                           prodl	equ	0xFF3
 35494                           intcon	equ	0xFF2
 35495                           intcon2	equ	0xFF1
 35496                           intcon3	equ	0xFF0
 35497                           indf0	equ	0xFEF
 35498                           postinc0	equ	0xFEE
 35499                           plusw0	equ	0xFEB
 35500                           fsr0h	equ	0xFEA
 35501                           fsr0l	equ	0xFE9
 35502                           wreg	equ	0xFE8
 35503                           postinc1	equ	0xFE6
 35504                           postdec1	equ	0xFE5
 35505                           plusw1	equ	0xFE3
 35506                           fsr1h	equ	0xFE2
 35507                           fsr1l	equ	0xFE1
 35508                           indf2	equ	0xFDF
 35509                           postinc2	equ	0xFDE
 35510                           postdec2	equ	0xFDD
 35511                           plusw2	equ	0xFDB
 35512                           fsr2h	equ	0xFDA
 35513                           fsr2l	equ	0xFD9
 35514                           status	equ	0xFD8
 35515                           
 35516 ;; *************** function _TMR1_ReadTimer *****************
 35517 ;; Defined at:
 35518 ;;		line 107 in file "mcc_generated_files/tmr1.c"
 35519 ;; Parameters:    Size  Location     Type
 35520 ;;		None
 35521 ;; Auto vars:     Size  Location     Type
 35522 ;;  readVal         2    8[BANK0 ] unsigned int 
 35523 ;; Return value:  Size  Location     Type
 35524 ;;                  2    4[BANK0 ] unsigned int 
 35525 ;; Registers used:
 35526 ;;		wreg, status,2, status,0
 35527 ;; Tracked objects:
 35528 ;;		On entry : F/0
 35529 ;;		On exit  : F/0
 35530 ;;		Unchanged: 0/0
 35531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 35532 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35533 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35534 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35535 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35536 ;;Total ram usage:        6 bytes
 35537 ;; Hardware stack levels used:    1
 35538 ;; Hardware stack levels required when called:    7
 35539 ;; This function calls:
 35540 ;;		Nothing
 35541 ;; This function is called by:
 35542 ;;		_TMR_GetDeltaTime
 35543 ;;		_TMR_SwapTimer
 35544 ;; This function uses a non-reentrant model
 35545 ;;
 35546                           
 35547                           	psect	text186
 35548  007394                     __ptext186:
 35549                           	opt stack 0
 35550  007394                     _TMR1_ReadTimer:
 35551                           	opt stack 17
 35552                           
 35553                           ; BSR set to: 0
 35554                           ;tmr1.c: 109: uint16_t readVal;
 35555                           ;tmr1.c: 111: readVal = (TMR1H << 8) | TMR1L;
 35556                           
 35557                           ; BSR set to: 0
 35558                           ;incstack = 0
 35559  007394  50CE               	movf	4046,w,c	;volatile
 35560  007396  CFCF F066          	movff	4047,??_TMR1_ReadTimer	;volatile
 35561  00739A  6B67               	clrf	(??_TMR1_ReadTimer+1)& (0+255),b
 35562  00739C  C066  F067         	movff	??_TMR1_ReadTimer,??_TMR1_ReadTimer+1
 35563  0073A0  6B66               	clrf	??_TMR1_ReadTimer& (0+255),b
 35564  0073A2  1166               	iorwf	??_TMR1_ReadTimer& (0+255),w,b
 35565  0073A4  6F68               	movwf	TMR1_ReadTimer@readVal& (0+255),b
 35566  0073A6  5167               	movf	(??_TMR1_ReadTimer+1)& (0+255),w,b
 35567  0073A8  6F69               	movwf	(TMR1_ReadTimer@readVal+1)& (0+255),b
 35568                           
 35569                           ; BSR set to: 0
 35570                           ;tmr1.c: 113: return readVal;
 35571  0073AA  C068  F064         	movff	TMR1_ReadTimer@readVal,?_TMR1_ReadTimer
 35572  0073AE  C069  F065         	movff	TMR1_ReadTimer@readVal+1,?_TMR1_ReadTimer+1
 35573                           
 35574                           ; BSR set to: 0
 35575  0073B2  0012               	return		;funcret
 35576  0073B4                     __end_of_TMR1_ReadTimer:
 35577                           	opt stack 0
 35578                           tosu	equ	0xFFF
 35579                           tosh	equ	0xFFE
 35580                           tosl	equ	0xFFD
 35581                           pclath	equ	0xFFA
 35582                           tblptru	equ	0xFF8
 35583                           tblptrh	equ	0xFF7
 35584                           tblptrl	equ	0xFF6
 35585                           tablat	equ	0xFF5
 35586                           prodh	equ	0xFF4
 35587                           prodl	equ	0xFF3
 35588                           intcon	equ	0xFF2
 35589                           intcon2	equ	0xFF1
 35590                           intcon3	equ	0xFF0
 35591                           indf0	equ	0xFEF
 35592                           postinc0	equ	0xFEE
 35593                           plusw0	equ	0xFEB
 35594                           fsr0h	equ	0xFEA
 35595                           fsr0l	equ	0xFE9
 35596                           wreg	equ	0xFE8
 35597                           postinc1	equ	0xFE6
 35598                           postdec1	equ	0xFE5
 35599                           plusw1	equ	0xFE3
 35600                           fsr1h	equ	0xFE2
 35601                           fsr1l	equ	0xFE1
 35602                           indf2	equ	0xFDF
 35603                           postinc2	equ	0xFDE
 35604                           postdec2	equ	0xFDD
 35605                           plusw2	equ	0xFDB
 35606                           fsr2h	equ	0xFDA
 35607                           fsr2l	equ	0xFD9
 35608                           status	equ	0xFD8
 35609                           
 35610 ;; *************** function _SwTimerSetTimeout *****************
 35611 ;; Defined at:
 35612 ;;		line 186 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 35613 ;; Parameters:    Size  Location     Type
 35614 ;;  timerId         1    wreg     unsigned char 
 35615 ;;  timeout         4   17[BANK0 ] unsigned long 
 35616 ;; Auto vars:     Size  Location     Type
 35617 ;;  timerId         1   25[BANK0 ] unsigned char 
 35618 ;; Return value:  Size  Location     Type
 35619 ;;                  1    wreg      void 
 35620 ;; Registers used:
 35621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 35622 ;; Tracked objects:
 35623 ;;		On entry : C/2
 35624 ;;		On exit  : F/0
 35625 ;;		Unchanged: 0/0
 35626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 35627 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35628 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35629 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35630 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35631 ;;Total ram usage:        9 bytes
 35632 ;; Hardware stack levels used:    1
 35633 ;; Hardware stack levels required when called:    7
 35634 ;; This function calls:
 35635 ;;		Nothing
 35636 ;; This function is called by:
 35637 ;;		_RADIO_Transmit
 35638 ;;		_RADIO_ReceiveStart
 35639 ;;		_LORAWAN_TxDone
 35640 ;;		_LORAWAN_RxTimeout
 35641 ;;		_StartReTxTimer
 35642 ;;		_DutyCycleCallback
 35643 ;;		_LORAWAN_Join
 35644 ;;		_LORAWAN_LinkCheckConfigure
 35645 ;;		_LORAWAN_LinkCheckCallback
 35646 ;;		_UpdateRetransmissionAckTimeoutState
 35647 ;;		_UpdateJoinSuccessState
 35648 ;; This function uses a non-reentrant model
 35649 ;;
 35650                           
 35651                           	psect	text187
 35652  006C88                     __ptext187:
 35653                           	opt stack 0
 35654  006C88                     _SwTimerSetTimeout:
 35655                           	opt stack 20
 35656                           
 35657                           ; BSR set to: 0
 35658                           ;incstack = 0
 35659                           ;SwTimerSetTimeout@timerId stored from wreg
 35660  006C88  0100               	movlb	0	; () banked
 35661  006C8A  6F79               	movwf	SwTimerSetTimeout@timerId& (0+255),b
 35662                           
 35663                           ;sw_timer.c: 188: (INTCONbits.GIE = 0);
 35664  006C8C  9EF2               	bcf	intcon,7,c	;volatile
 35665                           
 35666                           ;sw_timer.c: 189: swTimers[timerId].ticksRemaining = timeout - 32;
 35667  006C8E  0EE0               	movlw	224
 35668  006C90  2571               	addwf	SwTimerSetTimeout@timeout& (0+255),w,b
 35669  006C92  6F75               	movwf	??_SwTimerSetTimeout& (0+255),b
 35670  006C94  0EFF               	movlw	255
 35671  006C96  2172               	addwfc	(SwTimerSetTimeout@timeout+1)& (0+255),w,b
 35672  006C98  6F76               	movwf	(??_SwTimerSetTimeout+1)& (0+255),b
 35673  006C9A  0EFF               	movlw	255
 35674  006C9C  2173               	addwfc	(SwTimerSetTimeout@timeout+2)& (0+255),w,b
 35675  006C9E  6F77               	movwf	(??_SwTimerSetTimeout+2)& (0+255),b
 35676  006CA0  0EFF               	movlw	255
 35677  006CA2  2174               	addwfc	(SwTimerSetTimeout@timeout+3)& (0+255),w,b
 35678  006CA4  6F78               	movwf	(??_SwTimerSetTimeout+3)& (0+255),b
 35679  006CA6  5179               	movf	SwTimerSetTimeout@timerId& (0+255),w,b
 35680  006CA8  0D08               	mullw	8
 35681  006CAA  0E00               	movlw	low _swTimers
 35682  006CAC  24F3               	addwf	prodl,w,c
 35683  006CAE  6ED9               	movwf	fsr2l,c
 35684  006CB0  0E03               	movlw	high _swTimers
 35685  006CB2  20F4               	addwfc	prodh,w,c
 35686  006CB4  6EDA               	movwf	fsr2h,c
 35687  006CB6  C075  FFDE         	movff	??_SwTimerSetTimeout,postinc2
 35688  006CBA  C076  FFDE         	movff	??_SwTimerSetTimeout+1,postinc2
 35689  006CBE  C077  FFDE         	movff	??_SwTimerSetTimeout+2,postinc2
 35690  006CC2  C078  FFDE         	movff	??_SwTimerSetTimeout+3,postinc2
 35691                           
 35692                           ; BSR set to: 0
 35693                           ;sw_timer.c: 190: (INTCONbits.GIE = 1);
 35694  006CC6  8EF2               	bsf	intcon,7,c	;volatile
 35695                           
 35696                           ; BSR set to: 0
 35697  006CC8  0012               	return		;funcret
 35698  006CCA                     __end_of_SwTimerSetTimeout:
 35699                           	opt stack 0
 35700                           tosu	equ	0xFFF
 35701                           tosh	equ	0xFFE
 35702                           tosl	equ	0xFFD
 35703                           pclath	equ	0xFFA
 35704                           tblptru	equ	0xFF8
 35705                           tblptrh	equ	0xFF7
 35706                           tblptrl	equ	0xFF6
 35707                           tablat	equ	0xFF5
 35708                           prodh	equ	0xFF4
 35709                           prodl	equ	0xFF3
 35710                           intcon	equ	0xFF2
 35711                           intcon2	equ	0xFF1
 35712                           intcon3	equ	0xFF0
 35713                           indf0	equ	0xFEF
 35714                           postinc0	equ	0xFEE
 35715                           plusw0	equ	0xFEB
 35716                           fsr0h	equ	0xFEA
 35717                           fsr0l	equ	0xFE9
 35718                           wreg	equ	0xFE8
 35719                           postinc1	equ	0xFE6
 35720                           postdec1	equ	0xFE5
 35721                           plusw1	equ	0xFE3
 35722                           fsr1h	equ	0xFE2
 35723                           fsr1l	equ	0xFE1
 35724                           indf2	equ	0xFDF
 35725                           postinc2	equ	0xFDE
 35726                           postdec2	equ	0xFDD
 35727                           plusw2	equ	0xFDB
 35728                           fsr2h	equ	0xFDA
 35729                           fsr2l	equ	0xFD9
 35730                           status	equ	0xFD8
 35731                           
 35732 ;; *************** function _InitDefault868Channels *****************
 35733 ;; Defined at:
 35734 ;;		line 979 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 35735 ;; Parameters:    Size  Location     Type
 35736 ;;		None
 35737 ;; Auto vars:     Size  Location     Type
 35738 ;;  i               1   14[BANK0 ] unsigned char 
 35739 ;; Return value:  Size  Location     Type
 35740 ;;                  1    wreg      void 
 35741 ;; Registers used:
 35742 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35743 ;; Tracked objects:
 35744 ;;		On entry : F/1
 35745 ;;		On exit  : F/0
 35746 ;;		Unchanged: 0/0
 35747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 35748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35749 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35751 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35752 ;;Total ram usage:        1 bytes
 35753 ;; Hardware stack levels used:    1
 35754 ;; Hardware stack levels required when called:    8
 35755 ;; This function calls:
 35756 ;;		_memcpy
 35757 ;;		_memset
 35758 ;; This function is called by:
 35759 ;;		_LORAWAN_Reset
 35760 ;; This function uses a non-reentrant model
 35761 ;;
 35762                           
 35763                           	psect	text188
 35764  00636C                     __ptext188:
 35765                           	opt stack 0
 35766  00636C                     _InitDefault868Channels:
 35767                           	opt stack 20
 35768                           
 35769                           ; BSR set to: 1
 35770                           ;lorawan_eu.c: 981: uint8_t i;
 35771                           ;lorawan_eu.c: 983: memset (Channels, 0, sizeof(Channels) );
 35772                           
 35773                           ; BSR set to: 0
 35774                           ;incstack = 0
 35775  00636C  0E00               	movlw	low _Channels
 35776  00636E  0100               	movlb	0	; () banked
 35777  006370  6F64               	movwf	memset@p1& (0+255),b
 35778  006372  0E04               	movlw	high _Channels
 35779  006374  6F65               	movwf	(memset@p1+1)& (0+255),b
 35780  006376  6B67               	clrf	(memset@c+1)& (0+255),b
 35781  006378  6B66               	clrf	memset@c& (0+255),b
 35782  00637A  6B69               	clrf	(memset@n+1)& (0+255),b
 35783  00637C  0EE0               	movlw	224
 35784  00637E  6F68               	movwf	memset@n& (0+255),b
 35785  006380  ECE0  F038         	call	_memset	;wreg free
 35786                           
 35787                           ; BSR set to: 0
 35788                           ;lorawan_eu.c: 984: memcpy (Channels, DefaultChannels868, sizeof(DefaultChannels868) );
 35789  006384  0E00               	movlw	low _Channels
 35790  006386  6F64               	movwf	memcpy@d1& (0+255),b
 35791  006388  0E04               	movlw	high _Channels
 35792  00638A  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 35793  00638C  0ED2               	movlw	low _DefaultChannels868
 35794  00638E  6F66               	movwf	memcpy@s1& (0+255),b
 35795  006390  0E7F               	movlw	high _DefaultChannels868
 35796  006392  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 35797  006394  6B69               	clrf	(memcpy@n+1)& (0+255),b
 35798  006396  0E2A               	movlw	42
 35799  006398  6F68               	movwf	memcpy@n& (0+255),b
 35800  00639A  ECCA  F033         	call	_memcpy	;wreg free
 35801                           
 35802                           ; BSR set to: 0
 35803                           ;lorawan_eu.c: 985: for (i = 3; i < 16; i++)
 35804  00639E  0E03               	movlw	3
 35805  0063A0  6F6E               	movwf	InitDefault868Channels@i& (0+255),b
 35806  0063A2                     l14772:
 35807                           
 35808                           ; BSR set to: 0
 35809                           ;lorawan_eu.c: 986: {
 35810                           ;lorawan_eu.c: 989: Channels[i].dutyCycle = (65535U);
 35811  0063A2  516E               	movf	InitDefault868Channels@i& (0+255),w,b
 35812  0063A4  0D0E               	mullw	14
 35813  0063A6  0E06               	movlw	low (_Channels+6)
 35814  0063A8  24F3               	addwf	prodl,w,c
 35815  0063AA  6ED9               	movwf	fsr2l,c
 35816  0063AC  0E04               	movlw	high (_Channels+6)
 35817  0063AE  20F4               	addwfc	prodh,w,c
 35818  0063B0  6EDA               	movwf	fsr2h,c
 35819  0063B2  68DE               	setf	postinc2,c
 35820  0063B4  68DD               	setf	postdec2,c
 35821                           
 35822                           ;lorawan_eu.c: 990: Channels[i].dataRange.value = (255);
 35823  0063B6  516E               	movf	InitDefault868Channels@i& (0+255),w,b
 35824  0063B8  0D0E               	mullw	14
 35825  0063BA  0E05               	movlw	low (_Channels+5)
 35826  0063BC  24F3               	addwf	prodl,w,c
 35827  0063BE  6ED9               	movwf	fsr2l,c
 35828  0063C0  0E04               	movlw	high (_Channels+5)
 35829  0063C2  20F4               	addwfc	prodh,w,c
 35830  0063C4  6EDA               	movwf	fsr2h,c
 35831  0063C6  68DF               	setf	indf2,c
 35832                           
 35833                           ; BSR set to: 0
 35834  0063C8  2B6E               	incf	InitDefault868Channels@i& (0+255),f,b
 35835                           
 35836                           ; BSR set to: 0
 35837  0063CA  0E0F               	movlw	15
 35838  0063CC  656E               	cpfsgt	InitDefault868Channels@i& (0+255),b
 35839  0063CE  D7E9               	goto	l14772
 35840  0063D0  0C0F               	retlw	15
 35841  0063D2                     __end_of_InitDefault868Channels:
 35842                           	opt stack 0
 35843                           tosu	equ	0xFFF
 35844                           tosh	equ	0xFFE
 35845                           tosl	equ	0xFFD
 35846                           pclath	equ	0xFFA
 35847                           tblptru	equ	0xFF8
 35848                           tblptrh	equ	0xFF7
 35849                           tblptrl	equ	0xFF6
 35850                           tablat	equ	0xFF5
 35851                           prodh	equ	0xFF4
 35852                           prodl	equ	0xFF3
 35853                           intcon	equ	0xFF2
 35854                           intcon2	equ	0xFF1
 35855                           intcon3	equ	0xFF0
 35856                           indf0	equ	0xFEF
 35857                           postinc0	equ	0xFEE
 35858                           plusw0	equ	0xFEB
 35859                           fsr0h	equ	0xFEA
 35860                           fsr0l	equ	0xFE9
 35861                           wreg	equ	0xFE8
 35862                           postinc1	equ	0xFE6
 35863                           postdec1	equ	0xFE5
 35864                           plusw1	equ	0xFE3
 35865                           fsr1h	equ	0xFE2
 35866                           fsr1l	equ	0xFE1
 35867                           indf2	equ	0xFDF
 35868                           postinc2	equ	0xFDE
 35869                           postdec2	equ	0xFDD
 35870                           plusw2	equ	0xFDB
 35871                           fsr2h	equ	0xFDA
 35872                           fsr2l	equ	0xFD9
 35873                           status	equ	0xFD8
 35874                           
 35875 ;; *************** function _InitDefault433Channels *****************
 35876 ;; Defined at:
 35877 ;;		line 994 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 35878 ;; Parameters:    Size  Location     Type
 35879 ;;		None
 35880 ;; Auto vars:     Size  Location     Type
 35881 ;;  i               1   14[BANK0 ] unsigned char 
 35882 ;; Return value:  Size  Location     Type
 35883 ;;                  1    wreg      void 
 35884 ;; Registers used:
 35885 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35886 ;; Tracked objects:
 35887 ;;		On entry : F/1
 35888 ;;		On exit  : F/0
 35889 ;;		Unchanged: 0/0
 35890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 35891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35892 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35894 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35895 ;;Total ram usage:        1 bytes
 35896 ;; Hardware stack levels used:    1
 35897 ;; Hardware stack levels required when called:    8
 35898 ;; This function calls:
 35899 ;;		_memcpy
 35900 ;;		_memset
 35901 ;; This function is called by:
 35902 ;;		_LORAWAN_Reset
 35903 ;; This function uses a non-reentrant model
 35904 ;;
 35905                           
 35906                           	psect	text189
 35907  0063D2                     __ptext189:
 35908                           	opt stack 0
 35909  0063D2                     _InitDefault433Channels:
 35910                           	opt stack 20
 35911                           
 35912                           ; BSR set to: 1
 35913                           ;lorawan_eu.c: 996: uint8_t i;
 35914                           ;lorawan_eu.c: 998: memset (Channels, 0, sizeof(Channels) );
 35915                           
 35916                           ; BSR set to: 0
 35917                           ;incstack = 0
 35918  0063D2  0E00               	movlw	low _Channels
 35919  0063D4  0100               	movlb	0	; () banked
 35920  0063D6  6F64               	movwf	memset@p1& (0+255),b
 35921  0063D8  0E04               	movlw	high _Channels
 35922  0063DA  6F65               	movwf	(memset@p1+1)& (0+255),b
 35923  0063DC  6B67               	clrf	(memset@c+1)& (0+255),b
 35924  0063DE  6B66               	clrf	memset@c& (0+255),b
 35925  0063E0  6B69               	clrf	(memset@n+1)& (0+255),b
 35926  0063E2  0EE0               	movlw	224
 35927  0063E4  6F68               	movwf	memset@n& (0+255),b
 35928  0063E6  ECE0  F038         	call	_memset	;wreg free
 35929                           
 35930                           ; BSR set to: 0
 35931                           ;lorawan_eu.c: 999: memcpy (Channels, DefaultChannels433, sizeof(DefaultChannels433) );
 35932  0063EA  0E00               	movlw	low _Channels
 35933  0063EC  6F64               	movwf	memcpy@d1& (0+255),b
 35934  0063EE  0E04               	movlw	high _Channels
 35935  0063F0  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 35936  0063F2  0EA8               	movlw	low _DefaultChannels433
 35937  0063F4  6F66               	movwf	memcpy@s1& (0+255),b
 35938  0063F6  0E7F               	movlw	high _DefaultChannels433
 35939  0063F8  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 35940  0063FA  6B69               	clrf	(memcpy@n+1)& (0+255),b
 35941  0063FC  0E2A               	movlw	42
 35942  0063FE  6F68               	movwf	memcpy@n& (0+255),b
 35943  006400  ECCA  F033         	call	_memcpy	;wreg free
 35944                           
 35945                           ; BSR set to: 0
 35946                           ;lorawan_eu.c: 1000: for (i = 3; i < 16; i++)
 35947  006404  0E03               	movlw	3
 35948  006406  6F6E               	movwf	InitDefault433Channels@i& (0+255),b
 35949  006408                     l14788:
 35950                           
 35951                           ; BSR set to: 0
 35952                           ;lorawan_eu.c: 1001: {
 35953                           ;lorawan_eu.c: 1004: Channels[i].dutyCycle = (65535U);
 35954  006408  516E               	movf	InitDefault433Channels@i& (0+255),w,b
 35955  00640A  0D0E               	mullw	14
 35956  00640C  0E06               	movlw	low (_Channels+6)
 35957  00640E  24F3               	addwf	prodl,w,c
 35958  006410  6ED9               	movwf	fsr2l,c
 35959  006412  0E04               	movlw	high (_Channels+6)
 35960  006414  20F4               	addwfc	prodh,w,c
 35961  006416  6EDA               	movwf	fsr2h,c
 35962  006418  68DE               	setf	postinc2,c
 35963  00641A  68DD               	setf	postdec2,c
 35964                           
 35965                           ;lorawan_eu.c: 1005: Channels[i].dataRange.value = (255);
 35966  00641C  516E               	movf	InitDefault433Channels@i& (0+255),w,b
 35967  00641E  0D0E               	mullw	14
 35968  006420  0E05               	movlw	low (_Channels+5)
 35969  006422  24F3               	addwf	prodl,w,c
 35970  006424  6ED9               	movwf	fsr2l,c
 35971  006426  0E04               	movlw	high (_Channels+5)
 35972  006428  20F4               	addwfc	prodh,w,c
 35973  00642A  6EDA               	movwf	fsr2h,c
 35974  00642C  68DF               	setf	indf2,c
 35975                           
 35976                           ; BSR set to: 0
 35977  00642E  2B6E               	incf	InitDefault433Channels@i& (0+255),f,b
 35978                           
 35979                           ; BSR set to: 0
 35980  006430  0E0F               	movlw	15
 35981  006432  656E               	cpfsgt	InitDefault433Channels@i& (0+255),b
 35982  006434  D7E9               	goto	l14788
 35983  006436  0C0F               	retlw	15
 35984  006438                     __end_of_InitDefault433Channels:
 35985                           	opt stack 0
 35986                           tosu	equ	0xFFF
 35987                           tosh	equ	0xFFE
 35988                           tosl	equ	0xFFD
 35989                           pclath	equ	0xFFA
 35990                           tblptru	equ	0xFF8
 35991                           tblptrh	equ	0xFF7
 35992                           tblptrl	equ	0xFF6
 35993                           tablat	equ	0xFF5
 35994                           prodh	equ	0xFF4
 35995                           prodl	equ	0xFF3
 35996                           intcon	equ	0xFF2
 35997                           intcon2	equ	0xFF1
 35998                           intcon3	equ	0xFF0
 35999                           indf0	equ	0xFEF
 36000                           postinc0	equ	0xFEE
 36001                           plusw0	equ	0xFEB
 36002                           fsr0h	equ	0xFEA
 36003                           fsr0l	equ	0xFE9
 36004                           wreg	equ	0xFE8
 36005                           postinc1	equ	0xFE6
 36006                           postdec1	equ	0xFE5
 36007                           plusw1	equ	0xFE3
 36008                           fsr1h	equ	0xFE2
 36009                           fsr1l	equ	0xFE1
 36010                           indf2	equ	0xFDF
 36011                           postinc2	equ	0xFDE
 36012                           postdec2	equ	0xFDD
 36013                           plusw2	equ	0xFDB
 36014                           fsr2h	equ	0xFDA
 36015                           fsr2l	equ	0xFD9
 36016                           status	equ	0xFD8
 36017                           
 36018 ;; *************** function _memset *****************
 36019 ;; Defined at:
 36020 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\memset.c"
 36021 ;; Parameters:    Size  Location     Type
 36022 ;;  p1              2    4[BANK0 ] PTR void 
 36023 ;;		 -> AssemblePacket@mhdr(1), aesBuffer(16), GenerateSubkey@l(16), AESCmac@x(16), 
 36024 ;;		 -> macBuffer(271), Channels(224), loRa.activationParameters(105), loRa(245), 
 36025 ;;  c               2    6[BANK0 ] int 
 36026 ;;  n               2    8[BANK0 ] unsigned int 
 36027 ;; Auto vars:     Size  Location     Type
 36028 ;;  p               2   10[BANK0 ] PTR unsigned char 
 36029 ;;		 -> AssemblePacket@mhdr(1), aesBuffer(16), GenerateSubkey@l(16), AESCmac@x(16), 
 36030 ;;		 -> macBuffer(271), Channels(224), loRa.activationParameters(105), loRa(245), 
 36031 ;; Return value:  Size  Location     Type
 36032 ;;                  2    4[BANK0 ] PTR void 
 36033 ;; Registers used:
 36034 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 36035 ;; Tracked objects:
 36036 ;;		On entry : F/0
 36037 ;;		On exit  : F/0
 36038 ;;		Unchanged: 0/0
 36039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 36040 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36041 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36043 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36044 ;;Total ram usage:        8 bytes
 36045 ;; Hardware stack levels used:    1
 36046 ;; Hardware stack levels required when called:    7
 36047 ;; This function calls:
 36048 ;;		Nothing
 36049 ;; This function is called by:
 36050 ;;		_LORAWAN_Reset
 36051 ;;		_InitDefault868Channels
 36052 ;;		_InitDefault433Channels
 36053 ;;		_AESCmac
 36054 ;;		_GenerateSubkey
 36055 ;;		_AssemblePacket
 36056 ;;		_PrepareJoinRequestFrame
 36057 ;;		_PrepareSessionKeys
 36058 ;;		_AssembleEncryptionBlock
 36059 ;; This function uses a non-reentrant model
 36060 ;;
 36061                           
 36062                           	psect	text190
 36063  0071C0                     __ptext190:
 36064                           	opt stack 0
 36065  0071C0                     _memset:
 36066                           	opt stack 20
 36067                           
 36068                           ; BSR set to: 0
 36069                           
 36070                           ; BSR set to: 0
 36071                           ;incstack = 0
 36072  0071C0  C064  F06A         	movff	memset@p1,memset@p
 36073  0071C4  C065  F06B         	movff	memset@p1+1,memset@p+1
 36074  0071C8  D008               	goto	l12094
 36075  0071CA                     l12090:
 36076                           
 36077                           ; BSR set to: 0
 36078  0071CA  C06A  FFD9         	movff	memset@p,fsr2l
 36079  0071CE  C06B  FFDA         	movff	memset@p+1,fsr2h
 36080  0071D2  C066  FFDF         	movff	memset@c,indf2
 36081                           
 36082                           ; BSR set to: 0
 36083  0071D6  4B6A               	infsnz	memset@p& (0+255),f,b
 36084  0071D8  2B6B               	incf	(memset@p+1)& (0+255),f,b
 36085  0071DA                     l12094:
 36086                           
 36087                           ; BSR set to: 0
 36088  0071DA  0768               	decf	memset@n& (0+255),f,b
 36089  0071DC  A0D8               	btfss	status,0,c
 36090  0071DE  0769               	decf	(memset@n+1)& (0+255),f,b
 36091  0071E0  2968               	incf	memset@n& (0+255),w,b
 36092  0071E2  E1F3               	bnz	l12090
 36093  0071E4  2969               	incf	(memset@n+1)& (0+255),w,b
 36094  0071E6  E1F1               	bnz	l12090
 36095                           
 36096                           ; BSR set to: 0
 36097  0071E8  0012               	return		;funcret
 36098  0071EA                     __end_of_memset:
 36099                           	opt stack 0
 36100                           tosu	equ	0xFFF
 36101                           tosh	equ	0xFFE
 36102                           tosl	equ	0xFFD
 36103                           pclath	equ	0xFFA
 36104                           tblptru	equ	0xFF8
 36105                           tblptrh	equ	0xFF7
 36106                           tblptrl	equ	0xFF6
 36107                           tablat	equ	0xFF5
 36108                           prodh	equ	0xFF4
 36109                           prodl	equ	0xFF3
 36110                           intcon	equ	0xFF2
 36111                           intcon2	equ	0xFF1
 36112                           intcon3	equ	0xFF0
 36113                           indf0	equ	0xFEF
 36114                           postinc0	equ	0xFEE
 36115                           plusw0	equ	0xFEB
 36116                           fsr0h	equ	0xFEA
 36117                           fsr0l	equ	0xFE9
 36118                           wreg	equ	0xFE8
 36119                           postinc1	equ	0xFE6
 36120                           postdec1	equ	0xFE5
 36121                           plusw1	equ	0xFE3
 36122                           fsr1h	equ	0xFE2
 36123                           fsr1l	equ	0xFE1
 36124                           indf2	equ	0xFDF
 36125                           postinc2	equ	0xFDE
 36126                           postdec2	equ	0xFDD
 36127                           plusw2	equ	0xFDB
 36128                           fsr2h	equ	0xFDA
 36129                           fsr2l	equ	0xFD9
 36130                           status	equ	0xFD8
 36131                           
 36132 ;; *************** function _memcpy *****************
 36133 ;; Defined at:
 36134 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\memcpy.c"
 36135 ;; Parameters:    Size  Location     Type
 36136 ;;  d1              2    4[BANK0 ] PTR void 
 36137 ;;		 -> AESEncodeLoRa@useKey(16), ComputeMic@mic(4), ExtractMic@mic(4), aesBuffer(16), 
 36138 ;;		 -> LORAWAN_RxDone@computedMic(4), loRa.activationParameters.applicationEui(8), loRa.activationParameters.deviceEui(
      +8), AESCmac@x(16), 
 36139 ;;		 -> UpdateCfList@frequency(4), macBuffer(271), Channels(224), loRa.activationParameters(105), 
 36140 ;;		 -> radioBuffer(271), loRa(245), RadioConfiguration(54), 
 36141 ;;  s1              2    6[BANK0 ] PTR const void 
 36142 ;;		 -> radioBuffer.cfList(16), LORAWAN_RxDone@hdr.cfList(16), payload(2), appSKey(16), 
 36143 ;;		 -> nwkSKey(16), AssembleEncryptionBlock@frameCounter(4), ComputeSessionKeys@joinAcceptBuffer(2), PrepareJoinRequest
      +Frame@mic(4), 
 36144 ;;		 -> loRa.fCntUp.valueLow(2), aesBuffer(16), LORAWAN_RxDone@hdr(2), loRa.activationParameters.applicationKey(16), 
 36145 ;;		 -> loRa.activationParameters.applicationSessionKey(16), loRa.activationParameters.networkSessionKey(16), loRa.activ
      +ationParameters.deviceAddress(4), loRa.activationParameters.applicationEui(8), 
 36146 ;;		 -> loRa.activationParameters.deviceEui(8), loRa.activationParameters.mcastApplicationSessionKey(16), loRa.activatio
      +nParameters.mcastNetworkSessionKey(16), loRa.activationParameters.mcastDeviceAddress(4), 
 36147 ;;		 -> AESCmac@y(16), FskSyncWordBuff(3), UpdateCfList@joinAccept(2), loRa.activationParameters(105), 
 36148 ;;		 -> loRa.devNonce(2), loRa.fCntUp(4), radioBuffer(271), loRa(245), 
 36149 ;;		 -> DefaultChannels433(42), DefaultChannels868(42), NULL(0), RadioConfiguration.syncWord(8), 
 36150 ;;		 -> RadioConfiguration(54), 
 36151 ;;  n               2    8[BANK0 ] unsigned int 
 36152 ;; Auto vars:     Size  Location     Type
 36153 ;;  s               2   12[BANK0 ] PTR const unsigned char 
 36154 ;;		 -> radioBuffer.cfList(16), LORAWAN_RxDone@hdr.cfList(16), payload(2), appSKey(16), 
 36155 ;;		 -> nwkSKey(16), AssembleEncryptionBlock@frameCounter(4), ComputeSessionKeys@joinAcceptBuffer(2), PrepareJoinRequest
      +Frame@mic(4), 
 36156 ;;		 -> loRa.fCntUp.valueLow(2), aesBuffer(16), LORAWAN_RxDone@hdr(2), loRa.activationParameters.applicationKey(16), 
 36157 ;;		 -> loRa.activationParameters.applicationSessionKey(16), loRa.activationParameters.networkSessionKey(16), loRa.activ
      +ationParameters.deviceAddress(4), loRa.activationParameters.applicationEui(8), 
 36158 ;;		 -> loRa.activationParameters.deviceEui(8), loRa.activationParameters.mcastApplicationSessionKey(16), loRa.activatio
      +nParameters.mcastNetworkSessionKey(16), loRa.activationParameters.mcastDeviceAddress(4), 
 36159 ;;		 -> AESCmac@y(16), FskSyncWordBuff(3), UpdateCfList@joinAccept(2), loRa.activationParameters(105), 
 36160 ;;		 -> loRa.devNonce(2), loRa.fCntUp(4), radioBuffer(271), loRa(245), 
 36161 ;;		 -> DefaultChannels433(42), DefaultChannels868(42), NULL(0), RadioConfiguration.syncWord(8), 
 36162 ;;		 -> RadioConfiguration(54), 
 36163 ;;  d               2   10[BANK0 ] PTR unsigned char 
 36164 ;;		 -> AESEncodeLoRa@useKey(16), ComputeMic@mic(4), ExtractMic@mic(4), aesBuffer(16), 
 36165 ;;		 -> LORAWAN_RxDone@computedMic(4), loRa.activationParameters.applicationEui(8), loRa.activationParameters.deviceEui(
      +8), AESCmac@x(16), 
 36166 ;;		 -> UpdateCfList@frequency(4), macBuffer(271), Channels(224), loRa.activationParameters(105), 
 36167 ;;		 -> radioBuffer(271), loRa(245), RadioConfiguration(54), 
 36168 ;; Return value:  Size  Location     Type
 36169 ;;                  2    4[BANK0 ] PTR void 
 36170 ;; Registers used:
 36171 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 36172 ;; Tracked objects:
 36173 ;;		On entry : F/0
 36174 ;;		On exit  : F/0
 36175 ;;		Unchanged: 0/0
 36176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 36177 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36178 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36180 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36181 ;;Total ram usage:       10 bytes
 36182 ;; Hardware stack levels used:    1
 36183 ;; Hardware stack levels required when called:    7
 36184 ;; This function calls:
 36185 ;;		Nothing
 36186 ;; This function is called by:
 36187 ;;		_RADIO_SetFSKSyncWord
 36188 ;;		_UpdateCfList
 36189 ;;		_InitDefault868Channels
 36190 ;;		_InitDefault433Channels
 36191 ;;		_AESCmac
 36192 ;;		_LORAWAN_SetNetworkSessionKey
 36193 ;;		_LORAWAN_SetApplicationSessionKey
 36194 ;;		_LORAWAN_RxDone
 36195 ;;		_AssemblePacket
 36196 ;;		_PrepareJoinRequestFrame
 36197 ;;		_PrepareSessionKeys
 36198 ;;		_AssembleEncryptionBlock
 36199 ;;		_ExtractMic
 36200 ;;		_ComputeMic
 36201 ;;		_AESEncodeLoRa
 36202 ;; This function uses a non-reentrant model
 36203 ;;
 36204                           
 36205                           	psect	text191
 36206  006794                     __ptext191:
 36207                           	opt stack 0
 36208  006794                     _memcpy:
 36209                           	opt stack 17
 36210                           
 36211                           ; BSR set to: 0
 36212                           
 36213                           ; BSR set to: 0
 36214                           ;incstack = 0
 36215  006794  C066  F06C         	movff	memcpy@s1,memcpy@s
 36216  006798  C067  F06D         	movff	memcpy@s1+1,memcpy@s+1
 36217  00679C  C064  F06A         	movff	memcpy@d1,memcpy@d
 36218  0067A0  C065  F06B         	movff	memcpy@d1+1,memcpy@d+1
 36219  0067A4  D01A               	goto	l11724
 36220  0067A6                     l11718:
 36221                           
 36222                           ; BSR set to: 0
 36223  0067A6  C06C  FFF6         	movff	memcpy@s,tblptrl
 36224  0067AA  C06D  FFF7         	movff	memcpy@s+1,tblptrh
 36225  0067AE  6AF8               	clrf	tblptru,c
 36226  0067B0  C06A  FFD9         	movff	memcpy@d,fsr2l
 36227  0067B4  C06B  FFDA         	movff	memcpy@d+1,fsr2h
 36228  0067B8  0E0E               	movlw	(high __ramtop+-1)
 36229  0067BA  64F7               	cpfsgt	tblptrh,c
 36230  0067BC  D003               	bra	u12587
 36231  0067BE  0008               	tblrd		*
 36232  0067C0  50F5               	movf	tablat,w,c
 36233  0067C2  D005               	bra	u12580
 36234  0067C4                     u12587:
 36235  0067C4  CFF6 FFE9          	movff	tblptrl,fsr0l
 36236  0067C8  CFF7 FFEA          	movff	tblptrh,fsr0h
 36237  0067CC  50EF               	movf	indf0,w,c
 36238  0067CE                     u12580:
 36239  0067CE  6EDF               	movwf	indf2,c
 36240  0067D0  0100               	movlb	0	; () banked
 36241  0067D2  4B6C               	infsnz	memcpy@s& (0+255),f,b
 36242  0067D4  2B6D               	incf	(memcpy@s+1)& (0+255),f,b
 36243                           
 36244                           ; BSR set to: 0
 36245  0067D6  4B6A               	infsnz	memcpy@d& (0+255),f,b
 36246  0067D8  2B6B               	incf	(memcpy@d+1)& (0+255),f,b
 36247  0067DA                     l11724:
 36248                           
 36249                           ; BSR set to: 0
 36250  0067DA  0768               	decf	memcpy@n& (0+255),f,b
 36251  0067DC  A0D8               	btfss	status,0,c
 36252  0067DE  0769               	decf	(memcpy@n+1)& (0+255),f,b
 36253  0067E0  2968               	incf	memcpy@n& (0+255),w,b
 36254  0067E2  E1E1               	bnz	l11718
 36255  0067E4  2969               	incf	(memcpy@n+1)& (0+255),w,b
 36256  0067E6  E1DF               	bnz	l11718
 36257                           
 36258                           ; BSR set to: 0
 36259  0067E8  0012               	return		;funcret
 36260  0067EA                     __end_of_memcpy:
 36261                           	opt stack 0
 36262                           tosu	equ	0xFFF
 36263                           tosh	equ	0xFFE
 36264                           tosl	equ	0xFFD
 36265                           pclath	equ	0xFFA
 36266                           tblptru	equ	0xFF8
 36267                           tblptrh	equ	0xFF7
 36268                           tblptrl	equ	0xFF6
 36269                           tablat	equ	0xFF5
 36270                           prodh	equ	0xFF4
 36271                           prodl	equ	0xFF3
 36272                           intcon	equ	0xFF2
 36273                           intcon2	equ	0xFF1
 36274                           intcon3	equ	0xFF0
 36275                           indf0	equ	0xFEF
 36276                           postinc0	equ	0xFEE
 36277                           plusw0	equ	0xFEB
 36278                           fsr0h	equ	0xFEA
 36279                           fsr0l	equ	0xFE9
 36280                           wreg	equ	0xFE8
 36281                           postinc1	equ	0xFE6
 36282                           postdec1	equ	0xFE5
 36283                           plusw1	equ	0xFE3
 36284                           fsr1h	equ	0xFE2
 36285                           fsr1l	equ	0xFE1
 36286                           indf2	equ	0xFDF
 36287                           postinc2	equ	0xFDE
 36288                           postdec2	equ	0xFDD
 36289                           plusw2	equ	0xFDB
 36290                           fsr2h	equ	0xFDA
 36291                           fsr2l	equ	0xFD9
 36292                           status	equ	0xFD8
 36293                           
 36294 ;; *************** function _CreateAllSoftwareTimers *****************
 36295 ;; Defined at:
 36296 ;;		line 937 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 36297 ;; Parameters:    Size  Location     Type
 36298 ;;		None
 36299 ;; Auto vars:     Size  Location     Type
 36300 ;;		None
 36301 ;; Return value:  Size  Location     Type
 36302 ;;                  1    wreg      void 
 36303 ;; Registers used:
 36304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 36305 ;; Tracked objects:
 36306 ;;		On entry : F/2
 36307 ;;		On exit  : F/2
 36308 ;;		Unchanged: 0/0
 36309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 36310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36314 ;;Total ram usage:        0 bytes
 36315 ;; Hardware stack levels used:    1
 36316 ;; Hardware stack levels required when called:    8
 36317 ;; This function calls:
 36318 ;;		_SwTimerCreate
 36319 ;; This function is called by:
 36320 ;;		_LORAWAN_Init
 36321 ;; This function uses a non-reentrant model
 36322 ;;
 36323                           
 36324                           	psect	text192
 36325  00688E                     __ptext192:
 36326                           	opt stack 0
 36327  00688E                     _CreateAllSoftwareTimers:
 36328                           	opt stack 21
 36329                           
 36330                           ; BSR set to: 2
 36331                           ;lorawan_eu.c: 939: loRa.joinAccept1TimerId = SwTimerCreate();
 36332                           
 36333                           ; BSR set to: 0
 36334                           ;incstack = 0
 36335  00688E  ECA9  F030         	call	_SwTimerCreate	;wreg free
 36336  006892  0102               	movlb	2	; () banked
 36337  006894  6FE2               	movwf	(_loRa+226)& (0+255),b
 36338                           
 36339                           ;lorawan_eu.c: 940: loRa.joinAccept2TimerId = SwTimerCreate();
 36340  006896  ECA9  F030         	call	_SwTimerCreate	;wreg free
 36341  00689A  0102               	movlb	2	; () banked
 36342  00689C  6FE3               	movwf	(_loRa+227)& (0+255),b
 36343                           
 36344                           ;lorawan_eu.c: 941: loRa.receiveWindow1TimerId = SwTimerCreate();
 36345  00689E  ECA9  F030         	call	_SwTimerCreate	;wreg free
 36346  0068A2  0102               	movlb	2	; () banked
 36347  0068A4  6FE4               	movwf	(_loRa+228)& (0+255),b
 36348                           
 36349                           ;lorawan_eu.c: 942: loRa.receiveWindow2TimerId = SwTimerCreate();
 36350  0068A6  ECA9  F030         	call	_SwTimerCreate	;wreg free
 36351  0068AA  0102               	movlb	2	; () banked
 36352  0068AC  6FE5               	movwf	(_loRa+229)& (0+255),b
 36353                           
 36354                           ;lorawan_eu.c: 943: loRa.linkCheckTimerId = SwTimerCreate();
 36355  0068AE  ECA9  F030         	call	_SwTimerCreate	;wreg free
 36356  0068B2  0102               	movlb	2	; () banked
 36357  0068B4  6FE7               	movwf	(_loRa+231)& (0+255),b
 36358                           
 36359                           ;lorawan_eu.c: 944: loRa.ackTimeoutTimerId = SwTimerCreate();
 36360  0068B6  ECA9  F030         	call	_SwTimerCreate	;wreg free
 36361  0068BA  0102               	movlb	2	; () banked
 36362  0068BC  6FE8               	movwf	(_loRa+232)& (0+255),b
 36363                           
 36364                           ;lorawan_eu.c: 945: loRa.automaticReplyTimerId = SwTimerCreate();
 36365  0068BE  ECA9  F030         	call	_SwTimerCreate	;wreg free
 36366  0068C2  0102               	movlb	2	; () banked
 36367  0068C4  6FE6               	movwf	(_loRa+230)& (0+255),b
 36368                           
 36369                           ;lorawan_eu.c: 946: loRa.unconfirmedRetransmisionTimerId = SwTimerCreate();
 36370  0068C6  ECA9  F030         	call	_SwTimerCreate	;wreg free
 36371  0068CA  0102               	movlb	2	; () banked
 36372  0068CC  6FEA               	movwf	(_loRa+234)& (0+255),b
 36373                           
 36374                           ;lorawan_eu.c: 947: loRa.abpJoinTimerId = SwTimerCreate();
 36375  0068CE  ECA9  F030         	call	_SwTimerCreate	;wreg free
 36376  0068D2  0102               	movlb	2	; () banked
 36377  0068D4  6FF3               	movwf	(_loRa+243)& (0+255),b
 36378                           
 36379                           ;lorawan_eu.c: 948: loRa.dutyCycleTimerId = SwTimerCreate();
 36380  0068D6  ECA9  F030         	call	_SwTimerCreate	;wreg free
 36381  0068DA  0102               	movlb	2	; () banked
 36382  0068DC  6FE9               	movwf	(_loRa+233)& (0+255),b
 36383                           
 36384                           ; BSR set to: 2
 36385  0068DE  0012               	return		;funcret
 36386  0068E0                     __end_of_CreateAllSoftwareTimers:
 36387                           	opt stack 0
 36388                           tosu	equ	0xFFF
 36389                           tosh	equ	0xFFE
 36390                           tosl	equ	0xFFD
 36391                           pclath	equ	0xFFA
 36392                           tblptru	equ	0xFF8
 36393                           tblptrh	equ	0xFF7
 36394                           tblptrl	equ	0xFF6
 36395                           tablat	equ	0xFF5
 36396                           prodh	equ	0xFF4
 36397                           prodl	equ	0xFF3
 36398                           intcon	equ	0xFF2
 36399                           intcon2	equ	0xFF1
 36400                           intcon3	equ	0xFF0
 36401                           indf0	equ	0xFEF
 36402                           postinc0	equ	0xFEE
 36403                           plusw0	equ	0xFEB
 36404                           fsr0h	equ	0xFEA
 36405                           fsr0l	equ	0xFE9
 36406                           wreg	equ	0xFE8
 36407                           postinc1	equ	0xFE6
 36408                           postdec1	equ	0xFE5
 36409                           plusw1	equ	0xFE3
 36410                           fsr1h	equ	0xFE2
 36411                           fsr1l	equ	0xFE1
 36412                           indf2	equ	0xFDF
 36413                           postinc2	equ	0xFDE
 36414                           postdec2	equ	0xFDD
 36415                           plusw2	equ	0xFDB
 36416                           fsr2h	equ	0xFDA
 36417                           fsr2l	equ	0xFD9
 36418                           status	equ	0xFD8
 36419                           
 36420 ;; *************** function _SwTimerCreate *****************
 36421 ;; Defined at:
 36422 ;;		line 154 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 36423 ;; Parameters:    Size  Location     Type
 36424 ;;		None
 36425 ;; Auto vars:     Size  Location     Type
 36426 ;;  retVal          1    4[BANK0 ] unsigned char 
 36427 ;; Return value:  Size  Location     Type
 36428 ;;                  1    wreg      unsigned char 
 36429 ;; Registers used:
 36430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 36431 ;; Tracked objects:
 36432 ;;		On entry : C/1
 36433 ;;		On exit  : F/0
 36434 ;;		Unchanged: 0/0
 36435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 36436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36437 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36439 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36440 ;;Total ram usage:        1 bytes
 36441 ;; Hardware stack levels used:    1
 36442 ;; Hardware stack levels required when called:    7
 36443 ;; This function calls:
 36444 ;;		Nothing
 36445 ;; This function is called by:
 36446 ;;		_RADIO_Init
 36447 ;;		_CreateAllSoftwareTimers
 36448 ;; This function uses a non-reentrant model
 36449 ;;
 36450                           
 36451                           	psect	text193
 36452  006152                     __ptext193:
 36453                           	opt stack 0
 36454  006152                     _SwTimerCreate:
 36455                           	opt stack 21
 36456                           
 36457                           ;sw_timer.c: 156: uint8_t retVal;
 36458                           ;sw_timer.c: 157: if (allocatedTimers < 20)
 36459                           
 36460                           ; BSR set to: 2
 36461                           ;incstack = 0
 36462  006152  0E14               	movlw	20
 36463  006154  0101               	movlb	1	; () banked
 36464  006156  6173               	cpfslt	_allocatedTimers& (0+255),b	;volatile
 36465  006158  D030               	goto	l143
 36466                           
 36467                           ; BSR set to: 1
 36468                           ;sw_timer.c: 158: {
 36469                           ;sw_timer.c: 159: (INTCONbits.GIE = 0);
 36470  00615A  9EF2               	bcf	intcon,7,c	;volatile
 36471                           
 36472                           ;sw_timer.c: 160: retVal = allocatedTimers;
 36473  00615C  C173  F064         	movff	_allocatedTimers,SwTimerCreate@retVal	;volatile
 36474                           
 36475                           ; BSR set to: 1
 36476                           ;sw_timer.c: 161: swTimers[retVal].running = 0;
 36477  006160  0100               	movlb	0	; () banked
 36478  006162  5164               	movf	SwTimerCreate@retVal& (0+255),w,b
 36479  006164  0D08               	mullw	8
 36480  006166  0E04               	movlw	low (_swTimers+4)
 36481  006168  24F3               	addwf	prodl,w,c
 36482  00616A  6ED9               	movwf	fsr2l,c
 36483  00616C  0E03               	movlw	high (_swTimers+4)
 36484  00616E  20F4               	addwfc	prodh,w,c
 36485  006170  6EDA               	movwf	fsr2h,c
 36486  006172  6ADF               	clrf	indf2,c
 36487                           
 36488                           ;sw_timer.c: 162: swTimers[retVal].ticksRemaining = 0;
 36489  006174  5164               	movf	SwTimerCreate@retVal& (0+255),w,b
 36490  006176  0D08               	mullw	8
 36491  006178  0E00               	movlw	low _swTimers
 36492  00617A  24F3               	addwf	prodl,w,c
 36493  00617C  6ED9               	movwf	fsr2l,c
 36494  00617E  0E03               	movlw	high _swTimers
 36495  006180  20F4               	addwfc	prodh,w,c
 36496  006182  6EDA               	movwf	fsr2h,c
 36497  006184  6ADE               	clrf	postinc2,c
 36498  006186  6ADE               	clrf	postinc2,c
 36499  006188  6ADE               	clrf	postinc2,c
 36500  00618A  6ADD               	clrf	postdec2,c
 36501                           
 36502                           ;sw_timer.c: 163: swTimers[retVal].callbackParameter = 0;
 36503  00618C  5164               	movf	SwTimerCreate@retVal& (0+255),w,b
 36504  00618E  0D08               	mullw	8
 36505  006190  0E05               	movlw	low (_swTimers+5)
 36506  006192  24F3               	addwf	prodl,w,c
 36507  006194  6ED9               	movwf	fsr2l,c
 36508  006196  0E03               	movlw	high (_swTimers+5)
 36509  006198  20F4               	addwfc	prodh,w,c
 36510  00619A  6EDA               	movwf	fsr2h,c
 36511  00619C  6ADF               	clrf	indf2,c
 36512                           
 36513                           ;sw_timer.c: 164: swTimers[retVal].callback = (0);
 36514  00619E  5164               	movf	SwTimerCreate@retVal& (0+255),w,b
 36515  0061A0  0D08               	mullw	8
 36516  0061A2  0E06               	movlw	low (_swTimers+6)
 36517  0061A4  24F3               	addwf	prodl,w,c
 36518  0061A6  6ED9               	movwf	fsr2l,c
 36519  0061A8  0E03               	movlw	high (_swTimers+6)
 36520  0061AA  20F4               	addwfc	prodh,w,c
 36521  0061AC  6EDA               	movwf	fsr2h,c
 36522  0061AE  6ADE               	clrf	postinc2,c
 36523  0061B0  6ADD               	clrf	postdec2,c
 36524                           
 36525                           ; BSR set to: 0
 36526                           ;sw_timer.c: 165: allocatedTimers++;
 36527  0061B2  0101               	movlb	1	; () banked
 36528  0061B4  2B73               	incf	_allocatedTimers& (0+255),f,b	;volatile
 36529                           
 36530                           ; BSR set to: 1
 36531                           ;sw_timer.c: 166: (INTCONbits.GIE = 1);
 36532  0061B6  8EF2               	bsf	intcon,7,c	;volatile
 36533                           
 36534                           ;sw_timer.c: 167: }
 36535  0061B8  D001               	goto	l13884
 36536  0061BA                     l143:
 36537  0061BA  D7FF               	goto	l143
 36538  0061BC                     l13884:
 36539                           
 36540                           ; BSR set to: 1
 36541                           ;sw_timer.c: 175: }
 36542                           ;sw_timer.c: 176: }
 36543                           ;sw_timer.c: 177: return retVal;
 36544  0061BC  0100               	movlb	0	; () banked
 36545  0061BE  5164               	movf	SwTimerCreate@retVal& (0+255),w,b
 36546                           
 36547                           ; BSR set to: 0
 36548  0061C0  0012               	return		;funcret
 36549  0061C2                     __end_of_SwTimerCreate:
 36550                           	opt stack 0
 36551                           tosu	equ	0xFFF
 36552                           tosh	equ	0xFFE
 36553                           tosl	equ	0xFFD
 36554                           pclath	equ	0xFFA
 36555                           tblptru	equ	0xFF8
 36556                           tblptrh	equ	0xFF7
 36557                           tblptrl	equ	0xFF6
 36558                           tablat	equ	0xFF5
 36559                           prodh	equ	0xFF4
 36560                           prodl	equ	0xFF3
 36561                           intcon	equ	0xFF2
 36562                           intcon2	equ	0xFF1
 36563                           intcon3	equ	0xFF0
 36564                           indf0	equ	0xFEF
 36565                           postinc0	equ	0xFEE
 36566                           plusw0	equ	0xFEB
 36567                           fsr0h	equ	0xFEA
 36568                           fsr0l	equ	0xFE9
 36569                           wreg	equ	0xFE8
 36570                           postinc1	equ	0xFE6
 36571                           postdec1	equ	0xFE5
 36572                           plusw1	equ	0xFE3
 36573                           fsr1h	equ	0xFE2
 36574                           fsr1l	equ	0xFE1
 36575                           indf2	equ	0xFDF
 36576                           postinc2	equ	0xFDE
 36577                           postdec2	equ	0xFDD
 36578                           plusw2	equ	0xFDB
 36579                           fsr2h	equ	0xFDA
 36580                           fsr2l	equ	0xFD9
 36581                           status	equ	0xFD8
 36582                           
 36583 ;; *************** function _INTERRUPT_InterruptManager *****************
 36584 ;; Defined at:
 36585 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 36586 ;; Parameters:    Size  Location     Type
 36587 ;;		None
 36588 ;; Auto vars:     Size  Location     Type
 36589 ;;		None
 36590 ;; Return value:  Size  Location     Type
 36591 ;;                  1    wreg      void 
 36592 ;; Registers used:
 36593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
 36594 ;; Tracked objects:
 36595 ;;		On entry : 0/0
 36596 ;;		On exit  : 0/0
 36597 ;;		Unchanged: 0/0
 36598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 36599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36601 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36602 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36603 ;;Total ram usage:        8 bytes
 36604 ;; Hardware stack levels used:    1
 36605 ;; Hardware stack levels required when called:    6
 36606 ;; This function calls:
 36607 ;;		_INT1_ISR
 36608 ;;		_INT2_ISR
 36609 ;;		_INT3_ISR
 36610 ;;		_PIN_MANAGER_IOC
 36611 ;;		_TMR1_ISR
 36612 ;; This function is called by:
 36613 ;;		Interrupt level 2
 36614 ;; This function uses a non-reentrant model
 36615 ;;
 36616                           
 36617                           	psect	intcode
 36618  000008                     __pintcode:
 36619                           	opt stack 0
 36620  000008                     _INTERRUPT_InterruptManager:
 36621                           	opt stack 12
 36622                           
 36623                           ; BSR set to: 0
 36624                           ;incstack = 0
 36625  000008  CFFA F028          	movff	pclath,??_INTERRUPT_InterruptManager
 36626  00000C  CFFB F029          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 36627  000010  CFE1 F02A          	movff	fsr1l,??_INTERRUPT_InterruptManager+2
 36628  000014  CFE2 F02B          	movff	fsr1h,??_INTERRUPT_InterruptManager+3
 36629  000018  CFD9 F02C          	movff	fsr2l,??_INTERRUPT_InterruptManager+4
 36630  00001C  CFDA F02D          	movff	fsr2h,??_INTERRUPT_InterruptManager+5
 36631  000020  CFF3 F02E          	movff	prodl,??_INTERRUPT_InterruptManager+6
 36632  000024  CFF4 F02F          	movff	prodh,??_INTERRUPT_InterruptManager+7
 36633  000028  EE19  F06B         	lfsr	1,___inthi_sp
 36634                           
 36635                           ;interrupt_manager.c: 60: if(INTCON3bits.INT3IE == 1 && INTCON3bits.INT3IF == 1)
 36636  00002C  BAF0               	btfsc	intcon3,5,c	;volatile
 36637  00002E  A4F0               	btfss	intcon3,2,c	;volatile
 36638  000030  D003               	goto	i2l2442
 36639                           
 36640                           ;interrupt_manager.c: 61: {
 36641                           ;interrupt_manager.c: 62: INT3_ISR();
 36642  000032  ECF2  F03B         	call	_INT3_ISR	;wreg free
 36643                           
 36644                           ;interrupt_manager.c: 63: }
 36645  000036  D019               	goto	i2l2452
 36646  000038                     i2l2442:
 36647                           
 36648                           ;interrupt_manager.c: 64: else if(INTCON3bits.INT1IE == 1 && INTCON3bits.INT1IF == 1)
 36649  000038  B6F0               	btfsc	intcon3,3,c	;volatile
 36650  00003A  A0F0               	btfss	intcon3,0,c	;volatile
 36651  00003C  D003               	goto	i2l2444
 36652                           
 36653                           ;interrupt_manager.c: 65: {
 36654                           ;interrupt_manager.c: 66: INT1_ISR();
 36655  00003E  ECF8  F03B         	call	_INT1_ISR	;wreg free
 36656                           
 36657                           ;interrupt_manager.c: 67: }
 36658  000042  D013               	goto	i2l2452
 36659  000044                     i2l2444:
 36660                           
 36661                           ;interrupt_manager.c: 68: else if(INTCON3bits.INT2IE == 1 && INTCON3bits.INT2IF == 1)
 36662  000044  B8F0               	btfsc	intcon3,4,c	;volatile
 36663  000046  A2F0               	btfss	intcon3,1,c	;volatile
 36664  000048  D003               	goto	i2l2446
 36665                           
 36666                           ;interrupt_manager.c: 69: {
 36667                           ;interrupt_manager.c: 70: INT2_ISR();
 36668  00004A  ECF5  F03B         	call	_INT2_ISR	;wreg free
 36669                           
 36670                           ;interrupt_manager.c: 71: }
 36671  00004E  D00D               	goto	i2l2452
 36672  000050                     i2l2446:
 36673                           
 36674                           ;interrupt_manager.c: 72: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
 36675  000050  BCF2               	btfsc	intcon,6,c	;volatile
 36676  000052  A09D               	btfss	3997,0,c	;volatile
 36677  000054  D005               	goto	i2l2448
 36678  000056  A09E               	btfss	3998,0,c	;volatile
 36679  000058  D003               	goto	i2l2448
 36680                           
 36681                           ;interrupt_manager.c: 73: {
 36682                           ;interrupt_manager.c: 74: TMR1_ISR();
 36683  00005A  EC55  F039         	call	_TMR1_ISR	;wreg free
 36684                           
 36685                           ;interrupt_manager.c: 75: }
 36686  00005E  D005               	goto	i2l2452
 36687  000060                     i2l2448:
 36688                           
 36689                           ;interrupt_manager.c: 76: else if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 36690  000060  B6F2               	btfsc	intcon,3,c	;volatile
 36691  000062  A0F2               	btfss	intcon,0,c	;volatile
 36692  000064  D002               	goto	i2l2452
 36693                           
 36694                           ;interrupt_manager.c: 77: {
 36695                           ;interrupt_manager.c: 78: PIN_MANAGER_IOC();
 36696  000066  EC84  F03B         	call	_PIN_MANAGER_IOC	;wreg free
 36697  00006A                     i2l2452:
 36698  00006A  C02F  FFF4         	movff	??_INTERRUPT_InterruptManager+7,prodh
 36699  00006E  C02E  FFF3         	movff	??_INTERRUPT_InterruptManager+6,prodl
 36700  000072  C02D  FFDA         	movff	??_INTERRUPT_InterruptManager+5,fsr2h
 36701  000076  C02C  FFD9         	movff	??_INTERRUPT_InterruptManager+4,fsr2l
 36702  00007A  C02B  FFE2         	movff	??_INTERRUPT_InterruptManager+3,fsr1h
 36703  00007E  C02A  FFE1         	movff	??_INTERRUPT_InterruptManager+2,fsr1l
 36704  000082  C029  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 36705  000086  C028  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 36706  00008A  0011               	retfie		f
 36707  00008C                     __end_of_INTERRUPT_InterruptManager:
 36708                           	opt stack 0
 36709                           tosu	equ	0xFFF
 36710                           tosh	equ	0xFFE
 36711                           tosl	equ	0xFFD
 36712                           pclatu	equ	0xFFB
 36713                           pclath	equ	0xFFA
 36714                           tblptru	equ	0xFF8
 36715                           tblptrh	equ	0xFF7
 36716                           tblptrl	equ	0xFF6
 36717                           tablat	equ	0xFF5
 36718                           prodh	equ	0xFF4
 36719                           prodl	equ	0xFF3
 36720                           intcon	equ	0xFF2
 36721                           intcon2	equ	0xFF1
 36722                           intcon3	equ	0xFF0
 36723                           indf0	equ	0xFEF
 36724                           postinc0	equ	0xFEE
 36725                           plusw0	equ	0xFEB
 36726                           fsr0h	equ	0xFEA
 36727                           fsr0l	equ	0xFE9
 36728                           wreg	equ	0xFE8
 36729                           postinc1	equ	0xFE6
 36730                           postdec1	equ	0xFE5
 36731                           plusw1	equ	0xFE3
 36732                           fsr1h	equ	0xFE2
 36733                           fsr1l	equ	0xFE1
 36734                           indf2	equ	0xFDF
 36735                           postinc2	equ	0xFDE
 36736                           postdec2	equ	0xFDD
 36737                           plusw2	equ	0xFDB
 36738                           fsr2h	equ	0xFDA
 36739                           fsr2l	equ	0xFD9
 36740                           status	equ	0xFD8
 36741                           
 36742 ;; *************** function _TMR1_ISR *****************
 36743 ;; Defined at:
 36744 ;;		line 155 in file "mcc_generated_files/tmr1.c"
 36745 ;; Parameters:    Size  Location     Type
 36746 ;;		None
 36747 ;; Auto vars:     Size  Location     Type
 36748 ;;		None
 36749 ;; Return value:  Size  Location     Type
 36750 ;;                  1    wreg      void 
 36751 ;; Registers used:
 36752 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
 36753 ;; Tracked objects:
 36754 ;;		On entry : 0/0
 36755 ;;		On exit  : 0/0
 36756 ;;		Unchanged: 0/0
 36757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 36758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36762 ;;Total ram usage:        0 bytes
 36763 ;; Hardware stack levels used:    1
 36764 ;; Hardware stack levels required when called:    5
 36765 ;; This function calls:
 36766 ;;		_TMR1_CallBack
 36767 ;; This function is called by:
 36768 ;;		_INTERRUPT_InterruptManager
 36769 ;; This function uses a non-reentrant model
 36770 ;;
 36771                           
 36772                           	psect	text195
 36773  0072AA                     __ptext195:
 36774                           	opt stack 0
 36775  0072AA                     _TMR1_ISR:
 36776                           	opt stack 12
 36777                           
 36778                           ;tmr1.c: 157: static volatile unsigned int CountCallBack = 0;
 36779                           ;tmr1.c: 160: PIR1bits.TMR1IF = 0;
 36780                           
 36781                           ;incstack = 0
 36782  0072AA  909E               	bcf	3998,0,c	;volatile
 36783                           
 36784                           ;tmr1.c: 162: TMR1H = (timer1ReloadVal >> 8);
 36785  0072AC  C05F  FFCF         	movff	_timer1ReloadVal+1,4047	;volatile
 36786                           
 36787                           ;tmr1.c: 163: TMR1L = timer1ReloadVal;
 36788  0072B0  C05E  FFCE         	movff	_timer1ReloadVal,4046	;volatile
 36789                           
 36790                           ;tmr1.c: 166: if (++CountCallBack >= 16)
 36791  0072B4  4A3C               	infsnz	TMR1_ISR@CountCallBack,f,c	;volatile
 36792  0072B6  2A3D               	incf	TMR1_ISR@CountCallBack+1,f,c	;volatile
 36793  0072B8  503D               	movf	TMR1_ISR@CountCallBack+1,w,c	;volatile
 36794  0072BA  E104               	bnz	i2u1957_40
 36795  0072BC  0E10               	movlw	16
 36796  0072BE  5C3C               	subwf	TMR1_ISR@CountCallBack,w,c	;volatile
 36797  0072C0  A0D8               	btfss	status,0,c
 36798  0072C2  0012               	return	
 36799  0072C4                     i2u1957_40:
 36800                           
 36801                           ;tmr1.c: 167: {
 36802                           ;tmr1.c: 169: TMR1_CallBack();
 36803  0072C4  EC26  F03A         	call	_TMR1_CallBack	;wreg free
 36804                           
 36805                           ;tmr1.c: 172: CountCallBack = 0;
 36806  0072C8  6A3C               	clrf	TMR1_ISR@CountCallBack,c	;volatile
 36807  0072CA  6A3D               	clrf	TMR1_ISR@CountCallBack+1,c	;volatile
 36808  0072CC  0012               	return		;funcret
 36809  0072CE                     __end_of_TMR1_ISR:
 36810                           	opt stack 0
 36811                           tosu	equ	0xFFF
 36812                           tosh	equ	0xFFE
 36813                           tosl	equ	0xFFD
 36814                           pclatu	equ	0xFFB
 36815                           pclath	equ	0xFFA
 36816                           tblptru	equ	0xFF8
 36817                           tblptrh	equ	0xFF7
 36818                           tblptrl	equ	0xFF6
 36819                           tablat	equ	0xFF5
 36820                           prodh	equ	0xFF4
 36821                           prodl	equ	0xFF3
 36822                           intcon	equ	0xFF2
 36823                           intcon2	equ	0xFF1
 36824                           intcon3	equ	0xFF0
 36825                           indf0	equ	0xFEF
 36826                           postinc0	equ	0xFEE
 36827                           plusw0	equ	0xFEB
 36828                           fsr0h	equ	0xFEA
 36829                           fsr0l	equ	0xFE9
 36830                           wreg	equ	0xFE8
 36831                           postinc1	equ	0xFE6
 36832                           postdec1	equ	0xFE5
 36833                           plusw1	equ	0xFE3
 36834                           fsr1h	equ	0xFE2
 36835                           fsr1l	equ	0xFE1
 36836                           indf2	equ	0xFDF
 36837                           postinc2	equ	0xFDE
 36838                           postdec2	equ	0xFDD
 36839                           plusw2	equ	0xFDB
 36840                           fsr2h	equ	0xFDA
 36841                           fsr2l	equ	0xFD9
 36842                           status	equ	0xFD8
 36843                           
 36844 ;; *************** function _TMR1_CallBack *****************
 36845 ;; Defined at:
 36846 ;;		line 176 in file "mcc_generated_files/tmr1.c"
 36847 ;; Parameters:    Size  Location     Type
 36848 ;;		None
 36849 ;; Auto vars:     Size  Location     Type
 36850 ;;		None
 36851 ;; Return value:  Size  Location     Type
 36852 ;;                  1    wreg      void 
 36853 ;; Registers used:
 36854 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
 36855 ;; Tracked objects:
 36856 ;;		On entry : 0/0
 36857 ;;		On exit  : 0/0
 36858 ;;		Unchanged: 0/0
 36859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 36860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36864 ;;Total ram usage:        0 bytes
 36865 ;; Hardware stack levels used:    1
 36866 ;; Hardware stack levels required when called:    4
 36867 ;; This function calls:
 36868 ;;		Absolute function
 36869 ;;		_TMR1_DefaultInterruptHandler
 36870 ;;		_TMR_ISR_lora
 36871 ;; This function is called by:
 36872 ;;		_TMR1_ISR
 36873 ;; This function uses a non-reentrant model
 36874 ;;
 36875                           
 36876                           	psect	text196
 36877  00744C                     __ptext196:
 36878                           	opt stack 0
 36879  00744C                     _TMR1_CallBack:
 36880                           	opt stack 12
 36881                           
 36882                           ;tmr1.c: 179: if(TMR1_InterruptHandler)
 36883                           
 36884                           ;incstack = 0
 36885  00744C  0101               	movlb	1	; () banked
 36886  00744E  51F5               	movf	_TMR1_InterruptHandler& (0+255),w,b
 36887  007450  11F6               	iorwf	(_TMR1_InterruptHandler+1)& (0+255),w,b
 36888  007452  B4D8               	btfsc	status,2,c
 36889  007454  0012               	return	
 36890                           
 36891                           ; BSR set to: 1
 36892                           ;tmr1.c: 180: {
 36893                           ;tmr1.c: 181: TMR1_InterruptHandler();
 36894  007456  0005               	push	
 36895  007458  6EFA               	movwf	pclath,c
 36896  00745A  51F5               	movf	_TMR1_InterruptHandler& (0+255),w,b
 36897  00745C  6EFD               	movwf	tosl,c
 36898  00745E  51F6               	movf	(_TMR1_InterruptHandler+1)& (0+255),w,b
 36899  007460  6EFE               	movwf	tosh,c
 36900  007462  50F8               	movf	tblptru,w,c
 36901  007464  6EFF               	movwf	tosu,c
 36902  007466  50FA               	movf	pclath,w,c
 36903  007468  0012               	return		;indir
 36904  00746A                     __end_of_TMR1_CallBack:
 36905                           	opt stack 0
 36906                           tosu	equ	0xFFF
 36907                           tosh	equ	0xFFE
 36908                           tosl	equ	0xFFD
 36909                           pclatu	equ	0xFFB
 36910                           pclath	equ	0xFFA
 36911                           tblptru	equ	0xFF8
 36912                           tblptrh	equ	0xFF7
 36913                           tblptrl	equ	0xFF6
 36914                           tablat	equ	0xFF5
 36915                           prodh	equ	0xFF4
 36916                           prodl	equ	0xFF3
 36917                           intcon	equ	0xFF2
 36918                           intcon2	equ	0xFF1
 36919                           intcon3	equ	0xFF0
 36920                           indf0	equ	0xFEF
 36921                           postinc0	equ	0xFEE
 36922                           plusw0	equ	0xFEB
 36923                           fsr0h	equ	0xFEA
 36924                           fsr0l	equ	0xFE9
 36925                           wreg	equ	0xFE8
 36926                           postinc1	equ	0xFE6
 36927                           postdec1	equ	0xFE5
 36928                           plusw1	equ	0xFE3
 36929                           fsr1h	equ	0xFE2
 36930                           fsr1l	equ	0xFE1
 36931                           indf2	equ	0xFDF
 36932                           postinc2	equ	0xFDE
 36933                           postdec2	equ	0xFDD
 36934                           plusw2	equ	0xFDB
 36935                           fsr2h	equ	0xFDA
 36936                           fsr2l	equ	0xFD9
 36937                           status	equ	0xFD8
 36938                           
 36939 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 36940 ;; Defined at:
 36941 ;;		line 189 in file "mcc_generated_files/tmr1.c"
 36942 ;; Parameters:    Size  Location     Type
 36943 ;;		None
 36944 ;; Auto vars:     Size  Location     Type
 36945 ;;		None
 36946 ;; Return value:  Size  Location     Type
 36947 ;;                  1    wreg      void 
 36948 ;; Registers used:
 36949 ;;		None
 36950 ;; Tracked objects:
 36951 ;;		On entry : F/1
 36952 ;;		On exit  : F/1
 36953 ;;		Unchanged: F/0
 36954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 36955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36959 ;;Total ram usage:        0 bytes
 36960 ;; Hardware stack levels used:    1
 36961 ;; This function calls:
 36962 ;;		Nothing
 36963 ;; This function is called by:
 36964 ;;		_TMR1_Initialize
 36965 ;;		_TMR1_CallBack
 36966 ;; This function uses a non-reentrant model
 36967 ;;
 36968                           
 36969                           	psect	text197
 36970  007822                     __ptext197:
 36971                           	opt stack 0
 36972  007822                     _TMR1_DefaultInterruptHandler:
 36973                           	opt stack 15
 36974                           
 36975                           ; BSR set to: 1
 36976                           
 36977                           ;incstack = 0
 36978  007822  0012               	return		;funcret
 36979  007824                     __end_of_TMR1_DefaultInterruptHandler:
 36980                           	opt stack 0
 36981                           tosu	equ	0xFFF
 36982                           tosh	equ	0xFFE
 36983                           tosl	equ	0xFFD
 36984                           pclatu	equ	0xFFB
 36985                           pclath	equ	0xFFA
 36986                           tblptru	equ	0xFF8
 36987                           tblptrh	equ	0xFF7
 36988                           tblptrl	equ	0xFF6
 36989                           tablat	equ	0xFF5
 36990                           prodh	equ	0xFF4
 36991                           prodl	equ	0xFF3
 36992                           intcon	equ	0xFF2
 36993                           intcon2	equ	0xFF1
 36994                           intcon3	equ	0xFF0
 36995                           indf0	equ	0xFEF
 36996                           postinc0	equ	0xFEE
 36997                           plusw0	equ	0xFEB
 36998                           fsr0h	equ	0xFEA
 36999                           fsr0l	equ	0xFE9
 37000                           wreg	equ	0xFE8
 37001                           postinc1	equ	0xFE6
 37002                           postdec1	equ	0xFE5
 37003                           plusw1	equ	0xFE3
 37004                           fsr1h	equ	0xFE2
 37005                           fsr1l	equ	0xFE1
 37006                           indf2	equ	0xFDF
 37007                           postinc2	equ	0xFDE
 37008                           postdec2	equ	0xFDD
 37009                           plusw2	equ	0xFDB
 37010                           fsr2h	equ	0xFDA
 37011                           fsr2l	equ	0xFD9
 37012                           status	equ	0xFD8
 37013                           
 37014 ;; *************** function _TMR_ISR_lora *****************
 37015 ;; Defined at:
 37016 ;;		line 59 in file "mcc_generated_files/LoRaWAN/tmr_lora_addons.c"
 37017 ;; Parameters:    Size  Location     Type
 37018 ;;		None
 37019 ;; Auto vars:     Size  Location     Type
 37020 ;;		None
 37021 ;; Return value:  Size  Location     Type
 37022 ;;                  1    wreg      void 
 37023 ;; Registers used:
 37024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 37025 ;; Tracked objects:
 37026 ;;		On entry : F/1
 37027 ;;		On exit  : 0/0
 37028 ;;		Unchanged: 0/0
 37029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 37030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37033 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37034 ;;Total ram usage:        0 bytes
 37035 ;; Hardware stack levels used:    1
 37036 ;; Hardware stack levels required when called:    3
 37037 ;; This function calls:
 37038 ;;		i2_SwTimersInterrupt
 37039 ;;		i2_TMR_SwapTimer
 37040 ;; This function is called by:
 37041 ;;		_TMR_ISR_Lora_Init
 37042 ;;		_TMR1_CallBack
 37043 ;; This function uses a non-reentrant model
 37044 ;;
 37045                           
 37046                           	psect	text198
 37047  0069CA                     __ptext198:
 37048                           	opt stack 0
 37049  0069CA                     _TMR_ISR_lora:
 37050                           	opt stack 12
 37051                           
 37052                           ; BSR set to: 1
 37053                           ;tmr_lora_addons.c: 61: timerOverflow = 1;
 37054                           
 37055                           ; BSR set to: 1
 37056                           ;incstack = 0
 37057  0069CA  0E01               	movlw	1
 37058  0069CC  6E49               	movwf	_timerOverflow,c	;volatile
 37059                           
 37060                           ; BSR set to: 1
 37061                           ;tmr_lora_addons.c: 63: ticksToScheduledInterrupt = SwTimersInterrupt();
 37062  0069CE  EC4E  F026         	call	i2_SwTimersInterrupt	;wreg free
 37063  0069D2  C017  F05A         	movff	?i2_SwTimersInterrupt,_ticksToScheduledInterrupt	;volatile
 37064  0069D6  C018  F05B         	movff	?i2_SwTimersInterrupt+1,_ticksToScheduledInterrupt+1	;volatile
 37065  0069DA  C019  F05C         	movff	?i2_SwTimersInterrupt+2,_ticksToScheduledInterrupt+2	;volatile
 37066  0069DE  C01A  F05D         	movff	?i2_SwTimersInterrupt+3,_ticksToScheduledInterrupt+3	;volatile
 37067                           
 37068                           ; BSR set to: 1
 37069                           ;tmr_lora_addons.c: 65: if (ticksToScheduledInterrupt < ((uint32_t)0x10000))
 37070  0069E2  505D               	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 37071  0069E4  E117               	bnz	i2l214
 37072  0069E6  045C               	decf	_ticksToScheduledInterrupt+2,w,c	;volatile
 37073  0069E8  B0D8               	btfsc	status,0,c
 37074  0069EA  0012               	return	
 37075                           
 37076                           ; BSR set to: 1
 37077                           ;tmr_lora_addons.c: 66: {
 37078                           ;tmr_lora_addons.c: 67: reloadVal = ((uint32_t)0x10000) - ticksToScheduledInterrupt;
 37079  0069EC  505A               	movf	_ticksToScheduledInterrupt,w,c	;volatile
 37080  0069EE  0800               	sublw	0
 37081  0069F0  6E44               	movwf	_reloadVal,c	;volatile
 37082  0069F2  505B               	movf	_ticksToScheduledInterrupt+1,w,c	;volatile
 37083  0069F4  A0D8               	btfss	status,0,c
 37084  0069F6  2AE8               	incf	wreg,f,c
 37085  0069F8  0800               	sublw	0
 37086  0069FA  6E45               	movwf	_reloadVal+1,c	;volatile
 37087                           
 37088                           ; BSR set to: 1
 37089                           ;tmr_lora_addons.c: 68: ticksAdded = TMR_SwapTimer(reloadVal);
 37090  0069FC  C044  F007         	movff	_reloadVal,i2TMR_SwapTimer@timerVal	;volatile
 37091  006A00  C045  F008         	movff	_reloadVal+1,i2TMR_SwapTimer@timerVal+1	;volatile
 37092  006A04  ECE2  F036         	call	i2_TMR_SwapTimer	;wreg free
 37093  006A08  C007  F038         	movff	?i2_TMR_SwapTimer,_ticksAdded	;volatile
 37094  006A0C  C008  F039         	movff	?i2_TMR_SwapTimer+1,_ticksAdded+1	;volatile
 37095  006A10  6A3A               	clrf	_ticksAdded+2,c	;volatile
 37096  006A12  6A3B               	clrf	_ticksAdded+3,c	;volatile
 37097  006A14                     i2l214:
 37098  006A14  0012               	return		;funcret
 37099  006A16                     __end_of_TMR_ISR_lora:
 37100                           	opt stack 0
 37101                           tosu	equ	0xFFF
 37102                           tosh	equ	0xFFE
 37103                           tosl	equ	0xFFD
 37104                           pclatu	equ	0xFFB
 37105                           pclath	equ	0xFFA
 37106                           tblptru	equ	0xFF8
 37107                           tblptrh	equ	0xFF7
 37108                           tblptrl	equ	0xFF6
 37109                           tablat	equ	0xFF5
 37110                           prodh	equ	0xFF4
 37111                           prodl	equ	0xFF3
 37112                           intcon	equ	0xFF2
 37113                           intcon2	equ	0xFF1
 37114                           intcon3	equ	0xFF0
 37115                           indf0	equ	0xFEF
 37116                           postinc0	equ	0xFEE
 37117                           plusw0	equ	0xFEB
 37118                           fsr0h	equ	0xFEA
 37119                           fsr0l	equ	0xFE9
 37120                           wreg	equ	0xFE8
 37121                           postinc1	equ	0xFE6
 37122                           postdec1	equ	0xFE5
 37123                           plusw1	equ	0xFE3
 37124                           fsr1h	equ	0xFE2
 37125                           fsr1l	equ	0xFE1
 37126                           indf2	equ	0xFDF
 37127                           postinc2	equ	0xFDE
 37128                           postdec2	equ	0xFDD
 37129                           plusw2	equ	0xFDB
 37130                           fsr2h	equ	0xFDA
 37131                           fsr2l	equ	0xFD9
 37132                           status	equ	0xFD8
 37133                           
 37134 ;; *************** function i2_TMR_SwapTimer *****************
 37135 ;; Defined at:
 37136 ;;		line 112 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 37137 ;; Parameters:    Size  Location     Type
 37138 ;;  timerVal        2    6[COMRAM] unsigned int 
 37139 ;; Auto vars:     Size  Location     Type
 37140 ;;		None
 37141 ;; Return value:  Size  Location     Type
 37142 ;;                  2    6[COMRAM] unsigned int 
 37143 ;; Registers used:
 37144 ;;		wreg, status,2, status,0, cstack
 37145 ;; Tracked objects:
 37146 ;;		On entry : F/1
 37147 ;;		On exit  : 0/0
 37148 ;;		Unchanged: 0/0
 37149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 37150 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37153 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37154 ;;Total ram usage:        2 bytes
 37155 ;; Hardware stack levels used:    1
 37156 ;; Hardware stack levels required when called:    1
 37157 ;; This function calls:
 37158 ;;		i2_TMR1_ReadTimer
 37159 ;;		i2_TMR1_WriteTimer
 37160 ;; This function is called by:
 37161 ;;		_TMR_ISR_lora
 37162 ;; This function uses a non-reentrant model
 37163 ;;
 37164                           
 37165                           	psect	text199
 37166  006DC4                     __ptext199:
 37167                           	opt stack 0
 37168  006DC4                     i2_TMR_SwapTimer:
 37169                           	opt stack 13
 37170                           
 37171                           ; BSR set to: 1
 37172                           ;sw_timer.c: 114: static uint16_t oldVal;
 37173                           ;sw_timer.c: 115: static uint16_t retVal;
 37174                           ;sw_timer.c: 117: oldVal = TMR1_ReadTimer();
 37175                           
 37176                           ;incstack = 0
 37177  006DC4  ECDA  F039         	call	i2_TMR1_ReadTimer	;wreg free
 37178  006DC8  C001  F040         	movff	?i2_TMR1_ReadTimer,TMR_SwapTimer@oldVal
 37179  006DCC  C002  F041         	movff	?i2_TMR1_ReadTimer+1,TMR_SwapTimer@oldVal+1
 37180  006DD0                     i2l10380:
 37181  006DD0  ECDA  F039         	call	i2_TMR1_ReadTimer	;wreg free
 37182  006DD4  5040               	movf	TMR_SwapTimer@oldVal,w,c
 37183  006DD6  1801               	xorwf	?i2_TMR1_ReadTimer,w,c
 37184  006DD8  E103               	bnz	i2u1095_40
 37185  006DDA  5041               	movf	TMR_SwapTimer@oldVal+1,w,c
 37186  006DDC  1802               	xorwf	?i2_TMR1_ReadTimer+1,w,c
 37187  006DDE  E0F8               	bz	i2l10380
 37188  006DE0                     i2u1095_40:
 37189                           
 37190                           ;sw_timer.c: 125: TMR1_WriteTimer(timerVal);
 37191  006DE0  C007  F001         	movff	i2TMR_SwapTimer@timerVal,i2TMR1_WriteTimer@timerVal
 37192  006DE4  C008  F002         	movff	i2TMR_SwapTimer@timerVal+1,i2TMR1_WriteTimer@timerVal+1
 37193  006DE8  EC9B  F03A         	call	i2_TMR1_WriteTimer	;wreg free
 37194                           
 37195                           ;sw_timer.c: 128: oldVal++;
 37196  006DEC  4A40               	infsnz	TMR_SwapTimer@oldVal,f,c
 37197  006DEE  2A41               	incf	TMR_SwapTimer@oldVal+1,f,c
 37198                           
 37199                           ;sw_timer.c: 130: retVal = oldVal;
 37200  006DF0  C040  F042         	movff	TMR_SwapTimer@oldVal,TMR_SwapTimer@retVal
 37201  006DF4  C041  F043         	movff	TMR_SwapTimer@oldVal+1,TMR_SwapTimer@retVal+1
 37202                           
 37203                           ;sw_timer.c: 132: return retVal;
 37204  006DF8  C042  F007         	movff	TMR_SwapTimer@retVal,?i2_TMR_SwapTimer
 37205  006DFC  C043  F008         	movff	TMR_SwapTimer@retVal+1,?i2_TMR_SwapTimer+1
 37206  006E00  0012               	return		;funcret
 37207  006E02                     __end_ofi2_TMR_SwapTimer:
 37208                           	opt stack 0
 37209                           tosu	equ	0xFFF
 37210                           tosh	equ	0xFFE
 37211                           tosl	equ	0xFFD
 37212                           pclatu	equ	0xFFB
 37213                           pclath	equ	0xFFA
 37214                           tblptru	equ	0xFF8
 37215                           tblptrh	equ	0xFF7
 37216                           tblptrl	equ	0xFF6
 37217                           tablat	equ	0xFF5
 37218                           prodh	equ	0xFF4
 37219                           prodl	equ	0xFF3
 37220                           intcon	equ	0xFF2
 37221                           intcon2	equ	0xFF1
 37222                           intcon3	equ	0xFF0
 37223                           indf0	equ	0xFEF
 37224                           postinc0	equ	0xFEE
 37225                           plusw0	equ	0xFEB
 37226                           fsr0h	equ	0xFEA
 37227                           fsr0l	equ	0xFE9
 37228                           wreg	equ	0xFE8
 37229                           postinc1	equ	0xFE6
 37230                           postdec1	equ	0xFE5
 37231                           plusw1	equ	0xFE3
 37232                           fsr1h	equ	0xFE2
 37233                           fsr1l	equ	0xFE1
 37234                           indf2	equ	0xFDF
 37235                           postinc2	equ	0xFDE
 37236                           postdec2	equ	0xFDD
 37237                           plusw2	equ	0xFDB
 37238                           fsr2h	equ	0xFDA
 37239                           fsr2l	equ	0xFD9
 37240                           status	equ	0xFD8
 37241                           
 37242 ;; *************** function i2_TMR1_WriteTimer *****************
 37243 ;; Defined at:
 37244 ;;		line 116 in file "mcc_generated_files/tmr1.c"
 37245 ;; Parameters:    Size  Location     Type
 37246 ;;  timerVal        2    0[COMRAM] unsigned int 
 37247 ;; Auto vars:     Size  Location     Type
 37248 ;;		None
 37249 ;; Return value:  Size  Location     Type
 37250 ;;                  1    wreg      void 
 37251 ;; Registers used:
 37252 ;;		None
 37253 ;; Tracked objects:
 37254 ;;		On entry : 0/1
 37255 ;;		On exit  : 0/0
 37256 ;;		Unchanged: 0/0
 37257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 37258 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37261 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37262 ;;Total ram usage:        2 bytes
 37263 ;; Hardware stack levels used:    1
 37264 ;; This function calls:
 37265 ;;		Nothing
 37266 ;; This function is called by:
 37267 ;;		i2_TMR_SwapTimer
 37268 ;; This function uses a non-reentrant model
 37269 ;;
 37270                           
 37271                           	psect	text200
 37272  007536                     __ptext200:
 37273                           	opt stack 0
 37274  007536                     i2_TMR1_WriteTimer:
 37275                           	opt stack 13
 37276                           
 37277                           ;tmr1.c: 118: if (T1CONbits.nT1SYNC == 1)
 37278                           
 37279                           ;incstack = 0
 37280  007536  A4CD               	btfss	4045,2,c	;volatile
 37281  007538  D007               	goto	i2l1362
 37282                           
 37283                           ;tmr1.c: 119: {
 37284                           ;tmr1.c: 121: T1CONbits.TMR1ON = 0;
 37285  00753A  90CD               	bcf	4045,0,c	;volatile
 37286                           
 37287                           ;tmr1.c: 124: TMR1H = (timerVal >> 8);
 37288  00753C  C002  FFCF         	movff	i2TMR1_WriteTimer@timerVal+1,4047	;volatile
 37289                           
 37290                           ;tmr1.c: 125: TMR1L = timerVal;
 37291  007540  C001  FFCE         	movff	i2TMR1_WriteTimer@timerVal,4046	;volatile
 37292                           
 37293                           ;tmr1.c: 128: T1CONbits.TMR1ON =1;
 37294  007544  80CD               	bsf	4045,0,c	;volatile
 37295                           
 37296                           ;tmr1.c: 129: }
 37297  007546  0012               	return	
 37298  007548                     i2l1362:
 37299                           
 37300                           ;tmr1.c: 130: else
 37301                           ;tmr1.c: 131: {
 37302                           ;tmr1.c: 133: TMR1H = (timerVal >> 8);
 37303  007548  C002  FFCF         	movff	i2TMR1_WriteTimer@timerVal+1,4047	;volatile
 37304                           
 37305                           ;tmr1.c: 134: TMR1L = timerVal;
 37306  00754C  C001  FFCE         	movff	i2TMR1_WriteTimer@timerVal,4046	;volatile
 37307  007550  0012               	return		;funcret
 37308  007552                     __end_ofi2_TMR1_WriteTimer:
 37309                           	opt stack 0
 37310                           tosu	equ	0xFFF
 37311                           tosh	equ	0xFFE
 37312                           tosl	equ	0xFFD
 37313                           pclatu	equ	0xFFB
 37314                           pclath	equ	0xFFA
 37315                           tblptru	equ	0xFF8
 37316                           tblptrh	equ	0xFF7
 37317                           tblptrl	equ	0xFF6
 37318                           tablat	equ	0xFF5
 37319                           prodh	equ	0xFF4
 37320                           prodl	equ	0xFF3
 37321                           intcon	equ	0xFF2
 37322                           intcon2	equ	0xFF1
 37323                           intcon3	equ	0xFF0
 37324                           indf0	equ	0xFEF
 37325                           postinc0	equ	0xFEE
 37326                           plusw0	equ	0xFEB
 37327                           fsr0h	equ	0xFEA
 37328                           fsr0l	equ	0xFE9
 37329                           wreg	equ	0xFE8
 37330                           postinc1	equ	0xFE6
 37331                           postdec1	equ	0xFE5
 37332                           plusw1	equ	0xFE3
 37333                           fsr1h	equ	0xFE2
 37334                           fsr1l	equ	0xFE1
 37335                           indf2	equ	0xFDF
 37336                           postinc2	equ	0xFDE
 37337                           postdec2	equ	0xFDD
 37338                           plusw2	equ	0xFDB
 37339                           fsr2h	equ	0xFDA
 37340                           fsr2l	equ	0xFD9
 37341                           status	equ	0xFD8
 37342                           
 37343 ;; *************** function i2_SwTimersInterrupt *****************
 37344 ;; Defined at:
 37345 ;;		line 287 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 37346 ;; Parameters:    Size  Location     Type
 37347 ;;		None
 37348 ;; Auto vars:     Size  Location     Type
 37349 ;;  SwTimersInte    4   34[COMRAM] unsigned long 
 37350 ;;  SwTimersInte    4   30[COMRAM] unsigned long 
 37351 ;;  SwTimersInte    1   38[COMRAM] unsigned char 
 37352 ;; Return value:  Size  Location     Type
 37353 ;;                  4   22[COMRAM] unsigned long 
 37354 ;; Registers used:
 37355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 37356 ;; Tracked objects:
 37357 ;;		On entry : F/1
 37358 ;;		On exit  : F/1
 37359 ;;		Unchanged: 0/0
 37360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 37361 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37362 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37363 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37364 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37365 ;;Total ram usage:       17 bytes
 37366 ;; Hardware stack levels used:    1
 37367 ;; Hardware stack levels required when called:    2
 37368 ;; This function calls:
 37369 ;;		i2_TMR_GetDeltaTime
 37370 ;; This function is called by:
 37371 ;;		_TMR_ISR_lora
 37372 ;; This function uses a non-reentrant model
 37373 ;;
 37374                           
 37375                           	psect	text201
 37376  004C9C                     __ptext201:
 37377                           	opt stack 0
 37378  004C9C                     i2_SwTimersInterrupt:
 37379                           	opt stack 12
 37380                           
 37381                           ; BSR set to: 1
 37382                           ;sw_timer.c: 289: uint8_t i;
 37383                           ;sw_timer.c: 290: uint32_t timeElapsed;
 37384                           ;sw_timer.c: 291: uint32_t ticksToNextTimerEvent = 0xFFFFFFFF;
 37385                           
 37386                           ;incstack = 0
 37387  004C9C  6823               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent,c
 37388  004C9E  6824               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+1,c
 37389  004CA0  6825               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+2,c
 37390  004CA2  6826               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+3,c
 37391                           
 37392                           ; BSR set to: 1
 37393                           ;sw_timer.c: 295: timeElapsed = TMR_GetDeltaTime();
 37394  004CA4  EC3B  F027         	call	i2_TMR_GetDeltaTime	;wreg free
 37395  004CA8  C007  F01F         	movff	?i2_TMR_GetDeltaTime,i2SwTimersInterrupt@timeElapsed
 37396  004CAC  C008  F020         	movff	?i2_TMR_GetDeltaTime+1,i2SwTimersInterrupt@timeElapsed+1
 37397  004CB0  C009  F021         	movff	?i2_TMR_GetDeltaTime+2,i2SwTimersInterrupt@timeElapsed+2
 37398  004CB4  C00A  F022         	movff	?i2_TMR_GetDeltaTime+3,i2SwTimersInterrupt@timeElapsed+3
 37399                           
 37400                           ;sw_timer.c: 297: for (i = 0; i < allocatedTimers; i++)
 37401  004CB8  6A27               	clrf	i2SwTimersInterrupt@i,c
 37402  004CBA  D05A               	goto	i2l10410
 37403  004CBC                     i2l10398:
 37404                           
 37405                           ; BSR set to: 1
 37406                           ;sw_timer.c: 298: {
 37407                           ;sw_timer.c: 301: if (swTimers[i].running == 1)
 37408  004CBC  5027               	movf	i2SwTimersInterrupt@i,w,c
 37409  004CBE  0D08               	mullw	8
 37410  004CC0  0E04               	movlw	low (_swTimers+4)
 37411  004CC2  24F3               	addwf	prodl,w,c
 37412  004CC4  6ED9               	movwf	fsr2l,c
 37413  004CC6  0E03               	movlw	high (_swTimers+4)
 37414  004CC8  20F4               	addwfc	prodh,w,c
 37415  004CCA  6EDA               	movwf	fsr2h,c
 37416  004CCC  04DE               	decf	postinc2,w,c
 37417  004CCE  E14F               	bnz	i2l10408
 37418                           
 37419                           ; BSR set to: 1
 37420                           ;sw_timer.c: 302: {
 37421                           ;sw_timer.c: 303: if (swTimers[i].ticksRemaining <= timeElapsed)
 37422  004CD0  5027               	movf	i2SwTimersInterrupt@i,w,c
 37423  004CD2  0D08               	mullw	8
 37424  004CD4  0E00               	movlw	low _swTimers
 37425  004CD6  24F3               	addwf	prodl,w,c
 37426  004CD8  6ED9               	movwf	fsr2l,c
 37427  004CDA  0E03               	movlw	high _swTimers
 37428  004CDC  20F4               	addwfc	prodh,w,c
 37429  004CDE  6EDA               	movwf	fsr2h,c
 37430  004CE0  50DE               	movf	postinc2,w,c
 37431  004CE2  5C1F               	subwf	i2SwTimersInterrupt@timeElapsed,w,c
 37432  004CE4  50DE               	movf	postinc2,w,c
 37433  004CE6  5820               	subwfb	i2SwTimersInterrupt@timeElapsed+1,w,c
 37434  004CE8  50DE               	movf	postinc2,w,c
 37435  004CEA  5821               	subwfb	i2SwTimersInterrupt@timeElapsed+2,w,c
 37436  004CEC  50DE               	movf	postinc2,w,c
 37437  004CEE  5822               	subwfb	i2SwTimersInterrupt@timeElapsed+3,w,c
 37438  004CF0  E30D               	bnc	i2l10404
 37439                           
 37440                           ; BSR set to: 1
 37441                           ;sw_timer.c: 304: {
 37442                           ;sw_timer.c: 305: swTimers[i].ticksRemaining = 0;
 37443  004CF2  5027               	movf	i2SwTimersInterrupt@i,w,c
 37444  004CF4  0D08               	mullw	8
 37445  004CF6  0E00               	movlw	low _swTimers
 37446  004CF8  24F3               	addwf	prodl,w,c
 37447  004CFA  6ED9               	movwf	fsr2l,c
 37448  004CFC  0E03               	movlw	high _swTimers
 37449  004CFE  20F4               	addwfc	prodh,w,c
 37450  004D00  6EDA               	movwf	fsr2h,c
 37451  004D02  6ADE               	clrf	postinc2,c
 37452  004D04  6ADE               	clrf	postinc2,c
 37453  004D06  6ADE               	clrf	postinc2,c
 37454  004D08  6ADD               	clrf	postdec2,c
 37455                           
 37456                           ;sw_timer.c: 306: }
 37457  004D0A  D031               	goto	i2l10408
 37458  004D0C                     i2l10404:
 37459                           
 37460                           ; BSR set to: 1
 37461                           ;sw_timer.c: 307: else
 37462                           ;sw_timer.c: 308: {
 37463                           ;sw_timer.c: 309: swTimers[i].ticksRemaining -= timeElapsed;
 37464  004D0C  5027               	movf	i2SwTimersInterrupt@i,w,c
 37465  004D0E  0D08               	mullw	8
 37466  004D10  0E00               	movlw	low _swTimers
 37467  004D12  24F3               	addwf	prodl,w,c
 37468  004D14  6ED9               	movwf	fsr2l,c
 37469  004D16  0E03               	movlw	high _swTimers
 37470  004D18  20F4               	addwfc	prodh,w,c
 37471  004D1A  6EDA               	movwf	fsr2h,c
 37472  004D1C  501F               	movf	i2SwTimersInterrupt@timeElapsed,w,c
 37473  004D1E  5EDE               	subwf	postinc2,f,c
 37474  004D20  5020               	movf	i2SwTimersInterrupt@timeElapsed+1,w,c
 37475  004D22  5ADE               	subwfb	postinc2,f,c
 37476  004D24  5021               	movf	i2SwTimersInterrupt@timeElapsed+2,w,c
 37477  004D26  5ADE               	subwfb	postinc2,f,c
 37478  004D28  5022               	movf	i2SwTimersInterrupt@timeElapsed+3,w,c
 37479  004D2A  5ADE               	subwfb	postinc2,f,c
 37480                           
 37481                           ;sw_timer.c: 312: if (swTimers[i].ticksRemaining < ticksToNextTimerEvent)
 37482  004D2C  5027               	movf	i2SwTimersInterrupt@i,w,c
 37483  004D2E  0D08               	mullw	8
 37484  004D30  0E00               	movlw	low _swTimers
 37485  004D32  24F3               	addwf	prodl,w,c
 37486  004D34  6ED9               	movwf	fsr2l,c
 37487  004D36  0E03               	movlw	high _swTimers
 37488  004D38  20F4               	addwfc	prodh,w,c
 37489  004D3A  6EDA               	movwf	fsr2h,c
 37490  004D3C  5023               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent,w,c
 37491  004D3E  5CDE               	subwf	postinc2,w,c
 37492  004D40  5024               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+1,w,c
 37493  004D42  58DE               	subwfb	postinc2,w,c
 37494  004D44  5025               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+2,w,c
 37495  004D46  58DE               	subwfb	postinc2,w,c
 37496  004D48  5026               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+3,w,c
 37497  004D4A  58DE               	subwfb	postinc2,w,c
 37498  004D4C  E210               	bc	i2l10408
 37499                           
 37500                           ; BSR set to: 1
 37501                           ;sw_timer.c: 313: {
 37502                           ;sw_timer.c: 314: ticksToNextTimerEvent = swTimers[i].ticksRemaining;
 37503  004D4E  5027               	movf	i2SwTimersInterrupt@i,w,c
 37504  004D50  0D08               	mullw	8
 37505  004D52  0E00               	movlw	low _swTimers
 37506  004D54  24F3               	addwf	prodl,w,c
 37507  004D56  6ED9               	movwf	fsr2l,c
 37508  004D58  0E03               	movlw	high _swTimers
 37509  004D5A  20F4               	addwfc	prodh,w,c
 37510  004D5C  6EDA               	movwf	fsr2h,c
 37511  004D5E  CFDE F023          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent
 37512  004D62  CFDE F024          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+1
 37513  004D66  CFDE F025          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+2
 37514  004D6A  CFDE F026          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+3
 37515  004D6E                     i2l10408:
 37516                           
 37517                           ; BSR set to: 1
 37518  004D6E  2A27               	incf	i2SwTimersInterrupt@i,f,c
 37519  004D70                     i2l10410:
 37520  004D70  0101               	movlb	1	; () banked
 37521  004D72  5173               	movf	_allocatedTimers& (0+255),w,b	;volatile
 37522  004D74  5C27               	subwf	i2SwTimersInterrupt@i,w,c
 37523  004D76  E3A2               	bnc	i2l10398
 37524                           
 37525                           ; BSR set to: 1
 37526                           ;sw_timer.c: 315: }
 37527                           ;sw_timer.c: 316: }
 37528                           ;sw_timer.c: 317: }
 37529                           ;sw_timer.c: 318: }
 37530                           ;sw_timer.c: 320: return ticksToNextTimerEvent;
 37531  004D78  C023  F017         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent,?i2_SwTimersInterrupt
 37532  004D7C  C024  F018         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+1,?i2_SwTimersInterrupt+1
 37533  004D80  C025  F019         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+2,?i2_SwTimersInterrupt+2
 37534  004D84  C026  F01A         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+3,?i2_SwTimersInterrupt+3
 37535                           
 37536                           ; BSR set to: 1
 37537  004D88  0012               	return		;funcret
 37538  004D8A                     __end_ofi2_SwTimersInterrupt:
 37539                           	opt stack 0
 37540                           tosu	equ	0xFFF
 37541                           tosh	equ	0xFFE
 37542                           tosl	equ	0xFFD
 37543                           pclatu	equ	0xFFB
 37544                           pclath	equ	0xFFA
 37545                           tblptru	equ	0xFF8
 37546                           tblptrh	equ	0xFF7
 37547                           tblptrl	equ	0xFF6
 37548                           tablat	equ	0xFF5
 37549                           prodh	equ	0xFF4
 37550                           prodl	equ	0xFF3
 37551                           intcon	equ	0xFF2
 37552                           intcon2	equ	0xFF1
 37553                           intcon3	equ	0xFF0
 37554                           indf0	equ	0xFEF
 37555                           postinc0	equ	0xFEE
 37556                           plusw0	equ	0xFEB
 37557                           fsr0h	equ	0xFEA
 37558                           fsr0l	equ	0xFE9
 37559                           wreg	equ	0xFE8
 37560                           postinc1	equ	0xFE6
 37561                           postdec1	equ	0xFE5
 37562                           plusw1	equ	0xFE3
 37563                           fsr1h	equ	0xFE2
 37564                           fsr1l	equ	0xFE1
 37565                           indf2	equ	0xFDF
 37566                           postinc2	equ	0xFDE
 37567                           postdec2	equ	0xFDD
 37568                           plusw2	equ	0xFDB
 37569                           fsr2h	equ	0xFDA
 37570                           fsr2l	equ	0xFD9
 37571                           status	equ	0xFD8
 37572                           
 37573 ;; *************** function i2_TMR_GetDeltaTime *****************
 37574 ;; Defined at:
 37575 ;;		line 88 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 37576 ;; Parameters:    Size  Location     Type
 37577 ;;		None
 37578 ;; Auto vars:     Size  Location     Type
 37579 ;;		None
 37580 ;; Return value:  Size  Location     Type
 37581 ;;                  4    6[COMRAM] unsigned long 
 37582 ;; Registers used:
 37583 ;;		wreg, status,2, status,0, cstack
 37584 ;; Tracked objects:
 37585 ;;		On entry : F/1
 37586 ;;		On exit  : 0/0
 37587 ;;		Unchanged: 0/0
 37588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 37589 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37591 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37592 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37593 ;;Total ram usage:       16 bytes
 37594 ;; Hardware stack levels used:    1
 37595 ;; Hardware stack levels required when called:    1
 37596 ;; This function calls:
 37597 ;;		i2_TMR1_ReadTimer
 37598 ;; This function is called by:
 37599 ;;		i2_SwTimersInterrupt
 37600 ;; This function uses a non-reentrant model
 37601 ;;
 37602                           
 37603                           	psect	text202
 37604  004E76                     __ptext202:
 37605                           	opt stack 0
 37606  004E76                     i2_TMR_GetDeltaTime:
 37607                           	opt stack 12
 37608                           
 37609                           ; BSR set to: 1
 37610                           ;sw_timer.c: 90: static uint32_t retVal;
 37611                           ;sw_timer.c: 91: static uint16_t tmrVal;
 37612                           ;sw_timer.c: 93: tmrVal = TMR1_ReadTimer();
 37613                           
 37614                           ; BSR set to: 1
 37615                           ;incstack = 0
 37616  004E76  ECDA  F039         	call	i2_TMR1_ReadTimer	;wreg free
 37617  004E7A  C001  F03E         	movff	?i2_TMR1_ReadTimer,TMR_GetDeltaTime@tmrVal
 37618  004E7E  C002  F03F         	movff	?i2_TMR1_ReadTimer+1,TMR_GetDeltaTime@tmrVal+1
 37619                           
 37620                           ;sw_timer.c: 95: if (timerOverflow == 1)
 37621  004E82  0449               	decf	_timerOverflow,w,c	;volatile
 37622  004E84  E13D               	bnz	i2l9716
 37623                           
 37624                           ;sw_timer.c: 96: {
 37625                           ;sw_timer.c: 97: timerOverflow = 0;
 37626  004E86  6A49               	clrf	_timerOverflow,c	;volatile
 37627                           
 37628                           ;sw_timer.c: 98: retVal = ((uint32_t)0x10000) - reloadVal + tmrVal - ticksAccounted + ti
      +                          cksAdded;
 37629  004E88  5044               	movf	_reloadVal,w,c	;volatile
 37630  004E8A  5C3E               	subwf	TMR_GetDeltaTime@tmrVal,w,c
 37631  004E8C  6E0B               	movwf	??i2_TMR_GetDeltaTime& (0+255),c
 37632  004E8E  5045               	movf	_reloadVal+1,w,c	;volatile
 37633  004E90  583F               	subwfb	TMR_GetDeltaTime@tmrVal+1,w,c
 37634  004E92  6E0C               	movwf	(??i2_TMR_GetDeltaTime+1)& (0+255),c
 37635  004E94  6A0D               	clrf	(??i2_TMR_GetDeltaTime+2)& (0+255),c
 37636  004E96  A0D8               	btfss	status,0,c
 37637  004E98  060D               	decf	(??i2_TMR_GetDeltaTime+2)& (0+255),f,c
 37638  004E9A  500D               	movf	(??i2_TMR_GetDeltaTime+2)& (0+255),w,c
 37639  004E9C  6E0E               	movwf	(??i2_TMR_GetDeltaTime+3)& (0+255),c
 37640  004E9E  5034               	movf	_ticksAccounted,w,c	;volatile
 37641  004EA0  5C0B               	subwf	??i2_TMR_GetDeltaTime,w,c
 37642  004EA2  6E0F               	movwf	(??i2_TMR_GetDeltaTime+4)& (0+255),c
 37643  004EA4  5035               	movf	_ticksAccounted+1,w,c	;volatile
 37644  004EA6  580C               	subwfb	??i2_TMR_GetDeltaTime+1,w,c
 37645  004EA8  6E10               	movwf	(??i2_TMR_GetDeltaTime+5)& (0+255),c
 37646  004EAA  5036               	movf	_ticksAccounted+2,w,c	;volatile
 37647  004EAC  580D               	subwfb	??i2_TMR_GetDeltaTime+2,w,c
 37648  004EAE  6E11               	movwf	(??i2_TMR_GetDeltaTime+6)& (0+255),c
 37649  004EB0  5037               	movf	_ticksAccounted+3,w,c	;volatile
 37650  004EB2  580E               	subwfb	??i2_TMR_GetDeltaTime+3,w,c
 37651  004EB4  6E12               	movwf	(??i2_TMR_GetDeltaTime+7)& (0+255),c
 37652  004EB6  5038               	movf	_ticksAdded,w,c	;volatile
 37653  004EB8  240F               	addwf	??i2_TMR_GetDeltaTime+4,w,c
 37654  004EBA  6E13               	movwf	(??i2_TMR_GetDeltaTime+8)& (0+255),c
 37655  004EBC  5039               	movf	_ticksAdded+1,w,c	;volatile
 37656  004EBE  2010               	addwfc	??i2_TMR_GetDeltaTime+5,w,c
 37657  004EC0  6E14               	movwf	(??i2_TMR_GetDeltaTime+9)& (0+255),c
 37658  004EC2  503A               	movf	_ticksAdded+2,w,c	;volatile
 37659  004EC4  2011               	addwfc	??i2_TMR_GetDeltaTime+6,w,c
 37660  004EC6  6E15               	movwf	(??i2_TMR_GetDeltaTime+10)& (0+255),c
 37661  004EC8  503B               	movf	_ticksAdded+3,w,c	;volatile
 37662  004ECA  2012               	addwfc	??i2_TMR_GetDeltaTime+7,w,c
 37663  004ECC  6E16               	movwf	(??i2_TMR_GetDeltaTime+11)& (0+255),c
 37664  004ECE  0E00               	movlw	0
 37665  004ED0  2413               	addwf	??i2_TMR_GetDeltaTime+8,w,c
 37666  004ED2  6E30               	movwf	TMR_GetDeltaTime@retVal,c
 37667  004ED4  0E00               	movlw	0
 37668  004ED6  2014               	addwfc	??i2_TMR_GetDeltaTime+9,w,c
 37669  004ED8  6E31               	movwf	TMR_GetDeltaTime@retVal+1,c
 37670  004EDA  0E01               	movlw	1
 37671  004EDC  2015               	addwfc	??i2_TMR_GetDeltaTime+10,w,c
 37672  004EDE  6E32               	movwf	TMR_GetDeltaTime@retVal+2,c
 37673  004EE0  0E00               	movlw	0
 37674  004EE2  2016               	addwfc	??i2_TMR_GetDeltaTime+11,w,c
 37675  004EE4  6E33               	movwf	TMR_GetDeltaTime@retVal+3,c
 37676                           
 37677                           ;sw_timer.c: 99: ticksAccounted = tmrVal;
 37678  004EE6  C03E  F034         	movff	TMR_GetDeltaTime@tmrVal,_ticksAccounted	;volatile
 37679  004EEA  C03F  F035         	movff	TMR_GetDeltaTime@tmrVal+1,_ticksAccounted+1	;volatile
 37680  004EEE  6A36               	clrf	_ticksAccounted+2,c	;volatile
 37681  004EF0  6A37               	clrf	_ticksAccounted+3,c	;volatile
 37682                           
 37683                           ;sw_timer.c: 100: ticksAdded = 0;
 37684  004EF2  6A38               	clrf	_ticksAdded,c	;volatile
 37685  004EF4  6A39               	clrf	_ticksAdded+1,c	;volatile
 37686  004EF6  6A3A               	clrf	_ticksAdded+2,c	;volatile
 37687  004EF8  6A3B               	clrf	_ticksAdded+3,c	;volatile
 37688                           
 37689                           ;sw_timer.c: 101: reloadVal = 0;
 37690  004EFA  6A44               	clrf	_reloadVal,c	;volatile
 37691  004EFC  6A45               	clrf	_reloadVal+1,c	;volatile
 37692                           
 37693                           ;sw_timer.c: 102: }
 37694  004EFE  D028               	goto	i2l9718
 37695  004F00                     i2l9716:
 37696                           
 37697                           ;sw_timer.c: 103: else
 37698                           ;sw_timer.c: 104: {
 37699                           ;sw_timer.c: 105: retVal = tmrVal - reloadVal - ticksAccounted + ticksAdded;
 37700  004F00  5044               	movf	_reloadVal,w,c	;volatile
 37701  004F02  5C3E               	subwf	TMR_GetDeltaTime@tmrVal,w,c
 37702  004F04  6E0B               	movwf	??i2_TMR_GetDeltaTime& (0+255),c
 37703  004F06  5045               	movf	_reloadVal+1,w,c	;volatile
 37704  004F08  583F               	subwfb	TMR_GetDeltaTime@tmrVal+1,w,c
 37705  004F0A  6E0C               	movwf	(??i2_TMR_GetDeltaTime+1)& (0+255),c
 37706  004F0C  6A0D               	clrf	(??i2_TMR_GetDeltaTime+2)& (0+255),c
 37707  004F0E  6A0E               	clrf	(??i2_TMR_GetDeltaTime+3)& (0+255),c
 37708  004F10  5034               	movf	_ticksAccounted,w,c	;volatile
 37709  004F12  5C0B               	subwf	??i2_TMR_GetDeltaTime,w,c
 37710  004F14  6E0F               	movwf	(??i2_TMR_GetDeltaTime+4)& (0+255),c
 37711  004F16  5035               	movf	_ticksAccounted+1,w,c	;volatile
 37712  004F18  580C               	subwfb	??i2_TMR_GetDeltaTime+1,w,c
 37713  004F1A  6E10               	movwf	(??i2_TMR_GetDeltaTime+5)& (0+255),c
 37714  004F1C  5036               	movf	_ticksAccounted+2,w,c	;volatile
 37715  004F1E  580D               	subwfb	??i2_TMR_GetDeltaTime+2,w,c
 37716  004F20  6E11               	movwf	(??i2_TMR_GetDeltaTime+6)& (0+255),c
 37717  004F22  5037               	movf	_ticksAccounted+3,w,c	;volatile
 37718  004F24  580E               	subwfb	??i2_TMR_GetDeltaTime+3,w,c
 37719  004F26  6E12               	movwf	(??i2_TMR_GetDeltaTime+7)& (0+255),c
 37720  004F28  5038               	movf	_ticksAdded,w,c	;volatile
 37721  004F2A  240F               	addwf	??i2_TMR_GetDeltaTime+4,w,c
 37722  004F2C  6E30               	movwf	TMR_GetDeltaTime@retVal,c
 37723  004F2E  5039               	movf	_ticksAdded+1,w,c	;volatile
 37724  004F30  2010               	addwfc	??i2_TMR_GetDeltaTime+5,w,c
 37725  004F32  6E31               	movwf	TMR_GetDeltaTime@retVal+1,c
 37726  004F34  503A               	movf	_ticksAdded+2,w,c	;volatile
 37727  004F36  2011               	addwfc	??i2_TMR_GetDeltaTime+6,w,c
 37728  004F38  6E32               	movwf	TMR_GetDeltaTime@retVal+2,c
 37729  004F3A  503B               	movf	_ticksAdded+3,w,c	;volatile
 37730  004F3C  2012               	addwfc	??i2_TMR_GetDeltaTime+7,w,c
 37731  004F3E  6E33               	movwf	TMR_GetDeltaTime@retVal+3,c
 37732                           
 37733                           ;sw_timer.c: 106: ticksAccounted += retVal;
 37734  004F40  5030               	movf	TMR_GetDeltaTime@retVal,w,c
 37735  004F42  2634               	addwf	_ticksAccounted,f,c	;volatile
 37736  004F44  5031               	movf	TMR_GetDeltaTime@retVal+1,w,c
 37737  004F46  2235               	addwfc	_ticksAccounted+1,f,c	;volatile
 37738  004F48  5032               	movf	TMR_GetDeltaTime@retVal+2,w,c
 37739  004F4A  2236               	addwfc	_ticksAccounted+2,f,c	;volatile
 37740  004F4C  5033               	movf	TMR_GetDeltaTime@retVal+3,w,c
 37741  004F4E  2237               	addwfc	_ticksAccounted+3,f,c	;volatile
 37742  004F50                     i2l9718:
 37743                           
 37744                           ;sw_timer.c: 107: }
 37745                           ;sw_timer.c: 109: return retVal;
 37746  004F50  C030  F007         	movff	TMR_GetDeltaTime@retVal,?i2_TMR_GetDeltaTime
 37747  004F54  C031  F008         	movff	TMR_GetDeltaTime@retVal+1,?i2_TMR_GetDeltaTime+1
 37748  004F58  C032  F009         	movff	TMR_GetDeltaTime@retVal+2,?i2_TMR_GetDeltaTime+2
 37749  004F5C  C033  F00A         	movff	TMR_GetDeltaTime@retVal+3,?i2_TMR_GetDeltaTime+3
 37750  004F60  0012               	return		;funcret
 37751  004F62                     __end_ofi2_TMR_GetDeltaTime:
 37752                           	opt stack 0
 37753                           tosu	equ	0xFFF
 37754                           tosh	equ	0xFFE
 37755                           tosl	equ	0xFFD
 37756                           pclatu	equ	0xFFB
 37757                           pclath	equ	0xFFA
 37758                           tblptru	equ	0xFF8
 37759                           tblptrh	equ	0xFF7
 37760                           tblptrl	equ	0xFF6
 37761                           tablat	equ	0xFF5
 37762                           prodh	equ	0xFF4
 37763                           prodl	equ	0xFF3
 37764                           intcon	equ	0xFF2
 37765                           intcon2	equ	0xFF1
 37766                           intcon3	equ	0xFF0
 37767                           indf0	equ	0xFEF
 37768                           postinc0	equ	0xFEE
 37769                           plusw0	equ	0xFEB
 37770                           fsr0h	equ	0xFEA
 37771                           fsr0l	equ	0xFE9
 37772                           wreg	equ	0xFE8
 37773                           postinc1	equ	0xFE6
 37774                           postdec1	equ	0xFE5
 37775                           plusw1	equ	0xFE3
 37776                           fsr1h	equ	0xFE2
 37777                           fsr1l	equ	0xFE1
 37778                           indf2	equ	0xFDF
 37779                           postinc2	equ	0xFDE
 37780                           postdec2	equ	0xFDD
 37781                           plusw2	equ	0xFDB
 37782                           fsr2h	equ	0xFDA
 37783                           fsr2l	equ	0xFD9
 37784                           status	equ	0xFD8
 37785                           
 37786 ;; *************** function i2_TMR1_ReadTimer *****************
 37787 ;; Defined at:
 37788 ;;		line 107 in file "mcc_generated_files/tmr1.c"
 37789 ;; Parameters:    Size  Location     Type
 37790 ;;		None
 37791 ;; Auto vars:     Size  Location     Type
 37792 ;;  TMR1_ReadTim    2    4[COMRAM] unsigned int 
 37793 ;; Return value:  Size  Location     Type
 37794 ;;                  2    0[COMRAM] unsigned int 
 37795 ;; Registers used:
 37796 ;;		wreg, status,2, status,0
 37797 ;; Tracked objects:
 37798 ;;		On entry : 0/1
 37799 ;;		On exit  : 0/0
 37800 ;;		Unchanged: 0/0
 37801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 37802 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37803 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37804 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37805 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37806 ;;Total ram usage:        6 bytes
 37807 ;; Hardware stack levels used:    1
 37808 ;; This function calls:
 37809 ;;		Nothing
 37810 ;; This function is called by:
 37811 ;;		i2_TMR_GetDeltaTime
 37812 ;;		i2_TMR_SwapTimer
 37813 ;; This function uses a non-reentrant model
 37814 ;;
 37815                           
 37816                           	psect	text203
 37817  0073B4                     __ptext203:
 37818                           	opt stack 0
 37819  0073B4                     i2_TMR1_ReadTimer:
 37820                           	opt stack 13
 37821                           
 37822                           ;tmr1.c: 109: uint16_t readVal;
 37823                           ;tmr1.c: 111: readVal = (TMR1H << 8) | TMR1L;
 37824                           
 37825                           ;incstack = 0
 37826  0073B4  50CE               	movf	4046,w,c	;volatile
 37827  0073B6  CFCF F003          	movff	4047,??i2_TMR1_ReadTimer	;volatile
 37828  0073BA  6A04               	clrf	(??i2_TMR1_ReadTimer+1)& (0+255),c
 37829  0073BC  C003  F004         	movff	??i2_TMR1_ReadTimer,??i2_TMR1_ReadTimer+1
 37830  0073C0  6A03               	clrf	??i2_TMR1_ReadTimer,c
 37831  0073C2  1003               	iorwf	??i2_TMR1_ReadTimer,w,c
 37832  0073C4  6E05               	movwf	i2TMR1_ReadTimer@readVal,c
 37833  0073C6  5004               	movf	??i2_TMR1_ReadTimer+1,w,c
 37834  0073C8  6E06               	movwf	i2TMR1_ReadTimer@readVal+1,c
 37835                           
 37836                           ;tmr1.c: 113: return readVal;
 37837  0073CA  C005  F001         	movff	i2TMR1_ReadTimer@readVal,?i2_TMR1_ReadTimer
 37838  0073CE  C006  F002         	movff	i2TMR1_ReadTimer@readVal+1,?i2_TMR1_ReadTimer+1
 37839  0073D2  0012               	return		;funcret
 37840  0073D4                     __end_ofi2_TMR1_ReadTimer:
 37841                           	opt stack 0
 37842                           tosu	equ	0xFFF
 37843                           tosh	equ	0xFFE
 37844                           tosl	equ	0xFFD
 37845                           pclatu	equ	0xFFB
 37846                           pclath	equ	0xFFA
 37847                           tblptru	equ	0xFF8
 37848                           tblptrh	equ	0xFF7
 37849                           tblptrl	equ	0xFF6
 37850                           tablat	equ	0xFF5
 37851                           prodh	equ	0xFF4
 37852                           prodl	equ	0xFF3
 37853                           intcon	equ	0xFF2
 37854                           intcon2	equ	0xFF1
 37855                           intcon3	equ	0xFF0
 37856                           indf0	equ	0xFEF
 37857                           postinc0	equ	0xFEE
 37858                           plusw0	equ	0xFEB
 37859                           fsr0h	equ	0xFEA
 37860                           fsr0l	equ	0xFE9
 37861                           wreg	equ	0xFE8
 37862                           postinc1	equ	0xFE6
 37863                           postdec1	equ	0xFE5
 37864                           plusw1	equ	0xFE3
 37865                           fsr1h	equ	0xFE2
 37866                           fsr1l	equ	0xFE1
 37867                           indf2	equ	0xFDF
 37868                           postinc2	equ	0xFDE
 37869                           postdec2	equ	0xFDD
 37870                           plusw2	equ	0xFDB
 37871                           fsr2h	equ	0xFDA
 37872                           fsr2l	equ	0xFD9
 37873                           status	equ	0xFD8
 37874                           
 37875 ;; *************** function _PIN_MANAGER_IOC *****************
 37876 ;; Defined at:
 37877 ;;		line 103 in file "mcc_generated_files/pin_manager.c"
 37878 ;; Parameters:    Size  Location     Type
 37879 ;;		None
 37880 ;; Auto vars:     Size  Location     Type
 37881 ;;		None
 37882 ;; Return value:  Size  Location     Type
 37883 ;;                  1    wreg      void 
 37884 ;; Registers used:
 37885 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 37886 ;; Tracked objects:
 37887 ;;		On entry : 0/0
 37888 ;;		On exit  : 0/0
 37889 ;;		Unchanged: 0/0
 37890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 37891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37895 ;;Total ram usage:        0 bytes
 37896 ;; Hardware stack levels used:    1
 37897 ;; Hardware stack levels required when called:    2
 37898 ;; This function calls:
 37899 ;;		_IOCB4_ISR
 37900 ;; This function is called by:
 37901 ;;		_INTERRUPT_InterruptManager
 37902 ;; This function uses a non-reentrant model
 37903 ;;
 37904                           
 37905                           	psect	text204
 37906  007708                     __ptext204:
 37907                           	opt stack 0
 37908  007708                     _PIN_MANAGER_IOC:
 37909                           	opt stack 15
 37910                           
 37911                           ;pin_manager.c: 106: if(IOCBbits.IOCB4 == 1)
 37912                           
 37913                           ;incstack = 0
 37914  007708  010F               	movlb	15	; () banked
 37915  00770A  B95A               	btfsc	90,4,b	;volatile
 37916                           
 37917                           ; BSR set to: 15
 37918                           ;pin_manager.c: 107: {
 37919                           ;pin_manager.c: 108: IOCB4_ISR();
 37920  00770C  EC35  F03A         	call	_IOCB4_ISR	;wreg free
 37921                           
 37922                           ;pin_manager.c: 109: }
 37923                           ;pin_manager.c: 112: INTCONbits.RBIF = 0;
 37924  007710  90F2               	bcf	intcon,0,c	;volatile
 37925  007712  0012               	return		;funcret
 37926  007714                     __end_of_PIN_MANAGER_IOC:
 37927                           	opt stack 0
 37928                           tosu	equ	0xFFF
 37929                           tosh	equ	0xFFE
 37930                           tosl	equ	0xFFD
 37931                           pclatu	equ	0xFFB
 37932                           pclath	equ	0xFFA
 37933                           tblptru	equ	0xFF8
 37934                           tblptrh	equ	0xFF7
 37935                           tblptrl	equ	0xFF6
 37936                           tablat	equ	0xFF5
 37937                           prodh	equ	0xFF4
 37938                           prodl	equ	0xFF3
 37939                           intcon	equ	0xFF2
 37940                           intcon2	equ	0xFF1
 37941                           intcon3	equ	0xFF0
 37942                           indf0	equ	0xFEF
 37943                           postinc0	equ	0xFEE
 37944                           plusw0	equ	0xFEB
 37945                           fsr0h	equ	0xFEA
 37946                           fsr0l	equ	0xFE9
 37947                           wreg	equ	0xFE8
 37948                           postinc1	equ	0xFE6
 37949                           postdec1	equ	0xFE5
 37950                           plusw1	equ	0xFE3
 37951                           fsr1h	equ	0xFE2
 37952                           fsr1l	equ	0xFE1
 37953                           indf2	equ	0xFDF
 37954                           postinc2	equ	0xFDE
 37955                           postdec2	equ	0xFDD
 37956                           plusw2	equ	0xFDB
 37957                           fsr2h	equ	0xFDA
 37958                           fsr2l	equ	0xFD9
 37959                           status	equ	0xFD8
 37960                           
 37961 ;; *************** function _IOCB4_ISR *****************
 37962 ;; Defined at:
 37963 ;;		line 119 in file "mcc_generated_files/pin_manager.c"
 37964 ;; Parameters:    Size  Location     Type
 37965 ;;		None
 37966 ;; Auto vars:     Size  Location     Type
 37967 ;;		None
 37968 ;; Return value:  Size  Location     Type
 37969 ;;                  1    wreg      void 
 37970 ;; Registers used:
 37971 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 37972 ;; Tracked objects:
 37973 ;;		On entry : F/F
 37974 ;;		On exit  : 0/0
 37975 ;;		Unchanged: 0/0
 37976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 37977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 37981 ;;Total ram usage:        0 bytes
 37982 ;; Hardware stack levels used:    1
 37983 ;; Hardware stack levels required when called:    1
 37984 ;; This function calls:
 37985 ;;		Absolute function
 37986 ;;		_DIO2_ISR_Lora
 37987 ;;		_IOCB4_DefaultInterruptHandler
 37988 ;; This function is called by:
 37989 ;;		_PIN_MANAGER_IOC
 37990 ;; This function uses a non-reentrant model
 37991 ;;
 37992                           
 37993                           	psect	text205
 37994  00746A                     __ptext205:
 37995                           	opt stack 0
 37996  00746A                     _IOCB4_ISR:
 37997                           	opt stack 15
 37998                           
 37999                           ; BSR set to: 15
 38000                           ;pin_manager.c: 124: if(IOCB4_InterruptHandler)
 38001                           
 38002                           ;incstack = 0
 38003  00746A  0101               	movlb	1	; () banked
 38004  00746C  51F3               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 38005  00746E  11F4               	iorwf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 38006  007470  B4D8               	btfsc	status,2,c
 38007  007472  0012               	return	
 38008                           
 38009                           ; BSR set to: 1
 38010                           ;pin_manager.c: 125: {
 38011                           ;pin_manager.c: 126: IOCB4_InterruptHandler();
 38012  007474  0005               	push	
 38013  007476  6EFA               	movwf	pclath,c
 38014  007478  51F3               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 38015  00747A  6EFD               	movwf	tosl,c
 38016  00747C  51F4               	movf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 38017  00747E  6EFE               	movwf	tosh,c
 38018  007480  50F8               	movf	tblptru,w,c
 38019  007482  6EFF               	movwf	tosu,c
 38020  007484  50FA               	movf	pclath,w,c
 38021  007486  0012               	return		;indir
 38022  007488                     __end_of_IOCB4_ISR:
 38023                           	opt stack 0
 38024                           tosu	equ	0xFFF
 38025                           tosh	equ	0xFFE
 38026                           tosl	equ	0xFFD
 38027                           pclatu	equ	0xFFB
 38028                           pclath	equ	0xFFA
 38029                           tblptru	equ	0xFF8
 38030                           tblptrh	equ	0xFF7
 38031                           tblptrl	equ	0xFF6
 38032                           tablat	equ	0xFF5
 38033                           prodh	equ	0xFF4
 38034                           prodl	equ	0xFF3
 38035                           intcon	equ	0xFF2
 38036                           intcon2	equ	0xFF1
 38037                           intcon3	equ	0xFF0
 38038                           indf0	equ	0xFEF
 38039                           postinc0	equ	0xFEE
 38040                           plusw0	equ	0xFEB
 38041                           fsr0h	equ	0xFEA
 38042                           fsr0l	equ	0xFE9
 38043                           wreg	equ	0xFE8
 38044                           postinc1	equ	0xFE6
 38045                           postdec1	equ	0xFE5
 38046                           plusw1	equ	0xFE3
 38047                           fsr1h	equ	0xFE2
 38048                           fsr1l	equ	0xFE1
 38049                           indf2	equ	0xFDF
 38050                           postinc2	equ	0xFDE
 38051                           postdec2	equ	0xFDD
 38052                           plusw2	equ	0xFDB
 38053                           fsr2h	equ	0xFDA
 38054                           fsr2l	equ	0xFD9
 38055                           status	equ	0xFD8
 38056                           
 38057 ;; *************** function _DIO2_ISR_Lora *****************
 38058 ;; Defined at:
 38059 ;;		line 73 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 38060 ;; Parameters:    Size  Location     Type
 38061 ;;		None
 38062 ;; Auto vars:     Size  Location     Type
 38063 ;;		None
 38064 ;; Return value:  Size  Location     Type
 38065 ;;                  1    wreg      void 
 38066 ;; Registers used:
 38067 ;;		status,2, status,0
 38068 ;; Tracked objects:
 38069 ;;		On entry : F/1
 38070 ;;		On exit  : F/1
 38071 ;;		Unchanged: F/0
 38072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 38073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38077 ;;Total ram usage:        0 bytes
 38078 ;; Hardware stack levels used:    1
 38079 ;; This function calls:
 38080 ;;		Nothing
 38081 ;; This function is called by:
 38082 ;;		_DIO2_ISR_Lora_Init
 38083 ;;		_IOCB4_ISR
 38084 ;; This function uses a non-reentrant model
 38085 ;;
 38086                           
 38087                           	psect	text206
 38088  00780E                     __ptext206:
 38089                           	opt stack 0
 38090  00780E                     _DIO2_ISR_Lora:
 38091                           	opt stack 15
 38092                           
 38093                           ; BSR set to: 1
 38094                           ;interrupt_manager_lora_addons.c: 75: dioStatus |= 0x04;
 38095                           
 38096                           ;incstack = 0
 38097  00780E  8448               	bsf	_dioStatus,2,c	;volatile
 38098                           
 38099                           ; BSR set to: 1
 38100  007810  0012               	return		;funcret
 38101  007812                     __end_of_DIO2_ISR_Lora:
 38102                           	opt stack 0
 38103                           tosu	equ	0xFFF
 38104                           tosh	equ	0xFFE
 38105                           tosl	equ	0xFFD
 38106                           pclatu	equ	0xFFB
 38107                           pclath	equ	0xFFA
 38108                           tblptru	equ	0xFF8
 38109                           tblptrh	equ	0xFF7
 38110                           tblptrl	equ	0xFF6
 38111                           tablat	equ	0xFF5
 38112                           prodh	equ	0xFF4
 38113                           prodl	equ	0xFF3
 38114                           intcon	equ	0xFF2
 38115                           intcon2	equ	0xFF1
 38116                           intcon3	equ	0xFF0
 38117                           indf0	equ	0xFEF
 38118                           postinc0	equ	0xFEE
 38119                           plusw0	equ	0xFEB
 38120                           fsr0h	equ	0xFEA
 38121                           fsr0l	equ	0xFE9
 38122                           wreg	equ	0xFE8
 38123                           postinc1	equ	0xFE6
 38124                           postdec1	equ	0xFE5
 38125                           plusw1	equ	0xFE3
 38126                           fsr1h	equ	0xFE2
 38127                           fsr1l	equ	0xFE1
 38128                           indf2	equ	0xFDF
 38129                           postinc2	equ	0xFDE
 38130                           postdec2	equ	0xFDD
 38131                           plusw2	equ	0xFDB
 38132                           fsr2h	equ	0xFDA
 38133                           fsr2l	equ	0xFD9
 38134                           status	equ	0xFD8
 38135                           
 38136 ;; *************** function _IOCB4_DefaultInterruptHandler *****************
 38137 ;; Defined at:
 38138 ;;		line 140 in file "mcc_generated_files/pin_manager.c"
 38139 ;; Parameters:    Size  Location     Type
 38140 ;;		None
 38141 ;; Auto vars:     Size  Location     Type
 38142 ;;		None
 38143 ;; Return value:  Size  Location     Type
 38144 ;;                  1    wreg      void 
 38145 ;; Registers used:
 38146 ;;		None
 38147 ;; Tracked objects:
 38148 ;;		On entry : F/1
 38149 ;;		On exit  : F/1
 38150 ;;		Unchanged: F/0
 38151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 38152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38156 ;;Total ram usage:        0 bytes
 38157 ;; Hardware stack levels used:    1
 38158 ;; This function calls:
 38159 ;;		Nothing
 38160 ;; This function is called by:
 38161 ;;		_PIN_MANAGER_Initialize
 38162 ;;		_IOCB4_ISR
 38163 ;; This function uses a non-reentrant model
 38164 ;;
 38165                           
 38166                           	psect	text207
 38167  007824                     __ptext207:
 38168                           	opt stack 0
 38169  007824                     _IOCB4_DefaultInterruptHandler:
 38170                           	opt stack 15
 38171                           
 38172                           ; BSR set to: 1
 38173                           
 38174                           ; BSR set to: 1
 38175                           ;incstack = 0
 38176  007824  0012               	return		;funcret
 38177  007826                     __end_of_IOCB4_DefaultInterruptHandler:
 38178                           	opt stack 0
 38179                           tosu	equ	0xFFF
 38180                           tosh	equ	0xFFE
 38181                           tosl	equ	0xFFD
 38182                           pclatu	equ	0xFFB
 38183                           pclath	equ	0xFFA
 38184                           tblptru	equ	0xFF8
 38185                           tblptrh	equ	0xFF7
 38186                           tblptrl	equ	0xFF6
 38187                           tablat	equ	0xFF5
 38188                           prodh	equ	0xFF4
 38189                           prodl	equ	0xFF3
 38190                           intcon	equ	0xFF2
 38191                           intcon2	equ	0xFF1
 38192                           intcon3	equ	0xFF0
 38193                           indf0	equ	0xFEF
 38194                           postinc0	equ	0xFEE
 38195                           plusw0	equ	0xFEB
 38196                           fsr0h	equ	0xFEA
 38197                           fsr0l	equ	0xFE9
 38198                           wreg	equ	0xFE8
 38199                           postinc1	equ	0xFE6
 38200                           postdec1	equ	0xFE5
 38201                           plusw1	equ	0xFE3
 38202                           fsr1h	equ	0xFE2
 38203                           fsr1l	equ	0xFE1
 38204                           indf2	equ	0xFDF
 38205                           postinc2	equ	0xFDE
 38206                           postdec2	equ	0xFDD
 38207                           plusw2	equ	0xFDB
 38208                           fsr2h	equ	0xFDA
 38209                           fsr2l	equ	0xFD9
 38210                           status	equ	0xFD8
 38211                           
 38212 ;; *************** function _INT3_ISR *****************
 38213 ;; Defined at:
 38214 ;;		line 169 in file "mcc_generated_files/ext_int.c"
 38215 ;; Parameters:    Size  Location     Type
 38216 ;;		None
 38217 ;; Auto vars:     Size  Location     Type
 38218 ;;		None
 38219 ;; Return value:  Size  Location     Type
 38220 ;;                  1    wreg      void 
 38221 ;; Registers used:
 38222 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 38223 ;; Tracked objects:
 38224 ;;		On entry : 0/0
 38225 ;;		On exit  : 0/0
 38226 ;;		Unchanged: 0/0
 38227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 38228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38232 ;;Total ram usage:        0 bytes
 38233 ;; Hardware stack levels used:    1
 38234 ;; Hardware stack levels required when called:    2
 38235 ;; This function calls:
 38236 ;;		_INT3_CallBack
 38237 ;; This function is called by:
 38238 ;;		_INTERRUPT_InterruptManager
 38239 ;; This function uses a non-reentrant model
 38240 ;;
 38241                           
 38242                           	psect	text208
 38243  0077E4                     __ptext208:
 38244                           	opt stack 0
 38245  0077E4                     _INT3_ISR:
 38246                           	opt stack 15
 38247                           
 38248                           ;ext_int.c: 175: (INTCON3bits.INT3IF = 0);
 38249                           
 38250                           ; BSR set to: 1
 38251                           ;incstack = 0
 38252  0077E4  94F0               	bcf	intcon3,2,c	;volatile
 38253                           
 38254                           ;ext_int.c: 178: INT3_CallBack();
 38255  0077E6  EF44  F03A         	goto	_INT3_CallBack	;wreg free
 38256  0077EA                     __end_of_INT3_ISR:
 38257                           	opt stack 0
 38258                           tosu	equ	0xFFF
 38259                           tosh	equ	0xFFE
 38260                           tosl	equ	0xFFD
 38261                           pclatu	equ	0xFFB
 38262                           pclath	equ	0xFFA
 38263                           tblptru	equ	0xFF8
 38264                           tblptrh	equ	0xFF7
 38265                           tblptrl	equ	0xFF6
 38266                           tablat	equ	0xFF5
 38267                           prodh	equ	0xFF4
 38268                           prodl	equ	0xFF3
 38269                           intcon	equ	0xFF2
 38270                           intcon2	equ	0xFF1
 38271                           intcon3	equ	0xFF0
 38272                           indf0	equ	0xFEF
 38273                           postinc0	equ	0xFEE
 38274                           plusw0	equ	0xFEB
 38275                           fsr0h	equ	0xFEA
 38276                           fsr0l	equ	0xFE9
 38277                           wreg	equ	0xFE8
 38278                           postinc1	equ	0xFE6
 38279                           postdec1	equ	0xFE5
 38280                           plusw1	equ	0xFE3
 38281                           fsr1h	equ	0xFE2
 38282                           fsr1l	equ	0xFE1
 38283                           indf2	equ	0xFDF
 38284                           postinc2	equ	0xFDE
 38285                           postdec2	equ	0xFDD
 38286                           plusw2	equ	0xFDB
 38287                           fsr2h	equ	0xFDA
 38288                           fsr2l	equ	0xFD9
 38289                           status	equ	0xFD8
 38290                           
 38291 ;; *************** function _INT3_CallBack *****************
 38292 ;; Defined at:
 38293 ;;		line 184 in file "mcc_generated_files/ext_int.c"
 38294 ;; Parameters:    Size  Location     Type
 38295 ;;		None
 38296 ;; Auto vars:     Size  Location     Type
 38297 ;;		None
 38298 ;; Return value:  Size  Location     Type
 38299 ;;                  1    wreg      void 
 38300 ;; Registers used:
 38301 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 38302 ;; Tracked objects:
 38303 ;;		On entry : 0/0
 38304 ;;		On exit  : 0/0
 38305 ;;		Unchanged: 0/0
 38306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 38307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38311 ;;Total ram usage:        0 bytes
 38312 ;; Hardware stack levels used:    1
 38313 ;; Hardware stack levels required when called:    1
 38314 ;; This function calls:
 38315 ;;		Absolute function
 38316 ;;		_INT3_DefaultInterruptHandler
 38317 ;; This function is called by:
 38318 ;;		_INT3_ISR
 38319 ;; This function uses a non-reentrant model
 38320 ;;
 38321                           
 38322                           	psect	text209
 38323  007488                     __ptext209:
 38324                           	opt stack 0
 38325  007488                     _INT3_CallBack:
 38326                           	opt stack 15
 38327                           
 38328                           ;ext_int.c: 187: if(INT3_InterruptHandler)
 38329                           
 38330                           ;incstack = 0
 38331  007488  0101               	movlb	1	; () banked
 38332  00748A  51F1               	movf	_INT3_InterruptHandler& (0+255),w,b
 38333  00748C  11F2               	iorwf	(_INT3_InterruptHandler+1)& (0+255),w,b
 38334  00748E  B4D8               	btfsc	status,2,c
 38335  007490  0012               	return	
 38336                           
 38337                           ; BSR set to: 1
 38338                           ;ext_int.c: 188: {
 38339                           ;ext_int.c: 189: INT3_InterruptHandler();
 38340  007492  0005               	push	
 38341  007494  6EFA               	movwf	pclath,c
 38342  007496  51F1               	movf	_INT3_InterruptHandler& (0+255),w,b
 38343  007498  6EFD               	movwf	tosl,c
 38344  00749A  51F2               	movf	(_INT3_InterruptHandler+1)& (0+255),w,b
 38345  00749C  6EFE               	movwf	tosh,c
 38346  00749E  50F8               	movf	tblptru,w,c
 38347  0074A0  6EFF               	movwf	tosu,c
 38348  0074A2  50FA               	movf	pclath,w,c
 38349  0074A4  0012               	return		;indir
 38350  0074A6                     __end_of_INT3_CallBack:
 38351                           	opt stack 0
 38352                           tosu	equ	0xFFF
 38353                           tosh	equ	0xFFE
 38354                           tosl	equ	0xFFD
 38355                           pclatu	equ	0xFFB
 38356                           pclath	equ	0xFFA
 38357                           tblptru	equ	0xFF8
 38358                           tblptrh	equ	0xFF7
 38359                           tblptrl	equ	0xFF6
 38360                           tablat	equ	0xFF5
 38361                           prodh	equ	0xFF4
 38362                           prodl	equ	0xFF3
 38363                           intcon	equ	0xFF2
 38364                           intcon2	equ	0xFF1
 38365                           intcon3	equ	0xFF0
 38366                           indf0	equ	0xFEF
 38367                           postinc0	equ	0xFEE
 38368                           plusw0	equ	0xFEB
 38369                           fsr0h	equ	0xFEA
 38370                           fsr0l	equ	0xFE9
 38371                           wreg	equ	0xFE8
 38372                           postinc1	equ	0xFE6
 38373                           postdec1	equ	0xFE5
 38374                           plusw1	equ	0xFE3
 38375                           fsr1h	equ	0xFE2
 38376                           fsr1l	equ	0xFE1
 38377                           indf2	equ	0xFDF
 38378                           postinc2	equ	0xFDE
 38379                           postdec2	equ	0xFDD
 38380                           plusw2	equ	0xFDB
 38381                           fsr2h	equ	0xFDA
 38382                           fsr2l	equ	0xFD9
 38383                           status	equ	0xFD8
 38384                           
 38385 ;; *************** function _INT3_DefaultInterruptHandler *****************
 38386 ;; Defined at:
 38387 ;;		line 203 in file "mcc_generated_files/ext_int.c"
 38388 ;; Parameters:    Size  Location     Type
 38389 ;;		None
 38390 ;; Auto vars:     Size  Location     Type
 38391 ;;		None
 38392 ;; Return value:  Size  Location     Type
 38393 ;;                  1    wreg      void 
 38394 ;; Registers used:
 38395 ;;		None
 38396 ;; Tracked objects:
 38397 ;;		On entry : F/1
 38398 ;;		On exit  : F/1
 38399 ;;		Unchanged: F/0
 38400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 38401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38405 ;;Total ram usage:        0 bytes
 38406 ;; Hardware stack levels used:    1
 38407 ;; This function calls:
 38408 ;;		Nothing
 38409 ;; This function is called by:
 38410 ;;		_EXT_INT_Initialize
 38411 ;;		_INT3_CallBack
 38412 ;; This function uses a non-reentrant model
 38413 ;;
 38414                           
 38415                           	psect	text210
 38416  007826                     __ptext210:
 38417                           	opt stack 0
 38418  007826                     _INT3_DefaultInterruptHandler:
 38419                           	opt stack 15
 38420                           
 38421                           ; BSR set to: 1
 38422                           
 38423                           ;incstack = 0
 38424  007826  0012               	return		;funcret
 38425  007828                     __end_of_INT3_DefaultInterruptHandler:
 38426                           	opt stack 0
 38427                           tosu	equ	0xFFF
 38428                           tosh	equ	0xFFE
 38429                           tosl	equ	0xFFD
 38430                           pclatu	equ	0xFFB
 38431                           pclath	equ	0xFFA
 38432                           tblptru	equ	0xFF8
 38433                           tblptrh	equ	0xFF7
 38434                           tblptrl	equ	0xFF6
 38435                           tablat	equ	0xFF5
 38436                           prodh	equ	0xFF4
 38437                           prodl	equ	0xFF3
 38438                           intcon	equ	0xFF2
 38439                           intcon2	equ	0xFF1
 38440                           intcon3	equ	0xFF0
 38441                           indf0	equ	0xFEF
 38442                           postinc0	equ	0xFEE
 38443                           plusw0	equ	0xFEB
 38444                           fsr0h	equ	0xFEA
 38445                           fsr0l	equ	0xFE9
 38446                           wreg	equ	0xFE8
 38447                           postinc1	equ	0xFE6
 38448                           postdec1	equ	0xFE5
 38449                           plusw1	equ	0xFE3
 38450                           fsr1h	equ	0xFE2
 38451                           fsr1l	equ	0xFE1
 38452                           indf2	equ	0xFDF
 38453                           postinc2	equ	0xFDE
 38454                           postdec2	equ	0xFDD
 38455                           plusw2	equ	0xFDB
 38456                           fsr2h	equ	0xFDA
 38457                           fsr2l	equ	0xFD9
 38458                           status	equ	0xFD8
 38459                           
 38460 ;; *************** function _INT2_ISR *****************
 38461 ;; Defined at:
 38462 ;;		line 87 in file "mcc_generated_files/ext_int.c"
 38463 ;; Parameters:    Size  Location     Type
 38464 ;;		None
 38465 ;; Auto vars:     Size  Location     Type
 38466 ;;		None
 38467 ;; Return value:  Size  Location     Type
 38468 ;;                  1    wreg      void 
 38469 ;; Registers used:
 38470 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 38471 ;; Tracked objects:
 38472 ;;		On entry : 0/0
 38473 ;;		On exit  : 0/0
 38474 ;;		Unchanged: 0/0
 38475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 38476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38480 ;;Total ram usage:        0 bytes
 38481 ;; Hardware stack levels used:    1
 38482 ;; Hardware stack levels required when called:    2
 38483 ;; This function calls:
 38484 ;;		_INT2_CallBack
 38485 ;; This function is called by:
 38486 ;;		_INTERRUPT_InterruptManager
 38487 ;; This function uses a non-reentrant model
 38488 ;;
 38489                           
 38490                           	psect	text211
 38491  0077EA                     __ptext211:
 38492                           	opt stack 0
 38493  0077EA                     _INT2_ISR:
 38494                           	opt stack 15
 38495                           
 38496                           ;ext_int.c: 93: (INTCON3bits.INT2IF = 0);
 38497                           
 38498                           ; BSR set to: 1
 38499                           ;incstack = 0
 38500  0077EA  92F0               	bcf	intcon3,1,c	;volatile
 38501                           
 38502                           ;ext_int.c: 96: INT2_CallBack();
 38503  0077EC  EF53  F03A         	goto	_INT2_CallBack	;wreg free
 38504  0077F0                     __end_of_INT2_ISR:
 38505                           	opt stack 0
 38506                           tosu	equ	0xFFF
 38507                           tosh	equ	0xFFE
 38508                           tosl	equ	0xFFD
 38509                           pclatu	equ	0xFFB
 38510                           pclath	equ	0xFFA
 38511                           tblptru	equ	0xFF8
 38512                           tblptrh	equ	0xFF7
 38513                           tblptrl	equ	0xFF6
 38514                           tablat	equ	0xFF5
 38515                           prodh	equ	0xFF4
 38516                           prodl	equ	0xFF3
 38517                           intcon	equ	0xFF2
 38518                           intcon2	equ	0xFF1
 38519                           intcon3	equ	0xFF0
 38520                           indf0	equ	0xFEF
 38521                           postinc0	equ	0xFEE
 38522                           plusw0	equ	0xFEB
 38523                           fsr0h	equ	0xFEA
 38524                           fsr0l	equ	0xFE9
 38525                           wreg	equ	0xFE8
 38526                           postinc1	equ	0xFE6
 38527                           postdec1	equ	0xFE5
 38528                           plusw1	equ	0xFE3
 38529                           fsr1h	equ	0xFE2
 38530                           fsr1l	equ	0xFE1
 38531                           indf2	equ	0xFDF
 38532                           postinc2	equ	0xFDE
 38533                           postdec2	equ	0xFDD
 38534                           plusw2	equ	0xFDB
 38535                           fsr2h	equ	0xFDA
 38536                           fsr2l	equ	0xFD9
 38537                           status	equ	0xFD8
 38538                           
 38539 ;; *************** function _INT2_CallBack *****************
 38540 ;; Defined at:
 38541 ;;		line 102 in file "mcc_generated_files/ext_int.c"
 38542 ;; Parameters:    Size  Location     Type
 38543 ;;		None
 38544 ;; Auto vars:     Size  Location     Type
 38545 ;;		None
 38546 ;; Return value:  Size  Location     Type
 38547 ;;                  1    wreg      void 
 38548 ;; Registers used:
 38549 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 38550 ;; Tracked objects:
 38551 ;;		On entry : 0/0
 38552 ;;		On exit  : 0/0
 38553 ;;		Unchanged: 0/0
 38554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 38555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38559 ;;Total ram usage:        0 bytes
 38560 ;; Hardware stack levels used:    1
 38561 ;; Hardware stack levels required when called:    1
 38562 ;; This function calls:
 38563 ;;		Absolute function
 38564 ;;		_DIO1_ISR_Lora
 38565 ;;		_INT2_DefaultInterruptHandler
 38566 ;; This function is called by:
 38567 ;;		_INT2_ISR
 38568 ;; This function uses a non-reentrant model
 38569 ;;
 38570                           
 38571                           	psect	text212
 38572  0074A6                     __ptext212:
 38573                           	opt stack 0
 38574  0074A6                     _INT2_CallBack:
 38575                           	opt stack 15
 38576                           
 38577                           ;ext_int.c: 105: if(INT2_InterruptHandler)
 38578                           
 38579                           ;incstack = 0
 38580  0074A6  0101               	movlb	1	; () banked
 38581  0074A8  51EF               	movf	_INT2_InterruptHandler& (0+255),w,b
 38582  0074AA  11F0               	iorwf	(_INT2_InterruptHandler+1)& (0+255),w,b
 38583  0074AC  B4D8               	btfsc	status,2,c
 38584  0074AE  0012               	return	
 38585                           
 38586                           ; BSR set to: 1
 38587                           ;ext_int.c: 106: {
 38588                           ;ext_int.c: 107: INT2_InterruptHandler();
 38589  0074B0  0005               	push	
 38590  0074B2  6EFA               	movwf	pclath,c
 38591  0074B4  51EF               	movf	_INT2_InterruptHandler& (0+255),w,b
 38592  0074B6  6EFD               	movwf	tosl,c
 38593  0074B8  51F0               	movf	(_INT2_InterruptHandler+1)& (0+255),w,b
 38594  0074BA  6EFE               	movwf	tosh,c
 38595  0074BC  50F8               	movf	tblptru,w,c
 38596  0074BE  6EFF               	movwf	tosu,c
 38597  0074C0  50FA               	movf	pclath,w,c
 38598  0074C2  0012               	return		;indir
 38599  0074C4                     __end_of_INT2_CallBack:
 38600                           	opt stack 0
 38601                           tosu	equ	0xFFF
 38602                           tosh	equ	0xFFE
 38603                           tosl	equ	0xFFD
 38604                           pclatu	equ	0xFFB
 38605                           pclath	equ	0xFFA
 38606                           tblptru	equ	0xFF8
 38607                           tblptrh	equ	0xFF7
 38608                           tblptrl	equ	0xFF6
 38609                           tablat	equ	0xFF5
 38610                           prodh	equ	0xFF4
 38611                           prodl	equ	0xFF3
 38612                           intcon	equ	0xFF2
 38613                           intcon2	equ	0xFF1
 38614                           intcon3	equ	0xFF0
 38615                           indf0	equ	0xFEF
 38616                           postinc0	equ	0xFEE
 38617                           plusw0	equ	0xFEB
 38618                           fsr0h	equ	0xFEA
 38619                           fsr0l	equ	0xFE9
 38620                           wreg	equ	0xFE8
 38621                           postinc1	equ	0xFE6
 38622                           postdec1	equ	0xFE5
 38623                           plusw1	equ	0xFE3
 38624                           fsr1h	equ	0xFE2
 38625                           fsr1l	equ	0xFE1
 38626                           indf2	equ	0xFDF
 38627                           postinc2	equ	0xFDE
 38628                           postdec2	equ	0xFDD
 38629                           plusw2	equ	0xFDB
 38630                           fsr2h	equ	0xFDA
 38631                           fsr2l	equ	0xFD9
 38632                           status	equ	0xFD8
 38633                           
 38634 ;; *************** function _DIO1_ISR_Lora *****************
 38635 ;; Defined at:
 38636 ;;		line 68 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 38637 ;; Parameters:    Size  Location     Type
 38638 ;;		None
 38639 ;; Auto vars:     Size  Location     Type
 38640 ;;		None
 38641 ;; Return value:  Size  Location     Type
 38642 ;;                  1    wreg      void 
 38643 ;; Registers used:
 38644 ;;		status,2, status,0
 38645 ;; Tracked objects:
 38646 ;;		On entry : F/1
 38647 ;;		On exit  : F/1
 38648 ;;		Unchanged: F/0
 38649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 38650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38654 ;;Total ram usage:        0 bytes
 38655 ;; Hardware stack levels used:    1
 38656 ;; This function calls:
 38657 ;;		Nothing
 38658 ;; This function is called by:
 38659 ;;		_DIO1_ISR_Lora_Init
 38660 ;;		_INT2_CallBack
 38661 ;; This function uses a non-reentrant model
 38662 ;;
 38663                           
 38664                           	psect	text213
 38665  007812                     __ptext213:
 38666                           	opt stack 0
 38667  007812                     _DIO1_ISR_Lora:
 38668                           	opt stack 15
 38669                           
 38670                           ; BSR set to: 1
 38671                           ;interrupt_manager_lora_addons.c: 70: dioStatus |= 0x02;
 38672                           
 38673                           ;incstack = 0
 38674  007812  8248               	bsf	_dioStatus,1,c	;volatile
 38675                           
 38676                           ; BSR set to: 1
 38677  007814  0012               	return		;funcret
 38678  007816                     __end_of_DIO1_ISR_Lora:
 38679                           	opt stack 0
 38680                           tosu	equ	0xFFF
 38681                           tosh	equ	0xFFE
 38682                           tosl	equ	0xFFD
 38683                           pclatu	equ	0xFFB
 38684                           pclath	equ	0xFFA
 38685                           tblptru	equ	0xFF8
 38686                           tblptrh	equ	0xFF7
 38687                           tblptrl	equ	0xFF6
 38688                           tablat	equ	0xFF5
 38689                           prodh	equ	0xFF4
 38690                           prodl	equ	0xFF3
 38691                           intcon	equ	0xFF2
 38692                           intcon2	equ	0xFF1
 38693                           intcon3	equ	0xFF0
 38694                           indf0	equ	0xFEF
 38695                           postinc0	equ	0xFEE
 38696                           plusw0	equ	0xFEB
 38697                           fsr0h	equ	0xFEA
 38698                           fsr0l	equ	0xFE9
 38699                           wreg	equ	0xFE8
 38700                           postinc1	equ	0xFE6
 38701                           postdec1	equ	0xFE5
 38702                           plusw1	equ	0xFE3
 38703                           fsr1h	equ	0xFE2
 38704                           fsr1l	equ	0xFE1
 38705                           indf2	equ	0xFDF
 38706                           postinc2	equ	0xFDE
 38707                           postdec2	equ	0xFDD
 38708                           plusw2	equ	0xFDB
 38709                           fsr2h	equ	0xFDA
 38710                           fsr2l	equ	0xFD9
 38711                           status	equ	0xFD8
 38712                           
 38713 ;; *************** function _INT2_DefaultInterruptHandler *****************
 38714 ;; Defined at:
 38715 ;;		line 121 in file "mcc_generated_files/ext_int.c"
 38716 ;; Parameters:    Size  Location     Type
 38717 ;;		None
 38718 ;; Auto vars:     Size  Location     Type
 38719 ;;		None
 38720 ;; Return value:  Size  Location     Type
 38721 ;;                  1    wreg      void 
 38722 ;; Registers used:
 38723 ;;		None
 38724 ;; Tracked objects:
 38725 ;;		On entry : F/1
 38726 ;;		On exit  : F/1
 38727 ;;		Unchanged: F/0
 38728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 38729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38733 ;;Total ram usage:        0 bytes
 38734 ;; Hardware stack levels used:    1
 38735 ;; This function calls:
 38736 ;;		Nothing
 38737 ;; This function is called by:
 38738 ;;		_EXT_INT_Initialize
 38739 ;;		_INT2_CallBack
 38740 ;; This function uses a non-reentrant model
 38741 ;;
 38742                           
 38743                           	psect	text214
 38744  007828                     __ptext214:
 38745                           	opt stack 0
 38746  007828                     _INT2_DefaultInterruptHandler:
 38747                           	opt stack 15
 38748                           
 38749                           ; BSR set to: 1
 38750                           
 38751                           ; BSR set to: 1
 38752                           ;incstack = 0
 38753  007828  0012               	return		;funcret
 38754  00782A                     __end_of_INT2_DefaultInterruptHandler:
 38755                           	opt stack 0
 38756                           tosu	equ	0xFFF
 38757                           tosh	equ	0xFFE
 38758                           tosl	equ	0xFFD
 38759                           pclatu	equ	0xFFB
 38760                           pclath	equ	0xFFA
 38761                           tblptru	equ	0xFF8
 38762                           tblptrh	equ	0xFF7
 38763                           tblptrl	equ	0xFF6
 38764                           tablat	equ	0xFF5
 38765                           prodh	equ	0xFF4
 38766                           prodl	equ	0xFF3
 38767                           intcon	equ	0xFF2
 38768                           intcon2	equ	0xFF1
 38769                           intcon3	equ	0xFF0
 38770                           indf0	equ	0xFEF
 38771                           postinc0	equ	0xFEE
 38772                           plusw0	equ	0xFEB
 38773                           fsr0h	equ	0xFEA
 38774                           fsr0l	equ	0xFE9
 38775                           wreg	equ	0xFE8
 38776                           postinc1	equ	0xFE6
 38777                           postdec1	equ	0xFE5
 38778                           plusw1	equ	0xFE3
 38779                           fsr1h	equ	0xFE2
 38780                           fsr1l	equ	0xFE1
 38781                           indf2	equ	0xFDF
 38782                           postinc2	equ	0xFDE
 38783                           postdec2	equ	0xFDD
 38784                           plusw2	equ	0xFDB
 38785                           fsr2h	equ	0xFDA
 38786                           fsr2l	equ	0xFD9
 38787                           status	equ	0xFD8
 38788                           
 38789 ;; *************** function _INT1_ISR *****************
 38790 ;; Defined at:
 38791 ;;		line 46 in file "mcc_generated_files/ext_int.c"
 38792 ;; Parameters:    Size  Location     Type
 38793 ;;		None
 38794 ;; Auto vars:     Size  Location     Type
 38795 ;;		None
 38796 ;; Return value:  Size  Location     Type
 38797 ;;                  1    wreg      void 
 38798 ;; Registers used:
 38799 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 38800 ;; Tracked objects:
 38801 ;;		On entry : 0/0
 38802 ;;		On exit  : 0/0
 38803 ;;		Unchanged: 0/0
 38804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 38805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38809 ;;Total ram usage:        0 bytes
 38810 ;; Hardware stack levels used:    1
 38811 ;; Hardware stack levels required when called:    2
 38812 ;; This function calls:
 38813 ;;		_INT1_CallBack
 38814 ;; This function is called by:
 38815 ;;		_INTERRUPT_InterruptManager
 38816 ;; This function uses a non-reentrant model
 38817 ;;
 38818                           
 38819                           	psect	text215
 38820  0077F0                     __ptext215:
 38821                           	opt stack 0
 38822  0077F0                     _INT1_ISR:
 38823                           	opt stack 15
 38824                           
 38825                           ;ext_int.c: 52: (INTCON3bits.INT1IF = 0);
 38826                           
 38827                           ; BSR set to: 1
 38828                           ;incstack = 0
 38829  0077F0  90F0               	bcf	intcon3,0,c	;volatile
 38830                           
 38831                           ;ext_int.c: 55: INT1_CallBack();
 38832  0077F2  EF62  F03A         	goto	_INT1_CallBack	;wreg free
 38833  0077F6                     __end_of_INT1_ISR:
 38834                           	opt stack 0
 38835                           tosu	equ	0xFFF
 38836                           tosh	equ	0xFFE
 38837                           tosl	equ	0xFFD
 38838                           pclatu	equ	0xFFB
 38839                           pclath	equ	0xFFA
 38840                           tblptru	equ	0xFF8
 38841                           tblptrh	equ	0xFF7
 38842                           tblptrl	equ	0xFF6
 38843                           tablat	equ	0xFF5
 38844                           prodh	equ	0xFF4
 38845                           prodl	equ	0xFF3
 38846                           intcon	equ	0xFF2
 38847                           intcon2	equ	0xFF1
 38848                           intcon3	equ	0xFF0
 38849                           indf0	equ	0xFEF
 38850                           postinc0	equ	0xFEE
 38851                           plusw0	equ	0xFEB
 38852                           fsr0h	equ	0xFEA
 38853                           fsr0l	equ	0xFE9
 38854                           wreg	equ	0xFE8
 38855                           postinc1	equ	0xFE6
 38856                           postdec1	equ	0xFE5
 38857                           plusw1	equ	0xFE3
 38858                           fsr1h	equ	0xFE2
 38859                           fsr1l	equ	0xFE1
 38860                           indf2	equ	0xFDF
 38861                           postinc2	equ	0xFDE
 38862                           postdec2	equ	0xFDD
 38863                           plusw2	equ	0xFDB
 38864                           fsr2h	equ	0xFDA
 38865                           fsr2l	equ	0xFD9
 38866                           status	equ	0xFD8
 38867                           
 38868 ;; *************** function _INT1_CallBack *****************
 38869 ;; Defined at:
 38870 ;;		line 61 in file "mcc_generated_files/ext_int.c"
 38871 ;; Parameters:    Size  Location     Type
 38872 ;;		None
 38873 ;; Auto vars:     Size  Location     Type
 38874 ;;		None
 38875 ;; Return value:  Size  Location     Type
 38876 ;;                  1    wreg      void 
 38877 ;; Registers used:
 38878 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 38879 ;; Tracked objects:
 38880 ;;		On entry : 0/0
 38881 ;;		On exit  : 0/0
 38882 ;;		Unchanged: 0/0
 38883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 38884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38888 ;;Total ram usage:        0 bytes
 38889 ;; Hardware stack levels used:    1
 38890 ;; Hardware stack levels required when called:    1
 38891 ;; This function calls:
 38892 ;;		Absolute function
 38893 ;;		_DIO0_ISR_Lora
 38894 ;;		_INT1_DefaultInterruptHandler
 38895 ;; This function is called by:
 38896 ;;		_INT1_ISR
 38897 ;; This function uses a non-reentrant model
 38898 ;;
 38899                           
 38900                           	psect	text216
 38901  0074C4                     __ptext216:
 38902                           	opt stack 0
 38903  0074C4                     _INT1_CallBack:
 38904                           	opt stack 15
 38905                           
 38906                           ;ext_int.c: 64: if(INT1_InterruptHandler)
 38907                           
 38908                           ;incstack = 0
 38909  0074C4  0101               	movlb	1	; () banked
 38910  0074C6  51ED               	movf	_INT1_InterruptHandler& (0+255),w,b
 38911  0074C8  11EE               	iorwf	(_INT1_InterruptHandler+1)& (0+255),w,b
 38912  0074CA  B4D8               	btfsc	status,2,c
 38913  0074CC  0012               	return	
 38914                           
 38915                           ; BSR set to: 1
 38916                           ;ext_int.c: 65: {
 38917                           ;ext_int.c: 66: INT1_InterruptHandler();
 38918  0074CE  0005               	push	
 38919  0074D0  6EFA               	movwf	pclath,c
 38920  0074D2  51ED               	movf	_INT1_InterruptHandler& (0+255),w,b
 38921  0074D4  6EFD               	movwf	tosl,c
 38922  0074D6  51EE               	movf	(_INT1_InterruptHandler+1)& (0+255),w,b
 38923  0074D8  6EFE               	movwf	tosh,c
 38924  0074DA  50F8               	movf	tblptru,w,c
 38925  0074DC  6EFF               	movwf	tosu,c
 38926  0074DE  50FA               	movf	pclath,w,c
 38927  0074E0  0012               	return		;indir
 38928  0074E2                     __end_of_INT1_CallBack:
 38929                           	opt stack 0
 38930                           tosu	equ	0xFFF
 38931                           tosh	equ	0xFFE
 38932                           tosl	equ	0xFFD
 38933                           pclatu	equ	0xFFB
 38934                           pclath	equ	0xFFA
 38935                           tblptru	equ	0xFF8
 38936                           tblptrh	equ	0xFF7
 38937                           tblptrl	equ	0xFF6
 38938                           tablat	equ	0xFF5
 38939                           prodh	equ	0xFF4
 38940                           prodl	equ	0xFF3
 38941                           intcon	equ	0xFF2
 38942                           intcon2	equ	0xFF1
 38943                           intcon3	equ	0xFF0
 38944                           indf0	equ	0xFEF
 38945                           postinc0	equ	0xFEE
 38946                           plusw0	equ	0xFEB
 38947                           fsr0h	equ	0xFEA
 38948                           fsr0l	equ	0xFE9
 38949                           wreg	equ	0xFE8
 38950                           postinc1	equ	0xFE6
 38951                           postdec1	equ	0xFE5
 38952                           plusw1	equ	0xFE3
 38953                           fsr1h	equ	0xFE2
 38954                           fsr1l	equ	0xFE1
 38955                           indf2	equ	0xFDF
 38956                           postinc2	equ	0xFDE
 38957                           postdec2	equ	0xFDD
 38958                           plusw2	equ	0xFDB
 38959                           fsr2h	equ	0xFDA
 38960                           fsr2l	equ	0xFD9
 38961                           status	equ	0xFD8
 38962                           
 38963 ;; *************** function _DIO0_ISR_Lora *****************
 38964 ;; Defined at:
 38965 ;;		line 63 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 38966 ;; Parameters:    Size  Location     Type
 38967 ;;		None
 38968 ;; Auto vars:     Size  Location     Type
 38969 ;;		None
 38970 ;; Return value:  Size  Location     Type
 38971 ;;                  1    wreg      void 
 38972 ;; Registers used:
 38973 ;;		status,2, status,0
 38974 ;; Tracked objects:
 38975 ;;		On entry : F/1
 38976 ;;		On exit  : F/1
 38977 ;;		Unchanged: F/0
 38978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 38979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 38983 ;;Total ram usage:        0 bytes
 38984 ;; Hardware stack levels used:    1
 38985 ;; This function calls:
 38986 ;;		Nothing
 38987 ;; This function is called by:
 38988 ;;		_DIO0_ISR_Lora_Init
 38989 ;;		_INT1_CallBack
 38990 ;; This function uses a non-reentrant model
 38991 ;;
 38992                           
 38993                           	psect	text217
 38994  007816                     __ptext217:
 38995                           	opt stack 0
 38996  007816                     _DIO0_ISR_Lora:
 38997                           	opt stack 15
 38998                           
 38999                           ; BSR set to: 1
 39000                           ;interrupt_manager_lora_addons.c: 65: dioStatus |= 0x01;
 39001                           
 39002                           ;incstack = 0
 39003  007816  8048               	bsf	_dioStatus,0,c	;volatile
 39004                           
 39005                           ; BSR set to: 1
 39006  007818  0012               	return		;funcret
 39007  00781A                     __end_of_DIO0_ISR_Lora:
 39008                           	opt stack 0
 39009                           tosu	equ	0xFFF
 39010                           tosh	equ	0xFFE
 39011                           tosl	equ	0xFFD
 39012                           pclatu	equ	0xFFB
 39013                           pclath	equ	0xFFA
 39014                           tblptru	equ	0xFF8
 39015                           tblptrh	equ	0xFF7
 39016                           tblptrl	equ	0xFF6
 39017                           tablat	equ	0xFF5
 39018                           prodh	equ	0xFF4
 39019                           prodl	equ	0xFF3
 39020                           intcon	equ	0xFF2
 39021                           intcon2	equ	0xFF1
 39022                           intcon3	equ	0xFF0
 39023                           indf0	equ	0xFEF
 39024                           postinc0	equ	0xFEE
 39025                           plusw0	equ	0xFEB
 39026                           fsr0h	equ	0xFEA
 39027                           fsr0l	equ	0xFE9
 39028                           wreg	equ	0xFE8
 39029                           postinc1	equ	0xFE6
 39030                           postdec1	equ	0xFE5
 39031                           plusw1	equ	0xFE3
 39032                           fsr1h	equ	0xFE2
 39033                           fsr1l	equ	0xFE1
 39034                           indf2	equ	0xFDF
 39035                           postinc2	equ	0xFDE
 39036                           postdec2	equ	0xFDD
 39037                           plusw2	equ	0xFDB
 39038                           fsr2h	equ	0xFDA
 39039                           fsr2l	equ	0xFD9
 39040                           status	equ	0xFD8
 39041                           
 39042 ;; *************** function _INT1_DefaultInterruptHandler *****************
 39043 ;; Defined at:
 39044 ;;		line 80 in file "mcc_generated_files/ext_int.c"
 39045 ;; Parameters:    Size  Location     Type
 39046 ;;		None
 39047 ;; Auto vars:     Size  Location     Type
 39048 ;;		None
 39049 ;; Return value:  Size  Location     Type
 39050 ;;                  1    wreg      void 
 39051 ;; Registers used:
 39052 ;;		None
 39053 ;; Tracked objects:
 39054 ;;		On entry : F/1
 39055 ;;		On exit  : F/1
 39056 ;;		Unchanged: F/0
 39057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 39058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 39059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 39060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 39061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 39062 ;;Total ram usage:        0 bytes
 39063 ;; Hardware stack levels used:    1
 39064 ;; This function calls:
 39065 ;;		Nothing
 39066 ;; This function is called by:
 39067 ;;		_EXT_INT_Initialize
 39068 ;;		_INT1_CallBack
 39069 ;; This function uses a non-reentrant model
 39070 ;;
 39071                           
 39072                           	psect	text218
 39073  00782A                     __ptext218:
 39074                           	opt stack 0
 39075  00782A                     _INT1_DefaultInterruptHandler:
 39076                           	opt stack 15
 39077                           
 39078                           ; BSR set to: 1
 39079                           
 39080                           ; BSR set to: 1
 39081                           ;incstack = 0
 39082  00782A  0012               	return		;funcret
 39083  00782C                     __end_of_INT1_DefaultInterruptHandler:
 39084                           	opt stack 0
 39085                           tosu	equ	0xFFF
 39086                           tosh	equ	0xFFE
 39087                           tosl	equ	0xFFD
 39088                           pclatu	equ	0xFFB
 39089                           pclath	equ	0xFFA
 39090                           tblptru	equ	0xFF8
 39091                           tblptrh	equ	0xFF7
 39092                           tblptrl	equ	0xFF6
 39093                           tablat	equ	0xFF5
 39094                           prodh	equ	0xFF4
 39095                           prodl	equ	0xFF3
 39096                           intcon	equ	0xFF2
 39097                           intcon2	equ	0xFF1
 39098                           intcon3	equ	0xFF0
 39099                           indf0	equ	0xFEF
 39100                           postinc0	equ	0xFEE
 39101                           plusw0	equ	0xFEB
 39102                           fsr0h	equ	0xFEA
 39103                           fsr0l	equ	0xFE9
 39104                           wreg	equ	0xFE8
 39105                           postinc1	equ	0xFE6
 39106                           postdec1	equ	0xFE5
 39107                           plusw1	equ	0xFE3
 39108                           fsr1h	equ	0xFE2
 39109                           fsr1l	equ	0xFE1
 39110                           indf2	equ	0xFDF
 39111                           postinc2	equ	0xFDE
 39112                           postdec2	equ	0xFDD
 39113                           plusw2	equ	0xFDB
 39114                           fsr2h	equ	0xFDA
 39115                           fsr2l	equ	0xFD9
 39116                           status	equ	0xFD8
 39117                           tosu	equ	0xFFF
 39118                           tosh	equ	0xFFE
 39119                           tosl	equ	0xFFD
 39120                           pclatu	equ	0xFFB
 39121                           pclath	equ	0xFFA
 39122                           tblptru	equ	0xFF8
 39123                           tblptrh	equ	0xFF7
 39124                           tblptrl	equ	0xFF6
 39125                           tablat	equ	0xFF5
 39126                           prodh	equ	0xFF4
 39127                           prodl	equ	0xFF3
 39128                           intcon	equ	0xFF2
 39129                           intcon2	equ	0xFF1
 39130                           intcon3	equ	0xFF0
 39131                           indf0	equ	0xFEF
 39132                           postinc0	equ	0xFEE
 39133                           plusw0	equ	0xFEB
 39134                           fsr0h	equ	0xFEA
 39135                           fsr0l	equ	0xFE9
 39136                           wreg	equ	0xFE8
 39137                           postinc1	equ	0xFE6
 39138                           postdec1	equ	0xFE5
 39139                           plusw1	equ	0xFE3
 39140                           fsr1h	equ	0xFE2
 39141                           fsr1l	equ	0xFE1
 39142                           indf2	equ	0xFDF
 39143                           postinc2	equ	0xFDE
 39144                           postdec2	equ	0xFDD
 39145                           plusw2	equ	0xFDB
 39146                           fsr2h	equ	0xFDA
 39147                           fsr2l	equ	0xFD9
 39148                           status	equ	0xFD8
 39149                           
 39150                           	psect	text219
 39151  000000                     __ptext219:
 39152                           	opt stack 0
 39153                           tosu	equ	0xFFF
 39154                           tosh	equ	0xFFE
 39155                           tosl	equ	0xFFD
 39156                           pclatu	equ	0xFFB
 39157                           pclath	equ	0xFFA
 39158                           tblptru	equ	0xFF8
 39159                           tblptrh	equ	0xFF7
 39160                           tblptrl	equ	0xFF6
 39161                           tablat	equ	0xFF5
 39162                           prodh	equ	0xFF4
 39163                           prodl	equ	0xFF3
 39164                           intcon	equ	0xFF2
 39165                           intcon2	equ	0xFF1
 39166                           intcon3	equ	0xFF0
 39167                           indf0	equ	0xFEF
 39168                           postinc0	equ	0xFEE
 39169                           plusw0	equ	0xFEB
 39170                           fsr0h	equ	0xFEA
 39171                           fsr0l	equ	0xFE9
 39172                           wreg	equ	0xFE8
 39173                           postinc1	equ	0xFE6
 39174                           postdec1	equ	0xFE5
 39175                           plusw1	equ	0xFE3
 39176                           fsr1h	equ	0xFE2
 39177                           fsr1l	equ	0xFE1
 39178                           indf2	equ	0xFDF
 39179                           postinc2	equ	0xFDE
 39180                           postdec2	equ	0xFDD
 39181                           plusw2	equ	0xFDB
 39182                           fsr2h	equ	0xFDA
 39183                           fsr2l	equ	0xFD9
 39184                           status	equ	0xFD8
 39185                           
 39186                           	psect	rparam
 39187  0000                     tosu	equ	0xFFF
 39188                           tosh	equ	0xFFE
 39189                           tosl	equ	0xFFD
 39190                           pclatu	equ	0xFFB
 39191                           pclath	equ	0xFFA
 39192                           tblptru	equ	0xFF8
 39193                           tblptrh	equ	0xFF7
 39194                           tblptrl	equ	0xFF6
 39195                           tablat	equ	0xFF5
 39196                           prodh	equ	0xFF4
 39197                           prodl	equ	0xFF3
 39198                           intcon	equ	0xFF2
 39199                           intcon2	equ	0xFF1
 39200                           intcon3	equ	0xFF0
 39201                           indf0	equ	0xFEF
 39202                           postinc0	equ	0xFEE
 39203                           plusw0	equ	0xFEB
 39204                           fsr0h	equ	0xFEA
 39205                           fsr0l	equ	0xFE9
 39206                           wreg	equ	0xFE8
 39207                           postinc1	equ	0xFE6
 39208                           postdec1	equ	0xFE5
 39209                           plusw1	equ	0xFE3
 39210                           fsr1h	equ	0xFE2
 39211                           fsr1l	equ	0xFE1
 39212                           indf2	equ	0xFDF
 39213                           postinc2	equ	0xFDE
 39214                           postdec2	equ	0xFDD
 39215                           plusw2	equ	0xFDB
 39216                           fsr2h	equ	0xFDA
 39217                           fsr2l	equ	0xFD9
 39218                           status	equ	0xFD8
 39219                           
 39220                           	psect	temp
 39221  00004A                     btemp:
 39222                           	opt stack 0
 39223  00004A                     	ds	12
 39224                           tosu	equ	0xFFF
 39225                           tosh	equ	0xFFE
 39226                           tosl	equ	0xFFD
 39227                           pclatu	equ	0xFFB
 39228                           pclath	equ	0xFFA
 39229                           tblptru	equ	0xFF8
 39230                           tblptrh	equ	0xFF7
 39231                           tblptrl	equ	0xFF6
 39232                           tablat	equ	0xFF5
 39233                           prodh	equ	0xFF4
 39234                           prodl	equ	0xFF3
 39235                           intcon	equ	0xFF2
 39236                           intcon2	equ	0xFF1
 39237                           intcon3	equ	0xFF0
 39238                           indf0	equ	0xFEF
 39239                           postinc0	equ	0xFEE
 39240                           plusw0	equ	0xFEB
 39241                           fsr0h	equ	0xFEA
 39242                           fsr0l	equ	0xFE9
 39243                           wreg	equ	0xFE8
 39244                           postinc1	equ	0xFE6
 39245                           postdec1	equ	0xFE5
 39246                           plusw1	equ	0xFE3
 39247                           fsr1h	equ	0xFE2
 39248                           fsr1l	equ	0xFE1
 39249                           indf2	equ	0xFDF
 39250                           postinc2	equ	0xFDE
 39251                           postdec2	equ	0xFDD
 39252                           plusw2	equ	0xFDB
 39253                           fsr2h	equ	0xFDA
 39254                           fsr2l	equ	0xFD9
 39255                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    402
    Data        56
    BSS         1276
    Persistent  12
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           83     47      83
    BANK0           160    152     152
    BANK1           256    110     247
    BANK2           256      0     245
    BANK3           256     20     180
    BANK4           256      0     224
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    RxDataDone@pData	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), NULL(NULL[0]), 

    RxPayload$0	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), NULL(NULL[0]), 

    S1411$0$0	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 271
		 -> AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK1[16]), GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), 
		 -> macBuffer(BIGRAM[271]), Channels(BANK4[224]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    memset@p	PTR unsigned char  size(2) Largest target is 271
		 -> AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK1[16]), GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), 
		 -> macBuffer(BIGRAM[271]), Channels(BANK4[224]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    memcpy@d1	PTR void  size(2) Largest target is 271
		 -> AESEncodeLoRa@useKey(BANK0[16]), ComputeMic@mic(BANK0[4]), ExtractMic@mic(BANK0[4]), aesBuffer(BANK1[16]), 
		 -> LORAWAN_RxDone@computedMic(BANK3[4]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), AESCmac@x(BANK1[16]), 
		 -> UpdateCfList@frequency(BANK0[4]), macBuffer(BIGRAM[271]), Channels(BANK4[224]), loRa.activationParameters(BANK2[105]), 
		 -> radioBuffer(BIGRAM[271]), loRa(BANK2[245]), RadioConfiguration(BANK1[54]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 271
		 -> AESEncodeLoRa@useKey(BANK0[16]), ComputeMic@mic(BANK0[4]), ExtractMic@mic(BANK0[4]), aesBuffer(BANK1[16]), 
		 -> LORAWAN_RxDone@computedMic(BANK3[4]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), AESCmac@x(BANK1[16]), 
		 -> UpdateCfList@frequency(BANK0[4]), macBuffer(BIGRAM[271]), Channels(BANK4[224]), loRa.activationParameters(BANK2[105]), 
		 -> radioBuffer(BIGRAM[271]), loRa(BANK2[245]), RadioConfiguration(BANK1[54]), 

    memcpy@s1	PTR const void  size(2) Largest target is 271
		 -> radioBuffer.cfList(COMRAM[16]), LORAWAN_RxDone@hdr.cfList(COMRAM[16]), payload(BANK1[2]), appSKey(BANK1[16]), 
		 -> nwkSKey(BANK1[16]), AssembleEncryptionBlock@frameCounter(BANK0[4]), ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), PrepareJoinRequestFrame@mic(BANK0[4]), 
		 -> loRa.fCntUp.valueLow(BANK2[2]), aesBuffer(BANK1[16]), LORAWAN_RxDone@hdr(BANK3[2]), loRa.activationParameters.applicationKey(BANK2[16]), 
		 -> loRa.activationParameters.applicationSessionKey(BANK2[16]), loRa.activationParameters.networkSessionKey(BANK2[16]), loRa.activationParameters.deviceAddress(BANK2[4]), loRa.activationParameters.applicationEui(BANK2[8]), 
		 -> loRa.activationParameters.deviceEui(BANK2[8]), loRa.activationParameters.mcastApplicationSessionKey(BANK2[16]), loRa.activationParameters.mcastNetworkSessionKey(BANK2[16]), loRa.activationParameters.mcastDeviceAddress(BANK2[4]), 
		 -> AESCmac@y(BANK1[16]), FskSyncWordBuff(CODE[3]), UpdateCfList@joinAccept(BANK0[2]), loRa.activationParameters(BANK2[105]), 
		 -> loRa.devNonce(BANK2[2]), loRa.fCntUp(BANK2[4]), radioBuffer(BIGRAM[271]), loRa(BANK2[245]), 
		 -> DefaultChannels433(CODE[42]), DefaultChannels868(CODE[42]), NULL(NULL[0]), RadioConfiguration.syncWord(BANK1[8]), 
		 -> RadioConfiguration(BANK1[54]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 271
		 -> radioBuffer.cfList(COMRAM[16]), LORAWAN_RxDone@hdr.cfList(COMRAM[16]), payload(BANK1[2]), appSKey(BANK1[16]), 
		 -> nwkSKey(BANK1[16]), AssembleEncryptionBlock@frameCounter(BANK0[4]), ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), PrepareJoinRequestFrame@mic(BANK0[4]), 
		 -> loRa.fCntUp.valueLow(BANK2[2]), aesBuffer(BANK1[16]), LORAWAN_RxDone@hdr(BANK3[2]), loRa.activationParameters.applicationKey(BANK2[16]), 
		 -> loRa.activationParameters.applicationSessionKey(BANK2[16]), loRa.activationParameters.networkSessionKey(BANK2[16]), loRa.activationParameters.deviceAddress(BANK2[4]), loRa.activationParameters.applicationEui(BANK2[8]), 
		 -> loRa.activationParameters.deviceEui(BANK2[8]), loRa.activationParameters.mcastApplicationSessionKey(BANK2[16]), loRa.activationParameters.mcastNetworkSessionKey(BANK2[16]), loRa.activationParameters.mcastDeviceAddress(BANK2[4]), 
		 -> AESCmac@y(BANK1[16]), FskSyncWordBuff(CODE[3]), UpdateCfList@joinAccept(BANK0[2]), loRa.activationParameters(BANK2[105]), 
		 -> loRa.devNonce(BANK2[2]), loRa.fCntUp(BANK2[4]), radioBuffer(BIGRAM[271]), loRa(BANK2[245]), 
		 -> DefaultChannels433(CODE[42]), DefaultChannels868(CODE[42]), NULL(NULL[0]), RadioConfiguration.syncWord(BANK1[8]), 
		 -> RadioConfiguration(BANK1[54]), 

    AESEncode@block	PTR unsigned char  size(2) Largest target is 271
		 -> aesBuffer(BANK1[16]), LORAWAN_RxDone@hdr(BANK3[2]), GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), 
		 -> AESCmac@x(BANK1[16]), loRa.activationParameters(BANK2[105]), radioBuffer(BIGRAM[271]), loRa(BANK2[245]), 

    AESEncode@masterKey	PTR unsigned char  size(1) Largest target is 16
		 -> AESEncodeLoRa@useKey(BANK0[16]), 

    EncodeShiftRow@stateTable	PTR unsigned char  size(2) Largest target is 271
		 -> aesBuffer(BANK1[16]), LORAWAN_RxDone@hdr(BANK3[2]), GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), 
		 -> AESCmac@x(BANK1[16]), loRa.activationParameters(BANK2[105]), radioBuffer(BIGRAM[271]), loRa(BANK2[245]), 

    EncKeySchedule@key	PTR unsigned char  size(1) Largest target is 16
		 -> AESEncode@key(BANK0[16]), 

    AESEncodeLoRa@block	PTR unsigned char  size(2) Largest target is 271
		 -> aesBuffer(BANK1[16]), LORAWAN_RxDone@hdr(BANK3[2]), GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), 
		 -> AESCmac@x(BANK1[16]), loRa.activationParameters(BANK2[105]), radioBuffer(BIGRAM[271]), loRa(BANK2[245]), 

    AESEncodeLoRa@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    EncryptFRMPayload@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> payload(BANK1[2]), LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), NULL(NULL[0]), 

    EncryptFRMPayload@bufferToBeEncrypted	PTR unsigned char  size(2) Largest target is 271
		 -> macBuffer(BIGRAM[271]), radioBuffer(BIGRAM[271]), 

    EncryptFRMPayload@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    ComputeMic@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), macBuffer(BIGRAM[271]), radioBuffer(BIGRAM[271]), 

    ComputeMic@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    ExtractMic@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    CheckMcastFlags@hdr	PTR struct . size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    CheckFlags@hdr	PTR struct . size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ComputeSessionKeys@joinAcceptBuffer	PTR struct . size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    PrepareSessionKeys@networkId	PTR unsigned char  size(2) Largest target is 1
		 -> ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    PrepareSessionKeys@appNonce	PTR unsigned char  size(2) Largest target is 1
		 -> ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    PrepareSessionKeys@sessionKey	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    IncludeMacCommandsResponse@macBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> macBuffer(BIGRAM[271]), radioBuffer(BIGRAM[271]), 

    IncludeMacCommandsResponse@pBufferIndex	PTR unsigned char  size(1) Largest target is 1
		 -> AssemblePacket@macCmdIdx(BANK0[1]), AssemblePacket@bufferIndex(BANK0[1]), 

    AssemblePacket@buffer	PTR unsigned char  size(2) Largest target is 2
		 -> payload(BANK1[2]), NULL(NULL[0]), 

    ExecuteRxTimingSetup@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ExecuteLinkCheck@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__ExecuteRxTimingSetup	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__ExecuteLinkCheck	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    MacExecuteCommands@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    MacExecuteCommands@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__MacExecuteCommands	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    LORAWAN_RxDone@packet	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), NULL(NULL[0]), 

    LORAWAN_RxDone@hdr	PTR struct . size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    LORAWAN_RxDone@joinAccept	PTR struct . size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    LORAWAN_RxDone@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew	PTR unsigned char  size(2) Largest target is 16
		 -> appSKey(BANK1[16]), 

    LORAWAN_SetNetworkSessionKey@networkSessionKeyNew	PTR unsigned char  size(2) Largest target is 16
		 -> nwkSKey(BANK1[16]), 

    LORAWAN_Send@buffer	PTR void  size(2) Largest target is 2
		 -> payload(BANK1[2]), NULL(NULL[0]), 

    IOCB4_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> DIO2_ISR_Lora(), IOCB4_DefaultInterruptHandler(), 

    IOCB4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> DIO2_ISR_Lora(), IOCB4_DefaultInterruptHandler(), Absolute function(), 

    FillSubKey@source	PTR unsigned char  size(2) Largest target is 16
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@k1(BANK1[16]), 

    FillSubKey@key	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k2(BANK1[16]), AESCmac@k1(BANK1[16]), 

    GenerateSubkey@k2	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k2(BANK1[16]), 

    GenerateSubkey@k1	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k1(BANK1[16]), 

    GenerateSubkey@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    AESCmac@output	PTR unsigned char  size(2) Largest target is 16
		 -> aesBuffer(BANK1[16]), 

    AESCmac@input	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), macBuffer(BIGRAM[271]), radioBuffer(BIGRAM[271]), 

    AESCmac@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    AESCmac@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), macBuffer(BIGRAM[271]), radioBuffer(BIGRAM[271]), NULL(NULL[0]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), TMR_ISR_lora(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), TMR_ISR_lora(), Absolute function(), 

    UpdateCfList@joinAccept	PTR struct . size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    SearchAvailableChannel@channelIndex	PTR unsigned char  size(2) Largest target is 1
		 -> LORAWAN_RxDone@channelIndex(BANK3[1]), SelectChannelForTransmission@channelIndex(BANK0[1]), 

    sp__ExecuteRxParamSetupReq	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ExecuteRxParamSetupReq@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__ExecuteNewChannel	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ExecuteNewChannel@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__ExecuteDevStatus	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ExecuteDevStatus@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__ExecuteLinkAdr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ExecuteLinkAdr@redundancy	PTR struct . size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ExecuteLinkAdr@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__ExecuteDutyCycle	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ExecuteDutyCycle@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__memset	PTR void  size(2) Largest target is 271
		 -> AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK1[16]), GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), 
		 -> macBuffer(BIGRAM[271]), Channels(BANK4[224]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    LORAWAN_Init@RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    LORAWAN_Init@RxPayload	PTR FTN(PTR unsigned char ,unsigned char ,enum E18978,)void  size(2) Largest target is 1
		 -> RxDataDone(), 

    S1411$RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    rxPayload.RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    S1411$RxAppData	PTR FTN(PTR unsigned char ,unsigned char ,enum E18978,)void  size(2) Largest target is 1
		 -> RxDataDone(), 

    rxPayload.RxAppData	PTR FTN(PTR unsigned char ,unsigned char ,enum E18978,)void  size(2) Largest target is 1
		 -> RxDataDone(), 

    RADIO_SetFSKSyncWord@syncWord	PTR unsigned char  size(2) Largest target is 3
		 -> FskSyncWordBuff(CODE[3]), 

    sp__memcpy	PTR void  size(2) Largest target is 271
		 -> AESEncodeLoRa@useKey(BANK0[16]), ComputeMic@mic(BANK0[4]), ExtractMic@mic(BANK0[4]), aesBuffer(BANK1[16]), 
		 -> LORAWAN_RxDone@computedMic(BANK3[4]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), AESCmac@x(BANK1[16]), 
		 -> UpdateCfList@frequency(BANK0[4]), macBuffer(BIGRAM[271]), Channels(BANK4[224]), loRa.activationParameters(BANK2[105]), 
		 -> radioBuffer(BIGRAM[271]), loRa(BANK2[245]), RadioConfiguration(BANK1[54]), 

    RADIO_Transmit@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> macBuffer(BIGRAM[271]), 

    RADIO_Init@radioBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    S533$fhssNextFrequency	PTR FTN()unsigned long  size(2) Largest target is 1
		 -> Absolute function(), 

    RadioConfiguration.fhssNextFrequency	PTR FTN()unsigned long  size(2) Largest target is 1
		 -> Absolute function(), 

    S533$dataBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    RadioConfiguration.dataBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    SwTimerSetCallback@callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> DutyCycleCallback(), UpdateJoinSuccessState(), UnconfirmedTransmissionCallback(), AutomaticReplyCallback(), 
		 -> AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), LORAWAN_ReceiveWindow1Callback(), LORAWAN_ReceiveWindow2Callback(), 
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), 

    S233$callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> DutyCycleCallback(), UpdateJoinSuccessState(), UnconfirmedTransmissionCallback(), AutomaticReplyCallback(), 
		 -> AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), LORAWAN_ReceiveWindow1Callback(), LORAWAN_ReceiveWindow2Callback(), 
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), Absolute function(), 

    swTimers.callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> DutyCycleCallback(), UpdateJoinSuccessState(), UnconfirmedTransmissionCallback(), AutomaticReplyCallback(), 
		 -> AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), LORAWAN_ReceiveWindow1Callback(), LORAWAN_ReceiveWindow2Callback(), 
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), Absolute function(), 

    INT3_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> INT3_DefaultInterruptHandler(), 

    INT3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT3_DefaultInterruptHandler(), Absolute function(), 

    INT0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> DIO5_ISR_Lora(), INT0_DefaultInterruptHandler(), 

    INT0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> DIO5_ISR_Lora(), INT0_DefaultInterruptHandler(), Absolute function(), 

    INT2_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> DIO1_ISR_Lora(), INT2_DefaultInterruptHandler(), 

    INT2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> DIO1_ISR_Lora(), INT2_DefaultInterruptHandler(), Absolute function(), 

    INT1_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> DIO0_ISR_Lora(), INT1_DefaultInterruptHandler(), 

    INT1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> DIO0_ISR_Lora(), INT1_DefaultInterruptHandler(), Absolute function(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR_ISR_lora->i2_SwTimersInterrupt
    i2_TMR_SwapTimer->i2_TMR1_ReadTimer
    i2_SwTimersInterrupt->i2_TMR_GetDeltaTime
    i2_TMR_GetDeltaTime->i2_TMR1_ReadTimer

Critical Paths under _main in BANK0

    _sendPacket->_LORAWAN_Send
    _SYSTEM_Initialize->_TMR1_Initialize
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB4_SetInterruptHandler
    _TMR_ISR_Lora_Init->_TMR1_SetInterruptHandler
    _DIO5_ISR_Lora_Init->_INT0_SetInterruptHandler
    _DIO2_ISR_Lora_Init->_IOCB4_SetInterruptHandler
    _DIO1_ISR_Lora_Init->_INT2_SetInterruptHandler
    _DIO0_ISR_Lora_Init->_INT1_SetInterruptHandler
    _EXT_INT_Initialize->_INT0_SetInterruptHandler
    _EXT_INT_Initialize->_INT1_SetInterruptHandler
    _EXT_INT_Initialize->_INT2_SetInterruptHandler
    _EXT_INT_Initialize->_INT3_SetInterruptHandler
    _LORAWAN_SetNetworkSessionKey->_memcpy
    _LORAWAN_SetApplicationSessionKey->_memcpy
    _LORAWAN_Mainloop->_RADIO_DIO0
    _UnconfirmedTransmissionCallback->_RADIO_Transmit
    _RADIO_WatchdogTimeout->_RADIO_WriteMode
    _RADIO_RxFSKTimeout->_RADIO_WriteMode
    _LORAWAN_ReceiveWindow1Callback->_RADIO_ReceiveStart
    _LORAWAN_LinkCheckCallback->_SwTimerStart
    _DutyCycleCallback->_SwTimerStart
    _AutomaticReplyCallback->_LORAWAN_Send
    _AckRetransmissionCallback->_RADIO_Transmit
    _RADIO_DIO5->_RADIO_UnhandledInterrupt
    _RADIO_DIO4->_RADIO_UnhandledInterrupt
    _RADIO_DIO3->_RADIO_UnhandledInterrupt
    _RADIO_RxTimeout->_LORAWAN_RxTimeout
    _RADIO_FHSSChangeChannel->_RADIO_WriteFrequency
    _RADIO_DIO0->_RADIO_FSKPayloadReady
    _RADIO_DIO0->_RADIO_RxDone
    _RADIO_UnhandledInterrupt->_RADIO_RegisterWrite
    _RADIO_TxDone->_LORAWAN_TxDone
    _RADIO_RxDone->_LORAWAN_RxDone
    _RADIO_FSKPayloadReady->_LORAWAN_RxDone
    _LORAWAN_RxTimeout->_RADIO_Transmit
    _LORAWAN_ReceiveWindow2Callback->_RADIO_ReceiveStart
    _LORAWAN_RxDone->_LORAWAN_Send
    _UpdateRetransmissionAckTimeoutState->_SwTimerStart
    _UpdateJoinSuccessState->_SwTimerStart
    _UpdateCfList->___lmul
    _StartReTxTimer->_SwTimerStart
    _MacExecuteCommands->_ExecuteLinkAdr
    _ExecuteRxTimingSetup->_UpdateReceiveDelays
    _ExecuteRxParamSetupReq->___lmul
    _ExecuteNewChannel->___lmul
    _ValidateDataRange->_ValidateDataRate
    _LORAWAN_SetChannelIdStatus->_UpdateChannelIdStatus
    _ExecuteLinkAdr->_EnableChannels
    _EnableChannels->_EnableChannels1
    _EnableChannels1->_UpdateChannelIdStatus
    _LORAWAN_Send->_AssemblePacket
    _LORAWAN_GetMaxPayloadSize->_CountfOptsLength
    _AssemblePacket->_AESCmac
    _EncryptFRMPayload->_AESEncodeLoRa
    _AssembleEncryptionBlock->_memcpy
    _ExtractMic->_memcpy
    _ComputeSessionKeys->_AESEncodeLoRa
    _PrepareSessionKeys->_memcpy
    _RADIO_FSKPacketSent->_LORAWAN_TxDone
    _SwTimerReadValue->_SwTimersInterrupt
    _LORAWAN_EnterContinuousReceive->_RADIO_ReceiveStart
    _RADIO_ReceiveStop->_RADIO_WriteMode
    _RADIO_ReceiveStart->_SwTimerStart
    _ConfigureRadioRx->_ConfigureRadio
    _LORAWAN_Join->_PrepareJoinRequestFrame
    _SelectChannelForTransmission->_SearchAvailableChannel
    _SearchAvailableChannel->_Random
    _ConfigureRadioTx->_ConfigureRadio
    _ConfigureRadio->_RADIO_SetFSKSyncWord
    _RADIO_SetFSKSyncWord->_memcpy
    _RADIO_Transmit->_SwTimerStart
    _RADIO_WriteConfiguration->_RADIO_WriteFrequency
    _RADIO_WritePower->_RADIO_RegisterRead
    _RADIO_WritePower->_RADIO_RegisterWrite
    _RADIO_WriteFSKFrequencyDeviation->___lldiv
    _RADIO_WriteFSKBitRate->___lldiv
    _PrepareJoinRequestFrame->_ComputeMic
    _Random->___lwmod
    _rand->___lmul
    ___lwmod->_rand
    _ComputeMic->_AESCmac
    _AESCmac->_GenerateSubkey
    _GenerateSubkey->_AESEncodeLoRa
    _AESEncodeLoRa->_AESEncode
    _AESEncode->_EncKeySchedule
    _LORAWAN_Init->_LORAWAN_Reset
    _srand->_RADIO_ReadRandom
    _SetCallbackSoftwareTimers->_SwTimerSetCallback
    _RADIO_ReadRandom->_RADIO_WriteMode
    _LORAWAN_Reset->_LORAWAN_LinkCheckConfigure
    _StopAllSoftwareTimers->_SwTimerStop
    _RADIO_Init->_RADIO_WriteFrequency
    _RADIO_WriteMode->_SystemBlockingWaitMs
    _RADIO_RegisterRead->_HALSPISend
    _RADIO_WriteFrequency->___lldiv
    _RADIO_RegisterWrite->_HALSPISend
    _HALSPISend->_SPI_Exchange8bit
    _RADIO_Reset->_SystemBlockingWaitMs
    _LORAWAN_LinkCheckConfigure->_SwTimerStart
    _SwTimerStart->_SwTimersInterrupt
    _TMR_OverrideRemaining->_TMR_SwapTimer
    _TMR_SwapTimer->_TMR1_ReadTimer
    _SwTimersInterrupt->_TMR_GetDeltaTime
    _TMR_GetDeltaTime->_TMR1_ReadTimer
    _SwTimerSetTimeout->___lldiv
    _InitDefault868Channels->_memcpy
    _InitDefault433Channels->_memcpy
    _CreateAllSoftwareTimers->_SwTimerCreate

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _RADIO_RxDone->_LORAWAN_RxDone
    _RADIO_FSKPayloadReady->_LORAWAN_RxDone
    _LORAWAN_Send->_AssemblePacket
    _AssemblePacket->_AESCmac
    _ComputeMic->_AESCmac

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    _RADIO_RxDone->_LORAWAN_RxDone
    _RADIO_FSKPayloadReady->_LORAWAN_RxDone

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0 6561004
                                            147 BANK0      5     5      0
                       _LORAWAN_Init
                       _LORAWAN_Join
                   _LORAWAN_Mainloop
   _LORAWAN_SetApplicationSessionKey
           _LORAWAN_SetDeviceAddress
       _LORAWAN_SetNetworkSessionKey
                  _SYSTEM_Initialize
                              _flash
                         _sendPacket
 ---------------------------------------------------------------------------------
 (1) _sendPacket                                           0     0      0  312252
                       _LORAWAN_Send
 ---------------------------------------------------------------------------------
 (1) _flash                                                2     2      0      68
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2489
                 _EXT_INT_Initialize
               _INTERRUPT_Initialize
               _LORAWAN_PlatformInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _SPI_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      2     2      0     239
                                              6 BANK0      2     2      0
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     239
          _IOCB4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_PlatformInit                                 0     0      0    1177
                 _DIO0_ISR_Lora_Init
                 _DIO1_ISR_Lora_Init
                 _DIO2_ISR_Lora_Init
                 _DIO3_ISR_Lora_Init
                 _DIO4_ISR_Lora_Init
                 _DIO5_ISR_Lora_Init
                    _SystemTimerInit
                  _TMR_ISR_Lora_Init
 ---------------------------------------------------------------------------------
 (3) _TMR_ISR_Lora_Init                                    0     0      0     239
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     239
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _SystemTimerInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO5_ISR_Lora_Init                                   0     0      0     221
           _INT0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _DIO4_ISR_Lora_Init                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO3_ISR_Lora_Init                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO2_ISR_Lora_Init                                   0     0      0     239
          _IOCB4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCB4_SetInterruptHandler                            2     0      2     239
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _DIO1_ISR_Lora_Init                                   0     0      0     239
           _INT2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _DIO0_ISR_Lora_Init                                   0     0      0     239
           _INT1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     834
           _INT0_SetInterruptHandler
           _INT1_SetInterruptHandler
           _INT2_SetInterruptHandler
           _INT3_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT3_SetInterruptHandler                             2     0      2     135
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _INT2_SetInterruptHandler                             2     0      2     239
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _INT1_SetInterruptHandler                             2     0      2     239
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _INT0_SetInterruptHandler                             2     0      2     221
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetNetworkSessionKey                         2     0      2   13228
                                             14 BANK0      2     0      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetDeviceAddress                             4     0      4     135
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetApplicationSessionKey                     2     0      2   13228
                                             14 BANK0      2     0      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Mainloop                                     0     0      0 5802250
             _INTERRUPT_GetDioStatus
                         _RADIO_DIO0
                         _RADIO_DIO1
                         _RADIO_DIO2
                         _RADIO_DIO3
                         _RADIO_DIO4
                         _RADIO_DIO5
                    _SwTimersExecute
 ---------------------------------------------------------------------------------
 (2) _SwTimersExecute                                      5     5      0 2266213
                                            136 BANK0      5     5      0
                   Absolute function *
          _AckRetransmissionCallback *
             _AutomaticReplyCallback *
                  _DutyCycleCallback *
          _LORAWAN_LinkCheckCallback *
     _LORAWAN_ReceiveWindow1Callback *
     _LORAWAN_ReceiveWindow2Callback *
                 _RADIO_RxFSKTimeout *
              _RADIO_WatchdogTimeout *
    _UnconfirmedTransmissionCallback *
             _UpdateJoinSuccessState *
 ---------------------------------------------------------------------------------
 (3) _UnconfirmedTransmissionCallback                      1     0      1  147886
                     _RADIO_Transmit
_ResetParametersForUnconfirmedTransm
                         _RxDataDone *
       _SelectChannelForTransmission
 ---------------------------------------------------------------------------------
 (3) _RADIO_WatchdogTimeout                                1     0      1  662267
                  _LORAWAN_RxTimeout
                     _LORAWAN_TxDone
                    _RADIO_WriteMode
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxFSKTimeout                                   2     1      1  488841
                  _LORAWAN_RxTimeout
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_ReceiveWindow1Callback                       5     4      1  153033
                   _ConfigureRadioRx
                         _GetRx1Freq
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
 ---------------------------------------------------------------------------------
 (4) _GetRx1Freq                                           4     0      4       0
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_LinkCheckCallback                            6     5      1    9224
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _DutyCycleCallback                                   11    10      1    9667
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _AutomaticReplyCallback                               1     0      1  312252
                       _LORAWAN_Send
 ---------------------------------------------------------------------------------
 (3) _AckRetransmissionCallback                            2     1      1  157701
               _FindSmallestDataRate
          _LORAWAN_GetMaxPayloadSize
                     _RADIO_Transmit
_ResetParametersForConfirmedTransmis
                         _RxDataDone *
       _SelectChannelForTransmission
_UpdateRetransmissionAckTimeoutState
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              4     0      4       0
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO5                                           2     2      0    9877
                                              9 BANK0      1     1      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO4                                           2     2      0    9877
                                              9 BANK0      1     1      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO3                                           2     2      0    9877
                                              9 BANK0      1     1      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO2                                           3     3      0   36323
                                             29 BANK0      2     2      0
            _RADIO_FHSSChangeChannel
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO1                                           2     2      0  534747
                                             78 BANK0      2     2      0
            _RADIO_FHSSChangeChannel
                 _RADIO_RegisterRead
                    _RADIO_RxTimeout
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxTimeout                                      0     0      0  498393
                  _LORAWAN_RxTimeout
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _RADIO_FHSSChangeChannel                              1     1      0   26412
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
               _RADIO_WriteFrequency
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO0                                           4     4      0 2935302
                                            143 BANK0      4     4      0
                _RADIO_FSKPacketSent
              _RADIO_FSKPayloadReady
                 _RADIO_RegisterRead
                       _RADIO_RxDone
                       _RADIO_TxDone
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (3) _RADIO_UnhandledInterrupt                             1     1      0    9747
                                              8 BANK0      1     1      0
                _RADIO_RegisterWrite
 ---------------------------------------------------------------------------------
 (3) _RADIO_TxDone                                        12    12      0  199578
                                            112 BANK0     12    12      0
                     _LORAWAN_TxDone
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                   _SwTimerReadValue
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxDone                                         2     2      0 1036497
                                            141 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                     _LORAWAN_RxDone
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                        _SwTimerStop
                            ___abdiv
 ---------------------------------------------------------------------------------
 (4) ___abdiv                                              5     4      1     549
                                              4 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (3) _RADIO_FSKPayloadReady                                2     2      0 1499160
                                            141 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                     _LORAWAN_RxDone
                  _LORAWAN_RxTimeout
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_RxTimeout                                    9     9      0  472962
                                             69 BANK0      9     9      0
     _LORAWAN_ReceiveWindow2Callback
                     _RADIO_Transmit
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                         _RxDataDone *
       _SelectChannelForTransmission
                   _SetJoinFailState
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _LORAWAN_ReceiveWindow2Callback                       1     0      1  315700
                   _ConfigureRadioRx
     _LORAWAN_EnterContinuousReceive
                    _RADIO_GetStatus
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                         _RxDataDone *
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_RxDone                                      28    25      3 1010158
                                            136 BANK0      5     5      0
                                            107 BANK1      3     0      3
                                              0 BANK3     20    20      0
                            _AESCmac
                      _AESEncodeLoRa
            _AssembleEncryptionBlock
                         _CheckFlags
                    _CheckMcastFlags
                         _ComputeMic
                 _ComputeSessionKeys
                  _EncryptFRMPayload
                         _ExtractMic
     _LORAWAN_EnterContinuousReceive
                       _LORAWAN_Send
                 _MacExecuteCommands
                    _RADIO_GetStatus
                  _RADIO_ReleaseData
                         _RxDataDone *
             _SearchAvailableChannel
                   _SetJoinFailState
             _SetReceptionNotOkState
                     _StartReTxTimer
                        _SwTimerStop
                       _UpdateCfList
                   _UpdateDLSettings
             _UpdateJoinSuccessState
                _UpdateReceiveDelays
_UpdateRetransmissionAckTimeoutState
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _UpdateRetransmissionAckTimeoutState                  4     4      0    9085
                                             52 BANK0      4     4      0
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _UpdateJoinSuccessState                               5     4      1    9122
                     _RxJoinResponse *
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _UpdateDLSettings                                     2     1      1     228
                                              4 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _UpdateCfList                                        11     9      2   19594
                                             16 BANK0     11     9      2
         _LORAWAN_SetChannelIdStatus
                  _ValidateFrequency
                             ___lmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _StartReTxTimer                                       9     9      0    9376
                                             52 BANK0      9     9      0
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _SetReceptionNotOkState                               0     0      0  162701
     _LORAWAN_EnterContinuousReceive
                         _RxDataDone *
 ---------------------------------------------------------------------------------
 (5) _SetJoinFailState                                     0     0      0       0
                     _RxJoinResponse *
 ---------------------------------------------------------------------------------
 (4) _RxJoinResponse                                       1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _MacExecuteCommands                                   8     5      3   19487
                                             26 BANK0      8     5      3
                   _ExecuteDevStatus
                   _ExecuteDutyCycle
                     _ExecuteLinkAdr
                   _ExecuteLinkCheck
                  _ExecuteNewChannel
             _ExecuteRxParamSetupReq
               _ExecuteRxTimingSetup
 ---------------------------------------------------------------------------------
 (6) _ExecuteRxTimingSetup                                 3     1      2     265
                                              9 BANK0      3     1      2
                _UpdateReceiveDelays
 ---------------------------------------------------------------------------------
 (5) _UpdateReceiveDelays                                  5     5      0      62
                                              4 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (6) _ExecuteRxParamSetupReq                               7     5      2    4297
                                             16 BANK0      7     5      2
     _UpdateReceiveWindow2Parameters
                   _ValidateDataRate
                  _ValidateFrequency
                   _ValidateRxOffset
                             ___lmul
 ---------------------------------------------------------------------------------
 (7) _ValidateRxOffset                                     2     2      0      68
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _UpdateReceiveWindow2Parameters                       5     0      5     438
                                              4 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (6) _ExecuteNewChannel                                    8     6      2   10051
                                             16 BANK0      8     6      2
         _LORAWAN_SetChannelIdStatus
              _UpdateChannelIdStatus
                    _UpdateDataRange
                    _UpdateDutyCycle
                    _UpdateFrequency
                  _ValidateChannelId
                  _ValidateDataRange
                  _ValidateFrequency
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) _ValidateFrequency                                    5     1      4     644
                                              4 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (7) _ValidateDataRange                                    4     4      0     297
                                              6 BANK0      4     4      0
                   _ValidateDataRate
 ---------------------------------------------------------------------------------
 (7) _UpdateFrequency                                      5     1      4     385
                                              4 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (7) _UpdateDutyCycle                                      3     1      2     385
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (7) _UpdateDataRange                                      4     3      1     608
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (6) _LORAWAN_SetChannelIdStatus                           3     2      1    2369
                                              8 BANK0      3     2      1
              _UpdateChannelIdStatus
                  _ValidateChannelId
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelId                                    3     2      1     842
                                              4 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _ExecuteLinkCheck                                     2     0      2     203
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (6) _ExecuteLinkAdr                                       9     7      2    3295
                                             17 BANK0      9     7      2
                     _EnableChannels
              _UpdateCurrentDataRate
                      _UpdateTxPower
                _ValidateChannelMask
            _ValidateChannelMaskCntl
                   _ValidateDataRate
                    _ValidateTxPower
 ---------------------------------------------------------------------------------
 (7) _ValidateTxPower                                      2     2      0      99
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateDataRate                                     2     2      0      68
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelMaskCntl                              2     2      0      99
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelMask                                  3     1      2     271
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (7) _UpdateTxPower                                        1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _UpdateCurrentDataRate                                1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _EnableChannels                                       3     0      3    2044
                                             14 BANK0      3     0      3
                    _EnableChannels1
 ---------------------------------------------------------------------------------
 (8) _EnableChannels1                                      6     1      5    1774
                                              8 BANK0      6     1      5
              _UpdateChannelIdStatus
 ---------------------------------------------------------------------------------
 (7) _UpdateChannelIdStatus                                4     3      1     971
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (6) _ExecuteDutyCycle                                     6     4      2     265
                                              4 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (6) _ExecuteDevStatus                                     2     0      2     135
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_Send                                         7     3      4  312252
                                            129 BANK0      7     3      4
                     _AssemblePacket
          _LORAWAN_GetMaxPayloadSize
                  _RADIO_ReceiveStop
                     _RADIO_Transmit
       _SelectChannelForTransmission
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_GetMaxPayloadSize                            3     3      0     272
                                             12 BANK0      3     3      0
                   _CountfOptsLength
 ---------------------------------------------------------------------------------
 (3) _AssemblePacket                                      12     7      5  151724
                                            122 BANK0      7     7      0
                                            102 BANK1      5     0      5
                            _AESCmac
            _AssembleEncryptionBlock
                   _CountfOptsLength
                  _EncryptFRMPayload
               _FindSmallestDataRate
         _IncludeMacCommandsResponse
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (4) _IncludeMacCommandsResponse                          12     8      4    2532
                                              4 BANK0     12     8      4
                 _RADIO_GetPacketSnr
 ---------------------------------------------------------------------------------
 (5) _RADIO_GetPacketSnr                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _FindSmallestDataRate                                 4     4      0     424
                                              4 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _EncryptFRMPayload                                   22     8     14   44159
                                             68 BANK0     22     8     14
                      _AESEncodeLoRa
            _AssembleEncryptionBlock
 ---------------------------------------------------------------------------------
 (5) _AssembleEncryptionBlock                              9     2      7   19076
                                             14 BANK0      9     2      7
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (4) _CountfOptsLength                                     8     8      0     198
                                              4 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (5) _ExtractMic                                          10     6      4   13819
                                             14 BANK0     10     6      4
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _ComputeSessionKeys                                   2     0      2   37765
                                             68 BANK0      2     0      2
                      _AESEncodeLoRa
                 _PrepareSessionKeys
 ---------------------------------------------------------------------------------
 (6) _PrepareSessionKeys                                   7     1      6   17577
                                             14 BANK0      7     1      6
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (5) _CheckMcastFlags                                      2     0      2     290
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _CheckFlags                                           2     0      2     228
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _RADIO_FSKPacketSent                                 13    13      0  190026
                                            112 BANK0     13    13      0
                     _LORAWAN_TxDone
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                   _SwTimerReadValue
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_TxDone                                      50    48      2  173621
                                             62 BANK0     50    48      2
     _LORAWAN_EnterContinuousReceive
                    _RADIO_GetStatus
                         _RxDataDone *
                   _SwTimerIsRunning
                   _SwTimerReadValue
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _SwTimerReadValue                                     9     5      4     455
                                             43 BANK0      9     5      4
                  _SwTimersInterrupt
 ---------------------------------------------------------------------------------
 (5) _SwTimerIsRunning                                     2     2      0      65
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _RADIO_GetStatus                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _LORAWAN_EnterContinuousReceive                       0     0      0  157850
                   _ConfigureRadioRx
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                         _RxDataDone *
 ---------------------------------------------------------------------------------
 (4) _RxDataDone                                           4     0      4    4851
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _ResetParametersForUnconfirmedTransmission            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ResetParametersForConfirmedTransmission              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _RADIO_ReleaseData                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RADIO_ReceiveStop                                    0     0      0   15684
                    _RADIO_WriteMode
 ---------------------------------------------------------------------------------
 (6) _RADIO_ReceiveStart                                  10     8      2  122643
                                             52 BANK0     10     8      2
                _RADIO_RegisterWrite
           _RADIO_WriteConfiguration
                    _RADIO_WriteMode
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (6) _ConfigureRadioRx                                     5     1      4   14672
                                             22 BANK0      5     1      4
                     _ConfigureRadio
                       _RADIO_SetCRC
                _RADIO_SetIQInverted
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_GetDioStatus                               1     1      0      34
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Join                                         3     3      0  248201
                                            140 BANK0      3     3      0
            _PrepareJoinRequestFrame
                     _RADIO_Transmit
       _SelectChannelForTransmission
                  _SwTimerSetTimeout
                       _SwTimerStart
               _UpdateJoinInProgress
 ---------------------------------------------------------------------------------
 (2) _UpdateJoinInProgress                                 1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _SelectChannelForTransmission                         3     3      0   19265
                                             37 BANK0      3     3      0
                   _ConfigureRadioTx
             _SearchAvailableChannel
 ---------------------------------------------------------------------------------
 (4) _SearchAvailableChannel                              12     9      3    4535
                                             25 BANK0     12     9      3
                             _Random
 ---------------------------------------------------------------------------------
 (4) _ConfigureRadioTx                                     6     2      4   14532
                                             22 BANK0      6     2      4
                     _ConfigureRadio
                       _RADIO_SetCRC
                _RADIO_SetIQInverted
               _RADIO_SetOutputPower
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetOutputPower                                 1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetIQInverted                                  1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetCRC                                         1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _ConfigureRadio                                       5     1      4   14236
                                             17 BANK0      5     1      4
                 _RADIO_SetBandwidth
          _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
        _RADIO_SetFrequencyHopPeriod
              _RADIO_SetLoRaSyncWord
                _RADIO_SetModulation
           _RADIO_SetSpreadingFactor
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetSpreadingFactor                             1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetModulation                                  1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetFrequencyHopPeriod                          2     0      2     135
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetFSKSyncWord                                 3     1      2   13293
                                             14 BANK0      3     1      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetChannelFrequency                            4     0      4     321
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetBandwidth                                   1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RADIO_Transmit                                      17    14      3  123770
                                             52 BANK0     17    14      3
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
           _RADIO_WriteConfiguration
                    _RADIO_WriteMode
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) _RADIO_WriteConfiguration                            10     8      2   87685
                                             29 BANK0     10     8      2
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
              _RADIO_WriteFSKBitRate
   _RADIO_WriteFSKFrequencyDeviation
               _RADIO_WriteFrequency
                    _RADIO_WriteMode
                   _RADIO_WritePower
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _RADIO_WritePower                                     3     3      0   10303
                                              8 BANK0      3     3      0
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
 ---------------------------------------------------------------------------------
 (5) _RADIO_WriteFSKFrequencyDeviation                     8     4      4   15813
                                             17 BANK0      8     4      4
                _RADIO_RegisterWrite
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _RADIO_WriteFSKBitRate                                8     4      4   15810
                                             17 BANK0      8     4      4
                _RADIO_RegisterWrite
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _PrepareJoinRequestFrame                              9     9      0  101770
                                            131 BANK0      9     9      0
                         _ComputeMic
                             _Random
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (5) _Random                                               2     0      2    3326
                                             23 BANK0      2     0      2
                            ___lwmod
                               _rand
 ---------------------------------------------------------------------------------
 (6) _rand                                                 2     0      2    2647
                                             16 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (7) ___lmul                                              12     4      8    2647
                                              4 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     440
                                             18 BANK0      5     1      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (5) _ComputeMic                                           9     4      5   81241
                                            122 BANK0      9     4      5
                            _AESCmac
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _AESCmac                                            116   109      7   67391
                                            108 BANK0     14     7      7
                                              0 BANK1    102   102      0
                      _AESEncodeLoRa
                     _GenerateSubkey
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (5) _GenerateSubkey                                      40    34      6   26439
                                             68 BANK0     40    34      6
                      _AESEncodeLoRa
                         _FillSubKey
                             _memset
 ---------------------------------------------------------------------------------
 (6) _FillSubKey                                           8     3      5    1539
                                              4 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (5) _AESEncodeLoRa                                       20    16      4   19957
                                             48 BANK0     20    16      4
                          _AESEncode
                             _memcpy
 ---------------------------------------------------------------------------------
 (6) _AESEncode                                           38    35      3    5098
                                             10 BANK0     38    35      3
                     _EncKeySchedule
                     _EncodeShiftRow
 ---------------------------------------------------------------------------------
 (7) _EncodeShiftRow                                       3     1      2     984
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (7) _EncKeySchedule                                       6     5      1    1164
                                              4 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Init                                         4     0      4  168868
                                             68 BANK0      4     0      4
            _CreateAllSoftwareTimers
                      _LORAWAN_Reset
                         _RADIO_Init
                   _RADIO_ReadRandom
          _SetCallbackSoftwareTimers
              _StopAllSoftwareTimers
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2     135
                                             21 BANK0      2     0      2
                   _RADIO_ReadRandom (ARG)
 ---------------------------------------------------------------------------------
 (2) _SetCallbackSoftwareTimers                            0     0      0    2620
                 _SwTimerSetCallback
 ---------------------------------------------------------------------------------
 (2) _RADIO_ReadRandom                                     5     3      2   26256
                                             16 BANK0      5     3      2
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_Reset                                        1     1      0   93127
                                             67 BANK0      1     1      0
             _InitDefault433Channels
             _InitDefault868Channels
         _LORAWAN_LinkCheckConfigure
                         _RADIO_Init
              _RADIO_SetLoRaSyncWord
              _StopAllSoftwareTimers
             _UpdateMinMaxChDataRate
                             _memset
 ---------------------------------------------------------------------------------
 (3) _UpdateMinMaxChDataRate                               2     2      0     223
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _StopAllSoftwareTimers                                0     0      0      31
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetLoRaSyncWord                                1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RADIO_Init                                           7     1      6   46271
                                             29 BANK0      7     1      6
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                        _RADIO_Reset
               _RADIO_WriteFrequency
                    _RADIO_WriteMode
                      _SwTimerCreate
                 _SwTimerSetCallback
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _SwTimerSetCallback                                   4     1      3    2620
                                              4 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (4) _RADIO_WriteMode                                      7     5      2   15684
                                              9 BANK0      7     5      2
                    _HALDIO5PinValue
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (5) _RADIO_RegisterRead                                   2     2      0     130
                                              6 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
 ---------------------------------------------------------------------------------
 (5) _HALDIO5PinValue                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RADIO_WriteFrequency                                12     8      4   16566
                                             17 BANK0     12     8      4
                _RADIO_RegisterWrite
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (6) ___llmod                                              9     1      8     440
                                              4 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (5) _RADIO_RegisterWrite                                  2     1      1    9716
                                              6 BANK0      2     1      1
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
 ---------------------------------------------------------------------------------
 (6) _HALSPISend                                           1     1      0      62
                                              5 BANK0      1     1      0
                   _SPI_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _SPI_Exchange8bit                                     1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HALSPICSDeassert                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _HALSPICSAssert                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RADIO_Reset                                          0     0      0     680
               _HALResetPinMakeInput
              _HALResetPinMakeOutput
             _HALResetPinOutputValue
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (5) _SystemBlockingWaitMs                                 5     1      4     618
                                              4 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (4) _HALResetPinOutputValue                               1     1      0      62
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HALResetPinMakeOutput                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _HALResetPinMakeInput                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_LinkCheckConfigure                          15    13      2    9418
                                             52 BANK0     15    13      2
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    5857
                                              4 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _SwTimerStop                                          1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _SwTimerStart                                         9     9      0    1294
                                             43 BANK0      9     9      0
                  _SwTimersInterrupt
              _TMR_OverrideRemaining
 ---------------------------------------------------------------------------------
 (5) _TMR_OverrideRemaining                               10     6      4     743
                                             12 BANK0     10     6      4
                      _TMR_SwapTimer
 ---------------------------------------------------------------------------------
 (6) _TMR_SwapTimer                                        2     0      2     478
                                             10 BANK0      2     0      2
                     _TMR1_ReadTimer
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (7) _TMR1_WriteTimer                                      2     0      2     240
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SwTimersInterrupt                                   17    13      4     390
                                             26 BANK0     17    13      4
                   _TMR_GetDeltaTime
 ---------------------------------------------------------------------------------
 (6) _TMR_GetDeltaTime                                    16    12      4      34
                                             10 BANK0     16    12      4
                     _TMR1_ReadTimer
 ---------------------------------------------------------------------------------
 (7) _TMR1_ReadTimer                                       6     4      2      34
                                              4 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _SwTimerSetTimeout                                    9     5      4    1934
                                             17 BANK0      9     5      4
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _InitDefault868Channels                               1     1      0   16761
                                             14 BANK0      1     1      0
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (3) _InitDefault433Channels                               1     1      0   16761
                                             14 BANK0      1     1      0
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6    3569
                                              4 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (7) _memcpy                                              10     4      6   13062
                                              4 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _CreateAllSoftwareTimers                              0     0      0     158
                      _SwTimerCreate
 ---------------------------------------------------------------------------------
 (3) _SwTimerCreate                                        1     1      0     158
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _INTERRUPT_InterruptManager                          8     8      0     455
                                             39 COMRAM     8     8      0
                           _INT1_ISR
                           _INT2_ISR
                           _INT3_ISR
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (14) _TMR1_ISR                                            0     0      0     455
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (15) _TMR1_CallBack                                       0     0      0     455
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                       _TMR_ISR_lora *
 ---------------------------------------------------------------------------------
 (16) _TMR_ISR_lora                                        0     0      0     455
                i2_SwTimersInterrupt
                    i2_TMR_SwapTimer
 ---------------------------------------------------------------------------------
 (17) i2_TMR_SwapTimer                                     2     0      2     185
                                              6 COMRAM     2     0      2
                   i2_TMR1_ReadTimer
                  i2_TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (18) i2_TMR1_WriteTimer                                   2     0      2     114
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (17) i2_SwTimersInterrupt                                17    13      4     270
                                             22 COMRAM    17    13      4
                 i2_TMR_GetDeltaTime
 ---------------------------------------------------------------------------------
 (18) i2_TMR_GetDeltaTime                                 16    12      4      23
                                              6 COMRAM    16    12      4
                   i2_TMR1_ReadTimer
 ---------------------------------------------------------------------------------
 (18) i2_TMR1_ReadTimer                                    6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (16) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _PIN_MANAGER_IOC                                     0     0      0       0
                          _IOCB4_ISR
 ---------------------------------------------------------------------------------
 (15) _IOCB4_ISR                                           0     0      0       0
                   Absolute function *
                      _DIO2_ISR_Lora *
      _IOCB4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _IOCB4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _DIO2_ISR_Lora                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _INT3_ISR                                            0     0      0       0
                      _INT3_CallBack
 ---------------------------------------------------------------------------------
 (15) _INT3_CallBack                                       0     0      0       0
                   Absolute function *
       _INT3_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _INT3_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _INT2_ISR                                            0     0      0       0
                      _INT2_CallBack
 ---------------------------------------------------------------------------------
 (15) _INT2_CallBack                                       0     0      0       0
                   Absolute function *
                      _DIO1_ISR_Lora *
       _INT2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _INT2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _DIO1_ISR_Lora                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _INT1_ISR                                            0     0      0       0
                      _INT1_CallBack
 ---------------------------------------------------------------------------------
 (15) _INT1_CallBack                                       0     0      0       0
                   Absolute function *
                      _DIO0_ISR_Lora *
       _INT1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _INT1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (16) _DIO0_ISR_Lora                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              4     0      4       0
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LORAWAN_Init
     _CreateAllSoftwareTimers
       _SwTimerCreate
     _LORAWAN_Reset
       _InitDefault433Channels
         _memcpy
         _memset
       _InitDefault868Channels
         _memcpy
         _memset
       _LORAWAN_LinkCheckConfigure
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         _SwTimerStop
         ___lldiv
       _RADIO_Init
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_Reset
           _HALResetPinMakeInput
           _HALResetPinMakeOutput
           _HALResetPinOutputValue
           _SystemBlockingWaitMs
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           ___lldiv
           ___llmod
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerCreate
         _SwTimerSetCallback
         _SwTimerStop
       _RADIO_SetLoRaSyncWord
       _StopAllSoftwareTimers
         _SwTimerStop
       _UpdateMinMaxChDataRate
       _memset
     _RADIO_Init
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI_Exchange8bit
       _RADIO_Reset
         _HALResetPinMakeInput
         _HALResetPinMakeOutput
         _HALResetPinOutputValue
         _SystemBlockingWaitMs
       _RADIO_WriteFrequency
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         ___lldiv
         ___llmod
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _SystemBlockingWaitMs
       _SwTimerCreate
       _SwTimerSetCallback
       _SwTimerStop
     _RADIO_ReadRandom
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI_Exchange8bit
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _SystemBlockingWaitMs
       _SystemBlockingWaitMs
     _SetCallbackSoftwareTimers
       _SwTimerSetCallback
     _StopAllSoftwareTimers
       _SwTimerStop
     _srand
       _RADIO_ReadRandom (ARG)
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _SystemBlockingWaitMs
         _SystemBlockingWaitMs
   _LORAWAN_Join
     _PrepareJoinRequestFrame
       _ComputeMic
         _AESCmac
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _GenerateSubkey
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _FillSubKey
             _memset
           _memcpy
           _memset
         _memcpy
       _Random
         ___lwmod
           _rand (ARG)
             ___lmul
         _rand
           ___lmul
       _memcpy
       _memset
     _RADIO_Transmit
       _HALSPICSAssert
       _HALSPICSDeassert
       _HALSPISend
         _SPI_Exchange8bit
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI_Exchange8bit
       _RADIO_WriteConfiguration
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_WriteFSKBitRate
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           ___lldiv
         _RADIO_WriteFSKFrequencyDeviation
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           ___lldiv
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           ___lldiv
           ___llmod
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _SystemBlockingWaitMs
         _RADIO_WritePower
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
         ___lmul
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _SystemBlockingWaitMs
       _SwTimerSetTimeout
         ___lldiv (ARG)
       _SwTimerStart
         _SwTimersInterrupt
           _TMR_GetDeltaTime
             _TMR1_ReadTimer
         _TMR_OverrideRemaining
           _TMR_SwapTimer
             _TMR1_ReadTimer
             _TMR1_WriteTimer
       _SwTimerStop
       ___lldiv
     _SelectChannelForTransmission
       _ConfigureRadioTx
         _ConfigureRadio
           _RADIO_SetBandwidth
           _RADIO_SetChannelFrequency
           _RADIO_SetFSKSyncWord
             _memcpy
           _RADIO_SetFrequencyHopPeriod
           _RADIO_SetLoRaSyncWord
           _RADIO_SetModulation
           _RADIO_SetSpreadingFactor
         _RADIO_SetCRC
         _RADIO_SetIQInverted
         _RADIO_SetOutputPower
       _SearchAvailableChannel
         _Random
           ___lwmod
             _rand (ARG)
               ___lmul
           _rand
             ___lmul
     _SwTimerSetTimeout
       ___lldiv (ARG)
     _SwTimerStart
       _SwTimersInterrupt
         _TMR_GetDeltaTime
           _TMR1_ReadTimer
       _TMR_OverrideRemaining
         _TMR_SwapTimer
           _TMR1_ReadTimer
           _TMR1_WriteTimer
     _UpdateJoinInProgress
   _LORAWAN_Mainloop
     _INTERRUPT_GetDioStatus
     _RADIO_DIO0
       _RADIO_FSKPacketSent
         _LORAWAN_TxDone
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_GetStatus
           _RxDataDone *
           _SwTimerIsRunning *
           _SwTimerReadValue *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop *
           ___lldiv *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerReadValue
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
         _SwTimerStop
       _RADIO_FSKPayloadReady
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI_Exchange8bit
         _LORAWAN_RxDone
           _AESCmac
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _GenerateSubkey
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _FillSubKey
               _memset
             _memcpy
             _memset
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _AssembleEncryptionBlock
             _memcpy
             _memset
           _CheckFlags
           _CheckMcastFlags
           _ComputeMic
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _memcpy
           _ComputeSessionKeys
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _PrepareSessionKeys
               _memcpy
               _memset
           _EncryptFRMPayload
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _AssembleEncryptionBlock
               _memcpy
               _memset
           _ExtractMic
             _memcpy
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _LORAWAN_Send
             _AssemblePacket
               _AESCmac
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _GenerateSubkey
                   _AESEncodeLoRa
                     _AESEncode
                       _EncKeySchedule
                       _EncodeShiftRow
                     _memcpy
                   _FillSubKey
                   _memset
                 _memcpy
                 _memset
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
               _CountfOptsLength
               _EncryptFRMPayload
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _AssembleEncryptionBlock
                   _memcpy
                   _memset
               _FindSmallestDataRate
               _IncludeMacCommandsResponse
                 _RADIO_GetPacketSnr
               _memcpy
               _memset
             _LORAWAN_GetMaxPayloadSize
               _CountfOptsLength
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_Transmit
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               _SwTimerStop
               ___lldiv
             _SelectChannelForTransmission
               _ConfigureRadioTx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
                 _RADIO_SetOutputPower
               _SearchAvailableChannel
                 _Random
                   ___lwmod
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
           _MacExecuteCommands
             _ExecuteDevStatus
             _ExecuteDutyCycle
             _ExecuteLinkAdr
               _EnableChannels
                 _EnableChannels1
                   _UpdateChannelIdStatus
               _UpdateCurrentDataRate
               _UpdateTxPower
               _ValidateChannelMask
               _ValidateChannelMaskCntl
               _ValidateDataRate
               _ValidateTxPower
             _ExecuteLinkCheck
             _ExecuteNewChannel
               _LORAWAN_SetChannelIdStatus
                 _UpdateChannelIdStatus
                 _ValidateChannelId
               _UpdateChannelIdStatus
               _UpdateDataRange
               _UpdateDutyCycle
               _UpdateFrequency
               _ValidateChannelId
               _ValidateDataRange
                 _ValidateDataRate
               _ValidateFrequency
               ___lmul
             _ExecuteRxParamSetupReq
               _UpdateReceiveWindow2Parameters
               _ValidateDataRate
               _ValidateFrequency
               _ValidateRxOffset
               ___lmul
             _ExecuteRxTimingSetup
               _UpdateReceiveDelays
           _RADIO_GetStatus
           _RADIO_ReleaseData
           _RxDataDone *
           _SearchAvailableChannel *
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
               _rand
                 ___lmul
           _SetJoinFailState *
             _RxJoinResponse *
           _SetReceptionNotOkState *
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                   ___lmul
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RxDataDone *
           _StartReTxTimer *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _SwTimerStop *
           _UpdateCfList *
             _LORAWAN_SetChannelIdStatus
               _UpdateChannelIdStatus
               _ValidateChannelId
             _ValidateFrequency
             ___lmul
             _memcpy
           _UpdateDLSettings *
           _UpdateJoinSuccessState *
             _RxJoinResponse *
             _SwTimerSetTimeout *
               ___lldiv (ARG)
             _SwTimerStart *
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv *
           _UpdateReceiveDelays *
           _UpdateRetransmissionAckTimeoutState *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _memcpy *
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                   ___lmul
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
               ___lmul
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI_Exchange8bit
       _RADIO_RxDone
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI_Exchange8bit
         _LORAWAN_RxDone
           _AESCmac
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _GenerateSubkey
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _FillSubKey
               _memset
             _memcpy
             _memset
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _AssembleEncryptionBlock
             _memcpy
             _memset
           _CheckFlags
           _CheckMcastFlags
           _ComputeMic
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _memcpy
           _ComputeSessionKeys
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _PrepareSessionKeys
               _memcpy
               _memset
           _EncryptFRMPayload
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _AssembleEncryptionBlock
               _memcpy
               _memset
           _ExtractMic
             _memcpy
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _LORAWAN_Send
             _AssemblePacket
               _AESCmac
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _GenerateSubkey
                   _AESEncodeLoRa
                     _AESEncode
                       _EncKeySchedule
                       _EncodeShiftRow
                     _memcpy
                   _FillSubKey
                   _memset
                 _memcpy
                 _memset
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
               _CountfOptsLength
               _EncryptFRMPayload
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _AssembleEncryptionBlock
                   _memcpy
                   _memset
               _FindSmallestDataRate
               _IncludeMacCommandsResponse
                 _RADIO_GetPacketSnr
               _memcpy
               _memset
             _LORAWAN_GetMaxPayloadSize
               _CountfOptsLength
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_Transmit
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               _SwTimerStop
               ___lldiv
             _SelectChannelForTransmission
               _ConfigureRadioTx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
                 _RADIO_SetOutputPower
               _SearchAvailableChannel
                 _Random
                   ___lwmod
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
           _MacExecuteCommands
             _ExecuteDevStatus
             _ExecuteDutyCycle
             _ExecuteLinkAdr
               _EnableChannels
                 _EnableChannels1
                   _UpdateChannelIdStatus
               _UpdateCurrentDataRate
               _UpdateTxPower
               _ValidateChannelMask
               _ValidateChannelMaskCntl
               _ValidateDataRate
               _ValidateTxPower
             _ExecuteLinkCheck
             _ExecuteNewChannel
               _LORAWAN_SetChannelIdStatus
                 _UpdateChannelIdStatus
                 _ValidateChannelId
               _UpdateChannelIdStatus
               _UpdateDataRange
               _UpdateDutyCycle
               _UpdateFrequency
               _ValidateChannelId
               _ValidateDataRange
                 _ValidateDataRate
               _ValidateFrequency
               ___lmul
             _ExecuteRxParamSetupReq
               _UpdateReceiveWindow2Parameters
               _ValidateDataRate
               _ValidateFrequency
               _ValidateRxOffset
               ___lmul
             _ExecuteRxTimingSetup
               _UpdateReceiveDelays
           _RADIO_GetStatus
           _RADIO_ReleaseData
           _RxDataDone *
           _SearchAvailableChannel *
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
               _rand
                 ___lmul
           _SetJoinFailState *
             _RxJoinResponse *
           _SetReceptionNotOkState *
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                   ___lmul
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RxDataDone *
           _StartReTxTimer *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _SwTimerStop *
           _UpdateCfList *
             _LORAWAN_SetChannelIdStatus
               _UpdateChannelIdStatus
               _ValidateChannelId
             _ValidateFrequency
             ___lmul
             _memcpy
           _UpdateDLSettings *
           _UpdateJoinSuccessState *
             _RxJoinResponse *
             _SwTimerSetTimeout *
               ___lldiv (ARG)
             _SwTimerStart *
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv *
           _UpdateReceiveDelays *
           _UpdateRetransmissionAckTimeoutState *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _memcpy *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
         ___abdiv
       _RADIO_TxDone
         _LORAWAN_TxDone
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_GetStatus
           _RxDataDone *
           _SwTimerIsRunning *
           _SwTimerReadValue *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop *
           ___lldiv *
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerReadValue
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
         _SwTimerStop
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
     _RADIO_DIO1
       _RADIO_FHSSChangeChannel
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           ___lldiv
           ___llmod
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI_Exchange8bit
       _RADIO_RxTimeout
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                   ___lmul
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
               ___lmul
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
     _RADIO_DIO2
       _RADIO_FHSSChangeChannel
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           ___lldiv
           ___llmod
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
     _RADIO_DIO3
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
     _RADIO_DIO4
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
     _RADIO_DIO5
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
     _SwTimersExecute
       Absolute function(Fake) *
       _AckRetransmissionCallback *
         _FindSmallestDataRate
         _LORAWAN_GetMaxPayloadSize
           _CountfOptsLength
         _RADIO_Transmit
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
             ___lmul
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop
           ___lldiv
         _ResetParametersForConfirmedTransmission
         _RxDataDone *
         _SelectChannelForTransmission *
           _ConfigureRadioTx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
                 _memcpy
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
             _RADIO_SetOutputPower
           _SearchAvailableChannel
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
               _rand
                 ___lmul
         _UpdateRetransmissionAckTimeoutState *
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
       _AutomaticReplyCallback *
         _LORAWAN_Send
           _AssemblePacket
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _AssembleEncryptionBlock
               _memcpy
               _memset
             _CountfOptsLength
             _EncryptFRMPayload
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
             _FindSmallestDataRate
             _IncludeMacCommandsResponse
               _RADIO_GetPacketSnr
             _memcpy
             _memset
           _LORAWAN_GetMaxPayloadSize
             _CountfOptsLength
           _RADIO_ReceiveStop
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _SystemBlockingWaitMs
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
               ___lmul
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _SelectChannelForTransmission
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
       _DutyCycleCallback *
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv
       _LORAWAN_LinkCheckCallback *
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv
       _LORAWAN_ReceiveWindow1Callback *
         _ConfigureRadioRx
           _ConfigureRadio
             _RADIO_SetBandwidth
             _RADIO_SetChannelFrequency
             _RADIO_SetFSKSyncWord
               _memcpy
             _RADIO_SetFrequencyHopPeriod
             _RADIO_SetLoRaSyncWord
             _RADIO_SetModulation
             _RADIO_SetSpreadingFactor
           _RADIO_SetCRC
           _RADIO_SetIQInverted
         _GetRx1Freq
         _RADIO_ReceiveStart
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
             ___lmul
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
         _RADIO_ReceiveStop
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _SystemBlockingWaitMs
         _RADIO_ReleaseData
       _LORAWAN_ReceiveWindow2Callback *
         _ConfigureRadioRx
           _ConfigureRadio
             _RADIO_SetBandwidth
             _RADIO_SetChannelFrequency
             _RADIO_SetFSKSyncWord
               _memcpy
             _RADIO_SetFrequencyHopPeriod
             _RADIO_SetLoRaSyncWord
             _RADIO_SetModulation
             _RADIO_SetSpreadingFactor
           _RADIO_SetCRC
           _RADIO_SetIQInverted
         _LORAWAN_EnterContinuousReceive
           _ConfigureRadioRx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
                 _memcpy
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
           _RADIO_ReceiveStart
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
               ___lmul
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _RADIO_ReceiveStop
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _SystemBlockingWaitMs
           _RADIO_ReleaseData
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
         _RADIO_GetStatus
         _RADIO_ReceiveStart
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
             ___lmul
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
         _RADIO_ReceiveStop
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _SystemBlockingWaitMs
         _RADIO_ReleaseData
         _ResetParametersForConfirmedTransmission
         _ResetParametersForUnconfirmedTransmission
         _RxDataDone *
       _RADIO_RxFSKTimeout *
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                   ___lmul
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
               ___lmul
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_WatchdogTimeout *
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI_Exchange8bit
                   ___lmul
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
               ___lmul
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _LORAWAN_TxDone
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_GetStatus
           _RxDataDone *
           _SwTimerIsRunning *
           _SwTimerReadValue *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop *
           ___lldiv *
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _SystemBlockingWaitMs
       _UnconfirmedTransmissionCallback *
         _RADIO_Transmit
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI_Exchange8bit
             ___lmul
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop
           ___lldiv
         _ResetParametersForUnconfirmedTransmission
         _RxDataDone *
         _SelectChannelForTransmission *
           _ConfigureRadioTx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
                 _memcpy
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
             _RADIO_SetOutputPower
           _SearchAvailableChannel
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
               _rand
                 ___lmul
       _UpdateJoinSuccessState *
         _RxJoinResponse *
         _SwTimerSetTimeout *
           ___lldiv (ARG)
         _SwTimerStart *
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv *
   _LORAWAN_SetApplicationSessionKey
     _memcpy
   _LORAWAN_SetDeviceAddress
   _LORAWAN_SetNetworkSessionKey
     _memcpy
   _SYSTEM_Initialize
     _EXT_INT_Initialize
       _INT0_SetInterruptHandler
       _INT1_SetInterruptHandler
       _INT2_SetInterruptHandler
       _INT3_SetInterruptHandler
     _INTERRUPT_Initialize
     _LORAWAN_PlatformInit
       _DIO0_ISR_Lora_Init
         _INT1_SetInterruptHandler
       _DIO1_ISR_Lora_Init
         _INT2_SetInterruptHandler
       _DIO2_ISR_Lora_Init
         _IOCB4_SetInterruptHandler
       _DIO3_ISR_Lora_Init
       _DIO4_ISR_Lora_Init
       _DIO5_ISR_Lora_Init
         _INT0_SetInterruptHandler
       _SystemTimerInit
       _TMR_ISR_Lora_Init
         _TMR1_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCB4_SetInterruptHandler
     _SPI_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
       _TMR1_StartTimer
   _flash
   _sendPacket
     _LORAWAN_Send
       _AssemblePacket
         _AESCmac
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _GenerateSubkey
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _FillSubKey
             _memset
           _memcpy
           _memset
         _AssembleEncryptionBlock
           _memcpy
           _memset
         _CountfOptsLength
         _EncryptFRMPayload
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _AssembleEncryptionBlock
             _memcpy
             _memset
         _FindSmallestDataRate
         _IncludeMacCommandsResponse
           _RADIO_GetPacketSnr
         _memcpy
         _memset
       _LORAWAN_GetMaxPayloadSize
         _CountfOptsLength
       _RADIO_ReceiveStop
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _SystemBlockingWaitMs
       _RADIO_Transmit
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI_Exchange8bit
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI_Exchange8bit
         _RADIO_WriteConfiguration
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _RADIO_WriteFSKBitRate
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             ___lldiv
           _RADIO_WriteFSKFrequencyDeviation
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             ___lldiv
           _RADIO_WriteFrequency
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             ___lldiv
             ___llmod
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _SystemBlockingWaitMs
           _RADIO_WritePower
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI_Exchange8bit
           ___lmul
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         _SwTimerStop
         ___lldiv
       _SelectChannelForTransmission
         _ConfigureRadioTx
           _ConfigureRadio
             _RADIO_SetBandwidth
             _RADIO_SetChannelFrequency
             _RADIO_SetFSKSyncWord
               _memcpy
             _RADIO_SetFrequencyHopPeriod
             _RADIO_SetLoRaSyncWord
             _RADIO_SetModulation
             _RADIO_SetSpreadingFactor
           _RADIO_SetCRC
           _RADIO_SetIQInverted
           _RADIO_SetOutputPower
         _SearchAvailableChannel
           _Random
             ___lwmod
               _rand (ARG)
                 ___lmul
             _rand
               ___lmul

 _INTERRUPT_InterruptManager (ROOT)
   _INT1_ISR
     _INT1_CallBack
       Absolute function(Fake) *
       _DIO0_ISR_Lora *
       _INT1_DefaultInterruptHandler *
   _INT2_ISR
     _INT2_CallBack
       Absolute function(Fake) *
       _DIO1_ISR_Lora *
       _INT2_DefaultInterruptHandler *
   _INT3_ISR
     _INT3_CallBack
       Absolute function(Fake) *
       _INT3_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
     _IOCB4_ISR
       Absolute function(Fake) *
       _DIO2_ISR_Lora *
       _IOCB4_DefaultInterruptHandler *
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _TMR_ISR_lora *
         i2_SwTimersInterrupt
           i2_TMR_GetDeltaTime
             i2_TMR1_ReadTimer
         i2_TMR_SwapTimer
           i2_TMR1_ReadTimer
           i2_TMR1_WriteTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0     21E      35       14.9%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      E0      14       87.5%
BITBANK3           100      0       0      11        0.0%
BANK3              100     14      B4      12       70.3%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      F5      10       95.7%
BITBANK1           100      0       0       7        0.0%
BANK1              100     6E      F7       8       96.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     98      98       5       95.0%
BITCOMRAM           53      0       0       0        0.0%
COMRAM              53     2F      53       1      100.0%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       2       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     46B       6        0.0%
DATA                 0      0     68B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Mar 22 09:51:56 2023

                                        ??_LORAWAN_TxDone 00A0  
                              __end_of_DIO3_ISR_Lora_Init 781E  
                                          _SPI_Initialize 76C0  
                                      ?_LORAWAN_RxTimeout 0001  
                        __size_of_RADIO_FHSSChangeChannel 002E  
                                          HALSPISend@data 0065  
                         __end_of_ValidateChannelMaskCntl 75FE  
                                             _SSPSTATbits 000FC7  
                         __size_of_UpdateJoinSuccessState 0132  
                      __size_of_IOCB4_SetInterruptHandler 000A  
                                             __CFG_BORV$3 000000  
                                            _TMR_ISR_lora 69CA  
                                   __end_of_AESEncodeLoRa 723A  
                                             ?_RADIO_DIO0 0001  
                                             ?_RADIO_DIO1 0001  
                                             ?_RADIO_DIO2 0001  
                                             ?_RADIO_DIO3 0001  
                                             ?_RADIO_DIO4 0001  
                                             ?_RADIO_DIO5 0001  
                              ?_IOCB4_SetInterruptHandler 0064  
                                            __CFG_CP0$OFF 000000  
                                            __CFG_CP1$OFF 000000  
                                            __CFG_CP2$OFF 000000  
                                            __CFG_CP3$OFF 000000  
                                     ??_LORAWAN_RxTimeout 00A5  
                                                     l143 61BA  
                                                     l432 155A  
                                                     l425 14D2  
                                                     l354 514E  
                                                     l451 1816  
                                                     l419 150A  
                                                     l438 1744  
                                                     l642 6F8A  
                                                     l564 70E0  
                                                     l645 6BEE  
                                             ?_RADIO_Init 007D  
                                                     l662 5DE8  
                                                     l648 6C00  
                                                     l789 7680  
                                         ??_UpdateTxPower 0064  
                                            __CFG_CPB$OFF 000000  
                                            __CFG_CPD$OFF 000000  
                    __end_of_SelectChannelForTransmission 6624  
                   __size_of_SelectChannelForTransmission 0060  
                            _SelectChannelForTransmission 65C4  
                                  _ExecuteRxParamSetupReq 42D6  
                                      _RADIO_Transmit$746 009F  
                              ??_INT0_SetInterruptHandler 0066  
                                      _DIO2_ISR_Lora_Init 76E4  
                                      __size_of_AESEncode 02F2  
                                         _timer1ReloadVal 005E  
                              ??_INT3_SetInterruptHandler 0066  
                                         ?_EncKeySchedule 0064  
                                   _RADIO_SetLoRaSyncWord 776E  
                                                     prod 000FF3  
                                                     tosl 000FFD  
                                                     wreg 000FE8  
                                         __end_of_AESCmac 1B46  
                                 __end_of_SwTimersExecute 58A2  
                                  SystemBlockingWaitMs@ms 0064  
                                 LORAWAN_Join@bufferIndex 00EC  
                                __size_of_RADIO_GetStatus 0006  
                                   ?_SystemBlockingWaitMs 0064  
                                    ??i2_TMR_GetDeltaTime 000B  
                                ??_SearchAvailableChannel 007C  
                            __end_of_FindSmallestDataRate 5AA6  
                     __end_of_RADIO_SetFrequencyHopPeriod 776E  
                             _RADIO_SetFrequencyHopPeriod 7764  
                                              _CheckFlags 6624  
                                  ?_TMR_OverrideRemaining 006C  
                                           _INT1_CallBack 74C4  
                                ?_AssembleEncryptionBlock 006E  
                                     ?_DIO2_ISR_Lora_Init 0001  
                                       ??_UpdateFrequency 0068  
                                      __size_of_IOCB4_ISR 001E  
                                                    l1100 730E  
                                                    l1108 691A  
                                                    l1116 3642  
                                                    l2100 0552  
                                                    l2012 4AAE  
                                                    l1221 4B3A  
                                                    l1150 4F7C  
                                                    l1127 3480  
                                                    l1048 1214  
                                                    l1232 4846  
                                                    l1240 763A  
                                                    l1144 43AC  
                                                    l2120 09A0  
                                                    l1080 283C  
                                                    l1153 500A  
                                                    l1066 2744  
                                                    l2018 622A  
                                                    l1314 2706  
                                                    l1403 1896  
                                                    l1163 503E  
                                                    l2044 56E6  
                                                    l1261 740C  
                                                    l2070 010A  
                                                    l1255 6FC0  
                                                    l2039 467A  
                                                    l2232 20BE  
                                                    l1096 764E  
                                                    l1248 6738  
                                                    l1168 31F2  
                                                    l2241 5A14  
                                                    l1281 6F2C  
                                                    l1362 752C  
                                                    l1418 19FE  
                                                    l2082 0262  
                                                    l1267 75FA  
                                                    l2180 1BAC  
                                                    l2181 1C52  
                                                    l2190 1C60  
                                                    l2182 1C50  
                                                    l1296 676A  
                                                    l2256 62AE  
                                                    l2185 1C4C  
                                                    l2099 054A  
                   RADIO_WriteConfiguration@symbolTimeout 007D  
                                                    l1666 5BF2  
                                                    l2475 2182  
                                                    l1667 5C3A  
                                                    l1942 37FE  
                                                    l1695 550C  
                                                    l2920 60CE  
                                                    l1961 597A  
                                                    l2930 65B2  
                                                    l1963 59F6  
                                                    l1966 5448  
                                                    l1990 4178  
                                                    l1975 5458  
                                                    l2983 6D7C  
                                        _RADIO_WritePower 52C6  
                            ??_LORAWAN_SetChannelIdStatus 0069  
                                 _PrepareJoinRequestFrame 4684  
                                                    _LATA 000F89  
                                                    _LATB 000F8A  
                                                    _LATC 000F8B  
                                                    _LATD 000F8C  
                                                    _LATE 000F8D  
                                                    _LATF 000F8E  
                                                    _LATG 000F8F  
                                            ?_RADIO_Reset 0001  
                              __size_of_RADIO_ReceiveStop 001E  
                                       ??_UpdateDutyCycle 0066  
                                                    _WPUB 000F5B  
                                  ??_LORAWAN_PlatformInit 0066  
                                           _INT2_CallBack 74A6  
                                ??_InitDefault433Channels 006E  
                                ExecuteNewChannel@drRange 0072  
                                      _PrepareSessionKeys 5EF6  
                                                    _loRa 0200  
                                                    _main 551A  
                                                    _rand 692E  
                          __end_of_UpdateMinMaxChDataRate 5740  
                                                    fsr0h 000FEA  
                                                    fsr1h 000FE2  
                                                    indf0 000FEF  
                                                    fsr0l 000FE9  
                                                    fsr2h 000FDA  
                                                    fsr1l 000FE1  
                                                    indf2 000FDF  
                                                    fsr2l 000FD9  
                                 __size_of_RADIO_Transmit 01EE  
                                                    btemp 004A  
                          __size_of_StopAllSoftwareTimers 004E  
                                           ComputeMic@mic 00DF  
                                           ComputeMic@key 00DA  
                               __end_of_LORAWAN_RxTimeout 29C6  
                               __size_of_ConfigureRadioRx 0026  
                                           _INT3_CallBack 7488  
                               __size_of_ConfigureRadioTx 0042  
                       __size_of_INT2_SetInterruptHandler 000A  
                                                    pclat 000FFA  
                           __end_of_StopAllSoftwareTimers 69CA  
                               ?_INT2_SetInterruptHandler 0064  
                                                    prodh 000FF4  
                                                    prodl 000FF3  
                                                    start 008C  
                                           __CFG_IESO$OFF 000000  
                                __end_of_CountfOptsLength 5952  
                                  __end_of_SPI_Initialize 76CC  
                                   ExecuteLinkAdr@txPower 0076  
                                     __size_of_HALSPISend 000A  
                              ??_TMR1_SetInterruptHandler 0066  
                              EnableChannels1@channelMask 0068  
                                           __CFG_MCLRE$ON 000000  
                                        ??_AssemblePacket 00DA  
                                  ?_HALResetPinMakeOutput 0001  
                                     ?_PrepareSessionKeys 006E  
                                  __size_of_TMR_SwapTimer 003E  
                              __end_of_RADIO_GetPacketSnr 77D2  
                                            ___param_bank 000010  
                                              _GetRx1Freq 7666  
                              __size_of_RADIO_ReleaseData 0006  
                                    ??_DIO2_ISR_Lora_Init 0066  
                         __end_of_CreateAllSoftwareTimers 68E0  
                  SearchAvailableChannel@transmissionType 0079  
                         __size_of_HALResetPinOutputValue 0014  
                                   MacExecuteCommands@ptr 0080  
                                   _RADIO_WriteFSKBitRate 6500  
                                __size_of_SystemTimerInit 0006  
                                        __end_of_INT1_ISR 77F6  
                                        __end_of_INT2_ISR 77F0  
                                        __end_of_INT3_ISR 77EA  
                          __size_of_OSCILLATOR_Initialize 000C  
                                  ExecuteLinkAdr@dataRate 0079  
                           __end_of_OSCILLATOR_Initialize 76D8  
                      __size_of_LORAWAN_LinkCheckCallback 0158  
                                                   l12002 52EA  
                                                   l12100 47F4  
                                                   l12030 5344  
                                                   l12022 532C  
                                                   l12102 47F8  
                                                   l12016 5312  
                                                   l12200 1514  
                                                   l13000 1FB0  
                                                   l12120 48AA  
                                                   l12112 4890  
                                                   l12050 5372  
                                                   l12026 5338  
                                                   l12018 531E  
                                                   l13010 1FEE  
                                                   l12114 4894  
                                                   l12132 6AA2  
                                                   l12044 536A  
                                                   l12212 1550  
                                                   l13100 3092  
                                                   l13020 2026  
                                                   l13004 1FD6  
                                                   l12150 6D60  
                                                   l12302 172C  
                                                   l12214 1556  
                                                   l13102 30A6  
                                                   l12128 6A6A  
                                                   l12320 17D0  
                                                   l12208 1544  
                                                   l12304 174E  
                                                   l13112 30C6  
                                                   l12064 5D9E  
                                                   l13024 2038  
                                                   l13200 6924  
                                                   l12090 71CA  
                                                   l12154 6D72  
                                                   l12146 6D54  
                                                   l12330 180C  
                                                   l12234 15A0  
                                                   l13106 30B6  
                                                   l12402 678C  
                                                   l14002 0402  
                                         __end_of___abdiv 683C  
                                                   l12172 5CC6  
                                                   l12148 6D5C  
                                                   l12324 17EC  
                                                   l12316 17C0  
                                                   l12244 15CA  
                                                   l12252 15E6  
                                                   l13140 3168  
                                                   l13116 30DC  
                                                   l12068 5DC2  
                                                   l12084 70F8  
                                                   l12500 2C4A  
                                                   l13044 20C4  
                                                   l13028 2050  
                                                   l13060 212A  
                                                   l12094 71DA  
                                                   l12430 4946  
                                                   l12190 147C  
                                                   l13038 2096  
                                                   l13054 20E8  
                                                   l13310 355C  
                                                   l13302 34F8  
                                                   l14014 0420  
                                                   l12424 4922  
                                                   l12416 490A  
                                                   l12192 149E  
                                                   l12504 2C72  
                                                   l13056 211C  
                                                   l13232 3622  
                                                   l13224 35F2  
                                                   l13304 3502  
                                                   l13312 3560  
                                                   l14016 0438  
                                                   l11650 6D92  
                                                   l12442 4984  
                                                   l12434 496A  
                                                   l13146 31D8  
                                                   l13082 3032  
                                                   l13074 301A  
                                                   l12530 2D8A  
                                                   l12514 2CBA  
                                                   l12506 2C9A  
                                                   l13058 211E  
                                                   l13410 1C16  
                                                   l12610 4B9E  
                                                   l12602 4B84  
                                                   l14114 06C0  
                                                   l14050 048A  
                                                   l14034 045E  
                                                   l15002 61F8  
                                                   l11724 67DA  
                                                   l11812 23FA  
                                                   l11804 23F0  
                                                   l11732 2138  
                                                   l12188 145A  
                                                   l12196 14DE  
                                                   l13068 3004  
                                                   l12524 2D3C  
                                                   l13252 36C4  
                                                   l12620 6EFE  
                                                   l12604 4B88  
                                                   l13308 3552  
                                                   l13332 4368  
                                                   l14204 090A  
                                                   l11718 67A6  
                                                   l12294 16FA  
                                                   l12286 16B6  
                                                   l12198 14F0  
                                                   l12518 2CD2  
                                                   l12470 57BE  
                                                   l13430 1C7A  
                                                   l12390 675E  
                                                   l13254 36D8  
                                                   l12358 7408  
                                                   l13350 4414  
                                                   l14214 09A8  
                                                   l14142 074C  
                                                   l14054 0498  
                                                   l14046 0472  
                                                   l14310 2736  
                                                   l11920 5170  
                                                   l11912 5150  
                                                   l11904 5136  
                                                   l12296 1706  
                                                   l13184 661E  
                                                   l12536 2DFA  
                                                   l12464 5798  
                                                   l13432 1C88  
                                                   l12384 6748  
                                                   l13256 36DC  
                                                   l13336 438A  
                                                   l14152 07A0  
                                                   l14128 0746  
                                                   l14144 0764  
                                                   l11834 6082  
                                                   l11594 2AA8  
                                                   l11746 215E  
                                                   l12802 198A  
                                                   l12378 5FE0  
                                                   l12714 4F80  
                                                   l12730 500E  
                                                   l12466 579E  
                                                   l13362 6CEA  
                                                   l13258 3712  
                                                   l13290 3460  
                                                   l14162 07A6  
                                                   l14082 0590  
                                                   l14330 27CE  
                                                   l11676 4E14  
                                                   l11836 608E  
                                                   l13540 765E  
                                                   l11684 7198  
                                                   l11940 51B0  
                                                   l11924 517A  
                                                   l11596 2AB2  
                                                   l11780 2290  
                                                   l11772 21D0  
                                                   l11756 2184  
                                                   l12812 19A2  
                                                   l12804 1998  
                                                   l12740 5028  
                                                   l14404 0E70  
                                                   l13428 1C72  
                                                   l13364 6D04  
                                                   l12396 677A  
                                                   l12388 6756  
                                                   l12556 670E  
                                                   l14252 0A48  
                                                   l14164 07B8  
                                                   l14332 27F0  
                                                   l16004 57FA  
                                                   l11678 4E64  
                                                   l11846 60C0  
                                                   l11838 6092  
                                                   l11862 65A4  
                                                   l11854 6572  
                                                   l11942 51B4  
                                                   l11926 5182  
                                                   l15310 3F8A  
                                                   l11782 229A  
                                                   l12734 5018  
                                                   l12726 5008  
                                                   l12494 2C2A  
                                                   l14414 1078  
                                                   l14406 0FA4  
                                                   l13446 1CE0  
                                                   l12398 6782  
                                                   l12646 7302  
                                                   l12558 6714  
                                                   l13622 442C  
                                                   l13606 338E  
                                                   l14254 0A4E  
                                                   l14238 0A0E  
                                                   l14174 07BE  
                                                   l14086 05BC  
                                                   l14094 05C8  
                                                   l14350 2840  
                                                   l14326 27C0  
                                                   l14510 682A  
                                                   l14502 6816  
                                                   l15142 6466  
                                                   l16014 588E  
                                                   l11688 71B4  
                                                   l11856 657E  
                                                   l11944 51BE  
                                                   l11928 518C  
                                                   l15224 5EA6  
                                                   l11792 22E8  
                                                   l12744 503A  
                                                   l12488 2C14  
                                                   l14424 1144  
                                                   l13464 1DB4  
                                                   l13384 1BA4  
                                                   l12680 6F4A  
                                                   l12648 730A  
                                                   l12592 4AEC  
                                                   l13288 344C  
                                                   l13800 62EE  
                                                   l13608 3398  
                                                   l13616 7560  
                                                   l14248 0A20  
                                                   l14256 0A54  
                                                   l14344 282E  
                                                   l14504 681A  
                                                   l14600 5256  
                                                   l15144 6478  
                                                   l13720 4656  
                                                   l16016 5890  
                                                   l11890 4C1C  
                                                   l11858 6582  
                                                   l11954 51DE  
                                                   l11794 22F2  
                                                   l11786 22BC  
                                                   l12842 1AD8  
                                                   l12826 1A02  
                                                   l12818 19E0  
                                                   l12738 5024  
                                                   l12498 2C3E  
                                                   l14434 11FC  
                                                   l14442 1276  
                                                   l14418 1142  
                                                   l13810 663A  
                                                   l12914 41CA  
                                                   l12906 4192  
                                                   l13458 1D5E  
                                                   l12578 6FBC  
                                                   l13634 44DE  
                                                   l14274 0AA6  
                                                   l14266 0A96  
                                                   l14258 0A5A  
                                                   l14186 0828  
                                                   l14178 07CC  
                                                   l14362 28F2  
                                                   l14514 6832  
                                                   l15154 6490  
                                                   l15138 6460  
                                                   l13714 45C0  
                                                   l16018 5894  
                                                   l11884 4BCC  
                                                   l11956 51E8  
                                                   l11788 22C6  
                                                   l12836 1AA0  
                                                   l12780 18A8  
                                                   l14460 1340  
                                                   l12932 4280  
                                                   l12924 4234  
                                                   l13636 44E2  
                                                   l14188 0832  
                                                   l14292 0AD0  
                                                   l14364 28F6  
                                                   l14604 5270  
                                                   l15148 6486  
                                                   l15172 6E62  
                                                   l13572 5450  
                                                   l13564 5432  
                                                   l16132 5586  
                                                   l16124 5572  
                                                   l11894 4C7E  
                                                   l12774 1882  
                                                   l14470 1384  
                                                   l14454 12D2  
                                                   l13814 6650  
                                                   l12942 58AA  
                                                   l12950 5944  
                                                   l12870 5A6C  
                                                   l12862 5A18  
                                                   l13662 5484  
                                                   l13830 2EBE  
                                                   l14374 2998  
                                                   l14518 6838  
                                                   l14614 52A0  
                                                   l15158 6496  
                                                   l16150 55B0  
                                                   l11896 4C80  
                                                   l14800 5698  
                                                   l15248 3EDA  
                                                   l14712 3B1A  
                                                   l12952 594E  
                                                   l12872 5A6E  
                                                   l12880 5A88  
                                                   l13680 54B4  
                                                   l13672 54A6  
                                                   l13840 2F2A  
                                                   l13832 2ED2  
                                                   l13920 010C  
                                                   l14368 2966  
                                                   l14640 5AF6  
                                                   l14616 52A4  
                                                   l15168 6E5C  
                                                   l15176 6E74  
                                                   l15184 6AD2  
                                                   l13568 5440  
                                                   l16144 55AA  
                                                   l16128 5578  
                                                   l14810 5730  
                                                   l12794 1942  
                                                   l12786 18E4  
                                                   l14466 1356  
                                                   l13818 6666  
                                                   l13770 612A  
                                                   l13762 6116  
                                                   l12946 590C  
                                                   l12938 42C6  
                                                   l12874 5A78  
                                                   l12970 1ED0  
                                                   l12962 1E52  
                                                   l13666 549A  
                                                   l13658 5476  
                                                   l13842 2F40  
                                                   l13834 2EE8  
                                                   l13826 2E0E  
                                                   l14298 0B0C  
                                                   l13914 00CC  
                                                   l14564 3992  
                                                   l14812 5734  
                                                   l12788 191C  
                                                   l14396 0D76  
                                                   l12948 5942  
                                                   l12884 5A98  
                                                   l12980 1F16  
                                                   l13684 54C0  
                                                   l13844 2F56  
                                                   l13836 2EFE  
                                                   l14660 5B2E  
                                                   l14636 5ADC  
                                                   l14492 6804  
                                                   l14724 72DE  
                                                   l15188 6AD8  
                                                   l14830 37EE  
                                                   l14574 39DA  
                                                   l14566 39A8  
                                                   l15454 6698  
                                                   l12798 196C  
                                                   l11998 52DE  
                                                   l12990 1F6A  
                                                   l13846 2F6C  
                                                   l13838 2F14  
                                                   l13854 2F7E  
                                                   l13862 2FCA  
                                                   l13942 01AC  
                                                   l14654 5B24  
                                                   l14486 67FA  
                                                   l14902 597C  
                                                   l14824 37C2  
                                                   l14832 37F2  
                                                   l15456 669C  
                                                   l15376 46B8  
                                                   l13776 613C  
                                                   l12888 5AA0  
                                                   l12984 1F3C  
                                                   l13856 2FAC  
                                                   l14656 5B2A  
                                                   l14592 5232  
                                                   l14920 4040  
                                                   l12986 1F52  
                                                   l12898 6A50  
                                                   l13866 2FE8  
                                                   l13938 019C  
                                                   l14498 6810  
                                                   l14690 3CAC  
                                                   l13884 61BC  
                                                   l14772 63A2  
                                                   l15388 46F6  
                                                   l12988 1F64  
                                                   l13964 0248  
                                                   l14838 3848  
                                                   l13798 62EA  
                                                   l13982 02C2  
                                                   l14942 40E2  
                                                   l14926 405C  
                                                   l14862 2512  
                                                   l14854 2458  
                                                   l13976 02B4  
                                                   l14928 4068  
                                                   l14936 408C  
                                                   l14864 252C  
                                                   l14872 25C4  
                                                   l15576 6AF4  
                                                   l14788 6408  
                                                   l14972 4A48  
                                                   l14884 2668  
                                                   l14982 4A6E  
                                                   l14976 4A4E  
                                                   l14992 4AAA  
                                                   l14898 596A  
                                                   ?_main 0001  
                                                   ?_rand 0070  
                                              _FillSubKey 6A60  
                                         _TMR1_StartTimer 77F6  
                       __end_of_IOCB4_SetInterruptHandler 7728  
                                           ?_RADIO_SetCRC 0001  
                                         __end_of___lldiv 60E0  
                                         RADIO_Transmit@i 00A4  
                                                   _T1CON 000FCD  
                                         __end_of___llmod 65C4  
                                                   u12540 6DA2  
                                       ??_EnableChannels1 006D  
                                                   _LATC2 007C5A  
                                                   u13290 1504  
                                    RxJoinResponse@status 0001  
                                                   u16011 029E  
                                                   _LATD3 007C63  
                                                   u12580 67CE  
                                                   u13621 48C0  
                                                   u14510 1ECE  
                                                   u13295 14FA  
                                                   u12760 5FFE  
                       __end_of_AckRetransmissionCallback 4AB4  
                  SearchAvailableChannel@randomNumberCopy 0080  
                                                   u14185 1866  
                                                   u16210 06BA  
                                                   u12587 67C4  
                                                   u13395 15FE  
                                                   u14710 3136  
                                                   u13760 2D58  
                                                   u17040 12A2  
                                                   u16160 04D6  
                                                   u13745 2CF0  
                                                   u15610 457E  
                                                   u14725 3158  
                                                   u16350 086A  
                                                   u16190 05B8  
                                                   u17310 3C20  
                                                   u14735 317A  
                                                   u13775 2D7A  
                                                   u17055 12C2  
                                                   u15455 4504  
                                                   u16088 041E  
                                                   u17320 3C36  
                                                   u13785 2D9C  
                                                   u17065 12E4  
                                                   u15625 45B0  
                                                   u16418 09F8  
                                                   u17330 3D32  
                                                   u15298 541C  
                                                   u18115 6444  
                                                   u15635 45D2  
                                                   u16268 0730  
                                                   u16188 057A  
                                                   u17325 3C2C  
                                                   u17335 3D28  
                                                   u17360 3A8E  
                                                   u17370 3AA4  
                                                   u14794 690A  
                                                   u15930 017A  
                                                   u15658 4666  
                                                   u14795 6904  
                                                   u15595 624C  
                                                   u17380 3BA0  
                                                   u16805 2910  
                                                   u17375 3A9A  
                                                   u17560 3816  
                                                   u16488 0A80  
                                                   u16905 0E18  
                                                   u17385 3B96  
                                                   u16930 0FE4  
                                                   u15778 62D4  
                                                   u16675 2774  
                                                   u16940 1002  
                                                   u17660 2618  
                                                   u17805 40D2  
                                                   u16950 1106  
                                                   u17575 3838  
                                                   u17815 40F4  
                                                   u17585 385A  
                                                   u16945 0FF8  
                                                   u16955 10FC  
                                                   u16875 0B90  
                                                   u17675 2658  
                                                   u16885 0C04  
                                                   u17685 2682  
                                                   u17790 40A0  
                                                   u17918 4A6C  
                                                   u19518 587A  
                                                   u16895 0DA4  
                                                   u17890 4A42  
                                                   u17958 4A94  
                                                   u19807 6B12  
                                                   u19817 6B22  
                                                   u19770 559E  
                                                   u19827 719E  
                                                   u17998 6214  
                                         __end_of___lwmod 6D86  
                                                   u19797 55B6  
                                                   i2l214 6A14  
                                           ?_RADIO_RxDone 0001  
                             __size_of_RADIO_ReceiveStart 0200  
                     __size_of_LORAWAN_SetChannelIdStatus 0038  
                                           ?_RADIO_TxDone 0001  
                                                   _TMR1H 000FCF  
                                                   _TMR1L 000FCE  
                                                   _TRISA 000F92  
                                                   _TRISB 000F93  
                                                   _TRISC 000F94  
                                                   _TRISD 000F95  
                                                   _TRISE 000F96  
                                                   _TRISF 000F97  
                                                   _TRISG 000F98  
                                __size_of_RADIO_RxTimeout 0028  
                                           __CFG_WRT0$OFF 000000  
                                           __CFG_WRT1$OFF 000000  
                           ?_SelectChannelForTransmission 0001  
                                           __CFG_WRT2$OFF 000000  
                                     ___lmul@multiplicand 0068  
                                           __CFG_WRT3$OFF 000000  
                                          _RxJoinResponse 77C6  
                                 ?_SetReceptionNotOkState 0001  
                                          __CFG_EBTR0$OFF 000000  
                                          __CFG_FCMEN$OFF 000000  
                                          __CFG_EBTR1$OFF 000000  
                                          __CFG_EBTR2$OFF 000000  
                                          __CFG_EBTR3$OFF 000000  
                                    ??_PrepareSessionKeys 0074  
                                        __end_of_TMR1_ISR 72CE  
                               FindSmallestDataRate@found 0065  
                                           __CFG_WRTB$OFF 000000  
                                           __CFG_WRTC$OFF 000000  
                                           __CFG_WRTD$OFF 000000  
                                          ?_INT1_CallBack 0001  
                                  LORAWAN_RxTimeout@minim 00A9  
                             __size_of_RADIO_SetBandwidth 0008  
                                          __CFG_EBTRB$OFF 000000  
                          __size_of_RADIO_WatchdogTimeout 0042  
                                                   __rcon 0046  
                                 __end_of_PIN_MANAGER_IOC 7714  
                                                   _flash 6AF2  
                            ??_IncludeMacCommandsResponse 0068  
                           __end_of_RADIO_WatchdogTimeout 6C04  
      RADIO_WriteFSKFrequencyDeviation@frequencyDeviation 0071  
                          ??_INT1_DefaultInterruptHandler 0001  
                               __size_of_ValidateDataRate 0014  
                                                   _randx 0056  
                          LORAWAN_RxDone@frmPayloadLength 03B1  
                           ValidateChannelMaskCntl@result 0064  
                                                   _srand 76B2  
                                        UpdateDataRange@i 0067  
                                LORAWAN_RxDone@joinAccept 03AF  
                                  _UpdateJoinSuccessState 4552  
                                                   main@x 00F6  
                                          ?_INT2_CallBack 0001  
                                _INT1_SetInterruptHandler 773C  
                                              _ComputeMic 683C  
                                 __end_of_TMR1_Initialize 6EEA  
                                  UpdateCfList@joinAccept 0070  
                                                   pclath 000FFA  
                                                   tablat 000FF5  
                                 RADIO_WriteFrequency@num 0079  
                          __size_of_UpdateCurrentDataRate 0008  
                          __size_of_UpdateChannelIdStatus 0106  
                              PrepareSessionKeys@appNonce 0070  
                                  UpdateChannelIdStatus@i 0067  
                           __end_of_UpdateCurrentDataRate 779A  
                            __size_of_RADIO_FSKPacketSent 0192  
                           __end_of_UpdateChannelIdStatus 48B6  
                                                   plusw0 000FEB  
                                                   plusw1 000FE3  
                                                   plusw2 000FDB  
                                          ?_INT3_CallBack 0001  
                                UpdateFrequency@channelId 0068  
                                                   status 000FD8  
                                      _MacExecuteCommands 2E02  
                                UpdateCfList@channelIndex 0079  
                                     __size_of_RADIO_DIO0 0064  
                                     __size_of_RADIO_DIO1 003A  
                                     __size_of_RADIO_DIO2 0048  
                                     __size_of_RADIO_DIO3 0018  
                                     __size_of_RADIO_DIO4 0018  
                                     __size_of_RADIO_DIO5 0018  
                      PrepareJoinRequestFrame@bufferIndex 00EA  
                                         _TMR1_WriteTimer 751A  
                       TMR_OverrideRemaining@oldReloadVal 0074  
                                     LORAWAN_RxDone@fPort 03A0  
                                __size_of_RADIO_WriteMode 00D8  
                                       __end_of_AESEncode 2428  
                                     __size_of_RADIO_Init 0196  
                        __end_of_RADIO_WriteConfiguration 182A  
                                         ?_SPI_Initialize 0001  
                         ??_IOCB4_DefaultInterruptHandler 0001  
                            __size_of_RADIO_SetIQInverted 000A  
                               __size_ofi2_TMR1_ReadTimer 0020  
                               RADIO_WriteMode@dioMapping 006C  
                                         __initialization 5B44  
                            __size_ofi2_SwTimersInterrupt 00EE  
                                        LORAWAN_Send@port 00E1  
                             __size_of_DIO1_ISR_Lora_Init 000C  
                                     ?_MacExecuteCommands 007A  
                                            __end_of_main 55D6  
                              AssembleEncryptionBlock@dir 0075  
                                            __end_of_rand 697C  
                                       ?_TMR_GetDeltaTime 006A  
                                           AESCmac@padded 0130  
                                __end_of_RADIO_ReadRandom 5EF6  
                                        _SetJoinFailState 716C  
                                 RADIO_WriteMode@blocking 006A  
                                    _UpdateJoinInProgress 756C  
                                    _ExecuteRxTimingSetup 7286  
                                       __end_of_IOCB4_ISR 7488  
                               __size_of_UpdateDLSettings 001A  
                               __size_of_ValidateRxOffset 0014  
                             ?_INTERRUPT_InterruptManager 0001  
                                      ??_TMR_GetDeltaTime 006E  
                                           AESCmac@output 00CE  
                            __end_of_RADIO_SetOutputPower 77A2  
                                               ??_AESCmac 00D3  
                                          ??_RADIO_SetCRC 0064  
                                  MacExecuteCommands@done 007F  
                                 InitDefault868Channels@i 006E  
                                                  ??_main 00F3  
                                                  ??_rand 0072  
                                          ??_RADIO_RxDone 00ED  
                                          ??_RADIO_TxDone 00D0  
                                           __activetblptr 000002  
                                  ?_RADIO_SetLoRaSyncWord 0001  
                                  __end_of_RxJoinResponse 77CC  
                       __end_of_LORAWAN_LinkCheckCallback 4182  
                          __end_of_SetReceptionNotOkState 6302  
                             __end_of_UpdateReceiveDelays 6A60  
                         __end_of_AssembleEncryptionBlock 57F2  
                                  ??_SystemBlockingWaitMs 0068  
                                        ??_StartReTxTimer 0094  
                        CountfOptsLength@macCommandLength 006A  
                                          __CFG_RETEN$OFF 000000  
                                      EncodeShiftRow@temp 0066  
                                ??_InitDefault868Channels 006E  
                             __size_of_RADIO_RegisterRead 0026  
                                       ?_HALSPICSDeassert 0001  
                                        ?_SwTimersExecute 0001  
                                           _TMR_SwapTimer 6D86  
                                              _RxDataDone 7820  
                                          _EnableChannels 7614  
                                __end_of_SPI_Exchange8bit 7688  
                               ??_PrepareJoinRequestFrame 00E3  
                                          _HALSPICSAssert 7802  
                                    ??_MacExecuteCommands 007D  
                                             ?_CheckFlags 0064  
                                 LORAWAN_TxDone@timeOnAir 009E  
                                              _ExtractMic 6C04  
                                                  ?_flash 0001  
                         __size_of_SearchAvailableChannel 00E0  
                                      ??_HALSPICSDeassert 0064  
                                  _HALResetPinOutputValue 7652  
                                        ___llmod@dividend 0064  
                                                  _ANCON0 000F5D  
                                                  _ANCON1 000F5C  
                                                  ?_srand 0075  
                  __end_of_LORAWAN_ReceiveWindow1Callback 5A00  
                 __size_of_LORAWAN_ReceiveWindow1Callback 00AE  
                          _LORAWAN_ReceiveWindow1Callback 5952  
                                         _ValidateTxPower 72F0  
                                                  _T1GCON 000FAA  
                                 SwTimerReadValue@timerId 0093  
                                 TMR1_WriteTimer@timerVal 0064  
                                          _ExecuteLinkAdr 356A  
                                         __CFG_BBSIZ$BB2K 000000  
                                                  i2l1362 7548  
                  __end_of_LORAWAN_ReceiveWindow2Callback 545C  
                 __size_of_LORAWAN_ReceiveWindow2Callback 00C8  
                          _LORAWAN_ReceiveWindow2Callback 5394  
                                                  i2l2442 0038  
                                                  i2l2444 0044  
                                                  i2l2452 006A  
                                                  i2l2446 0050  
                                          __CFG_WDTEN$OFF 000000  
                                                  i2l2448 0060  
                           __size_of_RADIO_SetFSKSyncWord 002C  
                                                  i2l9716 4F00  
                                                  i2l9718 4F50  
                                                  _OSCCON 000FD3  
                                       ??_RADIO_GetStatus 0064  
                        __size_of_ValidateChannelMaskCntl 0018  
                         __size_of_InitDefault433Channels 0066  
                                                  _SSPADD 000FC8  
                                                  _TRISC2 007CA2  
                                           ?_LORAWAN_Init 00A4  
                                           ?_LORAWAN_Join 0001  
                        AssembleEncryptionBlock@firstByte 0073  
                                                  _SSPBUF 000FC9  
                                           ?_LORAWAN_Send 00E1  
                         __size_of_AutomaticReplyCallback 001E  
                              __size_of_LORAWAN_RxTimeout 02B6  
                                       ?_ExecuteDevStatus 0064  
                              __end_of_DIO0_ISR_Lora_Init 7708  
                                __size_ofi2_TMR_SwapTimer 003E  
                                       ExecuteLinkAdr@ptr 0071  
                           __size_of_RADIO_WriteFrequency 00DC  
                                                  _STable 7E6D  
                             RADIO_WriteFrequency@num_mod 0075  
                                     LORAWAN_TxDone@delta 00C3  
                             __size_of_ComputeSessionKeys 007E  
                                               AESCmac@k1 0110  
                                               AESCmac@k2 0100  
                                     LORAWAN_TxDone@found 00C2  
                                         _CheckMcastFlags 60E0  
                                     LORAWAN_TxDone@minim 00CB  
                                      ??_ExecuteDevStatus 0066  
                                                  _Random 7312  
                                          __CFG_XINST$OFF 000000  
                                     LORAWAN_TxDone@ticks 00C7  
                      SearchAvailableChannel@randomNumber 0083  
                    __end_of_TMR1_DefaultInterruptHandler 7824  
                   __size_of_TMR1_DefaultInterruptHandler 0002  
                            _TMR1_DefaultInterruptHandler 7822  
                                             ?_GetRx1Freq 0064  
                           ValidateDataRange@dataRangeNew 0067  
                                 _RADIO_FHSSChangeChannel 70BE  
                                               ??___abdiv 0065  
                                                  ___lmul 5CF2  
                                  ?_RADIO_WriteFSKBitRate 0071  
                                 __end_of_TMR1_StartTimer 77FA  
                                   ?_UpdateJoinInProgress 0001  
                             ?_LORAWAN_LinkCheckConfigure 0094  
                                   ?_ExecuteRxTimingSetup 0069  
                                          __CFG_STVREN$ON 000000  
                                    _FindSmallestDataRate 5A00  
                                               ??___lldiv 006C  
                                               ??___llmod 006C  
                                               ??___lwmod 0076  
                      RADIO_SetChannelFrequency@frequency 0064  
                                         StartReTxTimer@i 009C  
                               ExecuteRxParamSetupReq@ptr 0070  
                                  __size_of_LORAWAN_Reset 015E  
                                                  _memcpy 6794  
                                                  _memset 71C0  
                                                  clear_0 5B8C  
                                                  clear_1 5B9E  
                                                  clear_2 5BAA  
                                                  clear_3 5BB6  
                                                  clear_4 5BC2  
                                                  clear_5 5BCE  
                                 SwTimerIsRunning@timerId 0064  
                                                  flash@x 0065  
                             __size_of_DIO5_ISR_Lora_Init 0006  
                                             ?_FillSubKey 0064  
                                       ?_SwTimerIsRunning 0001  
                                       ?_ExecuteLinkCheck 0064  
                                         ?_RxJoinResponse 0001  
                                 __size_of_EncodeShiftRow 0162  
                                  __end_of_EnableChannels 762A  
                              ??_RADIO_UnhandledInterrupt 0068  
                                            ??_HALSPISend 0065  
                    __end_of_INT2_DefaultInterruptHandler 782A  
                   __size_of_INT2_DefaultInterruptHandler 0002  
                            _INT2_DefaultInterruptHandler 7828  
                                            __pdataCOMRAM 0056  
                                  __end_of_HALSPICSAssert 7806  
                       __size_of_RADIO_SetSpreadingFactor 0008  
                            __size_of_ValidateChannelMask 0038  
                                           ??_SwTimerStop 0064  
                                         ??_INT1_CallBack 0001  
                                       ??_SystemTimerInit 0064  
                               ?_RADIO_SetSpreadingFactor 0001  
                                       ?_SwTimerReadValue 008B  
                                      ??_SwTimerIsRunning 0064  
                                          ?_TMR_SwapTimer 006A  
                                       ?_ExecuteDutyCycle 0064  
                                      ??_ExecuteLinkCheck 0066  
                                            __mediumconst 7E6C  
                                                  tblptrh 000FF7  
                                                  tblptrl 000FF6  
                                                  tblptru 000FF8  
                                                  srand@x 0075  
                                         ??_INT2_CallBack 0001  
                                      ??_SwTimerReadValue 008F  
                                         _UpdateDataRange 4AB4  
                                  __end_of_ExecuteLinkAdr 371C  
                                      ??_ExecuteDutyCycle 0066  
               IOCB4_SetInterruptHandler@InterruptHandler 0064  
                TMR1_SetInterruptHandler@InterruptHandler 0064  
                INT3_SetInterruptHandler@InterruptHandler 0064  
                INT0_SetInterruptHandler@InterruptHandler 0064  
                INT2_SetInterruptHandler@InterruptHandler 0064  
                INT1_SetInterruptHandler@InterruptHandler 0064  
                      __end_of_LORAWAN_SetChannelIdStatus 6F22  
                              _LORAWAN_SetChannelIdStatus 6EEA  
                                        ?_PIN_MANAGER_IOC 0001  
                                           AESEncode@aux1 008D  
                                           AESEncode@aux2 008C  
                                           AESEncode@aux3 008E  
                                 __end_of_TMR1_WriteTimer 7536  
                                   __end_of_SwTimerCreate 61C2  
                          ??_SelectChannelForTransmission 0085  
                                             ?_ComputeMic 00DA  
                           __size_of_INTERRUPT_Initialize 0004  
                                         ??_INT3_CallBack 0001  
                                   __end_of_TMR1_CallBack 746A  
                               ExecuteDutyCycle@maxDCycle 0069  
                                       ??_RADIO_RxTimeout 00AE  
                                        ?_TMR1_Initialize 0001  
                             UpdateFrequency@frequencyNew 0064  
                                       _SYSTEM_Initialize 74E2  
                        __size_of_CreateAllSoftwareTimers 0052  
                                 __size_of_GenerateSubkey 0102  
                                          ??_LORAWAN_Init 00A8  
                                          ??_LORAWAN_Join 00EC  
                                          ??_LORAWAN_Send 00E5  
                          __size_of_RADIO_FSKPayloadReady 009E  
                                              __accesstop 0060  
                                 __end_of__initialization 5BD4  
                           __end_of_RADIO_FSKPayloadReady 5B44  
                                          _RADIO_Transmit 2FF2  
                                               ?_INT1_ISR 0001  
                                               ?_INT2_ISR 0001  
                                               ?_INT3_ISR 0001  
                                    LORAWAN_RxDone@buffer 016B  
                                  RADIO_ReadRandom@retVal 0072  
                                        _ConfigureRadioRx 723A  
                                    __size_of_RADIO_Reset 0034  
                                        _ConfigureRadioTx 6C46  
                                     ExecuteDevStatus@ptr 0064  
                        ??_UpdateReceiveWindow2Parameters 0069  
                         ?_UpdateReceiveWindow2Parameters 0064  
                                      ?_SYSTEM_Initialize 0001  
                                    LORAWAN_RxDone@packet 03A9  
                                          _maxPayloadSize 7F6D  
                           RADIO_SetLoRaSyncWord@syncWord 0064  
                                           ___rparam_used 000001  
                              ValidateChannelId@channelId 0066  
                               ExecuteLinkAdr@channelMask 0074  
                                      __end_of_HALSPISend 7782  
                                          __pcstackCOMRAM 0001  
                                              ___inthi_sp 096B  
                                  _SearchAvailableChannel 4F62  
                                 ValidateChannelId@result 0065  
                                   ?_FindSmallestDataRate 0001  
                                            __pidataBANK1 708E  
                                     ??_SYSTEM_Initialize 0068  
                              __end_of_DIO4_ISR_Lora_Init 781C  
                                               ?_TMR1_ISR 0001  
                                     __size_of_CheckFlags 005E  
                           ?_TMR1_DefaultInterruptHandler 0001  
                                _RADIO_WriteConfiguration 13B2  
                                           __end_of_flash 6B38  
                                       ??_RADIO_WriteMode 006B  
                                         _spreadingFactor 7F9B  
                               __size_of_LORAWAN_Mainloop 003C  
                                        ??_EncKeySchedule 0065  
                   __end_of_IOCB4_DefaultInterruptHandler 7826  
                  __size_of_IOCB4_DefaultInterruptHandler 0002  
                           _IOCB4_DefaultInterruptHandler 7824  
                                __end_of_RADIO_WritePower 5394  
                                 ?_ExecuteRxParamSetupReq 0070  
                                           __end_of_srand 76C0  
                                       LORAWAN_RxDone@hdr 03B2  
                                            ??_RADIO_DIO0 00EF  
                                            ??_RADIO_DIO1 00AE  
                                            ??_RADIO_DIO2 007D  
                                            ??_RADIO_DIO3 0069  
                                            ??_RADIO_DIO4 0069  
                                            ??_RADIO_DIO5 0069  
                                  _InitDefault433Channels 63D2  
                                         _UpdateFrequency 6E78  
                                  _AutomaticReplyCallback 73D4  
                             ??_IOCB4_SetInterruptHandler 0066  
                                ??_INTERRUPT_GetDioStatus 0064  
                                            ??_RADIO_Init 0083  
                               SwTimerSetCallback@timerId 0067  
                              LORAWAN_RxDone@channelIndex 03A1  
                          AssembleEncryptionBlock@blockId 0072  
                             __size_of_EXT_INT_Initialize 0046  
                                         _UpdateDutyCycle 6FF8  
                                         ?_EnableChannels 006E  
                                 ??_TMR_OverrideRemaining 0070  
                                 __end_of_ValidateTxPower 7312  
                                         ?_HALSPICSAssert 0001  
                                      _DIO3_ISR_Lora_Init 781C  
                            __end_of_HALResetPinMakeInput 780E  
                                 __size_of_TMR1_ReadTimer 0020  
                        __end_of_INT2_SetInterruptHandler 773C  
                                        RADIO_DIO0@opMode 00F2  
                             RADIO_RegisterRead@readValue 0067  
                                             ?_RxDataDone 0064  
                      __end_of_IncludeMacCommandsResponse 2136  
                              _IncludeMacCommandsResponse 1E44  
                           ?_INT2_DefaultInterruptHandler 0001  
                         __size_of_InitDefault868Channels 0066  
                                UpdateCfList@bufferLength 0074  
                                   LORAWAN_Send@confirmed 00E7  
                                             ?_ExtractMic 006E  
                                                 ??_flash 0064  
                                         ?_ExecuteLinkAdr 0071  
                                        _ValidateDataRate 763E  
                         LORAWAN_GetMaxPayloadSize@result 006E  
                                     __size_of_GetRx1Freq 0012  
                               __end_of_SYSTEM_Initialize 74FE  
                      __size_of_RADIO_SetChannelFrequency 0082  
                                                 ??_srand 0077  
                                  __end_of_RADIO_Transmit 31E0  
                                     ?_DIO3_ISR_Lora_Init 0001  
                                           _LORAWAN_Reset 3ECC  
                              ?_RADIO_SetChannelFrequency 0064  
                                              __pbssBANK1 016E  
                                              __pbssBANK2 0200  
                                              __pbssBANK3 0300  
                                              __pbssBANK4 0400  
                                     __end_of_SwTimerStop 751A  
                              ?_SetCallbackSoftwareTimers 0001  
                                 __end_of_CheckMcastFlags 6152  
                                         __CFG_PLLCFG$OFF 000000  
                                  __end_of_maxPayloadSize 7F75  
                                              ??_INT1_ISR 0001  
                                              ??_INT2_ISR 0001  
                                              ??_INT3_ISR 0001  
                                      SwTimersInterrupt@i 008A  
                                    _RADIO_SetOutputPower 779A  
                                              __pnvCOMRAM 005E  
                                    __end_of_RADIO_SetCRC 7764  
                                  _RADIO_ReceiveStart$749 009A  
                                  __size_of_DIO0_ISR_Lora 0004  
                                 ??_HALResetPinMakeOutput 0064  
                                    __end_of_RADIO_RxDone 52C6  
                              __end_of_RADIO_RxFSKTimeout 6F90  
                                    __end_of_RADIO_TxDone 3D6A  
                                     __size_of_FillSubKey 004A  
                                      __end_of_RADIO_DIO0 649C  
                                      __end_of_RADIO_DIO1 6E78  
                                      __end_of_RADIO_DIO2 6AF2  
                                      __end_of_RADIO_DIO3 75E6  
                                      __end_of_RADIO_DIO4 75CE  
                                      __end_of_RADIO_DIO5 75B6  
                               ??_RADIO_FHSSChangeChannel 007D  
                             __size_of_SwTimerSetCallback 0032  
                               RADIO_SetOutputPower@power 0064  
                                      __end_of_RADIO_Init 3A4E  
                       __size_of_LORAWAN_SetDeviceAddress 0018  
                         ?_LORAWAN_EnterContinuousReceive 0001  
                        ??_LORAWAN_EnterContinuousReceive 009E  
                                                 ?_Random 0077  
                                       ?_CountfOptsLength 0001  
                                  __size_of_DIO1_ISR_Lora 0004  
                               ?_LORAWAN_SetDeviceAddress 0064  
                                        i2_TMR1_ReadTimer 73B4  
                                          FillSubKey@size 0068  
                                         _EnableChannels1 673C  
                                __size_of_HALDIO5PinValue 0006  
                            __size_of_RADIO_RegisterWrite 001E  
                                  ??_UpdateJoinInProgress 0064  
                        __size_of_AssembleEncryptionBlock 00B2  
                                  ??_ExecuteRxTimingSetup 006B  
                                        FillSubKey@source 0064  
            SelectChannelForTransmission@transmissionType 0085  
                                                 ?___lmul 0064  
                  AssembleEncryptionBlock@multicastStatus 0074  
                          __end_of_ExecuteRxParamSetupReq 441E  
                                      ??_CountfOptsLength 0064  
                                  __size_of_DIO2_ISR_Lora 0004  
                                        ?_TMR1_StartTimer 0001  
                                      EncryptFRMPayload@i 00B8  
                                      EncryptFRMPayload@j 00B9  
                                      EncryptFRMPayload@k 00B7  
                                              ??_TMR1_ISR 0028  
                                       ??i2_TMR_SwapTimer 0009  
                                    ??_DIO3_ISR_Lora_Init 0064  
                                        _UpdateDLSettings 7552  
                                        _ValidateRxOffset 762A  
                                                 ?_memcpy 0064  
                                                 ?_memset 0064  
                                          ___lmul@product 006C  
                                       _TMR_ISR_Lora_Init 76D8  
                                  RADIO_RegisterWrite@reg 0067  
                                     __size_of_ComputeMic 0052  
                                  RADIO_Transmit@regValue 00A3  
                            __size_of_RADIO_SetModulation 0008  
                                     _RADIO_FSKPacketSent 3A4E  
                                                 _AESCmac 182A  
                                  ComputeMic@bufferLength 00DE  
                                 __end_of_UpdateDataRange 4BAA  
                                         ??_TMR_SwapTimer 006C  
                                RADIO_WriteFSKBitRate@num 0075  
                                      ?_TMR_ISR_Lora_Init 0001  
                              ??_INT1_SetInterruptHandler 0066  
                                                 i2l10410 4D70  
                                                 i2l10404 4D0C  
                                                 i2l10408 4D6E  
                                                 i2l10380 6DD0  
                                                 i2l10398 4CBC  
                                    EncryptFRMPayload@dir 00A7  
                                      _RADIO_GetPacketSnr 77CC  
                                        __CFG_CANMX$PORTB 000000  
                                    EncryptFRMPayload@key 00AC  
                                   __end_of_UpdateTxPower 7792  
                                                 _REFOCON 000F9A  
                                     _RADIO_SetIQInverted 7750  
                                                 _OSCCON2 000FD2  
                                 __size_of_ConfigureRadio 007C  
                                                 _OSCTUNE 000F9B  
                             __size_ofi2_TMR_GetDeltaTime 00EC  
                                     i2_SwTimersInterrupt 4C9C  
                                     ??_TMR_ISR_Lora_Init 0066  
                                                 _SSPCON1 000FC6  
                                       __end_of_bandwidth 7F94  
                  UpdateReceiveWindow2Parameters@dataRate 0068  
                                __end_of_SetJoinFailState 7196  
                                          ?_LORAWAN_Reset 0001  
                            RADIO_WriteMode@newModulation 0069  
                                                 _SSPSTAT 000FC7  
                                  ValidateDataRate@result 0065  
                                        ?_TMR1_WriteTimer 0064  
                                     ?_RADIO_GetPacketSnr 0001  
                                         ___abdiv@divisor 0064  
                                         ?_RADIO_Transmit 0094  
                                 _ValidateChannelMaskCntl 75E6  
                                         ___abdiv@counter 0065  
                                     StartReTxTimer@minim 0098  
                              AssemblePacket@bufferLength 0169  
                            PrepareSessionKeys@sessionKey 006E  
                                    ?_RADIO_FSKPacketSent 0001  
                                        ??_SPI_Initialize 0064  
                                   TMR_SwapTimer@timerVal 006A  
                       __end_of_RADIO_SetChannelFrequency 5DFA  
                             PrepareJoinRequestFrame@iCtr 00EB  
                               _IOCB4_SetInterruptHandler 771E  
                       __end_of_SetCallbackSoftwareTimers 568C  
                                   ?_RADIO_SetOutputPower 0001  
                               _AckRetransmissionCallback 49B8  
                             PrepareJoinRequestFrame@mhdr 00E9  
                                  __size_of_AESEncodeLoRa 0028  
                       __size_of_INT0_SetInterruptHandler 0002  
                           __size_of_LORAWAN_PlatformInit 0020  
                       __size_of_INT3_SetInterruptHandler 000A  
                               ?_INT0_SetInterruptHandler 0064  
                               ?_INT3_SetInterruptHandler 0064  
                                          _ticksAccounted 0034  
                                           ?_SwTimerStart 0001  
                                              AESCmac@key 00CC  
                                              AESCmac@ptr 0160  
                                 __end_of_spreadingFactor 7FA2  
                                         __CFG_PWRTEN$OFF 000000  
                           UpdateCurrentDataRate@valueNew 0064  
                                                 __Hparam 0000  
                                    ?_RADIO_SetIQInverted 0001  
                              PrepareJoinRequestFrame@mic 00E5  
                                  _InitDefault868Channels 636C  
                                RADIO_RegisterWrite@value 0066  
                                                 __Lparam 0000  
                                  ??_FindSmallestDataRate 0064  
                                LORAWAN_Send@bufferLength 00E4  
                                   _StopAllSoftwareTimers 697C  
                                         __size_of_Random 0022  
                                    ?i2_SwTimersInterrupt 0017  
                                 __end_of_UpdateFrequency 6EB2  
                                     AssemblePacket@fCtrl 00DE  
                                                 ___abdiv 67EA  
                                     __size_of_RxDataDone 0002  
                                              AESEncode@i 008F  
                                               _AESEncode 2136  
                                  ValidateRxOffset@result 0065  
                               __end_of_TMR_ISR_Lora_Init 76E4  
                                         __size_of___lmul 0086  
                             __size_of_DIO2_ISR_Lora_Init 000C  
                                 __end_of_UpdateDutyCycle 702A  
                                                 ___lldiv 606A  
                                     __size_of_ExtractMic 0042  
                                    ??_RADIO_GetPacketSnr 0064  
                                                 ___llmod 6562  
                                       ?_RADIO_ReadRandom 0070  
                                                 ___lwmod 6D48  
                               SwTimerIsRunning@isRunning 0065  
                                 ??_RADIO_SetLoRaSyncWord 0064  
                                    ValidateChannelMask@i 0066  
                                                 __pcinit 5B44  
                      __size_of_LORAWAN_GetMaxPayloadSize 0040  
                                                 _appSKey 01CD  
                                         __size_of_memcpy 0056  
                              __end_of_RADIO_ReceiveStart 2E02  
                                   RADIO_Init@radioBuffer 007D  
                                         __size_of_memset 002A  
                                                 __ramtop 0F00  
                        EncryptFRMPayload@multicastStatus 00B1  
                                      ??_RADIO_ReadRandom 0072  
                              ?_LORAWAN_GetMaxPayloadSize 0001  
           RADIO_SetFrequencyHopPeriod@frequencyHopPeriod 0064  
                                                 __ptext0 551A  
                                                 __ptext1 7334  
                                                 __ptext2 6AF2  
                                                 __ptext3 74E2  
                                                 __ptext4 6EB2  
                                                 __ptext5 77F6  
                                                 __ptext6 76C0  
                                                 __ptext7 6B7E  
                                                 __ptext8 76CC  
                                                 __ptext9 7354  
                                    __end_of_LORAWAN_Init 66E0  
                                    __end_of_LORAWAN_Join 5C6A  
                                    __end_of_LORAWAN_Send 551A  
                                           _DIO0_ISR_Lora 7816  
                          ??_TMR1_DefaultInterruptHandler 0001  
                         RADIO_SetFSKSyncWord@syncWordLen 0070  
                                          _EncodeShiftRow 3D6A  
                                               _IOCB4_ISR 746A  
                              ExecuteNewChannel@frequency 0073  
                         __size_of_INTERRUPT_GetDioStatus 000E  
                                               _T1CONbits 000FCD  
                      SelectChannelForTransmission@result 0086  
                                 __size_of_LORAWAN_RxDone 0A9E  
                                   _OSCILLATOR_Initialize 76CC  
                          __end_of_UpdateJoinSuccessState 4684  
                                 __size_of_LORAWAN_TxDone 0880  
                              __end_of_RADIO_SetBandwidth 77BA  
                                         _RADIO_GetStatus 77D2  
                                        ?_ValidateTxPower 0001  
                                 ?_HALResetPinOutputValue 0001  
                            __end_of_macEndDevCmdReplyLen 7F9B  
                       __size_of_TMR1_SetInterruptHandler 000A  
                                           _DIO1_ISR_Lora 7812  
                                             _SwTimerStop 74FE  
                                                 _payload 01BB  
                                ??_PIN_MANAGER_Initialize 0066  
                               ?_TMR1_SetInterruptHandler 0064  
                                       __CFG_MSSPMSK$MSK7 000000  
                                                 _nwkSKey 01DD  
                             IncludeMacCommandsResponse@i 006E  
                                           ?_UpdateCfList 0070  
                                       _ExecuteNewChannel 33A8  
                             __size_of_PrepareSessionKeys 007C  
                                            ??_CheckFlags 0066  
                           RADIO_SetModulation@modulation 0064  
                                 UpdateDLSettings@dlRx2Dr 0065  
                               __size_of_TMR_GetDeltaTime 00EC  
                                       ?_SPI_Exchange8bit 0001  
                                           _DIO2_ISR_Lora 780E  
                              __size_of_SYSTEM_Initialize 001C  
                    __end_of_LORAWAN_SetNetworkSessionKey 7142  
                   __size_of_LORAWAN_SetNetworkSessionKey 002A  
                            _LORAWAN_SetNetworkSessionKey 7118  
                                      ?_ExecuteNewChannel 0070  
                                              _sendPacket 7334  
                              RADIO_WriteMode@currentMode 006D  
                                        ComputeMic@buffer 00DC  
                                    end_of_initialization 5BD4  
                                 _CreateAllSoftwareTimers 688E  
                                     SwTimerCreate@retVal 0064  
                                _INT2_SetInterruptHandler 7732  
                                      ??_SPI_Exchange8bit 0064  
                                   ??_RADIO_FSKPacketSent 00D0  
                                    SPI_Exchange8bit@data 0064  
                                          _GenerateSubkey 48B6  
                                   _RADIO_WatchdogTimeout 6BC2  
                          ??_INT2_DefaultInterruptHandler 0001  
                                              _modulation 7F75  
                                        ?_CheckMcastFlags 0064  
                                  ExtractMic@bufferLength 0070  
                                                 memcpy@d 006A  
                                                 memcpy@n 0068  
                                                 memcpy@s 006C  
                                 __end_of_EnableChannels1 6794  
                                                 memset@c 0066  
                                                 memset@n 0068  
                                                 memset@p 006A  
                               _LORAWAN_LinkCheckCallback 402A  
                                           __Lmediumconst 7E6C  
                                          ??_SwTimerStart 008B  
                                     ??_ExecuteNewChannel 0072  
                                               i2u1095_40 6DE0  
                                   _UpdateCurrentDataRate 7792  
                                   _UpdateChannelIdStatus 47B0  
                                 ??_RADIO_WriteFSKBitRate 0075  
                                   ??_RADIO_SetIQInverted 0064  
                              __end_of_DIO1_ISR_Lora_Init 76FC  
                                         ___lldiv@divisor 0068  
                                     _ValidateChannelMask 6F22  
                                              _ticksAdded 0038  
                             HALResetPinOutputValue@value 0064  
                                EncodeShiftRow@stateTable 0064  
                                               i2u1957_40 72C4  
                               __size_of_HALSPICSDeassert 0004  
                                ValidateDataRate@dataRate 0064  
                                         ___lldiv@counter 0070  
                                           _DIO5_ISR_Lora 000000  
                             TMR_OverrideRemaining@tmrVal 0072  
                                   ??i2_SwTimersInterrupt 001B  
                                ExecuteLinkAdr@redundancy 0077  
                                       GenerateSubkey@key 00A4  
                                    _HALResetPinMakeInput 780A  
                                            ??_GetRx1Freq 0068  
                           UpdateDLSettings@dlRx1DrOffset 0064  
                              LORAWAN_Init@RxJoinResponse 00A6  
                              LORAWAN_RxDone@bufferLength 016D  
                        __end_of_RADIO_SetSpreadingFactor 77AA  
                      AssembleEncryptionBlock@bufferIndex 0076  
                                                 postdec1 000FE5  
                                                 postdec2 000FDD  
                                              ?_AESEncode 006A  
                                         _SystemTimerInit 77BA  
                                                 postinc0 000FEE  
                                                 postinc1 000FE6  
                                                 postinc2 000FDE  
                                        ??_RxJoinResponse 0064  
                                        _LORAWAN_Mainloop 6E02  
                            __end_of_RADIO_SetFSKSyncWord 7118  
                                      LORAWAN_Join@result 00ED  
                                      __end_of_CheckFlags 6682  
                               ValidateTxPower@txPowerNew 0065  
                                          AESEncode@block 006A  
                       SearchAvailableChannel@maxChannels 0082  
                                  __end_of_EncodeShiftRow 3ECC  
                                      _DIO0_ISR_Lora_Init 76FC  
                                       ??_HALDIO5PinValue 0064  
                                          ?_DIO0_ISR_Lora 0001  
                                   _INT1_InterruptHandler 01ED  
                                               _PORTBbits 000F81  
                                            ??_FillSubKey 0069  
                                        RxDataDone@status 0067  
                            SwTimersInterrupt@timeElapsed 0082  
                                           _AESEncodeLoRa 7212  
                               __size_of_ExecuteDevStatus 000A  
                            __end_of_RADIO_WriteFrequency 511E  
                              __end_of_RADIO_RegisterRead 7286  
                       __end_of_LORAWAN_GetMaxPayloadSize 6D0A  
                          __end_of_HALResetPinOutputValue 7666  
                                              ?_IOCB4_ISR 0001  
                                        ?_UpdateDataRange 0064  
                                __end_of_ConfigureRadioRx 7260  
                                __end_of_ConfigureRadioTx 6C88  
                                         _RADIO_RxTimeout 71EA  
                          UpdateChannelIdStatus@channelId 0066  
                               __end_of_ExecuteNewChannel 356A  
                                        EnableChannels1@i 006D  
                                 __size_of_AssemblePacket 02FE  
                                          ?_DIO1_ISR_Lora 0001  
                                    ?_ValidateChannelMask 0064  
                                        __CFG_FOSC$INTIO2 000000  
                                       _SwTimerSetTimeout 6C88  
                                          _TMR1_ReadTimer 7394  
                                          ??_UpdateCfList 0072  
                                              _txPower868 7FA2  
                                     ?_DIO0_ISR_Lora_Init 0001  
                                         ??_LORAWAN_Reset 00A3  
                                          ?_DIO2_ISR_Lora 0001  
                           __size_of_SystemBlockingWaitMs 002A  
                               ??_ValidateChannelMaskCntl 0064  
                                      ?_SwTimerSetTimeout 0071  
                             __size_of_MacExecuteCommands 01F0  
                                    ExecuteNewChannel@ptr 0070  
                                ??_UpdateMinMaxChDataRate 0064  
                                  __end_of_GenerateSubkey 49B8  
                                           RADIO_RxDone@i 00EE  
                                   __size_of_RADIO_SetCRC 000A  
                                 AssemblePacket@macCmdIdx 00DF  
                             ?_LORAWAN_SetChannelIdStatus 0068  
                                          _localDioStatus 0174  
                                       __CFG_SOSCSEL$HIGH 000000  
                                      __end_of_GetRx1Freq 7678  
                                   __size_of_RADIO_RxDone 00D0  
                                            ??_ComputeMic 00DF  
                            __size_of_UpdateReceiveDelays 004A  
                                   __size_of_RADIO_TxDone 018A  
                                  ??_RADIO_SetOutputPower 0064  
                         EncryptFRMPayload@macBufferIndex 00AE  
                           ?_LORAWAN_SetNetworkSessionKey 006E  
                                 UpdateMinMaxChDataRate@i 0065  
                                 LORAWAN_Reset@ismBandNew 00A3  
                               __size_of_SwTimerIsRunning 0020  
                              __end_of_ComputeSessionKeys 5E78  
                                     ??_SwTimerSetTimeout 0075  
                                __size_of_SwTimersExecute 00B0  
                               __size_of_ExecuteLinkCheck 0032  
                                  _INTERRUPT_GetDioStatus 76A4  
                                         _RADIO_WriteMode 511E  
                              ??_RADIO_WriteConfiguration 007F  
                                 ?_SearchAvailableChannel 0079  
                               __size_of_SwTimerReadValue 003E  
                             RADIO_FSKPacketSent@irqFlags 00DC  
                               __size_of_ExecuteDutyCycle 004E  
                                  ?_StopAllSoftwareTimers 0001  
                                 AssemblePacket@confirmed 00DC  
                                      __end_of_FillSubKey 6AAA  
                                 _AssembleEncryptionBlock 5740  
                                       __size_of_INT1_ISR 0006  
                                       __size_of_INT2_ISR 0006  
                                       __size_of_INT3_ISR 0006  
                                    ??_DIO0_ISR_Lora_Init 0066  
                                   ?_HALResetPinMakeInput 0001  
                                          __end_of_STable 7F6D  
                                     AESEncodeLoRa@useKey 0094  
                              SwTimerSetCallback@callback 0064  
                LORAWAN_SetDeviceAddress@deviceAddressNew 0064  
                                        ?_UpdateFrequency 0064  
                                      LORAWAN_Send@buffer 00E2  
                                          __end_of_Random 7334  
                                 ?_InitDefault433Channels 0001  
                              __size_of_TMR_ISR_Lora_Init 000C  
                                __end_of_ValidateDataRate 7652  
                            __end_of_INTERRUPT_Initialize 77FE  
                          EnableChannels1@channelMaskCntl 006A  
                          EnableChannels1@channelIndexMax 006C  
                          EnableChannels1@channelIndexMin 006B  
                     LORAWAN_SetChannelIdStatus@channelId 006A  
                                        ?_UpdateDutyCycle 0064  
                            _INT0_DefaultInterruptHandler 000000  
                              __end_of_DIO5_ISR_Lora_Init 77C6  
                                 __end_of_RADIO_GetStatus 77D8  
                                          __end_of___lmul 5D78  
                                      LORAWAN_Send@result 00E6  
                                        ??_EnableChannels 0071  
                               i2TMR1_WriteTimer@timerVal 0001  
                                           ?_TMR_ISR_lora 0001  
                                        ??_HALSPICSAssert 0064  
                     TMR_OverrideRemaining@ticksRemaining 006C  
                                       ?_RADIO_WritePower 0001  
                                           __pidataCOMRAM 7782  
                                         ?_EncodeShiftRow 0064  
                                          ?_AESEncodeLoRa 0090  
                                       __size_of_TMR1_ISR 0024  
                                      __end_of_ComputeMic 688E  
                                               Random@max 0077  
                                          __end_of_memcpy 67EA  
                                  ?_OSCILLATOR_Initialize 0001  
                               __end_of_SwTimerSetTimeout 6CCA  
                                  __end_of_TMR1_ReadTimer 73B4  
                                          __end_of_memset 71EA  
                                ?_PrepareJoinRequestFrame 0001  
                                      ??_RADIO_WritePower 0068  
                                            _RADIO_SetCRC 775A  
                                   ??_ValidateChannelMask 0066  
                                        ??_ExecuteLinkAdr 0073  
                                   UpdateCfList@frequency 0075  
                                            _RADIO_RxDone 51F6  
                                            _RADIO_TxDone 3BE0  
LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew 006E  
                                     start_initialization 5B44  
                                          _ConfigureRadio 5F72  
                                      LORAWAN_RxDone@mhdr 03A2  
                                      LORAWAN_RxDone@temp 03A8  
                                            ??_RxDataDone 0068  
                                      _DIO4_ISR_Lora_Init 781A  
                                __end_ofi2_TMR1_ReadTimer 73D4  
                          __size_of_TMR_OverrideRemaining 007C  
                                     _RADIO_RegisterWrite 742E  
                                            AESCmac@mLast 0120  
                               ??_CreateAllSoftwareTimers 0065  
                                    RxDataDone@dataLength 0066  
                         __size_of_PIN_MANAGER_Initialize 0044  
                    __end_of_INT3_DefaultInterruptHandler 7828  
                   __size_of_INT3_DefaultInterruptHandler 0002  
                            _INT3_DefaultInterruptHandler 7826  
                           __end_of_TMR_OverrideRemaining 606A  
                             ?_IncludeMacCommandsResponse 0064  
                                   __end_of_INT1_CallBack 74E2  
                                            ??_ExtractMic 0072  
                    EncryptFRMPayload@bufferToBeEncrypted 00AF  
                                            AESCmac@input 00D0  
                        __end_of_LORAWAN_SetDeviceAddress 759E  
                                         ?_GenerateSubkey 00A4  
                            ?_RADIO_SetFrequencyHopPeriod 0064  
                                         LORAWAN_TxDone@i 00CF  
                                             ?_sendPacket 0001  
                                   LORAWAN_Init@RxPayload 00A4  
                     AssembleEncryptionBlock@frameCounter 006E  
                                 i2TMR_SwapTimer@timerVal 0007  
                                   __end_of_INT2_CallBack 74C4  
                                           ??_RADIO_Reset 0069  
                                __end_of_UpdateDLSettings 756C  
                              SwTimerStart@ticksRemaining 008F  
                                  RADIO_WriteMode@newMode 006E  
                                __end_of_ValidateRxOffset 763E  
                             ??_RADIO_SetChannelFrequency 0068  
                             ??_SetCallbackSoftwareTimers 0068  
                                     ?_DIO4_ISR_Lora_Init 0001  
                                     _RADIO_SetModulation 77AA  
                           ExecuteNewChannel@channelIndex 0077  
                          __end_of_SearchAvailableChannel 5042  
                                        ?_EnableChannels1 0068  
                                   __end_of_INT3_CallBack 74A6  
                                         i2_TMR_SwapTimer 6DC4  
                                 __size_of_StartReTxTimer 0134  
                                  ?_UpdateCurrentDataRate 0001  
                                  ?_UpdateChannelIdStatus 0064  
                                         ___llmod@divisor 0068  
                              MacExecuteCommands@fOptsLen 007C  
                                 _RADIO_FSKPacketSent$765 00D8  
                                 __end_of_SystemTimerInit 77C0  
                          UpdateChannelIdStatus@statusNew 0064  
                       __size_of_RADIO_UnhandledInterrupt 0022  
                                         ___llmod@counter 006C  
                                            _JoinedServer 0172  
                                     TMR_SwapTimer@oldVal 0040  
                               ?_RADIO_UnhandledInterrupt 0001  
                                __size_of_PIN_MANAGER_IOC 000C  
                                     TMR_SwapTimer@retVal 0042  
                                   _RADIO_FSKPayloadReady 5AA6  
                          __size_of_HALResetPinMakeOutput 0004  
                           __end_of_HALResetPinMakeOutput 780A  
                                                ??_Random 0079  
                                                AESCmac@i 0165  
                                                AESCmac@j 0164  
                                                AESCmac@n 0163  
                                                AESCmac@x 0150  
                                                AESCmac@y 0140  
                              SwTimerReadValue@ticksCount 008F  
                                    ?_RADIO_RegisterWrite 0066  
                          __end_of_InitDefault433Channels 6438  
                          __end_of_AutomaticReplyCallback 73F2  
                                     RADIO_Init@frequency 007F  
                                __size_of_TMR1_Initialize 0038  
                                    _macEndDevCmdReplyLen 7F94  
                                                ??___lmul 006C  
                                             ??_AESEncode 006D  
                       RADIO_WriteConfiguration@tempValue 0082  
                                   __size_of_LORAWAN_Init 005E  
                      __size_of_AckRetransmissionCallback 00FC  
                                   __size_of_LORAWAN_Join 008C  
                                   __size_of_LORAWAN_Send 00BE  
                                 __end_of_RADIO_RxTimeout 7212  
                                MacExecuteCommands@buffer 007A  
                                      __end_of_RxDataDone 7822  
                                ??_SetReceptionNotOkState 009E  
                                          ??_TMR_ISR_lora 0028  
                                         ??_DIO0_ISR_Lora 0001  
                                             __pdataBANK1 01BD  
                                       _ValidateDataRange 6F90  
                                      __end_of_ExtractMic 6C46  
                i2SwTimersInterrupt@ticksToNextTimerEvent 0023  
                  SwTimersInterrupt@ticksToNextTimerEvent 0086  
                                                ??_memcpy 006A  
                                  __size_of_SwTimerCreate 0070  
                                                ??_memset 006A  
                                    ??_DIO4_ISR_Lora_Init 0064  
                              __end_of_EXT_INT_Initialize 6B7E  
                                       _ValidateChannelId 73F2  
                                    ?_RADIO_SetModulation 0001  
                                _RADIO_SetSpreadingFactor 77A2  
                                      _RADIO_RxFSKTimeout 6F5A  
                                                ?_AESCmac 00CC  
                                  __size_of_TMR1_CallBack 001E  
                                         ??_DIO1_ISR_Lora 0001  
                                      ?_ValidateDataRange 0001  
                                ValidateRxOffset@rxOffset 0064  
                                            AESEncode@aux 008B  
                                            AESEncode@key 0075  
                                  TMR_GetDeltaTime@retVal 0030  
                                         ?_TMR1_ReadTimer 0064  
                                             ??_IOCB4_ISR 0001  
                                  __end_of_ConfigureRadio 5FEE  
                                          _LORAWAN_RxDone 0094  
                                      ?_ValidateChannelId 0064  
                                  TMR_GetDeltaTime@tmrVal 003E  
                                          _LORAWAN_TxDone 0B32  
                              __size_of_ExecuteNewChannel 01C2  
              LORAWAN_GetMaxPayloadSize@macCommandsLength 006D  
                                    __end_of_SwTimerStart 5CF2  
                  __end_of_LORAWAN_EnterContinuousReceive 636C  
                 __size_of_LORAWAN_EnterContinuousReceive 006A  
                          _LORAWAN_EnterContinuousReceive 6302  
                                             __pbssBIGRAM 04E0  
                                   TMR1_ISR@CountCallBack 003C  
                                         ??_DIO2_ISR_Lora 0001  
                               __size_of_CountfOptsLength 00B0  
                                       CountfOptsLength@i 006B  
                                             __pbssCOMRAM 0030  
                              __end_of_DefaultChannels433 7FD2  
                              __end_of_DefaultChannels868 7FFC  
                                        ??_RADIO_Transmit 0097  
                        __end_of_INT0_SetInterruptHandler 7820  
                                      LORAWAN_RxTimeout@i 00AD  
                        __end_of_INT3_SetInterruptHandler 7732  
                                           __pcstackBANK0 0060  
                                           __pcstackBANK1 0100  
                                           __pcstackBANK3 03A0  
                                     ??_ValidateDataRange 0066  
                                        _TMR_GetDeltaTime 4D8A  
                           EnableChannels@channelMaskCntl 0070  
                                 __end_of_RADIO_WriteMode 51F6  
                 __end_of_UnconfirmedTransmissionCallback 622E  
                __size_of_UnconfirmedTransmissionCallback 006C  
                         _UnconfirmedTransmissionCallback 61C2  
                                 SearchAvailableChannel@i 0084  
                                     ??_ValidateChannelId 0065  
                                   RADIO_RegisterRead@reg 0066  
                         __size_of_UpdateMinMaxChDataRate 00B4  
                           ?_INT3_DefaultInterruptHandler 0001  
                     LORAWAN_SetChannelIdStatus@statusNew 0068  
                                               _aesBuffer 01AB  
                                 INTERRUPT_GetDioStatus@a 0064  
                                       ?_SetJoinFailState 0001  
                                     SwTimerStart@timerId 0093  
                           ??_RADIO_SetFrequencyHopPeriod 0066  
                                    _RADIO_SetFSKSyncWord 70EC  
                             RADIO_SetBandwidth@bandwidth 0064  
                              __end_of_SwTimerSetCallback 708E  
       __end_of_ResetParametersForUnconfirmedTransmission 7696  
      __size_of_ResetParametersForUnconfirmedTransmission 000E  
              ?_ResetParametersForUnconfirmedTransmission 0001  
             ??_ResetParametersForUnconfirmedTransmission 0064  
               _ResetParametersForUnconfirmedTransmission 7688  
                               ??_AssembleEncryptionBlock 0075  
                                   _INT2_InterruptHandler 01EF  
                                               _bandwidth 7F8D  
                                      ??_SetJoinFailState 0064  
                                 ?_InitDefault868Channels 0001  
                                            _LORAWAN_Init 6682  
                                            _LORAWAN_Join 5BDE  
                                            _LORAWAN_Send 545C  
                                  RADIO_FSKPayloadReady@i 00EE  
                                       _ValidateFrequency 66E0  
                                               __pnvBANK1 01ED  
                                  ??_HALResetPinMakeInput 0064  
                                    _RADIO_WriteFrequency 5042  
                                         FillSubKey@carry 006A  
                                        _HALSPICSDeassert 77FE  
                          ??_LORAWAN_SetNetworkSessionKey 0070  
                                     __end_of_RADIO_Reset 6FF8  
                                   ??_RADIO_RegisterWrite 0067  
                                  _PIN_MANAGER_Initialize 6B7E  
                                           FillSubKey@key 0066  
                                      ?_ValidateFrequency 0064  
                                    __end_of_UpdateCfList 33A8  
                     RADIO_WriteFSKFrequencyDeviation@num 0075  
                               EnableChannels@channelMask 006E  
                                               _macBuffer 04E0  
                                               _dioStatus 0048  
                               __end_of_ValidateDataRange 6FC4  
                           RADIO_FSKPayloadReady@irqFlags 00ED  
                                       _SwTimersInterrupt 4BAA  
                                       ??_SwTimersExecute 00E8  
                                               __pintcode 0008  
                                                ?___abdiv 0064  
                        __end_of_TMR1_SetInterruptHandler 771E  
                                           __pmediumconst 7E6C  
                                 RADIO_Transmit@bufferLen 0096  
                                               __ptext100 6C04  
                                               __ptext101 5DFA  
                                               __ptext110 6302  
                                               __ptext102 5EF6  
                               __end_of_ValidateChannelId 7410  
                                               __ptext111 7820  
                                               __ptext103 60E0  
                                               __ptext200 7536  
                                               __ptext120 756C  
                                               __ptext112 7688  
                                               __ptext104 6624  
                                               __ptext201 4C9C  
                                               __ptext121 65C4  
                                               __ptext113 7696  
                                               __ptext105 3A4E  
                                               __ptext210 7826  
                                               __ptext202 4E76  
                                               __ptext130 7764  
                                               __ptext122 4F62  
                                               __ptext114 77D8  
                                               __ptext106 0B32  
                                               __ptext211 77EA  
                                               __ptext203 73B4  
                                               __ptext131 70EC  
                                               __ptext123 6C46  
                                               __ptext115 7410  
                                               __ptext107 6D0A  
                                               __ptext212 74A6  
                                               __ptext204 7708  
                                               __ptext140 7312  
                                               __ptext132 5D78  
                                               __ptext124 779A  
                                               __ptext116 2C02  
                                               __ptext108 7374  
                                               __ptext213 7812  
                                               __ptext205 746A  
                                               __ptext141 692E  
                                               __ptext133 77B2  
                                               __ptext125 7750  
                                               __ptext117 723A  
                                               __ptext109 77D2  
                                               __ptext214 7828  
                                               __ptext206 780E  
                                               __ptext150 3D6A  
                                               __ptext142 5CF2  
                                               __ptext134 2FF2  
                                               __ptext126 775A  
                                               __ptext118 76A4  
                                               __ptext215 77F0  
                                               __ptext207 7824  
                                               __ptext151 29C6  
                                               __ptext143 6D48  
                                               __ptext135 13B2  
                                               __ptext127 5F72  
                                               __ptext119 5BDE  
                                               __ptext216 74C4  
                                               __ptext208 77E4  
                                               __ptext160 38B8  
                                               __ptext152 6682  
                                               __ptext144 683C  
                                               __ptext136 52C6  
                                               __ptext128 77A2  
                                               __ptext217 7816  
                                               __ptext209 7488  
                                               __ptext161 705C  
                                               __ptext153 76B2  
                                               __ptext145 182A  
                                               __ptext137 649C  
                                               __ptext129 77AA  
                                               __ptext218 782A  
                                               __ptext170 77FE  
                                               __ptext162 511E  
                                               __ptext154 55D6  
                                               __ptext146 48B6  
                                               __ptext138 6500  
                                               __ptext219 0000  
                                               __ptext171 7802  
                                               __ptext163 7260  
                                               __ptext155 5E78  
                                               __ptext147 6A60  
                                               __ptext139 4684  
                                               __ptext180 5C6A  
                                               __ptext172 6FC4  
                                               __ptext164 77DE  
                                               __ptext156 3ECC  
                                               __ptext148 7212  
                                               __ptext181 5FEE  
                                               __ptext173 7196  
                                               __ptext165 5042  
                                               __ptext157 568C  
                                               __ptext149 2136  
                                               __ptext190 71C0  
                                               __ptext182 6D86  
                                               __ptext174 7652  
                                               __ptext166 6562  
                                               __ptext158 697C  
                                               __ptext191 6794  
                                               __ptext183 751A  
                                               __ptext175 7806  
                                               __ptext167 742E  
                                               __ptext159 776E  
                                               __ptext192 688E  
                                               __ptext184 4BAA  
                                               __ptext176 780A  
                                               __ptext168 7778  
                                               __ptext193 6152  
                                               __ptext185 4D8A  
                                               __ptext177 371C  
                                               __ptext169 7678  
                                               __ptext186 7394  
                                               __ptext178 606A  
                                               __ptext195 72AA  
                                               __ptext187 6C88  
                                               __ptext179 74FE  
                                               __ptext196 744C  
                                               __ptext188 636C  
                                               __ptext197 7822  
                                               __ptext189 63D2  
                                               __ptext198 69CA  
                                               __ptext199 6DC4  
                                       _EncryptFRMPayload 4182  
                                                ?___lldiv 0064  
                            RADIO_FSKPacketSent@timeOnAir 00D4  
                           __size_of_UpdateJoinInProgress 001A  
                                                ?___llmod 0064  
                           __size_of_ExecuteRxTimingSetup 0024  
                                         ??_AESEncodeLoRa 0094  
                SelectChannelForTransmission@channelIndex 0087  
                         __end_of_PrepareJoinRequestFrame 47B0  
                                                ?___lwmod 0072  
                                      ?_SwTimersInterrupt 007A  
                               _RADIO_SetChannelFrequency 5D78  
                             __size_of_DIO3_ISR_Lora_Init 0002  
                   IncludeMacCommandsResponse@bufferIndex 006F  
                               _SetCallbackSoftwareTimers 55D6  
                                      ConfigureRadio@freq 0071  
                                   ??_RADIO_SetModulation 0064  
                                        ?_RADIO_GetStatus 0001  
                                     __size_of_sendPacket 0020  
                                  __end_of_LORAWAN_RxDone 0B32  
                                     ??_ValidateFrequency 0068  
                                  __end_of_LORAWAN_TxDone 13B2  
                                      ?_EncryptFRMPayload 00A4  
                            ??_INTERRUPT_InterruptManager 0028  
                            __end_of_LORAWAN_PlatformInit 7374  
                          __size_of_RADIO_SetLoRaSyncWord 000A  
                                    GenerateSubkey@F18817 01BD  
                                        _ExecuteDevStatus 7746  
                           __end_of_RADIO_SetLoRaSyncWord 7778  
                  IncludeMacCommandsResponse@pBufferIndex 0066  
                              __size_of_SwTimerSetTimeout 0042  
                             ??_LORAWAN_GetMaxPayloadSize 006C  
                          LORAWAN_LinkCheckConfigure@iCtr 00A2  
                        ExecuteRxParamSetupReq@dlSettings 0076  
                                          _AssemblePacket 1B46  
                                         ?_ConfigureRadio 0071  
                               AssemblePacket@bufferIndex 00E0  
                              ??_INT2_SetInterruptHandler 0066  
                              __end_ofi2_TMR_GetDeltaTime 4F62  
                                __size_of_TMR1_StartTimer 0004  
                                     ??_SwTimersInterrupt 007E  
                                    RADIO_DIO0@dioMapping 00F1  
                                       _DutyCycleCallback 2428  
                                 InitDefault433Channels@i 006E  
                                   __end_of_TMR_SwapTimer 6DC4  
                                            ?_SwTimerStop 0001  
                                     ??_EncryptFRMPayload 00B2  
                                 __end_ofi2_TMR_SwapTimer 6E02  
                                 __size_of_EncKeySchedule 023C  
                                      AssemblePacket@mhdr 00DD  
                                      AssemblePacket@port 0166  
                                          __size_of_flash 0046  
                               __size_of_RADIO_ReadRandom 007E  
                                ConfigureRadioRx@dataRate 007A  
                                      _RADIO_ReceiveStart 2C02  
                                          __size_of_srand 000E  
                                __end_of_LORAWAN_Mainloop 6E3E  
                                   ?_RADIO_SetFSKSyncWord 006E  
                                    _INTERRUPT_Initialize 77FA  
                                           _SwTimerCreate 6152  
                          __end_of_InitDefault868Channels 63D2  
                     IncludeMacCommandsResponse@macBuffer 0064  
                                ?_RADIO_FHSSChangeChannel 0001  
                           ValidateFrequency@frequencyNew 0064  
                                           _TMR1_CallBack 744C  
                               __end_of_ValidateFrequency 673C  
                                        _SwTimerIsRunning 7374  
                                        _ExecuteLinkCheck 702A  
                                    i2SwTimersInterrupt@i 0027  
                                                _INT1_ISR 77F0  
                                _LORAWAN_SetDeviceAddress 7586  
                                                _INT2_ISR 77EA  
                                       EncKeySchedule@key 0064  
                                                _INT3_ISR 77E4  
                                                _IOCBbits 000F5A  
                                      _RADIO_SetBandwidth 77B2  
                                                _LATCbits 000F8B  
                                  ?_RADIO_FSKPayloadReady 0001  
                       __size_of_INT1_SetInterruptHandler 000A  
                                    __end_of_rxWindowSize 7F8D  
                                   ?_RADIO_WriteFrequency 0071  
                               ?_INT1_SetInterruptHandler 0064  
                                        ?_SystemTimerInit 0001  
                                               _reloadVal 0044  
                                     ?_RADIO_ReceiveStart 0094  
                                        _SwTimerReadValue 6D0A  
                                                _PIE1bits 000F9D  
                                        _ExecuteDutyCycle 68E0  
                                         _HALDIO5PinValue 77DE  
                                    RADIO_DIO1@dioMapping 00AF  
                               __end_of_SwTimersInterrupt 4C9C  
                                __size_of_TMR1_WriteTimer 001C  
                                      AESEncode@masterKey 006C  
                     __size_of_INTERRUPT_InterruptManager 0084  
                              __end_of_DIO2_ISR_Lora_Init 76F0  
                                                _PIR1bits 000F9E  
                                        GenerateSubkey@k1 00A6  
                                        GenerateSubkey@k2 00A8  
                                    ConfigureRadioRx@freq 0076  
                               __end_of_EncryptFRMPayload 42D6  
                          __size_of_RADIO_WriteFSKBitRate 0062  
                                UpdateReceiveDelays@delay 0068  
                               LORAWAN_RxDone@bufferIndex 03A7  
                               __size_of_SPI_Exchange8bit 0010  
                                  __size_of_UpdateTxPower 0008  
                           __end_of_RADIO_WriteFSKBitRate 6562  
                                    ConfigureRadioTx@freq 0076  
                                         RxDataDone@pData 0064  
                             UpdateDataRange@dataRangeNew 0064  
                                                _RCONbits 000FD0  
                                     ?_RADIO_SetBandwidth 0001  
                      SearchAvailableChannel@channelIndex 007A  
                                               _rxPayload 016E  
                                  _UpdateMinMaxChDataRate 568C  
                           EncryptFRMPayload@bufferLength 00A6  
                                 ValidateDataRange@result 0066  
                             UpdateDutyCycle@dutyCycleNew 0064  
              ValidateChannelId@allowedForDefaultChannels 0064  
                           __size_of_FindSmallestDataRate 00A6  
                                                _TMR1_ISR 72AA  
                                ConfigureRadioTx@dataRate 007A  
                    __size_of_RADIO_SetFrequencyHopPeriod 000A  
                                   ValidateTxPower@result 0064  
                                        ?_RADIO_RxTimeout 0001  
                     __size_of_IncludeMacCommandsResponse 02F2  
                            ??_LORAWAN_LinkCheckConfigure 0096  
                                       ??_PIN_MANAGER_IOC 0001  
                             __size_of_RADIO_GetPacketSnr 0006  
                                     _UpdateReceiveDelays 6A16  
                         __size_of_SetReceptionNotOkState 006A  
                                  __end_of_AssemblePacket 1E44  
                                         ?_LORAWAN_RxDone 016B  
                                         ?_LORAWAN_TxDone 009E  
                                       ??_TMR1_Initialize 0066  
                                        ___abdiv@dividend 0068  
                                      _DIO1_ISR_Lora_Init 76F0  
                               __end_of_DutyCycleCallback 2710  
                                        __size_of_AESCmac 031C  
                                    ??_RADIO_ReceiveStart 0096  
                                 ValidateFrequency@result 0068  
                              __end_of_PrepareSessionKeys 5F72  
                                       ?_ConfigureRadioRx 0076  
                                       ?_ConfigureRadioTx 0076  
                                    RADIO_DIO2@dioMapping 007E  
                                      AESEncodeLoRa@block 0090  
                                                _Channels 0400  
                             __end_of_RADIO_FSKPacketSent 3BE0  
                 RADIO_SetSpreadingFactor@spreadingFactor 0064  
                                      ??_ConfigureRadioRx 007A  
                                      ??_ConfigureRadioTx 007A  
                                    ??_RADIO_SetBandwidth 0064  
                                     ?_DIO1_ISR_Lora_Init 0001  
                           RADIO_SetIQInverted@iqInverted 0064  
                                        ?_RADIO_WriteMode 0069  
                               LORAWAN_RxDone@computedMic 03AB  
                                       ___lmul@multiplier 0064  
                                             _INTCON2bits 000FF1  
                                             _INTCON3bits 000FF0  
                                          ?_SwTimerCreate 0001  
                                               copy_data0 5B58  
                                               copy_data1 5B78  
                                   ?_INTERRUPT_Initialize 0001  
                                 ?_INTERRUPT_GetDioStatus 0001  
                                    ?_UpdateReceiveDelays 0001  
                                     _EncKeySchedule$3584 0068  
                                _INT0_SetInterruptHandler 781E  
                             __end_of_RADIO_SetIQInverted 775A  
                                          ?_TMR1_CallBack 0001  
                                _INT3_SetInterruptHandler 7728  
                                    __end_of_TMR_ISR_lora 6A16  
                                             _RADIO_Reset 6FC4  
                                     ExecuteLinkCheck@ptr 0064  
                          i2SwTimersInterrupt@timeElapsed 001F  
                                      _RADIO_RegisterRead 7260  
                                __size_of_ValidateTxPower 0022  
                                 ??_StopAllSoftwareTimers 0065  
                                          _StartReTxTimer 441E  
                             __end_ofi2_SwTimersInterrupt 4D8A  
                               _LORAWAN_GetMaxPayloadSize 6CCA  
                              LORAWAN_RxDone@extractedMic 03A3  
                                             AESCmac@flag 0162  
                           EncryptFRMPayload@frameCounter 00A8  
                                      CheckMcastFlags@hdr 0064  
                                             AESCmac@size 00D2  
                                SwTimerSetTimeout@timerId 0079  
                                SwTimerSetTimeout@timeout 0071  
                                   RADIO_WriteMode@opMode 006F  
                          ??_INT3_DefaultInterruptHandler 0001  
                                ??_ExecuteRxParamSetupReq 0072  
                     __size_of_LORAWAN_LinkCheckConfigure 019C  
                                        ___abdiv@quotient 0067  
                 UpdateReceiveWindow2Parameters@frequency 0064  
                                                __Hrparam 0000  
                                     ?_RADIO_RegisterRead 0001  
                            __end_of_SystemBlockingWaitMs 71C0  
                  ValidateChannelMaskCntl@channelMaskCntl 0065  
                                       i2_TMR1_WriteTimer 7536  
                                                __Lrparam 0000  
                                        ??_EncodeShiftRow 0066  
                                    ??_DIO1_ISR_Lora_Init 0066  
                                __size_of_CheckMcastFlags 0072  
                                      __CFG_BOREN$SBORDIS 000000  
                                   TMR1_ReadTimer@readVal 0068  
                              __size_of_ValidateDataRange 0034  
                               _ticksToScheduledInterrupt 005A  
                            ValidateDataRange@dataRateMax 0068  
                            ValidateDataRange@dataRateMin 0069  
                              __size_of_ValidateChannelId 001E  
                                 __size_of_SPI_Initialize 000C  
                                      ?i2_TMR1_WriteTimer 0001  
                                        __size_of___abdiv 0052  
                                 ??_OSCILLATOR_Initialize 0064  
                                       ?_ValidateDataRate 0001  
                                      _ComputeSessionKeys 5DFA  
                                   __size_of_SwTimerStart 0088  
                                        __size_of___lldiv 0076  
                                        __size_of___llmod 0062  
                                        __size_of___lwmod 003E  
                                         ?_AssemblePacket 0166  
                                    AssemblePacket@buffer 0167  
                                        SwTimersExecute@i 00EC  
                                      ??_ValidateDataRate 0064  
                                   _INT3_InterruptHandler 01F1  
                                _TMR1_SetInterruptHandler 7714  
                                  _IOCB4_InterruptHandler 01F3  
                                             _radioBuffer 05EF  
                                     ??i2_TMR1_WriteTimer 0003  
         __end_of_ResetParametersForConfirmedTransmission 76A4  
        __size_of_ResetParametersForConfirmedTransmission 000E  
                ?_ResetParametersForConfirmedTransmission 0001  
               ??_ResetParametersForConfirmedTransmission 0064  
                 _ResetParametersForConfirmedTransmission 7696  
                                   _TMR1_InterruptHandler 01F5  
                                        ??_GenerateSubkey 00AA  
                                        _CountfOptsLength 58A2  
                                              _HALSPISend 7778  
                                     ?_ComputeSessionKeys 00A4  
                                          _rxWindowOffset 7F7D  
                      RADIO_UnhandledInterrupt@modulation 0068  
                              __end_of_MacExecuteCommands 2FF2  
                                    ??_RADIO_RegisterRead 0066  
                        __end_of_RADIO_UnhandledInterrupt 72F0  
                                           _UpdateTxPower 778A  
                                    RADIO_Transmit@buffer 0094  
                         __end_of_RADIO_FHSSChangeChannel 70EC  
                                         _allocatedTimers 0173  
                          ?_IOCB4_DefaultInterruptHandler 0001  
                          __end_of_INTERRUPT_GetDioStatus 76B2  
                                       ?i2_TMR1_ReadTimer 0001  
                                      _DIO5_ISR_Lora_Init 77C0  
                                                __ptext10 76D8  
                                                __ptext11 7714  
                                                __ptext20 77FA  
                                                __ptext12 77BA  
                                                __ptext21 6B38  
                                                __ptext13 77C0  
                                                __ptext30 57F2  
                                                __ptext22 7728  
                                                __ptext14 781A  
                                                __ptext31 2428  
                                                __ptext23 7732  
                                                __ptext15 781C  
                                                __ptext40 61C2  
                                                __ptext32 4552  
                                                __ptext24 773C  
                                                __ptext16 76E4  
                                                __ptext41 7666  
                                                __ptext33 73D4  
                                                __ptext25 781E  
                                                __ptext17 771E  
                                                __ptext50 72CE  
                                                __ptext42 759E  
                                                __ptext34 49B8  
                                                __ptext26 7118  
                                                __ptext18 76F0  
                                                __ptext51 3BE0  
                                                __ptext43 75B6  
                                                __ptext35 402A  
                                                __ptext27 7586  
                                                __ptext19 76FC  
                                                __ptext60 441E  
                                                __ptext52 51F6  
                                                __ptext44 75CE  
                                                __ptext36 5952  
                                                __ptext28 7142  
                                                __ptext61 6298  
                                                __ptext53 67EA  
                                                __ptext45 6AAA  
                                                __ptext37 5394  
                                                __ptext29 6E02  
                                                __ptext70 33A8  
                                                __ptext62 716C  
                                                __ptext54 5AA6  
                                                __ptext46 6E3E  
                                                __ptext38 6BC2  
                                        ?i2_TMR_SwapTimer 0007  
                                                __ptext71 66E0  
                                                __ptext63 77C6  
                                                __ptext55 2710  
                                                __ptext47 71EA  
                                                __ptext39 6F5A  
                                                __ptext80 72F0  
                                                __ptext72 6F90  
                                                __ptext64 2E02  
                                                __ptext56 0094  
                                                __ptext48 70BE  
                                                __ptext81 763E  
                                                __ptext73 6E78  
                                                __ptext65 7286  
                                                __ptext57 622E  
                                                __ptext49 6438  
                                                __ptext90 7746  
                                                __ptext82 75E6  
                                                __ptext74 6FF8  
                                                __ptext66 6A16  
                                                __ptext58 7552  
                                                __ptext91 545C  
                                                __ptext83 6F22  
                                                __ptext75 4AB4  
                                                __ptext67 42D6  
                                                __ptext59 31E0  
                                                __ptext92 6CCA  
                                                __ptext84 778A  
                                                __ptext76 6EEA  
                                                __ptext68 762A  
                                                __ptext93 1B46  
                                                __ptext85 7792  
                                                __ptext77 73F2  
                                                __ptext69 75FE  
                                                __ptext94 1E44  
                                                __ptext86 7614  
                                                __ptext78 702A  
                                                __ptext95 77CC  
                                                __ptext87 673C  
                                                __ptext79 356A  
                                                __ptext96 5A00  
                                                __ptext88 47B0  
                                                __ptext97 4182  
                                                __ptext89 68E0  
                                                __ptext98 5740  
                                                __ptext99 58A2  
                                 ExecuteRxTimingSetup@ptr 0069  
                                  ??_RADIO_SetFSKSyncWord 0070  
                                   ??_UpdateReceiveDelays 0064  
                                   __end_of_LORAWAN_Reset 402A  
                                            ??_sendPacket 00E8  
                                  __end_of_StartReTxTimer 4552  
                                 ??_UpdateCurrentDataRate 0064  
                                 ??_UpdateChannelIdStatus 0065  
                                __size_of_UpdateDataRange 00F6  
                                  _SetReceptionNotOkState 6298  
                                       ??_TMR1_StartTimer 0064  
                                      ??i2_TMR1_ReadTimer 0003  
                               __size_of_RADIO_WritePower 00CE  
                                 __end_of_HALDIO5PinValue 77E4  
                                       ?_UpdateDLSettings 0064  
                                  ConfigureRadio@dataRate 0075  
                                       ?_ValidateRxOffset 0001  
                              __size_of_ValidateFrequency 005C  
                        __size_of_PrepareJoinRequestFrame 012C  
                                           CheckFlags@hdr 0064  
                                  ??_RADIO_WriteFrequency 0075  
                                   __size_of_UpdateCfList 01C8  
                                     ?_DIO5_ISR_Lora_Init 0001  
                           __size_of_RADIO_SetOutputPower 0008  
                                           __size_of_main 00BC  
                                           __size_of_rand 004E  
                                       _RADIO_ReceiveStop 7410  
                                      ??_UpdateDLSettings 0065  
                                    _LORAWAN_PlatformInit 7354  
                                         _FskSyncWordBuff 7FFC  
                                      ??_ValidateRxOffset 0064  
                               __end_ofi2_TMR1_WriteTimer 7552  
               IncludeMacCommandsResponse@bIncludeInFopts 0067  
                                    ??_ComputeSessionKeys 00A6  
                                           _timerOverflow 0049  
                                            _SwTimerStart 5C6A  
                              __size_of_SwTimersInterrupt 00F2  
                                      ?_RADIO_ReceiveStop 0001  
                              ??_RADIO_SetSpreadingFactor 0064  
                                   RADIO_TxDone@timeOnAir 00D4  
                          ValidateChannelMask@channelMask 0064  
                             __size_of_DIO0_ISR_Lora_Init 000C  
                              __size_of_EncryptFRMPayload 0154  
                                         GenerateSubkey@i 00CB  
                                         GenerateSubkey@l 00BB  
                                 PrepareSessionKeys@index 0074  
                                __end_of_TMR_GetDeltaTime 4E76  
                                      SwTimerStop@timerId 0064  
                                                _swTimers 0300  
                                        ??_TMR1_ReadTimer 0066  
        LORAWAN_SetNetworkSessionKey@networkSessionKeyNew 006E  
                                    RADIO_RxDone@irqFlags 00ED  
                             __end_of_ValidateChannelMask 6F5A  
                                           UpdateCfList@i 007A  
                      __end_of_INTERRUPT_InterruptManager 008C  
                              _INTERRUPT_InterruptManager 0008  
                                     ??_RADIO_ReceiveStop 0070  
                             PrepareSessionKeys@networkId 0072  
                                       _RADIO_ReleaseData 77D8  
                                                main@flag 00F4  
                                       ??_TMR1_WriteTimer 0066  
                                      __end_of_sendPacket 7354  
                                     __CFG_INTOSCSEL$HIGH 000000  
                                              _RADIO_DIO0 6438  
                                              _RADIO_DIO1 6E3E  
                                              _RADIO_DIO2 6AAA  
                                              _RADIO_DIO3 75CE  
                                              _RADIO_DIO4 75B6  
                                              _RADIO_DIO5 759E  
                                    ??_DIO5_ISR_Lora_Init 0066  
                    __end_of_INT1_DefaultInterruptHandler 782C  
                   __size_of_INT1_DefaultInterruptHandler 0002  
                            _INT1_DefaultInterruptHandler 782A  
                       __size_of_RADIO_WriteConfiguration 0478  
                                  __end_of_rxWindowOffset 7F85  
                              __size_of_DutyCycleCallback 02E8  
                                 EncryptFRMPayload@buffer 00A4  
                                      ?_RADIO_ReleaseData 0001  
                               ?_RADIO_WriteConfiguration 007D  
                                      __end_of_modulation 7F7D  
                                              _RADIO_Init 38B8  
                         ExecuteRxParamSetupReq@frequency 0072  
                                __size_of_UpdateFrequency 003A  
                                ?_ValidateChannelMaskCntl 0001  
                                           __roundCounter 0047  
                                              _INTCONbits 000FF2  
                                 ConfigureRadioTx@txPower 007B  
                                __end_of_HALSPICSDeassert 7802  
                                __size_of_UpdateDutyCycle 0032  
                                          ?_UpdateTxPower 0001  
                                                memcpy@d1 0064  
                                                memcpy@s1 0066  
                                          _EncKeySchedule 29C6  
                      __size_of_SetCallbackSoftwareTimers 00B6  
                                 __size_of_RxJoinResponse 0006  
                                         ??_SwTimerCreate 0064  
                                     ExecuteDutyCycle@ptr 0064  
                                            _UpdateCfList 31E0  
                                     ??_RADIO_ReleaseData 0064  
                                  ??_INTERRUPT_Initialize 0064  
                                                memset@p1 0064  
                                         ??_TMR1_CallBack 0028  
                                    __size_of_SwTimerStop 001C  
                                        _RADIO_ReadRandom 5E78  
                                      _EXT_INT_Initialize 6B38  
                                         ?_StartReTxTimer 0001  
                                   _TMR_OverrideRemaining 5FEE  
                                                intlevel2 0000  
                          RADIO_ReceiveStart@rxWindowSize 0094  
                               __end_of_RADIO_ReceiveStop 742E  
                                         _SwTimersExecute 57F2  
                     SwTimerSetCallback@callbackParameter 0066  
                                             FillSubKey@i 006B  
                                       __CFG_T0CKMX$PORTB 000000  
                           RADIO_WriteFrequency@frequency 0071  
                                        ___lwmod@dividend 0072  
                                   ?_LORAWAN_PlatformInit 0001  
                                        ___lldiv@dividend 0064  
                                __end_of_ExecuteDevStatus 7750  
                                 ?_PIN_MANAGER_Initialize 0001  
                                      _DefaultChannels433 7FA8  
                                      _DefaultChannels868 7FD2  
                                     ?_EXT_INT_Initialize 0001  
                                            ___abdiv@sign 0066  
                                UpdateDutyCycle@channelId 0066  
                                  GenerateSubkey@const_Rb 00AB  
                         __size_of_ExecuteRxParamSetupReq 0148  
                               UpdateJoinInProgress@state 0064  
                                       ??_ValidateTxPower 0064  
                                        _SPI_Exchange8bit 7678  
                                     _LORAWAN_TxDone$1845 00BA  
                                     _LORAWAN_TxDone$1846 00BE  
                      __end_of_LORAWAN_LinkCheckConfigure 38B8  
                               __end_of_RADIO_ReleaseData 77DE  
                              _LORAWAN_LinkCheckConfigure 371C  
                                __size_of_EnableChannels1 0058  
                                      __end_of_txPower868 7FA8  
                                   _HALResetPinMakeOutput 7806  
                                ??_HALResetPinOutputValue 0064  
                                  __size_of_INT1_CallBack 001E  
                               RADIO_WriteConfiguration@i 0081  
                               ExecuteRxTimingSetup@delay 006B  
                                        AESEncodeLoRa@key 0092  
                               __size_of_SetJoinFailState 002A  
                        LORAWAN_LinkCheckConfigure@period 0094  
                                      __CFG_WDTPS$1048576 000000  
                                        ??_ConfigureRadio 0075  
                                      _SwTimerSetCallback 705C  
             __end_of_UpdateRetransmissionAckTimeoutState 6298  
            __size_of_UpdateRetransmissionAckTimeoutState 006A  
                    ?_UpdateRetransmissionAckTimeoutState 0001  
                   ??_UpdateRetransmissionAckTimeoutState 0094  
                     _UpdateRetransmissionAckTimeoutState 622E  
                                       RADIO_ReadRandom@i 0074  
                            SearchAvailableChannel@result 0081  
                                   RADIO_WritePower@paDac 0069  
                                  __size_of_INT2_CallBack 001E  
                             __size_of_DIO4_ISR_Lora_Init 0002  
                                          _AESEncode$3600 0089  
                                          _AESEncode$3598 0085  
                                          _AESEncode$3599 0087  
                                   __end_of_DIO0_ISR_Lora 781A  
                                __end_of_SwTimerIsRunning 7394  
                                       ??_CheckMcastFlags 0066  
                                __end_of_ExecuteLinkCheck 705C  
                                   RADIO_WritePower@power 006A  
                                        _RADIO_TxDone$761 00D8  
                                ?_CreateAllSoftwareTimers 0001  
                        RADIO_WriteMode@currentModulation 006B  
                                    ??_EXT_INT_Initialize 0066  
                            RADIO_SetFSKSyncWord@syncWord 006E  
                                  __size_of_INT3_CallBack 001E  
                                            _rxWindowSize 7F85  
                                  __end_of_EncKeySchedule 2C02  
                           ?_INT1_DefaultInterruptHandler 0001  
                                   __end_of_DIO1_ISR_Lora 7816  
                                     ?_SwTimerSetCallback 0064  
                                __end_of_SwTimerReadValue 6D48  
                                        ___lldiv@quotient 006C  
                                             ?_HALSPISend 0001  
                                __end_of_ExecuteDutyCycle 692E  
                                         ___lwmod@divisor 0074  
                  __end_of_UpdateReceiveWindow2Parameters 7614  
                 __size_of_UpdateReceiveWindow2Parameters 0016  
                          _UpdateReceiveWindow2Parameters 75FE  
                                 UpdateTxPower@txPowerNew 0064  
                                         ___lwmod@counter 0076  
                         _LORAWAN_LinkCheckConfigure$2993 009E  
                        __end_of_INT1_SetInterruptHandler 7746  
                            FindSmallestDataRate@dataRate 0067  
                           LORAWAN_Join@activationTypeNew 00EE  
                                   __size_of_TMR_ISR_lora 004C  
                              ??_LORAWAN_SetDeviceAddress 0068  
                                       __CFG_T3CKMX$PORTG 000000  
                                   __end_of_DIO2_ISR_Lora 7812  
                                    _SystemBlockingWaitMs 7196  
                                             _SSPCON1bits 000FC6  
                                   FindSmallestDataRate@i 0066  
                      ComputeSessionKeys@joinAcceptBuffer 00A4  
                                 __size_of_EnableChannels 0016  
                            __end_of_UpdateJoinInProgress 7586  
                            __end_of_ExecuteRxTimingSetup 72AA  
                                 __size_of_HALSPICSAssert 0004  
                                 __end_of_FskSyncWordBuff 7FFF  
                __end_of_RADIO_WriteFSKFrequencyDeviation 6500  
               __size_of_RADIO_WriteFSKFrequencyDeviation 0064  
                      ??_RADIO_WriteFSKFrequencyDeviation 0075  
                       ?_RADIO_WriteFSKFrequencyDeviation 0071  
                        _RADIO_WriteFSKFrequencyDeviation 649C  
                __end_of_LORAWAN_SetApplicationSessionKey 716C  
               __size_of_LORAWAN_SetApplicationSessionKey 002A  
                      ??_LORAWAN_SetApplicationSessionKey 0070  
                       ?_LORAWAN_SetApplicationSessionKey 006E  
                        _LORAWAN_SetApplicationSessionKey 7142  
                                        ExtractMic@buffer 006E  
                                 ??_RADIO_FSKPayloadReady 00ED  
                                UpdateDataRange@channelId 0066  
                                _RADIO_UnhandledInterrupt 72CE  
                                        ?_HALDIO5PinValue 0001  
                          __end_of_PIN_MANAGER_Initialize 6BC2  
                                       ?_LORAWAN_Mainloop 0001  
                             __end_of_RADIO_RegisterWrite 744C  
                                 __size_of_ExecuteLinkAdr 01B2  
                            RADIO_WriteFSKBitRate@bitRate 0071  
                                     __CFG_BORPWR$ZPBORMV 000000  
                                      i2_TMR_GetDeltaTime 4E76  
                                         RADIO_SetCRC@crc 0064  
                                         _PIN_MANAGER_IOC 7708  
                                     RADIO_WritePower@ocp 0068  
                                      ??_LORAWAN_Mainloop 00F3  
                              __size_ofi2_TMR1_WriteTimer 001C  
                                    ??_SwTimerSetCallback 0067  
                                       ??_UpdateDataRange 0065  
                                 ?_UpdateMinMaxChDataRate 0001  
                                         _TMR1_Initialize 6EB2  
                        RADIO_WriteConfiguration@regValue 0086  
                                 i2TMR1_ReadTimer@readVal 0005  
                                      _RadioConfiguration 0175  
                                           ExtractMic@mic 0074  
                                       _LORAWAN_RxTimeout 2710  
                             __end_of_RADIO_SetModulation 77B2  
                           __size_of_HALResetPinMakeInput 0004  
                             __size_of_RADIO_RxFSKTimeout 0036  
                                        ??_LORAWAN_RxDone 00E8  
                                     ?i2_TMR_GetDeltaTime 0007  
